---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/3 13:59
---

local UILordLandView = BaseClass("UILordLandView", UIBaseView);
local base = UIBaseView;
local this = UILordLandView

local pfbName = "LordLandItem"

local function GoodInfoBtnClick(self,rewardInfo)
    local icon = self.GoodInfo.transform:Find("Icon/Value"):GetComponent("Image")
    self.infoname.text = rewardInfo.name
    self.infotext.text = rewardInfo.desc
    UIPublic.InitItemIcon(icon, nil, rewardInfo.kind, rewardInfo.id, {spriteName = rewardInfo.spriteName})

    self.GoodInfo:SetActive(true)
    self.GoodInfoEvent:SetActive(true)
end

local function ItemSelect(self, transform, data)
    local starRoot = self.rc:GetObject("Content").transform
    for i = 0,starRoot.childCount - 1 do
        starRoot:GetChild(i).transform:Find("Select").gameObject:SetActive(false)
    end
    local select = transform:Find("Select").gameObject
    select:SetActive(true)
    LangUtil.GetSpriteLang(112 + data.DiffLv * 2 - 1,function(sprite)
        self.diffSprite.sprite = sprite
    end)
end

local function GetCurrLayer()
    local storyComponent = Game.Scene.Player:GetComponent("StoryComponent")
    local completedLayerServer = storyComponent.CompletedLordLandLayer
    local completedLayerClient = ClientData:GetInstance().CompletedLordLandLayer
    return completedLayerServer ~= 0 and completedLayerServer + 1 or completedLayerClient
end

local function InitScetionItem(self, transform, data)
    local currLayer = GetCurrLayer()
    local levelTxt =  LangUtil.BindText(transform:Find("Level"))
    local apTxt =  LangUtil.BindText(transform:Find("Ap"))
    local button = transform:Find("Button").gameObject
    local buttonTxt = button.transform:Find("Text").gameObject
    local lockImage =  transform:Find("LockImage").gameObject
    local lockImageTxt = lockImage.transform:Find("Text").gameObject
    lockImage:SetActive(data.Id > currLayer)
    lockImageTxt:SetActive(data.Id > currLayer)
    if data.Id == currLayer then
        ItemSelect(self, transform, data);
    else
        local select = transform:Find("Select").gameObject
        select:SetActive(false)
    end
    for i = 1, 5 do
        local iconGo = transform:Find(string.format("Icon_%s",i)).gameObject
        iconGo:SetActive(false)
    end
    if data.Id ~= currLayer then
        if data.Id > currLayer then     --未开启
            LangUtil.BindText(buttonTxt).text = LangUtil.GetSysLang(494)
            LangUtil.BindText(lockImageTxt).text = LangUtil.GetSysLang(495)
            button.transform:Find("Select").gameObject:SetActive(false)
            button.transform:GetComponent("Image").material = self.mat
        elseif data.Id < currLayer then --已攻略
            LangUtil.BindText(buttonTxt).text = LangUtil.GetSysLang(493)
            button.transform:Find("Select").gameObject:SetActive(true)
        end
    elseif data.Id == currLayer then    --正在进行
        LangUtil.BindText(buttonTxt).text = LangUtil.GetSysLang(494)
        button.transform:Find("Select").gameObject:SetActive(false)
        button.transform:GetComponent("Image").material = nil
    end
    levelTxt.text = Z_LordLand[data.Id]["Name_"..LangUtil.GetLangType()]
    apTxt.text = string.format("AP %s",data.EnergyExpend)
    UIUtil.AddBtnEvent(button,function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UILordLandSectionInfo, data)
    end)
    UIUtil.AddBtnEvent(transform.gameObject,function()
        if data.Id > currLayer then
            return
        end
        ItemSelect(self, transform, data);
    end)
    -- 显示奖励图标
    local rewards = loadtable(Z_LordLandLevel[data.Id].FirstPassRewards)
    for key, value in pairs(rewards) do
        local iconGo = transform:Find(string.format("Icon_%s",key)).gameObject
        local icon = transform:Find(string.format("Icon_%s/Value",key)):GetComponent("Image")
        iconGo:SetActive(true)
        local amountTxt = transform:Find(string.format("Icon_%s/Amount",key)):GetComponent("Text")
        local currReward = rewards[key];
        local rewardInfo = UIPublic.GetRewardData(currReward.type, currReward.id);
        UIPublic.InitItemIcon(icon, nil, currReward.type, currReward.id, {spriteName = rewardInfo.spriteName})
        LangUtil.BindText(amountTxt,"Number").text = currReward.num
        local GoodInfoBtn = transform:Find(string.format("Icon_%s",key)).gameObject
        UIUtil.AddBtnEvent(GoodInfoBtn,function() GoodInfoBtnClick(self,rewardInfo)  end)

        local isPort = transform:Find((string.format("Icon_%s/IsPort",key))).gameObject
        isPort:SetActive(data.Id < currLayer)
        local starBg = transform:Find((string.format("Icon_%s/StarBg",key))).gameObject
        if data.Id < currLayer then
            iconGo.transform:GetComponent("Image").material = self.mat
            starBg.transform:GetComponent("Image").material = self.mat
        else
            iconGo.transform:GetComponent("Image").material = nil
            starBg.transform:GetComponent("Image").material = nil
        end
    end
end

function this.OnCreate(self)
    base.OnCreate(self);
    self.mat = ResourcesManager:GetInstance():CoLoadAsync("UI/Materials/UI-GreyDefault.mat", typeof(Material))
    self.backBtn = self.rc:GetObject("ReturnButton")
    self.scrollView = self.rc:GetObject("ScrollView"):GetComponent("ScrollRect")
    self.diffSprite = self.rc:GetObject("Diff"):GetComponent("Image")
    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(5)

    UIUtil.AddBtnEvent(self.backBtn, function(go)
        self.ctrl:CloseSelf()
    end, "Back")

    self.TipsPanel = self.rc:GetObject("TipsPanel").transform
    local TipsBgBtn = self.rc:GetObject("TipsBgBtn")
    local TipsBtn = self.TipsPanel:Find("TipsBtn")
    local Tips = self.TipsPanel:Find("Tips").gameObject
    Tips:SetActive(false)
    TipsBgBtn:SetActive(false)
    UIUtil.AddBtnEvent(TipsBtn, function(go)
        local localActive = Tips.activeInHierarchy
        TipsBgBtn:SetActive(not localActive)
        Tips:SetActive(not localActive)
    end)
    UIUtil.AddBtnEvent(TipsBgBtn, function(go)
        Tips:SetActive(false)
        TipsBgBtn:SetActive(false)
    end)
    self.GoodInfoEvent = self.rc:GetObject("GoodInfoEvent")
    self.GoodInfo = self.rc:GetObject("GoodInfo")
    self.GoodInfo:SetActive(false)
    self.GoodInfoEvent:SetActive(false)
    UIUtil.AddBtnEvent(self.GoodInfoEvent,function(go)
        self.GoodInfo:SetActive(false)
        self.GoodInfoEvent:SetActive(false)
    end)
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.backBtn.transform:Find("Text")).text = LangUtil.GetSysLang(1139)
    LangUtil.BindText(self.TipsPanel:Find("Tips/Text")).text = LangUtil.GetSysLang(4080)
    LangUtil.BindText(self.rc:GetObject("TxtDiff"))

    local intensBtn = self.rc:GetObject("Intens")
    local formatBtn = self.rc:GetObject("Format")
    LangUtil.GetSpriteLang(120, function(sprite) intensBtn:GetComponent("Image").sprite = sprite end)
    LangUtil.GetSpriteLang(19, function(sprite) formatBtn:GetComponent("Image").sprite = sprite end)
    UIUtil.AddBtnEvent(intensBtn, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIMainIntens)
    end)
    UIUtil.AddBtnEvent(formatBtn, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew)
    end)
    self.infoname = LangUtil.BindText(self.GoodInfo.transform:Find("name"))
    self.infotext = LangUtil.BindText(self.GoodInfo.transform:Find("info"))
    self.timeText = LangUtil.BindText(self.rc:GetObject("timeText"))--每周一4点更新
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.scroll:Clear()
    self.scroll:ScrollInit(self.ctrl.GetScetionData(self), self.scrollView, pfbName, function(arg)
        InitScetionItem(self, arg.go.transform, arg.data)
    end)
    self:OnRefresh()
end

local function InitScetionData(self)
    self.ctrl.ClearCurrCanShowData(self);
    local currLayer = GetCurrLayer()
    local canShowLayer = currLayer + 1 < 200 and currLayer + 1 or 200;
    for k,v in table.pairsByKeys(Z_LordLandLevel) do
        if v.Id <= canShowLayer then
            self.ctrl.AddCurrCanShowData(self,v);
        end
    end
    local currCanShowData = self.ctrl.GetCurrCanShowData(self);
    table.sort(currCanShowData,function(a, b) return a.Id > b.Id end);
    self.ctrl.SetScetionData(self,currCanShowData)
end

function this.OnRefresh(self)
    print("---------OnRefresh-----------<><><><>")
    InitScetionData(self)
    self.scroll:RefreshData(self.ctrl.GetScetionData(self))
    self.scroll:MoveTop()
end

function this.OnAddListener(self)
    base.OnAddListener(self);
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self);
    self.scroll:Dispose()

end

function this.OnDestroy(self)
    base.OnDestroy(self);
    
end

return this

