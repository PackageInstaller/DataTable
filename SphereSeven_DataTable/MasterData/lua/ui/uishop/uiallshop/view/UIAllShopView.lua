---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/12 21:12
---

local UIAllShopCtrlView = BaseClass("UIAllShopCtrlView",UIBaseView)
local base = UIBaseView
local this = UIAllShopCtrlView
local diamondPrefabName = "DiamondItem"
local giftPackagePrefabName = "GiftPackageItem"
local generalItemPrefabName = "GeneralItem"
local skinPfbName = "SkinItem"
local ItemPrefab = "ItemPrefab"

ShopTitleType = {
    GiftPackage = 1,
    General = 2,
    Skin = 3,
    Diamond = 4,
}

PayType = {
    Diamond = 1,
    GiftPackage = 2,
    MonthlyCard = 3,
    Pass = 6,
}

GeneralShopType = {
    Normal = 1,
    StarLight = 2,
    Arena = 3,
    Shard = 4,
    Ticket = 5,
    StarDust = 6,
    Bossraid = 12,
}

--- 与上一个table GeneralShopType 相对应, 用于设置第几个商店
GeneralShopTypeIndex = {
    [StoreType.Commmon] = 1, --普通商店
    [StoreType.StarStone] = 2, --星砂商店
    [StoreType.Arena] = 3, --星皇（竞技场）商店
    [StoreType.Shard] = 4, --魔晶商店
    [StoreType.Ticket] = 5, --黄绿票商店
    [StoreType.StarDust] = 6, --星尘商店
    [StoreType.Bossraid] = 7, -- 总力战商店
}

GiftPackageType = {
    Dayly = 1,
    Weekly = 2,
    Monthly = 3,
    OnSale = 4
}

local GeneralStoreSort = {
    StoreType.Commmon, --普通商店
    StoreType.StarStone, --星砂商店
    StoreType.Arena, --星皇（竞技场）商店
    StoreType.Shard, --魔晶商店
    StoreType.Ticket, --黄绿票商店
    StoreType.StarDust, --星尘商店
    StoreType.Bossraid, --总力战商店
}

local shopTitleListCount = {
    ShopTitleType.GiftPackage,
    ShopTitleType.General,
    ShopTitleType.Skin,
    ShopTitleType.Diamond
}

local giftPackageShopSort = {
    GiftPackageType.OnSale,
    GiftPackageType.Monthly,
    GiftPackageType.Weekly,
    GiftPackageType.Dayly
}

local currentSelectTitle = ShopTitleType.GiftPackage
local currentSelectGeneralShopType = StoreType.Commmon
local currentSelectGiftPackageShopIndex = 1
function this.InitTitle(self)
    for i, v in ipairs(shopTitleListCount) do
        self.titleList[i] = self.shopTitleList.transform:GetChild(i - 1).gameObject

        self.titleList[i].transform:Find("TitleText"):GetComponent("Text").text = LangUtil.GetSysLang(2080 + i)
        UIUtil.AddBtnEventNoBug(self.titleList[i].transform:GetComponent("Image"), function(go)
            self.lastScrollPos = nil
            currentSelectTitle = shopTitleListCount[i]
            this.RefreshTitle(self)
        end)
        if i == 1 then
            self.shopHint:GetChild("StarLightStoneShop"):AddObject(self.titleList[i].transform:Find("Hint").gameObject, "GiftPackageItem")
        else
            self.titleList[i].transform:Find("Hint").gameObject:SetActive(false)
        end
    end
    this.RefreshTitle(self)
end

function this.InitDiamond(self)
    ListChildPool:GetInstance():ClearContent(self.diamondContent)
    self.diamondContent.localPosition = Vector3.zero
    local diamondList = {}

    for _, shopInfo in pairs(Z_StarLightStoneShop) do
        if shopInfo.PayType == PayType.Diamond then
            table.insert(diamondList,shopInfo)
        end
    end

    table.sort(diamondList,function (a,b) return a.Id < b.Id end)

    self.diamondPrefabObjects = {}
    coroutine.start(function()
    table.walk(diamondList,function (k, v)
        ListChildPool:GetInstance():GetChild(diamondPrefabName, self.diamondContent, function(go)
            if self.active == false then ListChildPool:GetInstance():Remove(go) return end
            local transform = go.transform
            self.diamondPrefabObjects[k] = go
            this.InitDiamondDetail(self, transform, v)
            UIUtil.AddBtnEventNoBug(go.transform:GetComponent("Image"),function()
                coroutine.start(function()
                    coroutine.waitforframes(1)
                    this.OpenPackagePanel(self, v)
                end)
                --this.OpenPackagePanel(self, v)  
            end)
        end)
    end)
    end)
end

function this.InitGiftPackage(self, giftPackageType)
    ListChildPool:GetInstance():ClearContent(self.giftPackageContent)
    self.giftPackageContent.localPosition = Vector3.zero
    self.GitPackageList = {}
    local starLightRebateComponent = Game.Scene.Player:GetComponent("StarLightRebateComponent")

    for _, shopInfo in pairs(Z_StarLightStoneShop) do
        if shopInfo.PayType == PayType.GiftPackage or shopInfo.PayType == PayType.MonthlyCard then
            if shopInfo.QuotaPeriod == giftPackageType and shopInfo.isPopUp == 0 then
                if UIPublic.GiftPackageIsShow(shopInfo) then
                    shopInfo.PurCount = starLightRebateComponent:GetPurchaseCount(shopInfo.Id)
                    local isAlreadyGet = 0
                    if shopInfo.QuotaNum ~= 0 then
                        if shopInfo.QuotaNum == shopInfo.PurCount then
                            isAlreadyGet = 1
                        end
                    end
                    shopInfo.isAlreadyGet = isAlreadyGet
                    table.insert(self.GitPackageList,shopInfo)
                end
            end
        end
    end

    for _, shopInfo in pairs(Z_Store) do
        if shopInfo.StoreType == StoreType.GiftPackage then
            if shopInfo.QuotaPeriod == giftPackageType then
                if UIPublic.GiftPackageIsShow(shopInfo) then
                    shopInfo.PurCount = 0
                    if self.shopComponent.PurchasesDetailList[StoreType.GiftPackage][shopInfo.Id] ~= nil then
                        shopInfo.PurCount = self.shopComponent.PurchasesDetailList[StoreType.GiftPackage][shopInfo.Id].buy_times
                    end

                    local isAlreadyGet = 0
                    if shopInfo.QuotaNum ~= 0 then
                        if shopInfo.QuotaNum == shopInfo.PurCount then
                            isAlreadyGet = 1
                        end
                    end
                    if isAlreadyGet == 0 then
                        shopInfo.isAlreadyGet = isAlreadyGet
                        shopInfo.OrderId = shopInfo.Id
                        table.insert(self.GitPackageList,shopInfo)
                    end
                    -- shopInfo.isAlreadyGet = isAlreadyGet
                    -- shopInfo.OrderId = shopInfo.Id
                    -- table.insert(self.GitPackageList,shopInfo)
                end
            end
        end
    end

    table.sort(self.GitPackageList,function (a,b) 
        if a.isAlreadyGet ~= b.isAlreadyGet then
            return a.isAlreadyGet < b.isAlreadyGet 
        else
            return a.OrderId > b.OrderId
        end
    end)

    self.giftPackagePrefabObjects = {}
    coroutine.start(function()
    table.walk(self.GitPackageList,function (k, v)
        ListChildPool:GetInstance():GetChild(giftPackagePrefabName, self.giftPackageContent, function(go)
            if self.active == false then ListChildPool:GetInstance():Remove(go) return end
            local transform = go.transform
            self.giftPackagePrefabObjects[k] = go
            this.InitGiftPackageDetail(self, transform, v)
            UIUtil.AddBtnEventNoBug(go.transform:GetComponent("Image"),function() 
                if v.Price == nil then
                    if v.QuotaNum ~= 0 and v.PurCount >= v.QuotaNum then
                        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2091))
                        return
                    end
                    if v.TotalPrice == 0 then
                        self.ctrl:SendPackageBuyRequest(v.Id)
                    else
                        coroutine.start(function()
                            coroutine.waitforframes(1)
                            this.OpenPackagePanel(self, v)
                        end)
                        --this.OpenPackagePanel(self, v)
                    end
                else
                    if v.QuotaNum ~= 0 and v.PurCount >= v.QuotaNum then
                        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2091))
                        return
                    end
                    if v.Price == 0 then
                        self.ctrl:SendFreeGoods(v)
                    else
                        coroutine.start(function()
                            coroutine.waitforframes(1)
                            this.OpenPackagePanel(self, v)
                        end)
                        --this.OpenPackagePanel(self, v)
                    end
                end
                
            end)
            self.shopHint:GetChild("StarLightStoneShop"):GetChild(v.QuotaPeriod):GetChild(v.Id):AddObject(transform:Find("Hint").gameObject, "GiftPackageItem")
        end)
    end)
    end)
end

function this.InitGiftPackageShop(self)
    for i, v in ipairs(giftPackageShopSort) do
        self.giftPackageList[i] = self.giftPackageShopList.transform:GetChild(i - 1).gameObject
        local item = self.giftPackageList[i]

        LangUtil.GetSpriteLang(509 + i , function(sprite) item:GetComponent("Image").sprite = sprite end)
        self.shopHint:GetChild("StarLightStoneShop"):GetChild(v):AddObject(item.transform:Find("Hint").gameObject, "giftPackageList")

        UIUtil.AddBtnEventNoBug(self.giftPackageList[i].transform:GetComponent("Image"), function(go)
            self.lastScrollPos = nil
            currentSelectGiftPackageShopIndex = i
            this.RefreshGiftPackageTitle(self)
            this.InitGiftPackage(self, v)
        end)
    end
    this.RefreshGiftPackageTitle(self)
    this.InitGiftPackage(self, giftPackageShopSort[currentSelectGiftPackageShopIndex])
end

function this:InitGeneralShop()
    for i, v in ipairs(GeneralStoreSort) do
        self.generalTitleList[i] = self.generalShopList.transform:GetChild(i - 1).gameObject
        local item = self.generalTitleList[i]

        LangUtil.GetSpriteLang(516 + i , function(sprite) item:GetComponent("Image").sprite = sprite end)
        --LangUtil.GetSpriteLang(259 + i * 2, function(sprite) item.transform:Find("HightLightItem"):GetComponent("Image").sprite = sprite end)

        UIUtil.AddBtnEventNoBug(self.generalTitleList[i].transform:GetComponent("Image"), function(go)
            if v == StoreType.Ticket then
                self.characterFragExchange:SetActive(true)
            else
                self.characterFragExchange:SetActive(false)
            end
            self.lastScrollPos = nil
            currentSelectGeneralShopType = GeneralStoreSort[i]
            this.RefreshGeneralTitle(self)
            this.InitGeneralContent(self, v)
        end)
    end

    for i = table.count(GeneralStoreSort) + 1, self.generalShopList.transform.childCount do
        self.generalShopList.transform:GetChild(i - 1).gameObject:SetActive(false)
    end
    this.RefreshGeneralTitle(self)
    this.InitGeneralContent(self, currentSelectGeneralShopType)
end

function this.InitGeneralContent(self, storeType)
    self.scroll:Clear()
    self.itemList = {}

    for _, shopInfo in pairs(Z_Store) do
        if shopInfo.StoreType == storeType then
            --table.insert(self.itemList,shopInfo)
            if UIPublic.GiftPackageIsShow(shopInfo) then
                table.insert(self.itemList,shopInfo)
            end
        end
    end

    table.sort(self.itemList,function (a,b) 
        if a.Weight > b.Weight then
            return a.Weight > b.Weight
        elseif a.Weight == b.Weight  then
            if a.Id < b.Id then
                return a.Id < b.Id
            end
        end
        --return a.Id < b.Id 
    end)

    self.scroll:ScrollInit(self.itemList, self.itemScrollView, generalItemPrefabName, function (arg)
        if self.objectList[storeType] == nil then
            self.objectList[storeType] = {}
        end
        self.objectList[storeType][arg.data.Id] = arg.go
        local gameObject = self.objectList[storeType][arg.data.Id]
        local transform = gameObject.transform
        this.InitGenerlItemDetail(self, transform, arg.data)
    end)

    if self.lastScrollPos ~= nil then
        --self.scroll:MoveToItem(self.shopComponent.lastBuyItemId, 4)
        --self.lastScrollPos = self.scroll.verticalNormalizedPosition
        self.scroll:MoveToLastPos(self.lastScrollPos)
    end
end

function this.InitSkinShopContent(self)
    UIUtil.SetSprite(self.skinTicketImage, AtlasConfig.Item, GetItemIcon(Z_Item[tonumber(Z_Misc["SKIN_TICKET"].Value[1])]))
    ListChildPool:GetInstance():ClearContent(self.skinContent)
    self.skinContent.localPosition = Vector3.zero

    local shopComponent = Game.Scene.Player:GetComponent("ShopComponent")
    local skinList = {}

    for _, shopInfo in pairs(Z_Store) do
        if shopInfo.StoreType == StoreType.Skin then
            if UIPublic.GiftPackageIsShow(shopInfo) then
                table.insert(skinList,shopInfo)
            end
            -- table.insert(skinList,shopInfo)
        end
    end

    for _, shopInfo in ipairs(skinList) do
        local buyTimes = 0
        if shopComponent.PurchasesDetailList[StoreType.Skin][shopInfo.Id] ~= nil then
            buyTimes = shopComponent.PurchasesDetailList[StoreType.Skin][shopInfo.Id].buy_times
        end

        local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
        local cardskin = cardComponent.UnLockSkinList[Z_Reward[shopInfo.RewardId][1].ObjId]
        
        if cardskin ~= nil then
            buyTimes = 1
        end
        shopInfo.buyTimes = buyTimes
    end

    table.sort(skinList,function (a,b)
        if a.buyTimes ~= b.buyTimes then
            return a.buyTimes < b.buyTimes 
        elseif a.Id ~= b.Id then
            return a.Id > b.Id
        else
            return a.Id > b.Id
        end
    end)

    self.objectList = {}
    coroutine.start(function()
    table.walk(skinList,function (k, v)
        ListChildPool:GetInstance():GetChild(skinPfbName,self.skinContent,function(gameObject)
            self.objectList[v.Id] = gameObject
            local transform = gameObject.transform:Find("Root").transform
            local skinImage = transform:Find("SkinImage"):GetComponent("Image")
            local IsSelect = transform:Find("IsSelect").gameObject
            local isGet = transform:Find("AlreadyGet").gameObject
            local price = transform:Find("Price").gameObject
            local priceText = transform:Find("Price/PriceText")--:GetComponent("Text")
            local priceImage = transform:Find("Price/PriceImage"):GetComponent("Image")
            local skinInfo = Z_Skin[Z_Reward[v.RewardId][1].ObjId]

            UIUtil.SetSprite(priceImage, AtlasConfig.Item, GetItemIcon(Z_Item[tonumber(Z_Misc["SKIN_TICKET"].Value[1])]))

            --UIUtil.SetCardSprite(skinImage, skinInfo.CharacterId, skinInfo.Stage,CardPictureType.Middle, true)

            local path = "UI/SkinShopPaint/".. skinInfo.Id ..".png"
            skinImage.sprite = AtlasManager:GetInstance():CoLoadImageAsync(path)
            IsSelect:SetActive(false)
            local _bool = false

            if shopComponent.PurchasesDetailList[StoreType.Skin][v.Id] ~= nil then
                _bool = shopComponent.PurchasesDetailList[StoreType.Skin][v.Id].buy_times > 0 
            end

            local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
            local cardskin = cardComponent.UnLockSkinList[Z_Reward[v.RewardId][1].ObjId]
            
            if cardskin ~= nil then
                _bool = true
            end

            isGet:SetActive(_bool)
            price:SetActive(not _bool)
            
            priceText:GetComponent("Text").text = v.TotalPrice
            priceText.gameObject:SetActive(not _bool)

            UIUtil.AddBtnEventNoBug(transform:Find("SkinImage"),function()this.OnItem(self,v, _bool)  end)
        end)
    end)
    end)

    local _isGet = false

    if shopComponent.PurchasesDetailList[StoreType.Skin][skinList[1].Id] ~= nil then
        _isGet = shopComponent.PurchasesDetailList[StoreType.Skin][skinList[1].Id].buy_times > 0 
    end

    this.OnItem(self, skinList[1], _isGet)
end

function this.InitDiamondDetail(self, transform, diamondInfo)
    local diamondName = transform:Find("DiamondText"):GetComponent("Text")
    local tripleText = transform:Find("TripleText"):GetComponent("Text")
    local baseDiamondNumberText = transform:Find("BaseDiamondNumberText"):GetComponent("Text")
    local tripleNumberText = transform:Find("TripleNumberText"):GetComponent("Text")
    local diamondPrice = transform:Find("Price"):GetComponent("Text")
    local diamondImage = transform:Find("DiamondImage"):GetComponent("Image")

    diamondName.text = LangUtil.GetSysLang(3110)
    local purCount = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(diamondInfo.Id)
    
    local rewardTable = {}
    if purCount == 0 then
        rewardTable = Z_Reward[diamondInfo.FirstRewards]
        tripleText.text = LangUtil.GetSysLang(2085)
    else
        rewardTable = Z_Reward[diamondInfo.Rewards]
        tripleText.gameObject:SetActive(false) --.text = LangUtil.GetSysLang(2086)
    end

    transform:Find("FirstDeposit").gameObject:SetActive(purCount == 0)
    transform:Find("ExtraDeposit").gameObject:SetActive(false)

    diamondPrice.text = "$" .. ( diamondInfo.Price / 100 )
    coroutine.start(function ()
        baseDiamondNumberText.text = rewardTable[1].Count
        if rewardTable[2] ~= nil then
            tripleNumberText.text = "+" .. rewardTable[2].Count
        else
            tripleNumberText.gameObject:SetActive(false) --.text = 0
        end
        diamondImage.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Shop/StarLightStoneShop/" .. diamondInfo.Id .. ".png")
    end)
end

function this.InitGiftPackageDetail(self, transform, giftPackInfo)
    local giftNameText = transform:Find("GiftNameText"):GetComponent("Text")
    local price = transform:Find("Price"):GetComponent("Text")
    local limitTimes = transform:Find("Bg/LimitTimes"):GetComponent("Text")
    local limitImage = transform:Find("LimitImage")
    local bg = transform:Find("Bg")
    local giftDetail = transform:Find("GiftDetail")
    local alreadyGetObj = transform:Find("AlreadyGetObj")
    local priceImage = transform:Find("PriceImage"):GetComponent("Image")
    local leftTimeText = transform:Find("LeftTimeText")
    local purCount = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(giftPackInfo.Id)
    local icon = transform:Find("GiftImage"):GetComponent("Image")
            
    local rewarTable = {}
    if purCount == 0 then
        rewarTable = Z_Reward[giftPackInfo.FirstRewards]
    else
        rewarTable = Z_Reward[giftPackInfo.Rewards]
    end

    for i = 0, 3 do
        giftDetail.transform:GetChild(i).gameObject:SetActive(false)
    end

    if rewarTable == nil then
        rewarTable = Z_Reward[giftPackInfo.RewardId]
        if Z_Item[giftPackInfo.PriceType] == nil then
            print("请检查礼包Id"..giftPackInfo.Id.."pricetype" .. giftPackInfo.PriceType)
            return
        end
        priceImage.gameObject:SetActive(true)
        UIUtil.SetSprite(priceImage, AtlasConfig.Item, GetItemIcon(Z_Item[giftPackInfo.PriceType]), false)
        coroutine.start(function ()
            icon.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Shop/StarLightStoneShop/" .. giftPackInfo.Id .. ".png")
        end)
        
    else
        priceImage.gameObject:SetActive(false)
        coroutine.start(function ()
            icon.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Shop/StarLightStoneShop/" ..  giftPackInfo.Icon)
        end)
    end

    if rewarTable == nil then
        print("礼包奖励为空，请检查配置表礼包ID"..giftPackInfo.Id.."礼包奖励为空，请检查配置表")
        return
    end

    local rewardShowCount = #rewarTable
    if rewardShowCount > 3 then
        rewardShowCount =3
        giftDetail.transform:GetChild(3).gameObject:SetActive(true)
    end

    for i = 1, rewardShowCount do
        if rewarTable[i].Type ~= 7 then
            local item = giftDetail.transform:GetChild(i - 1).transform
            local avatar = item:Find("Icon"):GetComponent("Image")
            local itemBg = item:Find("ItemBg"):GetComponent("Image")
            local count = item:Find("Num"):GetComponent("Text")
            local frame = item:Find("Frame"):GetComponent("Image")
            UIPublic.InitItemIconNew(avatar, itemBg, rewarTable[i].Type, rewarTable[i].ObjId, rewarTable[i].Count, false, false, frame)

            UIUtil.AddBtnEventNoBug(item.gameObject,function(go)
                local showData = {}
                local showType = ShowType.Item
                if rewarTable[i].Type == RewardType.RewardTypeEquipment then
                    showType = ShowType.Equip
                elseif rewarTable[i].Type == RewardType.RewardTypeCharacter then
                    showType = ShowType.Card
                elseif rewarTable[1].Type == RewardType.RewardTypeFightSoul then
                    showType = ShowType.FightSoul
                end
                showData.showType = showType
                showData.tempId = rewarTable[i].ObjId
                showData.count = rewarTable[i].Count
                UIUtil.OpenThingsDetailWindow(showData)
            end)

            count.text = rewarTable[i].Count
            giftDetail.transform:GetChild(i - 1).gameObject:SetActive(true)
        end
    end

    giftNameText.text = giftPackInfo.Name
    if giftPackInfo.Price == nil then
        if tonumber(giftPackInfo.TotalPrice) == 0  then
            price.text = LangUtil.GetSysLang(2094)
        else
            price.text = giftPackInfo.TotalPrice
        end
    elseif tonumber(giftPackInfo.Price) == 0 then
        price.text = LangUtil.GetSysLang(2094)
    else
        price.text = "$" .. (giftPackInfo.Price/100)
    end

    leftTimeText.gameObject:SetActive(true)
    if giftPackInfo.QuotaPeriod ~= 0 then
        local seconds = 0
        local isLimit = false
        if giftPackInfo.QuotaPeriod == 1 then
            seconds = TimeUtil.GetWeekLastSeconds()
        elseif giftPackInfo.QuotaPeriod == 2 then
            seconds = TimeUtil.GetWeekLastSeconds(1)
        elseif giftPackInfo.QuotaPeriod == 3 then
            seconds = TimeUtil.GetMonthLastSeconds(1)
        elseif giftPackInfo.QuotaPeriod == 4 then
            if giftPackInfo.VisibleEndTime == nil or giftPackInfo.VisibleEndTime == ""  then
                leftTimeText.gameObject:SetActive(false)
            else
                seconds = TimeUtil.ParseDateTime(giftPackInfo.VisibleEndTime) - TimeUtil.ServerTime
                isLimit = true
            end
        end
        leftTimeText:GetComponent("Text").text = this.secondsToTime(self, seconds, isLimit)
    end

    if giftPackInfo.PayType == 3 then
        local monthlyCardId = 1
        for _, value in pairs(Z_Reward[giftPackInfo.Rewards]) do
            if value.Type == RewardType.RewardTypeMonthlyCard then
                monthlyCardId = value.ObjId
            end
        end
        local leftDay = UIPublic.GetMonthCardLastDay(monthlyCardId)
        if leftDay ~= 0 then
            leftTimeText.gameObject:SetActive(true)
            leftTimeText:GetComponent("Text").text = string.gsub(LangUtil.GetSysLang(2096), "XX", leftDay)
        end
    end
    
    bg.gameObject:SetActive(giftPackInfo.QuotaNum ~= (0 or nil))
    limitImage.gameObject:SetActive(giftPackInfo.OnSaleEndTime ~= "")
    alreadyGetObj.gameObject:SetActive(giftPackInfo.isAlreadyGet ~= 0)

    if giftPackInfo.QuotaNum ~= (0 or nil) then
        limitTimes.text = string.gsub(LangUtil.GetSysLang(2093), "XX", giftPackInfo.QuotaNum - purCount .. "/" .. giftPackInfo.QuotaNum)
    end
end

function this.InitGenerlItemDetail(self, transform, generalItemInfo)
    local avatar = transform:Find("ItemPrefab/Icon"):GetComponent("Image")
    local itemBg = transform:Find("ItemPrefab/ItemBg"):GetComponent("Image")
    local priceText = transform:Find("PriceText"):GetComponent("Text")
    local priceImage = transform:Find("PriceImage"):GetComponent("Image")
    local name = transform:Find("ItemPrefab/Name/Value"):GetComponent("Text")
    local num = transform:Find("ItemPrefab/Num"):GetComponent("Text")
    local frame = transform:Find("ItemPrefab/Frame"):GetComponent("Image")

    local limitCount = transform:Find("LimitCount")
    local limitCountText = transform:Find("LimitCount/LimitCountText"):GetComponent("Text")

    priceText.text = generalItemInfo.TotalPrice
    num.text = generalItemInfo.Amount
    local rewardInfo = Z_Reward[generalItemInfo.RewardId]

    UIUtil.AddBtnEventNoBug(itemBg.gameObject,function(go)
        local showData = {}
        local showType = ShowType.Item
        if rewardInfo[1].Type == RewardType.RewardTypeEquipment then
            showType = ShowType.Equip
        elseif rewardInfo[1].Type == RewardType.RewardTypeCharacter then
            showType = ShowType.Card
        elseif rewardInfo[1].Type == RewardType.RewardTypeFightSoul then
            showType = ShowType.FightSoul
        end
        showData.showType = showType
        showData.tempId = rewardInfo[1].ObjId
        showData.count = rewardInfo[1].Count
        UIUtil.OpenThingsDetailWindow(showData)
    end)

    UIPublic.InitItemIconNew(avatar, itemBg, rewardInfo[1].Type, rewardInfo[1].ObjId, rewardInfo[1].Count, false, false, frame)
    UIUtil.SetSprite(priceImage, AtlasConfig.Item, GetItemIcon(Z_Item[generalItemInfo.PriceType]), true)
    local data = UIPublic.GetRewardDataNew(rewardInfo[1].Type, rewardInfo[1].ObjId, 1)
    name.text = data.name

    local alreadyBuyTimes = 0
    if self.shopComponent.PurchasesDetailList[currentSelectGeneralShopType][generalItemInfo.Id] ~= nil then
        alreadyBuyTimes = self.shopComponent.PurchasesDetailList[currentSelectGeneralShopType][generalItemInfo.Id].buy_times
    --elseif self.shopComponent.PurchasesDetailList[tonumber(value.Params[1])][tonumber(value.Params[2])]  then
        -- body
    end

    limitCount.gameObject:SetActive(generalItemInfo.QuotaNum ~= 0)
    if generalItemInfo.QuotaNum ~= 0 then
        limitCountText.text = string.gsub(LangUtil.GetSysLang(2093), "XX", generalItemInfo.QuotaNum - alreadyBuyTimes .. "/" .. generalItemInfo.QuotaNum)
    end

    transform:Find("Limit").gameObject:SetActive(generalItemInfo.QuotaPeriod ~= 0)
    if generalItemInfo.QuotaPeriod ~= 0 then
        local seconds = 0
        if generalItemInfo.QuotaPeriod == 1 then
            seconds = TimeUtil.GetWeekLastSeconds()
        elseif generalItemInfo.QuotaPeriod == 2 then
            seconds = TimeUtil.GetWeekLastSeconds(1)
        elseif generalItemInfo.QuotaPeriod == 3 then
            seconds = TimeUtil.GetMonthLastSeconds(1)
        elseif generalItemInfo.QuotaPeriod == 4 then
            transform:Find("Limit").gameObject:SetActive(false)
        end

        if generalItemInfo.VisibleEndTime ~= nil and generalItemInfo.VisibleEndTime ~= "" then --支持配置显示结束时间
            seconds = TimeUtil.ParseDateTime(generalItemInfo.VisibleEndTime) - TimeUtil.ServerTime
            transform:Find("Limit").gameObject:SetActive(true)
        end
        transform:Find("Limit/LimitTimeText"):GetComponent("Text").text = this.secondsToTime(self, seconds)
    end

    generalItemInfo.alreadyBuyCount = alreadyBuyTimes
    generalItemInfo.type = UseItemType.Shop
    UIUtil.AddBtnEventNoBug(transform:Find("Bg"):GetComponent("Image"),
        function() 
            local canBuyMax = math.floor(UIPublic.GetItemAmount(generalItemInfo.PriceType) / generalItemInfo.TotalPrice)
            if canBuyMax <= 0 then
                if generalItemInfo.PriceType == tonumber(Z_Misc["FREE_DIAMOND_ID"].Value[1]) then
                    canBuyMax = (UIPublic.GetItemAmount(tonumber(Z_Misc["FREE_DIAMOND_ID"].Value[1])) + UIPublic.GetItemAmount(tonumber(Z_Misc["DIAMOND_ID"].Value[1]))) / generalItemInfo.TotalPrice
                    if canBuyMax <= 0 then
                        UIUtil.ToolTipFourth(string.gsub(LangUtil.GetSysLang(2092), "XX", Z_Item[generalItemInfo.PriceType].Name))
                        return
                    else

                    end
                else
                    UIUtil.ToolTipFourth(string.gsub(LangUtil.GetSysLang(2092), "XX", Z_Item[generalItemInfo.PriceType].Name))
                    return
                end
            end
            self.lastScrollPos = self.scroll.scrollRect.verticalNormalizedPosition
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIUseItem, generalItemInfo)
    end)
end

function this.OpenPackagePanel(self, data)
    self.giftPackageDetail.gameObject:SetActive(true)

    local price = self.giftPackageDetail.transform:Find("ConfirmButton/PriceText"):GetComponent("Text")
    local detailTitle = self.giftPackageDetail.transform:Find("DetailTitle")
    local detailDestriptionText = self.giftPackageDetail.transform:Find("DetailTitle/DetailDestriptionText"):GetComponent("Text")
    local itemTitleDestriptionText = self.giftPackageDetail.transform:Find("ItemTitle/DetailDestriptionText"):GetComponent("Text")
    local packageName = self.giftPackageDetail.transform:Find("PackageName"):GetComponent("Text")
    local limitBuyTimes = self.giftPackageDetail.transform:Find("Limit/LimitBuyTimes")
    local limitBuyTimesText = self.giftPackageDetail.transform:Find("Limit/LimitBuyTimesText")
    local limitTimeText = self.giftPackageDetail.transform:Find("Limit/LimitTime/LimitTimeText")
    local limitTime = self.giftPackageDetail.transform:Find("Limit/LimitTime")
    local ConfirmButton = self.giftPackageDetail.transform:Find("ConfirmButton")
    local priceImage = self.giftPackageDetail.transform:Find("ConfirmButton/PriceImage"):GetComponent("Image")
    local icon = self.giftPackageDetail.transform:Find("GiftPackageImage"):GetComponent("Image")

    if data.Price == nil then
        if data.TotalPrice == 0 then
            price.text = LangUtil.GetSysLang(2094)
        else
            price.text = data.TotalPrice
        end
        
        priceImage.gameObject:SetActive(true)
        UIUtil.SetSprite(priceImage, AtlasConfig.Item, GetItemIcon(Z_Item[data.PriceType]), false)
        coroutine.start(function ()
            coroutine.waitforframes(5)
            icon.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Shop/StarLightStoneShop/" .. data.Id .. ".png")
        end)
    else
        coroutine.start(function ()
            coroutine.waitforframes(5)
            icon.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Shop/StarLightStoneShop/" ..  data.Icon)
        end)
        priceImage.gameObject:SetActive(false)

        if data.Price == 0 then
            price.text = LangUtil.GetSysLang(2094)
        else
            price.text = "$" .. (data.Price/100)
        end
    end

    --detailDestriptionText.text = data.Desc
    packageName.text = data.Name

    limitBuyTimes.gameObject:SetActive(data.QuotaNum ~= (0 or nil))
    limitBuyTimesText.gameObject:SetActive(data.QuotaNum ~= (0 or nil))

    local purCount = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(data.Id)
    if data.QuotaNum ~= (0 or nil) then
        limitBuyTimesText:GetComponent("Text").text = string.gsub(LangUtil.GetSysLang(2093), "XX", data.QuotaNum - purCount .. "/" .. data.QuotaNum)
    end

    if data.QuotaPeriod == (1 or 2 or 3) then
        local seconds
        if data.QuotaPeriod == 1 then
            seconds = TimeUtil.GetWeekLastSeconds()
        elseif data.QuotaPeriod == 2 then
            seconds = TimeUtil.GetWeekLastSeconds(1)
        elseif data.QuotaPeriod == 3 then
            seconds = TimeUtil.GetMonthLastSeconds(1)
        end
        limitTimeText:GetComponent("Text").text = this.secondsToTime(self, seconds)
        limitTime.gameObject:SetActive(true)
    else
        limitTime.gameObject:SetActive(false)
    end

    if data.QuotaNum == 0 then
        UIPublic.InitButton(ConfirmButton, true)
    else
        UIPublic.InitButton(ConfirmButton, purCount < data.QuotaNum)
    end

    UIUtil.AddBtnEventNoBug(ConfirmButton, function()
        if purCount >= data.QuotaNum and data.QuotaNum ~= 0 then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2091))
            return
        end
        if data.Price == nil then
            self.ctrl:SendPackageBuyRequest(data.Id)
        else
            self.ctrl:SendStarLightRequest(data)
        end
        self.giftPackageDetail.gameObject:SetActive(false)
    end)

    ----------------------------
    ListChildPool:GetInstance():ClearContent(self.giftPackageDetailContent)
    self.giftPackageDetailContent.localPosition = Vector3.zero
    local ItemList = {}
    local itemInfo = {}

    local purCount = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(data.Id)
    if purCount == 0 then
        ItemList = Z_Reward[data.FirstRewards]
    else
        ItemList = Z_Reward[data.Rewards]
    end

    if ItemList == nil then
        ItemList = Z_Reward[data.RewardId]
    end

    for _, value in ipairs(ItemList) do
        if value.Type ~= 7 then
            table.insert(itemInfo, value)
        end
    end

    self.diamondPrefabObjects = {}
    table.walk(itemInfo,function (k, v)
        ListChildPool:GetInstance():GetChild(ItemPrefab, self.giftPackageDetailContent, function(go)
            if self.active == false then ListChildPool:GetInstance():Remove(go) return end
            local transform = go.transform

            self.diamondPrefabObjects[k] = go
            local avatar = transform:Find("Icon"):GetComponent("Image")
            local itemBg = transform:Find("ItemBg"):GetComponent("Image")
            local frame = transform:Find("Frame"):GetComponent("Image")

           UIPublic.InitItemIconNew(avatar, itemBg, v.Type, v.ObjId, v.Count, false, false, frame)

            UIUtil.AddBtnEventNoBug(transform.gameObject,function(go)
                local showData = {}
                local showType = ShowType.Item
                if v.Type == RewardType.RewardTypeEquipment then
                    showType = ShowType.Equip
                elseif v.Type == RewardType.RewardTypeCharacter then
                    showType = ShowType.Card
                elseif v.Type == RewardType.RewardTypeFightSoul then
                    showType = ShowType.FightSoul
                end
                showData.showType = showType
                showData.tempId = v.ObjId
                showData.count = v.Count
                UIUtil.OpenThingsDetailWindow(showData)
            end)

            local num = transform:Find("Num"):GetComponent("Text")
            num.text = v.Count
        end)
    end)

    if data.PayType ~= nil and data.PayType == 3 then
        detailTitle.gameObject:SetActive(true)
        itemTitleDestriptionText.gameObject:SetActive(true)
        local item1 = self.giftPackageDetail.transform:Find("DetailTitle/ItemList/ItemPrefab1")
        local item2 = self.giftPackageDetail.transform:Find("DetailTitle/ItemList/ItemPrefab2")

        item1.gameObject:SetActive(false)
        item2.gameObject:SetActive(false)

        local dailyRewards
        for _, value in pairs(Z_MonthlyCard) do
            if value.ShopId == data.Id then
                dailyRewards = Z_Reward[value.Reward]
            end
        end

        if dailyRewards ~= nil then
            item1.gameObject:SetActive(true)
            local transform1 = item1.transform
            local v = dailyRewards[1]

            local avatar1 = transform1:Find("Icon"):GetComponent("Image")
            local itemBg1 = transform1:Find("ItemBg"):GetComponent("Image")
            local frame1 = transform1:Find("Frame"):GetComponent("Image")
            local num1 = transform1:Find("Num"):GetComponent("Text")

           UIPublic.InitItemIconNew(avatar1, itemBg1, v.Type, v.ObjId, v.Count, false, false, frame1)
           num1.text = v.Count

           UIUtil.AddBtnEventNoBug(transform1.gameObject,function(go)
            local showData = {}
            local showType = ShowType.Item
            if v.Type == RewardType.RewardTypeEquipment then
                showType = ShowType.Equip
            elseif v.Type == RewardType.RewardTypeCharacter then
                showType = ShowType.Card
            elseif v.Type == RewardType.RewardTypeFightSoul then
                showType = ShowType.FightSoul
            end
            showData.showType = showType
            showData.tempId = v.ObjId
            showData.count = v.Count
            UIUtil.OpenThingsDetailWindow(showData)
        end)

            if #dailyRewards == 1 then
                
            elseif #dailyRewards == 2 then
                item2.gameObject:SetActive(true)

                item1.gameObject:SetActive(true)
                local transform2 = item2.transform
                local v2 = dailyRewards[2]

                local avatar2 = transform2:Find("Icon"):GetComponent("Image")
                local itemBg2 = transform2:Find("ItemBg"):GetComponent("Image")
                local frame2 = transform2:Find("Frame"):GetComponent("Image")
                local num2 = transform2:Find("Num"):GetComponent("Text")
                num2.text = v2.Count

                UIPublic.InitItemIconNew(avatar2, itemBg2, v2.Type, v2.ObjId, v2.Count, false, false, frame2)

                UIUtil.AddBtnEventNoBug(transform2.gameObject,function(go)
                    local showData = {}
                    local showType = ShowType.Item
                    if v2.Type == RewardType.RewardTypeEquipment then
                        showType = ShowType.Equip
                    elseif v2.Type == RewardType.RewardTypeCharacter then
                        showType = ShowType.Card
                    elseif v2.Type == RewardType.RewardTypeFightSoul then
                        showType = ShowType.FightSoul
                    end
                    showData.showType = showType
                    showData.tempId = v2.ObjId
                    showData.count = v2.Count
                    UIUtil.OpenThingsDetailWindow(showData)
                end)
            end
        end
    else
        detailTitle.gameObject:SetActive(false)
        itemTitleDestriptionText.gameObject:SetActive(false)

    end
end

function this.secondsToTime(self,seconds, isLimit)
    local days = math.floor(seconds / (24 * 3600))
    local remainingSeconds = seconds % (24 * 3600)
    local hours = math.floor(remainingSeconds / 3600)
    remainingSeconds = remainingSeconds % 3600

    local str = ""
    if days > 0 then
        str = string.gsub(LangUtil.GetSysLang(2087), "XX", days)--离重置还剩XX天YY小时
    else
        str = string.gsub(LangUtil.GetSysLang(2088), "XX", hours)--离重置还剩XX小时YY分
    end

    if isLimit then
        if days > 0 then
            str = string.gsub(LangUtil.GetSysLang(2098), "XX", days)--离重置还剩XX天YY小时
        else
            str = string.gsub(LangUtil.GetSysLang(2099), "XX", hours)--离重置还剩XX小时YY分
        end
    end
    return str
end

function this.RefreshTitle(self)
    if currentSelectTitle == ShopTitleType.Diamond then
        this.InitDiamond(self)
    elseif currentSelectTitle == ShopTitleType.GiftPackage then
        this.InitGiftPackageShop(self)
    elseif currentSelectTitle == ShopTitleType.General then
        this.InitGeneralShop(self)
    elseif currentSelectTitle == ShopTitleType.Skin then
        this.InitSkinShopContent(self)
    end

    for index, value in ipairs(self.titleList) do
        value.transform:Find("IsSelectImage").gameObject:SetActive(index == currentSelectTitle)
        local titleText = value.transform:Find("TitleText"):GetComponent("Text")
        if index == currentSelectTitle then
            titleText.color = Color.New(1, 1, 1,1)
            titleText.fontSize = 40
        else
            titleText.color = Color.New(131/255, 146/255, 164/255, 1)
            titleText.fontSize = 36
        end
    end
    Logger.Log("--------------------------------------------------------")
    self.skinShop.gameObject:SetActive(ShopTitleType.Skin == currentSelectTitle)
    self.generalShop.gameObject:SetActive(ShopTitleType.General == currentSelectTitle)
    self.giftPackageShop.gameObject:SetActive(ShopTitleType.GiftPackage == currentSelectTitle)
    self.diamondShop.gameObject:SetActive(ShopTitleType.Diamond == currentSelectTitle)
    self.characterFragExchange:SetActive(currentSelectTitle == ShopTitleType.General and currentSelectGeneralShopType == StoreType.Ticket)
    self:Currency(self)
end

function this.RefreshGeneralTitle(self)
    for index, value in ipairs(self.generalTitleList) do
        value.transform:Find("HightLightItem").gameObject:SetActive(index ~= GeneralShopTypeIndex[currentSelectGeneralShopType])
    end
    self:Currency(self)
end

function this.RefreshGiftPackageTitle(self)
    for index, value in ipairs(self.giftPackageList) do
        value.transform:Find("HightLightItem").gameObject:SetActive(index ~= currentSelectGiftPackageShopIndex)
    end
    self:Currency(self)
end

function this.OnItem(self, zSkin, isGet)
    self.zSkin = zSkin
    self.SkinBuybutton.gameObject:SetActive(not isGet)
    for k,v in pairs(self.objectList) do
        this.SetItemState(self,v,k == self.zSkin.Id)
    end
    this.InitSkinInfo(self)
end

function this.SetItemState(self,gameObject,_bool)
    local transform = gameObject.transform:Find("Root").transform
    local rectTransform =transform:GetComponent("RectTransform")
    local IsSelect = transform:Find("IsSelect").gameObject
    IsSelect:SetActive(_bool)
    
    if not IsNull(gameObject:GetComponent("Button")) then
        gameObject:GetComponent("Button").enabled  = (not _bool)
    end
    if _bool then
        rectTransform:DOLocalMoveX(20, 0)
    else
        rectTransform:DOLocalMoveX(0, 0)
    end
end

function this.InitSkinInfo(self)
    local skinInfo = Z_Skin[Z_Reward[self.zSkin.RewardId][1].ObjId]

    self.SkinPriceText.text = self.zSkin.TotalPrice
    self.SkinName.text = skinInfo.Name
    self.CharacterName.text = Z_Card[skinInfo.CharacterId].Name
    self.SkinIsLive:SetActive(skinInfo.IsSpine == 1)
    self.SkinIsSpecialVioce:SetActive(skinInfo.SkinSound ~= "")
    this.InitSkinPicture(self, Z_Reward[self.zSkin.RewardId][1].ObjId)
end

function this.InitSkinPicture(self,skinId)
    --self.mainSkin:DOFade(0,0)
    coroutine.start(function()
        local skin = Z_FigureAsset[skinId]
        self.uiDrawing:CoPlayImage(skin.SsUnitId, skinId)
        if self.uiDrawing.showMode == 2 then
            self.uiDrawing:ChangeMode(skin.SsUnitId, skinId)
        end
        local offsetInfo = Z_SkinOriginalOffset[skinId]
        self.paintRoot:DOLocalMove(Vector2.New(offsetInfo.ShopOffset[1],offsetInfo.ShopOffset[2]),0)
        self.paintRoot:DOScale(Vector2.New(offsetInfo.ShopScale[1],offsetInfo.ShopScale[2]),0)

        coroutine.waitforframes(2)
        local path = "UI/SkinShopBg/".. skin.CardWithBG ..".png"
        self.cardBg.sprite =  AtlasManager:GetInstance():CoLoadImageAsync(path)
    end)
end

function this.OnBuy(self)
    local PaidStarStone = UIPublic.GetItemAmount( Z_Misc["DIAMOND_ID"].Value[1])
    local FreeStarStone = UIPublic.GetItemAmount( Z_Misc["FREE_DIAMOND_ID"].Value[1])
    local data = {}
    local skinInfo = Z_Skin[Z_Reward[self.zSkin.RewardId][1].ObjId]
    data.title = LangUtil.GetSysLang(468) -- "皮肤购买"
    data.SkinId = Z_Reward[self.zSkin.RewardId][1].ObjId
    data.CharacterId = skinInfo.CharacterId
    data.StorePrice = self.zSkin.TotalPrice
    data.skinName = skinInfo.Name
    data.StoreId = self.zSkin.Id
    data.PaidStarStone = PaidStarStone
    data.FreeStarStone = FreeStarStone

    if UIPublic.GetItemAmount( 10012 ) >= data.StorePrice then
        data.type = 1
        data.Event = function() self.ctrl:SendBuyRequest(data) end
    else
        data.type = 3
        data.msg = LangUtil.GetSysLang(2090) --"皮肤票不足"
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2090))
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop, {
            ShopTitleType = ShopTitleType.General,
            GeneralShopType = GeneralShopType.Normal,
        })
        return
        -- data.Event = function() 
        --     currentSelectTitle = ShopTitleType.Diamond
        --     this.RefreshTitle(self)
        -- end
    end
    data.hasVoice = skinInfo.SkinSound ~= ""
    UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipSkin , data)
end

-- 货币的显示
function this.Currency(self)
    if currentSelectTitle == ShopTitleType.Skin then
        self.comTopView:CustomizeComTop( {{
            ObjId = Z_Misc["SKIN_TICKET"].Value[1],
            JumpName = "UIAllShop",
            JumpParam = {
                ShopTitleType.General,
                GeneralShopType.Normal
            }
        }})
    elseif currentSelectTitle ~= ShopTitleType.General or currentSelectGeneralShopType == StoreType.Commmon and currentSelectTitle ~= ShopTitleType.Skin then
        self.comTopView:CustomizeComTop( {
            {ObjId = Z_Misc["GOLD_ID"].Value[1]},
            {ObjId = Z_Misc["FREE_DIAMOND_ID"].Value[1]},
            {ObjId = Z_Misc["DIAMOND_ID"].Value[1]}
        })
    elseif currentSelectGeneralShopType == StoreType.StarStone then
        self.comTopView:CustomizeComTop({{
            ObjId = Z_Misc["STAR_SAND_ID"].Value[1]
        }})
    elseif currentSelectGeneralShopType ==StoreType.Arena then
        self.comTopView:CustomizeComTop( {{
            ObjId = Z_Misc["MILITARY_ORDER_ID"].Value[1]
        }})
    elseif currentSelectGeneralShopType == StoreType.Shard then
        self.comTopView:CustomizeComTop({{
            ObjId = Z_Misc["MAGIC_CRYSTAL_ID"].Value[1]
        }})
    elseif currentSelectGeneralShopType == StoreType.Ticket then
        self.comTopView:CustomizeComTop( {
            {ObjId = Z_Misc["YELLOW_TICKET_ID"].Value[1]},
            {ObjId = Z_Misc["GREEN_TICKET_ID"].Value[1]}
        })
    elseif currentSelectGeneralShopType == StoreType.StarDust then
        local specialDustTable = {}
        for key, value in ipairs( Z_Misc["SPECIAL_DUST_ID"].Value) do
            table.insert(specialDustTable, {
                ObjId = value
            })
        end

        table.insert(specialDustTable, {
            ObjId = Z_Misc["STAR_STONE_ID"].Value[1]
        })
        self.comTopView:CustomizeComTop(specialDustTable)
        -- self.comTopView:CustomizeComTop( {{
        --     ObjId = Z_Misc["STAR_STONE_ID"].Value[1]
        -- }})
    elseif currentSelectGeneralShopType == StoreType.Bossraid then
        self.comTopView:CustomizeComTop( {
            {ObjId = Z_Misc["BOSSRAID_ITEM"].Value[1]}
        })
    end
end

function this.SetCurrencyDetail(item, state, itemId)
    item:SetActive(state)
    if state then
        local img = item.transform:Find("Image"):GetComponent("Image")
        UIUtil.SetSprite(img, AtlasConfig.Item, GetItemIcon(Z_Item[tonumber(itemId.Value[1])]))
        local txt = item.transform:Find("Text"):GetComponent("Text")
        txt.text = UIPublic.GetItemAmount(itemId.Value[1])

        UIUtil.AddBtnEventNoBug(item.transform,function(go)
            local showData = {}
            showData.showType = ShowType.Item
            showData.tempId = tonumber(itemId.Value[1])
            UIUtil.OpenThingsDetailWindow(showData)
        end)
    end
end

function this.getLeftTime(quotaPeriod)
    
    if quotaPeriod == 1 then --天
        
    elseif quotaPeriod == 2 then --周

    elseif quotaPeriod == 3 then --月

    end
end

function this:OnCreate()
    base.OnCreate(self)

    self.player = Game.Scene.Player

    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    self.shopHint = hintComponent.Shop

    self.back_btn = self.rc:GetObject("ReturnButton")
    self.shopTitleList = self.rc:GetObject("ShopTitleList")
    self.skinShop = self.rc:GetObject("SkinShop")
    self.generalShop = self.rc:GetObject("GeneralShop")
    self.giftPackageShop = self.rc:GetObject("GiftPackageShop")
    self.diamondShop = self.rc:GetObject("DiamondShop")

    --Diamond--

    self.diamondPrefabObjects = {}
    self.diamondContent = self.rc:GetObject("DiamondContent").transform
    
    --GiftPackage-----------------------

    self.GitPackageList = {}
    self.giftPackagePrefabObjects = {}
    self.giftPackageContent = self.rc:GetObject("GiftPackageContent").transform
    self.giftPackageDetailContent = self.rc:GetObject("GiftPackageDetailContent").transform

    --General---------

    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(4)
    self.generalItemPrefabObjects = {}
    self.itemContent = self.rc:GetObject("ItemContent").transform
    self.generalShopList = self.rc:GetObject("GeneralShopList")
    self.itemScrollView = self.rc:GetObject("ItemScrollView").transform
    
    self.characterFragExchange = self.rc:GetObject("CharacterFragExchange")
    self.characterFragExchange:SetActive(false)
    LangUtil.BindText(self.characterFragExchange.transform:Find("Text")).text = LangUtil.GetSysLang(1445)
    UIUtil.AddBtnEvent(self.characterFragExchange, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICharacterFragExchange)
    end)

    --GiftPackageDetail------------------------------

    self.objectList = {}
    self.giftPackageDetail = self.rc:GetObject("GiftPackageDetail")
    self.giftPackageShopList = self.rc:GetObject("GiftPackageShopList")
    self.GiftPackageClose = self.rc:GetObject("GiftPackageClose")
    self.cancelButton = self.rc:GetObject("CancelButton")
    UIUtil.AddBtnEventNoBug(self.GiftPackageClose ,function()
        self.giftPackageDetail.gameObject:SetActive(false)
    end,"Back")

    UIUtil.AddBtnEventNoBug(self.cancelButton ,function()
        self.giftPackageDetail.gameObject:SetActive(false)
    end,"Back")

    --Skin----------------------------------------

    
    self.skinContent = self.rc:GetObject("SkinContent").transform
    self.mainSkin = self.rc:GetObject("MainSkin"):GetComponent("Image")
    self.SkinBuybutton = self.rc:GetObject("SkinBuybutton")
    self.SkinPriceText = self.rc:GetObject("SkinPriceText"):GetComponent("Text")
    self.SkinName = self.rc:GetObject("SkinName"):GetComponent("Text")
    self.CharacterName = self.rc:GetObject("CharacterName"):GetComponent("Text")
    self.SkinIsLive = self.rc:GetObject("SkinIsLive")
    self.SkinIsSpecialVioce = self.rc:GetObject("SkinIsSpecialVioce")
    self.skinTicketImage = self.rc:GetObject("SkinTicketImage"):GetComponent("Image")

    self.paintRoot = self.rc:GetObject("PicRoot").transform
    self.homeCard = self.rc:GetObject("homeCard"):GetComponent("Image")
    self.spinePic = self.rc:GetObject("spinePic")
    self.cardBg = self.rc:GetObject("SkinImage"):GetComponent("Image")
    self.defBgSprite =  self.cardBg:GetComponent("Image").sprite
    self.EffectImage = self.rc:GetObject("EffectImage")
    

    UIUtil.AddBtnEventNoBug(self.SkinBuybutton,function()this.OnBuy(self)end)

    ---------------------------------

    self.titleList = {}
    self.generalTitleList = {}
    self.giftPackageList = {}

    UIPublic.SetBackButton(
        self.back_btn,
        UIWindowNames.UIAllShop,
        421
    )
    
    self.shopComponent = Game.Scene.Player:GetComponent("ShopComponent") 
    self.starLightRebateComponent = Game.Scene.Player:GetComponent("StarLightRebateComponent")

    self.uiDrawing = UIDrawing.New(self.paintRoot, self.homeCard, self.spinePic, SoundType.Main, UIWindowNames.UIHome, self.lines)
    
end

function this:OnEnable()
    base.OnEnable(self)
    --self.uiDrawing:BackgroundSetting(self.cardBg, self.EffectImage, self.defBgSprite)

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
    self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
    self.comTopView:InitComTop(self, self:GetName())

    if self.model.JumpInfo ~= nil then
        currentSelectTitle = self.model.JumpInfo.ShopTitleType
        if currentSelectTitle == ShopTitleType.General then
            currentSelectGeneralShopType = self.model.JumpInfo.GeneralShopType
        end
    end
    self:OnRefresh()

    self.giftPackageDetail.gameObject:SetActive(false)
end

function this.OnRefresh(self)
    self.player = Game.Scene.Player
    self.objectList = {}
    this.InitTitle(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_PLAYER_INFO_CHG,this.InitSkinShopContent)
    -- self:AddUIListener(UIMessageNames.ON_DAY_PURCHASE_INFO_CHG,this.OnRefresh)
    -- self:AddUIListener(UIMessageNames.ON_WEEK_PURCHASE_INFO_CHG,this.OnRefresh)
    -- self:AddUIListener(UIMessageNames.ON_MONTH_PURCHASE_INFO_CHG,this.OnRefresh)
    self:AddUIListener(UIMessageNames.ON_ITEM_INFO_CHG,this.OnRefresh)
    --self:AddUIListener(UIMessageNames.ON_EQUIP_INFO_CHG,this.OnRefresh)
    self:AddUIListener(UIMessageNames.ON_CARD_INFO_CHG,this.InitSkinShopContent)
    self:AddUIListener(UIMessageNames.ON_MONTH_CARD_INFO_CHG,this.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_PLAYER_INFO_CHG)
    -- self:RemoveUIListener(UIMessageNames.ON_DAY_PURCHASE_INFO_CHG)
    -- self:RemoveUIListener(UIMessageNames.ON_WEEK_PURCHASE_INFO_CHG)
    -- self:RemoveUIListener(UIMessageNames.ON_MONTH_PURCHASE_INFO_CHG)
    self:RemoveUIListener(UIMessageNames.ON_ITEM_INFO_CHG)
    --self:RemoveUIListener(UIMessageNames.ON_EQUIP_INFO_CHG)
    self:RemoveUIListener(UIMessageNames.ON_CARD_INFO_CHG)
    self:RemoveUIListener(UIMessageNames.ON_MONTH_CARD_INFO_CHG)
end

function this.OnViewTop(self)
    -- UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
    -- self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
    -- self.comTopView:InitComTop(self, self:GetName())
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    
end

function this.OnDisable(self)
    base.OnDisable(self)
    self.objectList = nil
    self.scroll:Dispose()
    self.lastScrollPos = nil
    --self.cardBg.sprite = DeActiveSprite
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
    if self.model.data ~= nil and  self.model.data.windowNames ~= nil then
        for k,v in pairs(self.model.data.windowNames) do
            UIManager:GetInstance():OpenWindow(v)
        end
    end
    self.uiDrawing:Disable()
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this