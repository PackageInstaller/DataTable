---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2024/1/20 21:12
---

---@class UIUseItemView:UIBaseView
local UIUseItemView = BaseClass("UIUseItemView",UIBaseView)
local base = UIBaseView
local this = UIUseItemView

local MaxNumber = 0
local currentSelectCount = 0
local currentPower = 0


function this.PlusButton(self)

    if currentSelectCount +1 <= MaxNumber then
        currentSelectCount = currentSelectCount + 1
    else
        if self.model.data.type == UseItemType.Power then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2120))
            UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipAddPower)
            self.ctrl:CloseSelf()
            return
        else
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
        end
    end

    self.currentNumberText.text = currentSelectCount

    if self.model.data.type == UseItemType.Power then
        self.powerText.text = string.gsub(LangUtil.GetSysLang(2153), "XX", currentSelectCount * self.model.data.costPower .. "/" .. currentPower)
    end
end

function this.MinusButton(self)
    if currentSelectCount -1 >= 0 then
        currentSelectCount = currentSelectCount - 1
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1065))
    end

    self.currentNumberText.text = currentSelectCount

    if self.model.data.type == UseItemType.Power then
        self.powerText.text = string.gsub(LangUtil.GetSysLang(2153), "XX", currentSelectCount * self.model.data.costPower .. "/" .. currentPower)
    end
end

function this.MaxButton(self)
    currentSelectCount = MaxNumber
    self.currentNumberText.text = currentSelectCount

    if self.model.data.type == UseItemType.Power and MaxNumber == 0 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2120))
        UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipAddPower)
        self.ctrl:CloseSelf()
        return
    end

    if self.model.data.type == UseItemType.Power then
        self.powerText.text = string.gsub(LangUtil.GetSysLang(2153), "XX", currentSelectCount * self.model.data.costPower .. "/" .. currentPower)
    end
end

function this.MinButton(self)
    currentSelectCount =0
    self.currentNumberText.text = currentSelectCount

    if self.model.data.type == UseItemType.Power then
        self.powerText.text = string.gsub(LangUtil.GetSysLang(2153), "XX", currentSelectCount * self.model.data.costPower .. "/" .. currentPower)
    end
end

function this:OnLangCreate()
    self.descriptionText = LangUtil.BindText(self.descriptionText)
    self.currentNumberText = LangUtil.BindText(self.currentNumberText)

    LangUtil.GetSpriteLang(426, function(Sprite) self.confirmButton.transform:Find("GameObject"):GetComponent("Image").sprite = Sprite  end) -- 确认
    LangUtil.GetSpriteLang(507, function(Sprite) self.cancelButton.transform:Find("CancelText"):GetComponent("Image").sprite = Sprite  end) -- 取消

end

function this:OnCreate()
    base.OnCreate(self)
    self.back_btn = self.rc:GetObject("Mask")
    self.maxItemNumber = self.rc:GetObject("MaxItemNumber"):GetComponent("Text")
    self.currentNumberText = self.rc:GetObject("NumberText")
    self.descriptionText = self.rc:GetObject("DescriptionText")
    self.titleText = self.rc:GetObject("TitleText"):GetComponent("Text")
    self.plusButton = self.rc:GetObject("PlusButton")
    self.minusButton = self.rc:GetObject("MinusButton")
    self.maxButton = self.rc:GetObject("MaxButton")
    self.minButton = self.rc:GetObject("MinButton")
    self.confirmButton = self.rc:GetObject("ConfirmButton")
    self.cancelButton = self.rc:GetObject("CancelButton")
    self.itemBg = self.rc:GetObject("ItemBg"):GetComponent("Image")
    self.avatar = self.rc:GetObject("Icon"):GetComponent("Image")
    self.Num = self.rc:GetObject("Num"):GetComponent("Text")
    self.itemPrefab = self.rc:GetObject("ItemPrefab")
    --self.itemClass = UIItemClass(nil, self.itemPrefab)
    self.powerObj = self.rc:GetObject("Power")
    self.powerText = self.rc:GetObject("PowerText"):GetComponent("Text")
    self.Frame = self.rc:GetObject("Frame"):GetComponent("Image")

    UIUtil.AddBtnEvent(self.plusButton,function()this.PlusButton(self)end)
    UIUtil.AddBtnEvent(self.minusButton,function()this.MinusButton(self)end)
    UIUtil.AddBtnEvent(self.maxButton,function()this.MaxButton(self)end)
    UIUtil.AddBtnEvent(self.minButton,function()this.MinButton(self)end)

    -- local func = function()
    --     self.ctrl:SendBuyRequest(self.model.data.Id, currentSelectCount, self.model.data.StoreType)
    -- end

    UIUtil.AddBtnEvent(self.back_btn,function()self.ctrl:CloseSelf()end,"Back")
    UIUtil.AddBtnEvent(self.confirmButton,function()
        if currentSelectCount <= 0 then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(1065))
            return
        end
        if self.model.data.type == UseItemType.Shop then
            -- if self.model.data.PriceType ~= nil and self.model.data.PriceType == tonumber(Z_Misc["FREE_DIAMOND_ID"].Value[1])  then
            --     local allFreePrice = currentSelectCount * tonumber(self.model.data.TotalPrice) 

                
            --     if UIPublic.GetItemAmount(self.model.data.PriceType) < allFreePrice then
            --         local tipData = {}
            --         tipData.message = string.gsub(LangUtil.GetSysLang(2122), "XX", 
            --         currentSelectCount * tonumber(self.model.data.TotalPrice) - UIPublic.GetItemAmount(Z_Misc["FREE_DIAMOND_ID"].Value[1]))
            --         tipData.callBack = function()
            --             func()
            --         end
                
            --         UIUtil.ToolTipFirstStarLight(tipData)
            --     else
            --         func() 
            --     end
            -- else
            --     self.ctrl:SendBuyRequest(self.model.data.Id, currentSelectCount, self.model.data.StoreType) 
            -- end

            self.ctrl:SendBuyRequest(self.model.data.Id, currentSelectCount, self.model.data.StoreType) 
            
        elseif self.model.data.type == UseItemType.Power then
            if (currentSelectCount * self.model.data.costPower) > currentPower then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1022))
                UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipAddPower)
                self.ctrl:CloseSelf()
                return
            end
            self.ctrl:SendBuyLevelsweepRequest(self.model.data.levelType, self.model.data.levelId, currentSelectCount)
        elseif self.model.data.type == UseItemType.Bag then

            local zItem = Z_Item[self.model.data.Id]
            if zItem.UseType == ItemUseType.ItemUseTypeDrop then
                local UseParams = zItem.UseParams
                if UseParams ~= nil and UseParams[1] ~= nil then
                    local dropId = UseParams[1]
                    local zDrop = Z_Drop[dropId]
                    for index, value in ipairs(zDrop) do
                        if value.RewardType == RewardType.RewardTypeFightSoul then
                            if UIPublic.CheckOutOfLimit(RewardType.RewardTypeFightSoul, currentSelectCount) then
                                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1375))
                                return
                            end
                        elseif value.RewardType == RewardType.RewardTypeEquipment then
                            if UIPublic.CheckOutOfLimit(RewardType.RewardTypeEquipment, currentSelectCount) then
                                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1376))
                                return
                            end
                        end
                    end
                end
            end


            self.ctrl:SendUseItem(self.model.data.Id, currentSelectCount)
        end
        
        self.ctrl:CloseSelf()
    end)
    UIUtil.AddBtnEvent(self.cancelButton,function()self.ctrl:CloseSelf()end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self:OnRefresh()
end

function this:OnRefresh()
    local canBuyMax = 0 --math.floor(UIPublic.GetItemAmount(self.model.data.PriceType) / self.model.data.TotalPrice)

    currentSelectCount = 0

    if self.model.data.type == UseItemType.Shop then
        self.itemPrefab:SetActive(true)
        self.powerObj:SetActive(false)
        self.descriptionText.gameObject:SetActive(true)
        canBuyMax = math.floor(UIPublic.GetItemAmount(self.model.data.PriceType) / self.model.data.TotalPrice)
        if self.model.data.PriceType ~= nil and self.model.data.PriceType == tonumber(Z_Misc["FREE_DIAMOND_ID"].Value[1]) then
            local maxCount = UIPublic.GetItemAmount(self.model.data.PriceType) 
            + UIPublic.GetItemAmount(tonumber(Z_Misc["DIAMOND_ID"].Value[1]))
            canBuyMax = math.floor(maxCount / self.model.data.TotalPrice)
        end
        if self.model.data.QuotaNum ~= 0 then
            MaxNumber = self.model.data.QuotaNum - self.model.data.alreadyBuyCount
            if MaxNumber > canBuyMax then
                MaxNumber = canBuyMax
            end
        else
            MaxNumber = canBuyMax
        end

        if MaxNumber > 0 then
            currentSelectCount = 1
        end

        local rewardInfo = Z_Reward[self.model.data.RewardId]

        if rewardInfo == nil then
            print("Z_Reward表中,RewardId" .. self.model.data.RewardId .. " 不存在,当前StoreId为" .. self.model.data.Id)
            return
        end

        self.currentNumberText.text = currentSelectCount
        local data = UIPublic.GetRewardDataNew(rewardInfo[1].Type, rewardInfo[1].ObjId, 1)
        self.descriptionText.text = data.desc
        self.titleText.text = data.name
        self.Num.text = self.model.data.Amount
        UIPublic.InitItemIconNew(self.avatar, self.itemBg, rewardInfo[1].Type, rewardInfo[1].ObjId, rewardInfo[1].Count, true, false, self.Frame)
        UIUtil.AddBtnEvent(self.itemBg.gameObject,function(go)
            local showData = {}
            local showType = ShowType.Item
            if rewardInfo[1].Type == RewardType.RewardTypeEquipment then
                showType = ShowType.Equip
            elseif rewardInfo[1].Type == RewardType.RewardTypeCharacter then
                showType = ShowType.Card
            elseif rewardInfo[1].Type == RewardType.RewardTypeFightSoul then
                showType = ShowType.FightSoul
            end
            showData.showType = showType
            showData.tempId = rewardInfo[1].ObjId
            showData.count = rewardInfo[1].Count
            UIUtil.OpenThingsDetailWindow(showData)
        end)

    elseif self.model.data.type == UseItemType.Bag then
        self.itemPrefab:SetActive(true)
        self.powerObj:SetActive(false)
        self.descriptionText.gameObject:SetActive(true)
        MaxNumber = self.model.data.Amount
        self.Num.text = self.model.data.Amount

        currentSelectCount = 1

        self.descriptionText.text = Z_Item[self.model.data.Id].Desc
        self.currentNumberText.text = currentSelectCount

        UIPublic.InitItemIconNew(self.avatar, self.itemBg, RewardType.RewardTypeItem, self.model.data.Id, self.model.data.Amount, true, false, self.Frame)
        self.titleText.text = self.model.data.name
        --self.itemClass.SetData(self.model.data.Id, self.model.data.Amount)
    elseif self.model.data.type == UseItemType.Power then
        self.itemPrefab:SetActive(false)
        self.powerObj:SetActive(true)
        self.descriptionText.gameObject:SetActive(false)

        currentPower = UIPublic.GetItemAmount( Z_Misc["POWER_ID"].Value[1])
        local levelCostPower = self.model.data.costPower
        MaxNumber = math.floor(currentPower / levelCostPower)

        currentSelectCount = 1
        self.currentNumberText.text = currentSelectCount
        self.powerText.text = string.gsub(LangUtil.GetSysLang(2153), "XX", currentSelectCount * levelCostPower .. "/" .. currentPower)
        self.titleText.text = LangUtil.GetSysLang(2121)
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
   
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
   
end

function this.OnDisable(self)
    base.OnDisable(self)
 

end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this
