---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:51
---

local FriendlyLogic = {}
local this = FriendlyLogic
local isPlay = false

local value
local color1 = "<color=#ffffff>"
local color2 = "<color=#f12a2a>"

local currentSelectItemId = 0
local currentId = 0
local giftPrefeb = "FriendlyGift"

local function OnClickFriendlyItemButton(self)
    --CharacterPackIntimacyReq
    local card = self.cur_card
    
    if Game.Scene.Player:GetComponent("ItemComponent"):GetItem(currentSelectItemId) == nil then
        return
    end

    local sendTable = {}
    sendTable.id = card.Id
    sendTable.items = {
        {
            uid = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(currentSelectItemId).Id,
            count = 1
        }
    }

    coroutine.start(function()
        PublicRequest.SendRequest(
            PROTOCOL.CharacterPackIntimacyReq,
            sendTable,
            function(info, errorCode)
                if errorCode == 0 then
                    Game.Scene:GetComponent("SoundComponent"):Stop()
                    local soundId = 1

                    if card.CloseDegree < 25 then
                        soundId = 1
                    elseif card.CloseDegree >= 25 and card.CloseDegree < 50 then
                        soundId = 2
                    elseif card.CloseDegree >= 50 and card.CloseDegree < 75 then
                        soundId = 3
                    elseif card.CloseDegree >= 75 then
                        soundId = 4
                    end

                    Game.Scene:GetComponent("SoundComponent"):PlayDegreeSound(card, soundId)

                    self.scroll:RefreshData(self.itemList)
                end
            end
        )
    end)
end

local function InitFriendlyPanel(self,card,isRefresh)
    local zCard = Z_Card[card.TemplateId]
    --local valueTxt = self.barSlider.transform:Find("Text"):GetComponent("Text")

    --LangUtil.BindText(self.fr_jh_btn.transform:Find("Text")).text = card.CloseDegree == 999 and LangUtil.GetSysLang(235) or LangUtil.GetSysLang(234)
    --UIPublic.InitButton(self.fr_jh_btn,card.CloseDegree == 100)
    --UIPublic.InitButton(self.fr_set_room_btn,card.CloseDegree == 999)

    local friendlyDescriptionList = {}
    for i = 0, self.friendlyDescriptionList.childCount - 1 do
        friendlyDescriptionList[i+1] = self.friendlyDescriptionList:GetChild(i)
    end

    local currentStage = self.cur_card.Intimacy // 20

    self.scheduleText.text = self.cur_card.Intimacy .. "%"
    for index, v in table.pairsByKeys(friendlyDescriptionList) do
        local currentSchedule = v:Find("CurrentSchedule"):GetComponent("Image")
        local alreadyGetSchedule = v:Find("AlreadyGetSchedule"):GetComponent("Image")
        local descriptionText = v:Find("DescriptionText"):GetComponent("Text")
        

        descriptionText.text = Z_CharacterIntimacy[self.cur_card.TemplateId][index].Description

        if currentStage + 1 == index then
            alreadyGetSchedule.gameObject:SetActive(false)
            currentSchedule.gameObject:SetActive(true)
        elseif currentStage + 1 > index then
            alreadyGetSchedule.gameObject:SetActive(true)
            currentSchedule.gameObject:SetActive(false)
        else
            alreadyGetSchedule.gameObject:SetActive(false)
            currentSchedule.gameObject:SetActive(false)
        end
    end

    self.fr_GiveGiftsObj:SetActive(false)
    self.fr_MarryObj:SetActive(false)
    self.fr_SetMainWifeObj:SetActive(false)
    self.fr_MainWifeObj:SetActive(false)

    if card.Intimacy >= 100 then
        if self.cur_card.marry then
            local player =  Game.Scene:GetComponent("PlayerComponent").Player
            if player.MainWife == self.cur_card.Id then
                self.fr_MainWifeObj:SetActive(true)
            else
                self.fr_SetMainWifeObj:SetActive(true)
            end
        else
            self.fr_MarryObj:SetActive(true)
        end
    else
        self.fr_GiveGiftsObj:SetActive(true)
    end
end

function this.OnJhButton(self)
    
    local item = table.first(self.player:GetComponent("ItemComponent").Items,function(v) return v.TemplateId == 3000  end)
    if item == nil or item.Amount == 0 then UIUtil.ToolTipFourth(Z_Item[3000].Name..LangUtil.GetSysLang(3074))return end 

    local card = self.cur_card;
    local num = 999

    if card.CloseDegree ~= 100 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(625)..LangUtil.GetSysLang(3074))--"亲密度不足"
        return
    elseif card.CloseDegree == 999 then
        return
    end
    local send_data = {}
    send_data.CardId = card.Id
    send_data.ExpendGoldCoin = 0
    send_data.CloseDegree = num
    send_data.ExpendMaterialList = {}

    -- 结婚解锁
    local skinConfig = table.first(Z_Skin, function (v) return v.BelongCard == card.Id and v.MarryUnlock == 1 end)
    if skinConfig then
        send_data.SkinTemplateId = skinConfig.Id
    end

    local expendItem = {}
    expendItem.Amount = 1
    expendItem.MaterialId = item.Id
    expendItem.Type = 0
    table.insert(send_data.ExpendMaterialList,expendItem)
    --local tipData = {}
    --tipData.title = LangUtil.GetSysLang(9)--"提示"
    --tipData.message = LangUtil.GetSysLang(797)
    --tipData.callBack = function()
    --    self.ctrl:SendMarriedRequest(send_data);
    --end
    --UIUtil.ToolTipFirst(tipData)

    local tipData = {}
    tipData.title = LangUtil.GetSysLang(9)
    tipData.type = 5
    tipData.startType =1
    tipData.message =  string.gsub( LangUtil.GetSysLang(797),"XX", Z_Item[item.TemplateId].Name)
    tipData.Amount = item.Amount
    tipData.TemplateId = 3000
    --tipData.ExpenseNum = 1 --需要消耗一张
    --tipData.Amount = item.Amount
    tipData.But2 = function()
        self.ctrl:SendMarriedRequest(send_data)
    end
    UIUtil.ToolTipFirstPlus(tipData)
end

local is1Play = false
local is2Play = false

local function PlayEffect1(self)  --亲密度特定时播放
    --if is1Play == true then return end
    --is1Play = true
    self.effect1:SetActive(false)
    self.effect1:SetActive(true)
    --UIPublic.PlayEffect(self.effect1)
    --table.csenuObject(self.effect1.transform,function(v)
    --    local ani = v:GetComponent("Animation")
    --    if not IsNull(ani) then ani:Play() end 
    --end)

    --coroutine.start(function()
    --    coroutine.waitforseconds(3)
    --    self.effect1:SetActive(false)
    --    is1Play = false
    --end)
    
end

local function PlayEffect2(self)  --亲密度通常播放
    --if is2Play == true then return end 
    --is2Play = true
    self.effect2:SetActive(false)
    self.effect2:SetActive(true)
    --UIPublic.PlayEffect(self.effect2)
    --coroutine.start(function()
    --    coroutine.waitforseconds(3)
    --    self.effect2:SetActive(false)
    --    is2Play = false
    --end)

end

function this.Marry(self)
    local infos = {}

    local posX = self.paintRoot.localPosition.x
    local posY = self.paintRoot.localPosition.y
    
    local func = function()
        self.paintRoot.localPosition = Vector3.New(0,0,0)
    end

    local reqTable = {
        id = self.cur_card.Id
    }

    coroutine.start(function()
        PublicRequest.SendRequest(
            PROTOCOL.CharacterPackMarryReq,
            reqTable,
            function(info, errorCode)
                if errorCode == 0 then
                    local sendData = {
                        id = self.cur_card.Id,
                        skin = Z_Character[self.cur_card.Id].MarryUnlockSkin
                    }

                    if Z_Character[self.cur_card.Id].MarryUnlockSkin ~= 0 then
                        PublicRequest.SendRequest(
                        PROTOCOL.CharacterPackSetSkinReq,
                        sendData,
                        function(info, errorCode)
                            if errorCode == 0 then 
                                UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
                                UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetMarried,{
                                    card = self.cur_card, 
                                    marryInfo = infos, 
                                    previousSkinId = self.cur_card.SkinId, 
                                    callback = func,
                                    posX = posX,
                                    posY = posY
                                })
                            end
                        end)
                    else
                        UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetMarried,{
                            card = self.cur_card, 
                            marryInfo = infos, 
                            previousSkinId = self.cur_card.SkinId, 
                            callback = func,
                            posX = posX,
                            posY = posY
                        })
                    end
                    -- PublicRequest.SendRequest(
                    --     PROTOCOL.CharacterPackSetSkinReq,
                    --     sendData,
                    --     function(info, errorCode)
                    --         if errorCode == 0 then 
                    --             UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
                    --             UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetMarried,{
                    --                 card = self.cur_card, 
                    --                 marryInfo = infos, 
                    --                 previousSkinId = self.cur_card.SkinId, 
                    --                 callback = func,
                    --                 posX = posX,
                    --                 posY = posY
                    --             })
                    --         end
                    --     end)
                end
            end
        )
    end)
end

function this.SetMainWifeButton(self)
    local reqTable = {
        id = self.cur_card.Id
    }
    coroutine.start(function()
        PublicRequest.SendRequest(
            PROTOCOL.CharacterPackSetMainWifeReq,
            reqTable,
            function(info, errorCode)
                if errorCode == 0 then 
                    self.fr_MainWifeObj:SetActive(true)
                    self.fr_SetMainWifeObj:SetActive(false)
                end
            end
        )
    end)
end

function this.InitGift(self)
    self.scroll:Clear()
    self.itemList = {}

    for i = 1, 10 do
        table.insert(self.itemList, Z_Item[40000 + i])
    end

    self.scroll:ScrollInit(self.itemList, self.itemScrollView, giftPrefeb, function (arg)
        self.objectList[arg.data.Id] = arg.go
        local gameObject = self.objectList[arg.data.Id]
        local transform = gameObject.transform

        this.InitFriendlyItem(self, transform, arg.data)
    end)
end

function this.InitFriendlyItem(self, transform, data)
    local zItem = Z_Item[data.Id]
    if zItem == nil then
        return
    end
    local zCardCloseDegree = zItem.UseParams[1]
    if zCardCloseDegree == nil then
        return
    end
    local avatar = transform:Find("Item/Value"):GetComponent("Image")
    local bg = transform:Find("Item/Bg"):GetComponent("Image")
    local name = transform:Find("NameTextRoot/NameTxt"):GetComponent("Text")
    local holdTxt = transform:Find("Item/Num"):GetComponent("Text")
    local btn = transform:Find("Item/Value").gameObject
    local desc = transform:Find("ValueTxt"):GetComponent("Text")
    local selectImage = transform:Find("SelectImage").gameObject
    UIUtil.ScrollText(name.transform)
    UIUtil.SetSprite(avatar, AtlasConfig.Item,GetItemIcon(zItem),true)
    UIUtil.SetSprite(bg, AtlasConfig.ItemBg,zItem.IconBg..".png",true)
    name.text = zItem.Name
    holdTxt.text = UIPublic.GetItemAmount(data.Id)
    desc.text =  "+"..zCardCloseDegree.."%"
    selectImage:SetActive(currentSelectItemId == data.Id)
    UIUtil.AddBtnEvent(btn,function(go)
        currentSelectItemId = data.Id
        UIPublic.InitButton(self.fr_jh_btn, UIPublic.GetItemAmount(data.Id) > 0)
        self.scroll:RefreshData(self.itemList)
    end)
end

function this.Init(self,card)
    isPlay = false
    self.fr_audio:Stop()
    self.effect1:SetActive(false)
    self.effect2:SetActive(false)
    self.fr_paint.sprite = DeActiveSprite
    self.fr_audio.volume = ClientData:GetInstance():GetVolume("SoundVolume")
    if self.fr_init == false then
        InitFriendlyPanel(self,card)
        self.fr_init = true
    else
        InitFriendlyPanel(self,card) 
    end

    self.heartSlider.value = card.Intimacy / 100

    if card.Intimacy / 100 < 1 and currentSelectItemId == 0 then
        UIPublic.InitButton(self.fr_jh_btn, false)
    else
        UIPublic.InitButton(self.fr_jh_btn, true)
    end

    local avatar = self.fr_RingPrefab.transform:Find("Icon"):GetComponent("Image")
    local itemBg = self.fr_RingPrefab.transform:Find("ItemBg"):GetComponent("Image")
    UIPublic.InitItemIconNew(avatar, itemBg, RewardType.RewardTypeItem, tonumber( Z_Misc["RING_ID"].Value[1]))

    self.fr_RingPrefab.transform:Find("Num"):GetComponent("Text").text = UIPublic.GetItemAmount(tonumber( Z_Misc["RING_ID"].Value[1])) .. "/1"

    self.scroll:RefreshData(self.itemList)
    -- self.fr_GiveGiftsObj:SetActive(false)
    -- self.fr_MarryObj:SetActive(false)
    -- self.fr_SetMainWifeObj:SetActive(false)
    -- self.fr_MainWifeObj:SetActive(false)

    -- if card.Intimacy >= 100 then
    --     if self.cur_card.marry then
    --         local player =  Game.Scene:GetComponent("PlayerComponent").Player
    --         if player.MainWife == self.cur_card.Id then
    --             self.fr_MainWifeObj:SetActive(true)
    --         else
    --             self.fr_SetMainWifeObj:SetActive(true)
    --         end
    --     else
    --         self.fr_MarryObj:SetActive(true)
    --     end
    -- else
    --     self.fr_GiveGiftsObj:SetActive(true)
    -- end
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    local content = langRc:GetObject("Content").transform
    local setRoomButton = langRc:GetObject("SetRoomButton").transform

    -- for i = 0,content.childCount -1  do
    --     local itemId = 40001 + i
    --     local zItem = Z_Item[itemId]
    --     local child = content:GetChild(i)
    --     local itemNum = child:Find("Item/Num")
    --     local nameTxt = child:Find("NameTextRoot/NameTxt")
    --     local valueTxt = child:Find("ValueTxt")
    --     --local btnTxt = child:Find("Btn/Text")
    --     LangUtil.BindText(itemNum,FontType.All_Number)
    --     LangUtil.BindText(nameTxt).text = zItem.Name
    --     LangUtil.BindText(valueTxt, FontType.All_Number)
    --     --LangUtil.BindText(btnTxt).text = LangUtil.GetSysLang(236)
    -- end

    -- LangUtil.BindText(setRoomButton:GetChild(0))
    
    --LangUtil.BindText(langRc:GetObject("Title1Text")).text = LangUtil.GetSysLang(217)
    --LangUtil.BindText(langRc:GetObject("Text"),FontType.All_Number)
    LangUtil.BindText(langRc:GetObject("HintText")).text = LangUtil.GetSysLang(3117)
    self.fr_needTxt = LangUtil.BindText(langRc:GetObject("NeedText"))
    self.fr_needTxt.text = ""
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.sk_unit = nil
    self.fr_init = false
    self.fr_audio = panel:GetComponent("AudioSource")
    self.fr_set_room_btn = rc:GetObject("SetRoomButton")
    self.fr_jh_btn = rc:GetObject("GetMarriedButton")
    self.heartSlider =  rc:GetObject("HertSlider"):GetComponent("Slider")
    --self.barSlider = rc:GetObject("BarSlider"):GetComponent("Slider")
    self.friendlyDescriptionList =  rc:GetObject("FriendlyDescriptionList").transform
    self.scheduleText = rc:GetObject("ScheduleText"):GetComponent("Text")
    
    self.effect1 = rc:GetObject("Effect1")
    self.effect2 = rc:GetObject("Effect2")

    self.effect1:SetActive(false)
    self.effect2:SetActive(false)

    self.fr_gif_root = rc:GetObject("GiftList").transform
    self.fr_paint = rc:GetObject("Paint"):GetComponent("Image")
    self.giftList = {}

    self.paintRoot = rc:GetObject("PaintRoot").transform


    self.itemScrollView = rc:GetObject("ScrolllView").transform
    self.objectList = {}

    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(4)
    this.InitGift(self)

    --self.uiDrawing = UIDrawing.New(rc:GetObject("PaintRoot"), self.fr_paint, nil, SoundType.Gift, nil, rc:GetObject("Lines"))

    --self.sk_ssunit = rc:GetObject("SsUnit").transform:Find("Root")
    
    --local func = function(v) self:OnClickCardButton(v)end
    --UIUtil.AddBtnEvent(self.fr_jh_btn,function(go) FriendlyLogic.OnJhButton(self) end)
    --UIUtil.AddBtnEvent(self.fr_set_room_btn,function(go)  self.ctrl:SendSetRoomRequest(self) end)
    --EventTriggerListener.Get(self.fr_paint.transform:Find("Image").gameObject).onLuaClick = function(go) 
    --    UIUtil.OpenCardList({callBack=func}) 
    --end

    ----------------------------
    self.fr_GiveGiftsObj = rc:GetObject("GiveGiftsObj")
    self.fr_MarryObj = rc:GetObject("MarryObj")
    self.fr_SetMainWifeObj = rc:GetObject("SetMainWifeObj")
    self.fr_MainWifeObj = rc:GetObject("MainWifeObj")

    self.fr_RingPrefab = rc:GetObject("RingPrefab")
    self.fr_MarryButton = rc:GetObject("MarryButton")
    self.fr_SetMainWifeButton = rc:GetObject("SetMainWifeButton")

    -------------------------
    
    UIUtil.AddBtnEvent(self.fr_jh_btn,function(go) OnClickFriendlyItemButton(self) end)

    UIUtil.AddBtnEvent(self.fr_MarryButton,function(go) 
        this.Marry(self)
    end)

    UIUtil.AddBtnEvent(self.fr_SetMainWifeButton,function(go) 
        this.SetMainWifeButton(self)
    end)
end

function this.OnCardInfoChg(self,info)
    local card = self.cur_card
    InitFriendlyPanel(self,card,true)
    if self.fr_init and card ~= nil then
        if info.cardInfoChgType == CardInfoChgType.Level then

        elseif info.cardInfoChgType == CardInfoChgType.Star then

        elseif info.cardInfoChgType == CardInfoChgType.JadePearl then

        elseif info.cardInfoChgType == CardInfoChgType.FightSoul then

        elseif info.cardInfoChgType == CardInfoChgType.Equip then

        elseif info.cardInfoChgType == CardInfoChgType.Skin then
            InitFriendlyPanel(self,card)
        elseif info.cardInfoChgType == CardInfoChgType.Add then
            isPlay = false
            self.fr_audio:Stop()
            self.effect1:SetActive(false)
            self.effect2:SetActive(false)
            InitFriendlyPanel(self,card,true)

            self.fr_audio:Play()

            


            -- if self.cur_card.Intimacy ~= nil then
            --     local closeDegree = self.cur_card.Intimacy
            --     if self.fr_audio.isPlaying == false and closeDegree ~= 100 then
            --         self.fr_audio:Play()
            --         print("--播放亲密度！！！！！！！！！！！！！！！！！")
            --     end
            --     if closeDegree< 50 and closeDegree >= 25 then
            --         PlayEffect1(self)
            --     elseif closeDegree< 75 and closeDegree >= 50 then
            --         PlayEffect1(self)
            --     elseif closeDegree< 100 and closeDegree >= 75 then
            --         PlayEffect1(self)
            --     elseif closeDegree >= 100 then
            --     else
            --         PlayEffect2(self)
            --     end
            -- end

            --self.cur_card.Intimacy


            -- if self.cur_card.Intimacy ~= nil then
            --     local closeDegree = self.cur_card.Intimacy
            --     if self.fr_audio.isPlaying == false and closeDegree ~= 100 then
            --         self.fr_audio:Play()
            --         print("--播放亲密度！！！！！！！！！！！！！！！！！")
            --     end
            --     if closeDegree< 50 and closeDegree >= 25 then
            --         PlayEffect1(self)
            --     elseif closeDegree< 75 and closeDegree >= 50 then
            --         PlayEffect1(self)
            --     elseif closeDegree< 100 and closeDegree >= 75 then
            --         PlayEffect1(self)
            --     elseif closeDegree >= 100 then
            --     else
            --         PlayEffect2(self)
            --     end
            -- end

            -- if info.closeDegree ~= nil and info.oriCloseDegree ~= nil then
            --     local closeDegree = info.closeDegree
            --     local oriCloseDegree = info.oriCloseDegree
            --     if self.fr_audio.isPlaying == false and closeDegree ~= 100 then
            --         self.fr_audio:Play()
            --         print("--播放亲密度！！！！！！！！！！！！！！！！！")
            --     end
            --     if oriCloseDegree< 25 and closeDegree >= 25 then
            --         PlayEffect1(self)
            --     elseif oriCloseDegree< 50 and closeDegree >= 50 then
            --         PlayEffect1(self)
            --     elseif oriCloseDegree< 75 and closeDegree >= 75 then
            --         PlayEffect1(self)
            --     elseif closeDegree >= 100 then
            --     else
            --         PlayEffect2(self)
            --     end
            -- end
        elseif info.cardInfoChgType == CardInfoChgType.Lock then

        end
    end
end

function this.OnDisable(self)
    self.uiDrawing:Disable()
    isPlay = false
    self.fr_audio:Stop()
    self.effect1:SetActive(false)
    self.effect2:SetActive(false)
    --self.scroll:Dispose()
end

function this.Close(self)
    Game.Scene:GetComponent("SoundComponent"):Stop()
    self.uiDrawing:LoadFace()
end

return this
