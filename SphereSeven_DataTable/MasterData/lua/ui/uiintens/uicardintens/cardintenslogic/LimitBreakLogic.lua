---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:51
---

local lsStr = "</color>"
local bfStr1 = "<color=#AAD2FF>"
local bfSrr2 = "<color=#F41F42>"

local LimitBreakLogic = {}
local this = LimitBreakLogic
local maxLimitLevel = 100

local function LimitBreakConditionIsEnough(self)
    local card = self.cur_card
    local max_level = card.LevelLimit;
    if max_level >= 100 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1048));--"已达上限 无法极限突破"
        return false
    elseif max_level < 80 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1049));--"等级上限不足 无法极限突破"
        return false
    elseif card.Level < max_level then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1050));--"等级不足 无法极限突破"
        return false
    elseif card.Star < 5 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1051));--"星级不足 无法极限突破"
        return false
    end
    return true;
end




function this.CardItemLimitBreak(self)

    if not LimitBreakConditionIsEnough(self,card) then return end
    
    if self.matterCard == nil then UIUtil.ToolTipFourth(LangUtil.GetSysLang(1052))return end --"未选择素材角色"
    
    if self.zlimit.ExpendGoldCoin > self.player.GoldCoin then UIUtil.ToolTipFourth(LangUtil.GetSysLang(1033))return end  --"金币不足"
    
    if self.zlimit.OtherItemNum > UIPublic.GetItemAmount(self.zlimit.OtherItem) then UIUtil.ToolTipFourth(LangUtil.GetSysLang(1053))return end --"材料不足"
    

    local send_data = {};
    send_data.CardId = self.cur_card.Id
    send_data.ExpendGoldCoin = self.zlimit.ExpendGoldCoin
    send_data.LevelLimit = self.zlimit.Id
    send_data.ExpendMaterialList = {};--传服务器
    send_data.ExpendMaterialList2 = {};--传给自己不传服务器
    local expendItem = {};
    expendItem.MaterialId = UIPublic.GetItem(self.zlimit.OtherItem).Id;
    expendItem.Type = 0;
    expendItem.Amount = self.zlimit.OtherItemNum
    table.insert(send_data.ExpendMaterialList2,expendItem);
    local expendCard = {};
    expendCard.MaterialId = self.matterCard.Id;
    expendCard.Type = 1;
    expendCard.Amount = 1;
    table.insert(send_data.ExpendMaterialList,expendCard);
    local tipData = {}
    tipData.title = LangUtil.GetSysLang(9)--"提示"
    tipData.message = string.gsub(LangUtil.GetSysLang(795),"XX",Z_Card[self.matterCard.TemplateId].Name .. "("..LangUtil.GetSysLang(167).. 
            self.matterCard.Star ..")".."、" ..Z_Item[self.zlimit.OtherItem].Name .. "x" ..self.zlimit.OtherItemNum .. "、" ..self.zlimit.ExpendGoldCoin .. Z_Currency[1].Name )
    tipData.callBack = function()
        self.ctrl:SendLimitBreakRequest(send_data);
    end
    UIUtil.ToolTipFirst(tipData)
end

local function OnClickLimitBreakItemCallBack(self,card) --点击显示角色窗口的角色触发事件
    if card == nil then
        self.matterCard = nil
        this.InitCardIndex(self)
        return false
    end
    if UIPublic.CardIsDestroy(card) then
        self.matterCard = card
        this.InitCardIndex(self)
    else
        return false
    end
    return true
end

local function RemoveMatterCard(self)
    self.matterCard = nil
    this.InitCardIndex(self)
end


local function GetMeetCards(self)
    return table.choose(self.player:GetComponent("CardComponent").Cards,function(k,v)
        if v.TemplateId == self.cur_card.TemplateId and v.Star >= self.zlimit.MinStar and v.Id ~= self.cur_card.Id then
            --if self.matterCard ~=nil and self.matterCard.Id == v.Id then return false end
            return true
        end
        return false
    end)
end

function this.OnClickIndexButton(self)
    local data_tab = {};
    data_tab.card_list = GetMeetCards(self)
    data_tab.matterCard = self.matterCard
    if table.count(GetMeetCards(self)) <= 0 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2061))
        return
    end 
    
    data_tab.callBack = function(card) OnClickLimitBreakItemCallBack(self,card)end
    --data_tab.cancelCallBack = function() RemoveMatterCard(self) end
    self.ctrl.OpenShowCardWindow(data_tab)
end


function this.OnClickCupButton(self)
    if not LimitBreakConditionIsEnough(self,card) then return end

    local item = UIPublic.GetItem(3018)
    local card = self.cur_card
    local zCard = Z_Card[card.TemplateId]
    local itemNeedNum = Z_CardRare[zCard.Rare].HolyCupNum
    if item == nil or item.Amount < itemNeedNum then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1056))--"红心圣杯数量不足"
        return
    end

    local func = function()
        local reqData = {}
        reqData["ExpendMaterialList"]={} --传服务器
        reqData["ExpendMaterialList2"]={{MaterialId = item.Id, Amount = itemNeedNum,Type = 0}} --服务器不需要知道
        reqData["ExpendGoldCoin"] = 0
        reqData["LevelLimit"] = card.LevelLimit + 5
        reqData["CardId"] = card.Id
        self.ctrl:SendLimitBreakRequest(reqData);
    end
    
    local tipData = {}
    tipData.title = LangUtil.GetSysLang(9)--"提示"
    tipData.message =string.gsub(LangUtil.GetSysLang(1058),"YY", itemNeedNum)--"确定消耗一个红心圣杯吗?"
    tipData.callBack = func
    
    UIUtil.ToolTipFirst(tipData)
    
end

local function OnClickLimitBreakButton(self)
    if self.selectType == 1 then
        this.CardItemLimitBreak(self)
    elseif self.selectType == 3 then
        this.OnClickCupButton(self)
    end
    
end

local function InitTop(self)
    local transform = self.lm_top.transform
    local expBar = transform:Find("ExpBar")
    local numerical = transform:Find("Numerical")
    local text1 = transform:Find("LevelBg/Text1"):GetComponent("Text")
    local text2 = transform:Find("LevelBg/Text2"):GetComponent("Text")
    local text3 = transform:Find("LevelBg/Text2/Text"):GetComponent("Text")
    local arrow = transform:Find("LevelBg/Arrow").gameObject
    local max = transform:Find("LevelBg/Max").gameObject
    
    UIPublic.InitExpArea(expBar,self.cur_card)
    UIPublic.InitNumerical(numerical,self.cur_card)

    text1.text = "<size=36>LV."..self.cur_card.Level.."</size>/"..self.cur_card.LevelLimit
    if self.cur_card.LevelLimit >= 80  and self.cur_card.LevelLimit < 100 then
        text2.gameObject:SetActive(true)
        max:SetActive(false)
        arrow:SetActive(true)
        text2.text = "LV."..self.cur_card.LevelLimit.."/"
        text3.text = self.cur_card.LevelLimit + 5
    elseif  self.cur_card.LevelLimit >= 100 then
        text2.gameObject:SetActive(false)
        max:SetActive(true)
        arrow:SetActive(false)
    elseif  self.cur_card.LevelLimit < 80 then
        text2.gameObject:SetActive(true)
        max:SetActive(false)
        arrow:SetActive(true)
        text2.text = "LV.".. 80 .."/"
        text3.text = "85"
    end

    if self.cur_card.LevelLimit == maxLimitLevel then
        UIPublic.InitButton(self.lm_btn,false,1,"Max")
    --elseif self.cur_card.Level < 80  then
    --    UIPublic.InitButton(self.lm_btn,false,1,LangUtil.GetSysLang(215))
    --elseif self.cur_card.LevelLimit > self.cur_card.Level  then
    --    UIPublic.InitButton(self.lm_btn,false,1,LangUtil.GetSysLang(215))
    else
        UIPublic.InitButton(self.lm_btn,true,1,LangUtil.GetSysLang(215))
    end
end

function this.InitCardIndex(self)
    local transform = self.lm_bot.transform:Find("MatterRoot/1/CardItem")
    local holdCardTxt = transform:Find("HoldText"):GetComponent("Text")
    local cardDesc = transform:Find("DescRoot/Desc"):GetComponent("Text")
    local card = transform:Find("Card")

    local meetCount = table.count(GetMeetCards(self))
    if self.cur_card.Level >= 100 then
        holdCardTxt.text = meetCount.."/0"
    --elseif self.cur_card.Level < 80 then
    --    holdCardTxt.text = meetCount.."/0"
    else
        local bfStr = (meetCount >= 1 and {bfStr1} or {bfSrr2})[1]
        holdCardTxt.text = bfStr..meetCount..lsStr.."/1"
    end
    

    cardDesc.text = Z_Card[self.cur_card.TemplateId].Name --.. "("..string.gsub(LangUtil.GetSysLang(584),"X",self.zlimit.MinStar) ..")"
    UIUtil.ScrollText(cardDesc)

    if self.matterCard == nil then
        card.gameObject:SetActive(false)
    else
        local zCard = Z_Card[self.matterCard.TemplateId]
        card.gameObject:SetActive(true)
        local avatar = card:Find("Mask/Avatar"):GetComponent("Image")
        UIUtil.SetCardSprite(avatar,zCard.Id,self.matterCard.SkinId,CardPictureType.Middle,true)
    end

end

local function InitBot(self)
    local transform = self.lm_bot.transform
    local holdWaterTxt = transform:Find("MatterRoot/1/Water/HoldText"):GetComponent("Text")
    local waterNameTxt = transform:Find("MatterRoot/1/Water/Name"):GetComponent("Text")
    local holdCupTxt = transform:Find("MatterRoot/3/HoldText"):GetComponent("Text")
    local needGoldTxt = self.UseGold.transform:Find("NeedGoldTxt"):GetComponent("Text")
    local cupNameTxt = transform:Find("MatterRoot/3/Name"):GetComponent("Text")
    
    
    local w_bfStr = (self.zlimit.OtherItemNum <= UIPublic.GetItemAmount(self.zlimit.OtherItem) and {bfStr1} or {bfSrr2} )[1]
   
    local zCard = Z_Card[self.cur_card.TemplateId]
    local itemNeedNum = Z_CardRare[zCard.Rare].HolyCupNum

    local c_bfStr = (UIPublic.GetItemAmount(3018) >= itemNeedNum and {bfStr1} or {bfSrr2} )[1]
    waterNameTxt.text = Z_Item[self.zlimit.OtherItem].Name
    cupNameTxt.text = Z_Item[3018].Name
    --if self.cur_card.LevelLimit < 80 then
    --    holdWaterTxt.text = UIPublic.GetItemAmount(self.zlimit.OtherItem).."/0"
    --    holdCupTxt.text =  UIPublic.GetItemAmount(3018) .. "/0"
    --    needGoldTxt.text = "<color=#FFFFFF>0</color>"
    if self.cur_card.LevelLimit >= 100 then
        holdWaterTxt.text =UIPublic.GetItemAmount(self.zlimit.OtherItem).."/0"
        holdCupTxt.text =  UIPublic.GetItemAmount(3018) .. "/0"
        needGoldTxt.text = "<color=#FFFFFF>0</color>"
    else
        holdWaterTxt.text = w_bfStr..UIPublic.GetItemAmount(self.zlimit.OtherItem)..lsStr.."/"..self.zlimit.OtherItemNum
        holdCupTxt.text =  c_bfStr .. UIPublic.GetItemAmount(3018) ..lsStr .. "/".. itemNeedNum
        local color = (Game.Scene.Player.GoldCoin >= self.zlimit.ExpendGoldCoin and {"<color=#FFFFFF>"} or {"<color=#F41F42>"})[1]
        needGoldTxt.text = color .. self.zlimit.ExpendGoldCoin .."</color>"
    end
    
    this.InitCardIndex(self)
    
end


function this.Init(self,card)
    self.matterCard = nil
    self.zlimit = Z_CardLimitBreak[card.LevelLimit + 5]
    if self.zlimit == nil then self.zlimit = Z_CardLimitBreak[maxLimitLevel] end
    if self.lm_init == false then
        InitTop(self)
        InitBot(self)
        self.lm_init = true
    else
        InitBot(self)
    end
end

local function SelectType(self, type)
    self.selectImage1:SetActive(type == 1)
    self.selectImage3:SetActive(type == 3)
    self.selectType = type
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    local levelRoot = langRc:GetObject("LevelBg").transform
    local useGoldRoot = langRc:GetObject("UseGold").transform
    local matterRoot = langRc:GetObject("MatterRoot").transform
    
    LangUtil.BindText(langRc:GetObject("IntensText")).text = LangUtil.GetSysLang(215)
    LangUtil.BindText(langRc:GetObject("Title1Text")).text = LangUtil.GetSysLang(215)
    LangUtil.BindText(langRc:GetObject("Title2Text")).text = LangUtil.GetSysLang(214)

    LangUtil.BindText(levelRoot:Find("Text1"),FontType.All_Number)
    LangUtil.BindText(levelRoot:Find("Text2"),FontType.All_Number)
    LangUtil.BindText(levelRoot:Find("Text2/Text"),FontType.All_Number)
    LangUtil.BindText(levelRoot:Find("Max"),FontType.All_Number)

    LangUtil.BindText(levelRoot:Find("Max"),FontType.All_Number)
    LangUtil.BindText(matterRoot:Find("1/CardItem/DescRoot/Desc"))
    LangUtil.BindText(matterRoot:Find("1/CardItem/HoldText"),FontType.All_Number)
    LangUtil.BindText(matterRoot:Find("1/CardItem/Image (1)/Text")).text=LangUtil.GetSysLang(2062)

    LangUtil.BindText(matterRoot:Find("1/Water/HoldText"),FontType.All_Number)
    LangUtil.BindText(matterRoot:Find("1/Water/Name"))

    LangUtil.BindText(matterRoot:Find("3/HoldText"),FontType.All_Number)
    LangUtil.BindText(matterRoot:Find("3/Name"))

    --LangUtil.BindText(useGoldRoot:Find("Txt")).text = ""--LangUtil.GetSysLang(125)
    LangUtil.BindText(useGoldRoot:Find("NeedGoldTxt"),FontType.All_Number)
    

    UIPublic.CreateNumericalLang(langRc:GetObject("Numerical"))
    SelectType(self, 1)
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.lm_init = false
    self.lm_btn = rc:GetObject("LimitBreakButton");
    self.lm_top = rc:GetObject("Top")
    self.lm_bot = rc:GetObject("Bot")
    self.UseGold = rc:GetObject("UseGold")
    local waterAvatar = rc:GetObject("WaterAvatar"):GetComponent("Image")
    local cupAvatar = rc:GetObject("CupAvatar"):GetComponent("Image")
    local cupBg = rc:GetObject("Bg"):GetComponent("Image")
    local waterBg = rc:GetObject("Bg1"):GetComponent("Image")

    UIUtil.SetSprite(waterAvatar,AtlasConfig.Item,GetItemIcon(Z_Item[1026]))
    UIUtil.SetSprite(cupAvatar,AtlasConfig.Item,GetItemIcon(Z_Item[3018]))
    UIUtil.SetSprite(cupBg,AtlasConfig.ItemBg,Z_Item[1026].IconBg..".png")
    UIUtil.SetSprite(waterBg,AtlasConfig.ItemBg,Z_Item[3018].IconBg..".png")

    self.selectImage1 = self.lm_bot.transform:Find("MatterRoot/1/SelectImage").gameObject
    self.selectImage3 = self.lm_bot.transform:Find("MatterRoot/3/SelectImage").gameObject

    UIUtil.AddBtnEvent(self.lm_bot.transform:Find("MatterRoot/1/CardItem").gameObject,function() LimitBreakLogic.OnClickIndexButton(self) end)
    UIUtil.AddBtnEvent(self.lm_bot.transform:Find("MatterRoot/1").gameObject,function() SelectType(self,1) end)
    UIUtil.AddBtnEvent(self.lm_bot.transform:Find("MatterRoot/3").gameObject,function() SelectType(self,3) end)
    UIUtil.AddBtnEvent(self.lm_btn,function() OnClickLimitBreakButton(self) end)
end

function this.OnCardInfoChg(self,info)
    local card = self.cur_card
    self.matterCard = nil
    if self.lm_init and card ~= nil then
        if info.cardInfoChgType == CardInfoChgType.Level then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.Star then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.JadePearl then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.FightSoul then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.Equip then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.Skin then

        elseif info.cardInfoChgType == CardInfoChgType.CloseDegree then
            InitTop(self)
        elseif info.cardInfoChgType == CardInfoChgType.Lock then

        end
        self.zlimit = Z_CardLimitBreak[card.LevelLimit + 5]
        if self.zlimit == nil then self.zlimit = Z_CardLimitBreak[maxLimitLevel] end
        InitBot(self)
    end
end

function this.OnDisable(self)

end

return this