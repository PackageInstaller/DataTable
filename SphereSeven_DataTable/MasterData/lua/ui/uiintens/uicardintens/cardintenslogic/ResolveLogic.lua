---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:52
---

local ResolveLogic = {}
local this = ResolveLogic
local pfbName = "CardResolveItem"

local recordOrder = {order = 1,kind = 1}  --是否正序  顺序类型
local screenTypes = {rare = 0,abiliType = 0,mainProp = 0,subProp = 0,atkType = 0}

local function InitGetNum(self)
    self.rs_goldTxt.text = self.rs_gold
    self.rs_sandTxt.text = self.rs_sand
    self.choseValue.text = self.rd_Num.."/"..30
end


local function InitOrderButton(self)
    self.rs_orderBtn.transform:Find("De").gameObject:SetActive(recordOrder.order ~= 1)
end

function this.OnResolveButton(self)
    local send_data = {};
    send_data.CardId = {};
    for k,v in pairs(self.rs_selectList) do
        table.insert(send_data.CardId,k);
    end
    send_data.AcquireStarSand = self.rs_sand
    send_data.AcquireGoldCoin = self.rs_gold

    if table.count(send_data.CardId) == 0 then
        return 
    end
    local tipData = {}
    tipData.title = LangUtil.GetSysLang(9)--"提示"
    tipData.message = LangUtil.GetSysLang(789)
    tipData.callBack = function()
        self.ctrl:SendResolveRequest(send_data)
    end
    UIUtil.ToolTipFirst(tipData)
end

function this.OnClearButton(self)
    self.rs_selectList = {}
    self.rs_gold = 0
    self.rs_sand = 0
    self.rd_Num = 0
    InitGetNum(self)
    self.rs_scroll:RefreshData(self.rs_list)
end


local function OnClickCardItem(self,card)
    local Multiple = (card.Level <= 80 and {0} or {math.floor((card.Level - 80)/5)})[1]
    if self.rs_selectList[card.Id] ~= nil then
        self.rs_selectList[card.Id] = nil
        local z_card = Z_Card[card.TemplateId];
        local zCardDecompose = Z_CardDecompose[z_card.Rare];
        self.rs_gold = self.rs_gold - zCardDecompose.GoldCoinPer*(1+Multiple);
        self.rs_sand = self.rs_sand - zCardDecompose.StarSandPer*(1+Multiple);
        self.rd_Num = self.rd_Num - 1
        InitGetNum(self)
        return
    end

    if not UIPublic.CardIsDestroy(card) then
        return
    end
    if table.count(self.rs_selectList) >= 30 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2030));--分解达到上限
        return
    end
    self.rs_selectList[card.Id] = card.Id
    
    local z_card = Z_Card[card.TemplateId];
    local zCardDecompose = Z_CardDecompose[z_card.Rare];

    self.rs_gold = self.rs_gold + zCardDecompose.GoldCoinPer*(1+Multiple);
    self.rs_sand = self.rs_sand + zCardDecompose.StarSandPer*(1+Multiple);
    self.rd_Num = self.rd_Num + 1
    InitGetNum(self)
end


local function InitCardListData(self)
    self.rs_list = {}
    for k,v in table.pairsByKeys(self.cards) do
        if v.Lock ~=1 then
            table.insert(self.rs_list,v)
        end
    end

    self.rs_list = UIPublic.ScreenFunc(self.rs_list,screenTypes)
    table.sort(self.rs_list, function(a,b) return UIPublic.SortFunc(a,b,recordOrder)end )
    
    if recordOrder.order ~= 1 then
        self.rs_list = table.reverseTable(self.rs_list)
    end
end

local function InitCardList(self)
    self.rs_scroll:Clear()
    self.rs_scroll:ScrollInit(self.rs_list, self.rs_scrollView, pfbName, function (arg)
        local card = arg.data
        local gameObject = arg.go

        local zCard = Z_Card[card.TemplateId]
        local transform = gameObject.transform
        local avatar = transform:Find("Mask/Avatar"):GetComponent("Image")
        local levelTxt = LangUtil.BindText(transform:Find("Level"),FontType.All_Number)
        local active = transform:Find("Active").gameObject
        local starRoot = transform:Find("Star")
        local rareFrame = transform:Find("RareFrame"):GetComponent("Image")

        LangUtil.GetSpriteLang(52,function(sprite)
            active:GetComponent("Image").sprite = sprite
        end)
        
        levelTxt.text = "LV."..card.Level
        active:SetActive(self.rs_selectList[card.Id] ~= nil)
        UIUtil.SetSprite(rareFrame ,AtlasConfig.RareFrame,UIPublic.RareNames[zCard.Rare].."_2.png" )
        UIUtil.SetCardSprite(avatar,zCard.Id,card.SkinId,CardPictureType.Middle)
        UIPublic.InitStar(starRoot,card)
        
        UIUtil.AddBtnEvent(gameObject,function()
            OnClickCardItem(self,card)
            active:SetActive(self.rs_selectList[card.Id] ~= nil)
        end)
    end)
end


function this.OnOrderButton(self) --点击倒序
    recordOrder.order = (recordOrder.order == 1 and {2}or {1})[1]
    InitOrderButton(self)
    InitCardListData(self)
    self.rs_scroll:RefreshData(self.rs_list)
    --self.rs_scrollView.verticalScrollbar.value = 1
    --InitCardList(self)
    self.rs_scroll:MoveTop()
end

function this.OnScreenButton(self) --点击排序
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.cardList = self.rs_list
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        InitCardListData(self)
        self.rs_scroll:RefreshData(self.rs_list)
        --self.rs_scrollView.verticalScrollbar.value = 1
        --InitCardList(self) 
        self.rs_scroll:MoveTop()
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardSort,uiData)
end


function this.Init(self)
    self.rs_selectList = {}
    self.rs_list = {}
    self.rs_gold = 0
    self.rs_sand = 0
    self.rd_Num = 0
    self.rs_holdTxt.text = table.count(self.cards)
    InitOrderButton(self)
    InitCardListData(self)
    if not self.rs_init then
        InitCardList(self)
    end
    InitGetNum(self)
    self.rs_init = true
end


function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    LangUtil.BindText(langRc:GetObject("ResolveButton").transform:GetChild(0)).text = LangUtil.GetSysLang(3114)
    LangUtil.BindText(langRc:GetObject("Screen").transform:GetChild(0)).text = LangUtil.GetSysLang(155)
    LangUtil.BindText(langRc:GetObject("ClearButton").transform:GetChild(0)).text = LangUtil.GetSysLang(226)
    LangUtil.BindText(langRc:GetObject("Gold").transform:Find("ShowNumText"),FontType.All_Number)
    LangUtil.BindText(langRc:GetObject("Money").transform:Find("ShowNumText"),FontType.All_Number)
    LangUtil.BindText(langRc:GetObject("ShowNumText")).text = LangUtil.GetSysLang(224)
    LangUtil.BindText(langRc:GetObject("Order").transform:Find("Text")).text = LangUtil.GetSysLang(154)
    LangUtil.BindText(langRc:GetObject("Order").transform:Find("De/Text")).text = LangUtil.GetSysLang(153)
    self.choseValue = LangUtil.BindText(langRc:GetObject("choseValue"),"Number")
    LangUtil.BindText(langRc:GetObject("choseText")).text = LangUtil.GetSysLang(2060)
    
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.rs_scroll = VerticalScroll.New()
    self.rs_scroll:SetUpdateCount(30)
    self.rs_scrollView = rc:GetObject("Scroll View"):GetComponent("ScrollRect")
    self.rs_init = false
    self.rs_content1 = rc:GetObject("CardList")
    self.rs_content1.transform:DOLocalMoveY(0, 0)
    self.rs_holdTxt = rc:GetObject("HoldTxt"):GetComponent("Text")
    self.rs_goldTxt = rc:GetObject("ShowGoldText"):GetComponent("Text")
    self.rs_sandTxt = rc:GetObject("ShowSandText"):GetComponent("Text")
    self.rs_orderBtn = rc:GetObject("Order")

    local rs_screenBtn = rc:GetObject("Screen")
    local rs_clearBtn = rc:GetObject("ClearButton")
    local rs_Btn = rc:GetObject("ResolveButton")


    UIUtil.AddBtnEvent(rs_screenBtn,function()  ResolveLogic.OnScreenButton(self) end)
    UIUtil.AddBtnEvent(rs_Btn,function() ResolveLogic.OnResolveButton(self) end)
    UIUtil.AddBtnEvent(self.rs_orderBtn,function() ResolveLogic.OnOrderButton(self) end)
    UIUtil.AddBtnEvent(rs_clearBtn,function() ResolveLogic.OnClearButton(self) end)
end



function this.OnCardInfoChg(self,info)
    if self.rs_init then
        if info.cardInfoChgType == CardInfoChgType.Remove then
            self.rs_selectList = {}
            self.rs_gold = 0
            self.rs_sand = 0
            self.rd_Num = 0
            InitGetNum(self)
            InitCardListData(self)
            self.rs_scroll:RefreshData(self.rs_list)
            --InitCardList(self)
        end
    end
end

function this.OnDisable(self)
    --self.rs_scrollView.verticalScrollbar.value = 1
    self.rs_selectList = {}
    self.rs_scroll:Dispose()
    screenTypes = {rare = 0, abiliType = 0, mainProp = 0, subProp = 0, atkType = 0}
    recordOrder.order = 1
end

return this
