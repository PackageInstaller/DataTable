---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lanbo.
--- DateTime: 2020/7/16 22:47
---

--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lanbo.
--- DateTime: 2020/7/16 17:17
---

local SkinChangeLogic = {}

local pfbName = "ChangeSkinItem"

local this = SkinChangeLogic


local function InitItemData(self,transform,skinId)
    local select = transform:Find("Select").gameObject
    local select1 = transform:Find("Select1").gameObject
    local defaultPic = transform:Find("defaultPic").gameObject
    local Icon = transform:Find("Icon").gameObject
    local nameTxt = LangUtil.BindText(transform:Find("Name"))
    local lock = transform:Find("Lock").gameObject
    local lockTxt =  LangUtil.BindText(transform:Find("Lock/Text"))
    local IsUsed = transform:Find("IsUsed").gameObject
    LangUtil.BindText(transform:Find("Select/Image/Text")).text=LangUtil.GetSysLang(221)
    
    local zSkin = Z_Skin[skinId]
    defaultPic:SetActive(false)
    Icon:SetActive(true)
    
    nameTxt.text = zSkin.Name
    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    
    local skin = cardComponent.UnLockSkinList[skinId]
    if skin == nil then
        lockTxt.text = LangUtil.GetSysLang(220) 
        lock:SetActive(true)
    else
        lockTxt.text = ""
        lock:SetActive(false)
    end

    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    local skin = cardComponent.UnLockSkinList[skinId]
    select:SetActive(skin == nil)
    --select:SetActive(self.sk_selectId == skinId)
    --select:SetActive(self.skinId ~= skinId)
    select1:SetActive(self.sk_selectId == skinId)
    IsUsed:SetActive(self.skinId == skinId)
    nameTxt.text = zSkin.Name
end

local function InitSsUnit(self,skinId)
    if not IsNull(self.sk_unit) then
        ListChildPool:GetInstance():Remove(self.sk_unit,"SsUnit")
        self.sk_unit = nil
    end

    local zCard = Z_Card[self.cur_card.TemplateId]
    local ssUnitId = Z_FigureAsset[skinId].SsUnitId
    local isNewBattleSpine = Z_FigureAsset[skinId].IsNewBattleSpine
   
    local object=Game.Scene.Player:GetComponent("CardComponent"):CreatUnitByTemplateId(self.cur_card.TemplateId,false,skinId)
    if not IsNull(self.sk_unit) then
        ListChildPool:GetInstance():Remove(self.sk_unit,"SsUnit")
        self.sk_unit = nil
    end
    self.sk_unit = object
    if self.active == false then
        ListChildPool:GetInstance():Remove(object,"SsUnit")
        self.sk_unit = nil
        return
    end
    local scale = 0--Z_SsUnit:GetConfig(ssUnitId).UnitScale

    if isNewBattleSpine == 1 then
        scale = Z_FigureAsset[skinId].UnitScale
    else
        if Z_FigureAsset[skinId].UnitScale ~= 0 then
            scale = Z_FigureAsset[skinId].UnitScale
        else
            scale = Z_SsUnit:GetConfig(ssUnitId).UnitScale
        end
    end

    if scale == 0 then scale = 1 end
    local transition = zCard.HandbookTransition
    local pos =  Vector3.New(transition[4],transition[5])
    object.transform:SetParent(self.sk_ssunit)

    local skeletonMecanim = object:GetComponent("SkeletonMecanim")
    local MeshRenderer = object:GetComponent("MeshRenderer")
    if not IsNull(skeletonMecanim) and not IsNull(MeshRenderer) then
        MeshRenderer.sortingLayerName = "UI"
        MeshRenderer.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    end

    object.transform.localScale = Vector3.New(440/1.44*scale*transition[1],440/1.44*scale*transition[2],440/1.44*scale*transition[3])
    object.transform.localPosition = pos
    table.csenu(object:GetComponentsInChildren(typeof(SkinnedMeshRenderer)),function (smr)
        smr.sortingOrder = self.canvas.unity_canvas.sortingOrder --+ 1
        smr.sortingLayerName = SortingLayerNames.UI
    end)
    table.csenu(object.transform:GetComponentsInChildren(typeof(Transform)),function (v)
        v.gameObject.layer = LayerMask.NameToLayer("UI")
    end)
end

local function OnExChange(self)
    local reqData = {SkinId = self.sk_selectId,CardId = self.cur_card.Id}
    local sendData = {
        id = self.cur_card.Id,
        skin = self.sk_selectId
    }

    coroutine.start(function()
        local info = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                PROTOCOL.CharacterPackSetSkinReq, sendData)
        self.cur_card.SkinId = sendData.skin
        local info = {
            cardId = self.cur_card.Id,
            cardInfoChgType = CardInfoChgType.Skin
        }
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
        self.skinId =self.sk_selectId
        self.sk_btn.enabled = false
        self.sk_btnTxt.text = LangUtil.GetSysLang(221)
        self.sk_btnImg.material = DeActiveMat
        for k,v in pairs(self.sk_objects) do
            InitItemData(self,v.transform,k)
        end
    end)
end

local function OnBuy(self,skinId)
    --self:OpenPanel(1)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop,{
        ShopTitleType = ShopTitleType.Skin,
    })
end

local function OnItem(self,zSkin)
    self.sk_nameTxt.text = zSkin.Name
    for k,v in pairs(self.sk_objects) do
        -- local select = v.transform:Find("Select").gameObject
        -- select:SetActive(false)
        local select1 = v.transform:Find("Select1").gameObject
        select1:SetActive(k == zSkin.Id)
    end

    self.sk_getWayName.text = LangUtil.GetSysLang(2260 + zSkin.GetWay)
    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    local skin = cardComponent.UnLockSkinList[zSkin.Id]
    if zSkin.Id == self.skinId then -- 选中了已经设置的皮肤
        self.sk_btnTxt.text = LangUtil.GetSysLang(221)
        self.sk_btn.enabled = false
        UIPublic.InitButton(self.sk_confirmBtn, false)
        --self.sk_btnImg.material = DeActiveMat
    elseif skin ~= nil then -- 当前并未设置，且是皮肤时
        self.sk_btn.enabled = true
        self.sk_btnImg.material = nil
        if skin ~= nil then -- 有该皮肤
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(222)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnExChange(self)  end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        end
        -- if skin ~= nil then -- 有该皮肤
        --     LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(222)
        --     UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnExChange(self)  end)
        --     UIPublic.InitButton(self.sk_confirmBtn, true)
        -- else -- 没有该皮肤
        --     UIPublic.InitButton(self.sk_confirmBtn, false)
        --     if zSkin.MarryUnlock == 1 then -- 需要结婚才能解锁
        --        self.sk_btn.enabled = false
        --        self.sk_btnImg.material =DeActiveMat
        --        LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
        --     else
        --        LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(223)
        --        UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnBuy(self,zSkin.Id)  end)
        --     end

        -- end
    else -- 当前并未设置，且不是皮肤时
        UIPublic.InitButton(self.sk_confirmBtn, false)
        if skin ~= nil then -- 有该皮肤
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(222)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnExChange(self)  end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        elseif zSkin.GetWay == SkinUnlockType.Marry then
            self.sk_btn.enabled = false
            self.sk_btnImg.material =DeActiveMat
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
        elseif zSkin.GetWay == SkinUnlockType.Shop then
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(223)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()
                self.ctrl:CloseSelf()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop,{
                    ShopTitleType = ShopTitleType.Skin,
                })
            end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        elseif zSkin.GetWay == SkinUnlockType.BattlePass then
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(2268)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()
                self.ctrl:CloseSelf()
                UIPublic.OpenBattlePassUI(SkinUnlockType.BattlePass)
            end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        elseif zSkin.GetWay == SkinUnlockType.ThreeStar then
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
        elseif zSkin.GetWay == SkinUnlockType.FiveStar then
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
        elseif zSkin.GetWay == SkinUnlockType.Newbie then
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(2269)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()
                self.ctrl:CloseSelf()
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIGameEventMain,{
                    eventId = tonumber(Z_Misc["DAYU_TASK"].Value[1]) 
                })
            end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        end
        --if self.skinId ~= zSkin.Id then
        --    self.sk_btn.enabled = true
        --    self.sk_btnImg.material = nil
        --    LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(222)
        --    UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnExChange(self)  end)
        --else
        --    self.sk_btn.enabled = false
        --    self.sk_btnImg.material =DeActiveMat
        --    LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
        --end
    end

    self.sk_selectId = zSkin.Id
    coroutine.start(function()
        InitSsUnit(self, zSkin.Id)
    end)
end

local function InitContent(self)
    ListChildPool:GetInstance():ClearContent(self.sk_content)
    self.sk_content.localPosition = Vector3.zero
    local zSkins = table.choose(Z_Skin,function(k,v) return v.CharacterId == self.cur_card.TemplateId  end)
    local tempSkins = {}
    table.walk(zSkins, function (k, v) 
        tempSkins[v.SortId] = v
    end)
    table.walk(tempSkins,function (k, v)
        ListChildPool:GetInstance():GetChild(pfbName,self.sk_content,function(go)
            if self.active == false then ListChildPool:GetInstance():Remove(go) return end
            local transform = go.transform
            --self.sk_objects[k] = go
            self.sk_objects[v.Id] = go
            InitItemData(self, transform, v.Id)
            local icon = transform:Find("Icon/Root/Value"):GetComponent("Image")
            UIUtil.NewSetCardSprite(icon, self.cur_card.TemplateId, v.Id, CardPictureType.Big)
            UIUtil.AddBtnEvent(go,function()OnItem(self,v)  end)
        end)
    end)
end

function this.OnDisable(self)
    -- self.sk_objects = {}
    -- for i= 0,self.sk_ssunit.childCount -1 do
    --     local ssunit = self.sk_ssunit:GetChild(i).gameObject
    --     ListChildPool:GetInstance():Remove(ssunit,"SsUnit")
    -- end
    if not IsNull(self.sk_unit) then
        ListChildPool:GetInstance():Remove(self.sk_unit)
        self.sk_unit = nil
        self.sk_objects = {}
    end
    ListChildPool:GetInstance():ClearContent(self.sk_content)
end

function this.Init(self)
    --if self.sk_init == false then

    -- if not IsNull(self.sk_unit) then
    --     ListChildPool:GetInstance():Remove(self.sk_unit)
    --     self.sk_unit = nil
    --     self.sk_objects = {}
    -- end
    ListChildPool:GetInstance():ClearContent(self.sk_content)
    for i= 0,self.sk_ssunit.childCount -1 do
        local ssunit = self.sk_ssunit:GetChild(i).gameObject
        ListChildPool:GetInstance():Remove(ssunit,"SsUnit")
    end
    
    local zCard = Z_Card[self.cur_card.TemplateId]
    self.sk_cardNameTxt.text = zCard.Name
    self.sk_unit = nil
    self.sk_selectId = 0
    self.sk_objects = {}
    self.skins = self.player:GetComponent("SkinComponent").Skins
    self.skinId = (self.cur_card.SkinId == 0 and {1} or{self.cur_card.SkinId})[1]
    self.sk_selectId = self.skinId
    if self.skinId == 0 then self.skinId = 1 end 
    --local zSkin = Z_Skin[self.cur_card.TemplateId*100+self.skinId] 
    --local zSkin = UIPublic.GetSkin(self.cur_card.TemplateId, self.skinId)
    self.sk_nameTxt.text = Z_Skin[self.skinId].Name--zSkin.Name
    self.sk_btnTxt.text = LangUtil.GetSysLang(221)
    self.sk_btn.enabled = false
    self.sk_btnImg:GetComponent("Image").material = DeActiveMat
    
    UIUtil.AddBtnEvent(self.sk_closeBtn,function()self:OpenPanel(1)  end)
    coroutine.start(function()
        InitSsUnit(self,self.cur_card.SkinId)
        InitContent(self)
        --self.skin_panel:SetActive(true)
    end)
    self.sk_init = true
    self.sk_getWayName.text = LangUtil.GetSysLang(2260 + Z_Skin[self.skinId].GetWay)
    --end
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    LangUtil.BindText(langRc:GetObject("SkinName").transform:GetChild(0))
    LangUtil.BindText(langRc:GetObject("CardName").transform:GetChild(0))
    LangUtil.BindText(langRc:GetObject("ConfirmButton").transform:GetChild(0))
    --LangUtil.BindText(langRc:GetObject("Title1Text")).text = LangUtil.GetSysLang(218)
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.sk_init = false
    self.sk_closeBtn = rc:GetObject("CancelButton")
    self.sk_confirmBtn = rc:GetObject("ConfirmButton")
    self.sk_nameTxt = rc:GetObject("SkinName"):GetComponent("Text")
    self.sk_cardNameTxt = rc:GetObject("CardName"):GetComponent("Text")
    self.sk_ssunit = rc:GetObject("SsUnit").transform:Find("Root")
    self.sk_content = rc:GetObject("Content").transform
    self.sk_btn = self.sk_confirmBtn:GetComponent("Button")
    self.sk_btnTxt = self.sk_confirmBtn.transform:Find("Text"):GetComponent("Text")
    self.sk_btnImg = self.sk_confirmBtn:GetComponent("Image")
    self.sk_getWayName = rc:GetObject("GetWayName"):GetComponent("Text")
end

function this.OnCardInfoChg(self,info)
    if self.sk_init and self.cur_card ~= nil  then
        if info.cardInfoChgType == CardInfoChgType.Star then
            for k,v in pairs(self.sk_objects) do
                InitItemData(self,v.transform,k)
            end
        end
        if info.cardInfoChgType == CardInfoChgType.Skin then
            this.OnSkinInfoChg(self,info)
        end
    end
end

function this.OnSkinInfoChg(self,info)
    local zSkin = Z_Skin[self.cur_card.SkinId] --UIPublic.GetSkin(self.cur_card.TemplateId, self.cur_card.SkinId)
    if self.sk_init and self.cur_card ~= nil and zSkin.CharacterId == self.cur_card.TemplateId  then
        self.sk_selectId = self.cur_card.SkinId
        self.skinId = self.cur_card.SkinId
        if self.sk_selectId == zSkin.Id then
            self.sk_btn.enabled = false
            self.sk_btnTxt.text = LangUtil.GetSysLang(221)
            self.sk_btnImg.material = DeActiveMat
        end
        for k,v in pairs(self.sk_objects) do
            InitItemData(self,v.transform,k)
        end
        coroutine.start(function()
            InitSsUnit(self,zSkin.Id)
        end)
    end
end

-- function this.OnDisable(self)
--     self.sk_objects = {}
--     for i= 0,self.sk_ssunit.childCount -1 do
--         local ssunit = self.sk_ssunit:GetChild(i).gameObject
--         ListChildPool:GetInstance():Remove(ssunit,"SsUnit")
--     end
-- end

return this