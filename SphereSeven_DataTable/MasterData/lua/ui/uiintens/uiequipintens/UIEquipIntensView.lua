---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/18 10:12
---

local UIEquipIntensView = BaseClass("UIEquipIntensView",UIBaseView);
local base = UIBaseView;
local this = UIEquipIntensView;



local selectColor = Color.New(1,1,1)
local defColor = Color.New(130/255,160/255,228/255)

--main

local back_btn_path = "ReturnButton";
local content_path = "Content";
local visit_panel_path = "EquipVisitPanel";
local change_panel_path = "EquipChangePanel";
local intens_panel_path = "EquipIntensPanel";
local recast_panel_path = "EquipRecastPanel";
local resolve_panel_path = "EquipResolvePanel";
local item_prefab_path = "EquipItemPf";
local msg_prefab_path = "EquipMsgPf";

local open_visit_btn_path = "VisitEquipButton";
local open_change_btn_path = "ChangeEquipButton";
local open_intens_btn_path = "IntensEquipButton";
local open_recast_btn_path = "RecastEquipButton";
local open_resolve_btn_path = "ResolveEquipButton";

local VisitLogic = require "UI/UIIntens/UIEquipIntens/EquipIntensLogic/EquipVisit";
local ChangeLogic = require "UI/UIIntens/UIEquipIntens/EquipIntensLogic/EquipChange";
local RecastLogic = require "UI/UIIntens/UIEquipIntens/EquipIntensLogic/EquipRecast";
local ResolveLogic = require "UI/UIIntens/UIEquipIntens/EquipIntensLogic/EquipResolve";
--visit
local visit_content_path = "Content";

function this.OpenPanel(self,id)
    --if id == 2 and self.cur_card == nil then
    --    return
    --end

    self.panel_id = id
    for k,v in pairs(self.panel_tab) do
        if id == k then
            v:SetActive(true);
        else
            v:SetActive(false);
        end
    end
    self.func_tab[id](self);

    for k,v in pairs(self.btn_tab)do
        if k == id then
            v.transform:Find("Active").gameObject:SetActive(true)
            --v.transform:Find("Text"):GetComponent("Text").color = selectColor
            v:GetComponent("Button").enabled = false
        else
            v.transform:Find("Active").gameObject:SetActive(false)
            v:GetComponent("Button").enabled = true
            --v.transform:Find("Text"):GetComponent("Text").color = defColor
        end
    end
end

local function InitVisitPanel(self)
    VisitLogic.Init(self);
end

local function InitChangePanel(self)
    ChangeLogic.Init(self);
end


local function InitRecastPanel(self)
    RecastLogic.Init(self);
end

local function InitResolvePanel(self)
    ResolveLogic.Init(self);
end


function this.OnLangCreate(self)
    local btnRoot = self.langRc:GetObject("ButtonsCtr").transform
    for i = 0, 3 do
        local id = 83 + i*2
        LangUtil.GetSpriteLang(id,function(sprite)
            btnRoot:GetChild(i):GetComponent("Image").sprite = sprite
        end)
        LangUtil.GetSpriteLang(id+1,function(sprite)
            btnRoot:GetChild(i):Find("Active"):GetComponent("Image").sprite = sprite
        end)
    end
    LangUtil.BindText(self.langRc:GetObject("ReturnButton").transform:Find("Text")).text = LangUtil.GetSysLang(137)
    
    VisitLogic.OnLangCreate(self,self.visit_panel)
    ChangeLogic.OnLangCreate(self,self.change_panel)
    RecastLogic.OnLangCreate(self,self.recast_panel)
    ResolveLogic.OnLangCreate(self,self.resolve_panel)
    
end

function this.OnCreate(self)
    base.OnCreate(self);
    self.back_btn = self.rc:GetObject(back_btn_path)
   
    self.visit_panel = self.rc:GetObject(visit_panel_path);
    self.change_panel = self.rc:GetObject(change_panel_path)
    self.recast_panel = self.rc:GetObject(recast_panel_path)
    self.resolve_panel = self.rc:GetObject(resolve_panel_path)
    self.item_prefab = self.rc:GetObject(item_prefab_path)
    self.msg_prefab = self.rc:GetObject(msg_prefab_path)

    self.open_visit_btn = self.rc:GetObject(open_visit_btn_path);
    self.open_change_btn = self.rc:GetObject(open_change_btn_path);
    self.open_recast_btn = self.rc:GetObject(open_recast_btn_path);
    self.open_resolve_btn = self.rc:GetObject(open_resolve_btn_path);
    

    UIUtil.AddBtnEvent(self.open_visit_btn,function() self:OpenPanel(1) end)
    UIUtil.AddBtnEvent(self.open_change_btn,function() self:OpenPanel(2) end)
    UIUtil.AddBtnEvent(self.open_recast_btn,function() self:OpenPanel(3) end)
    UIUtil.AddBtnEvent(self.open_resolve_btn,function() self:OpenPanel(4) end)

    self.panel_tab = {[1] = self.visit_panel,[2] = self.change_panel,
                      [3] = self.recast_panel,[4] = self.resolve_panel};

    self.func_tab = {[1] = InitVisitPanel,[2] = InitChangePanel,
                     [3] = InitRecastPanel,[4] = InitResolvePanel};
    self.btn_tab = {[1] = self.open_visit_btn,
                    [2] = self.open_change_btn,
                    [3] = self.open_recast_btn,
                    [4] = self.open_resolve_btn,}

    UIUtil.AddBtnEvent(self.back_btn,function()self.ctrl:CloseSelf() end,"Back")
    
    VisitLogic.Create(self)
    ChangeLogic.Create(self)
    RecastLogic.Create(self)
    ResolveLogic.Create(self)

    --新手引导
    local guide=Game.Scene:GetComponent("GuideComponent")
    local guideData = table.first(guide.GuideList,function (h) return h.Id == 14001  end)
    if guideData == nil or guideData.Step < 18 then
        guide:CheckStart(13,0)
    end
end

function this.OnEnable(self)
    base.OnEnable(self);
    self.panel_id = self.model.panel_id;
    self.cur_card = self.model.cur_card;
    self.cur_equip = self.model.cur_equip;
    self:OnRefresh();
end

function this.OnRefresh(self)
    self.player = Game.Scene.Player;
    self.cards = self.player:GetComponent("CardComponent").Cards
    self.equips = self.player:GetComponent("EquipComponent").Equips
    --if self.equips[(self.cur_equip ~= nil and {self.cur_equip.Id} or {0})[1]] == nil then
    --    self.cur_equip = table.first(self.equips)
    --end
    
    --if self.cards[self.cur_card.Id] == nil then
    --    self.cur_card = table.first(self.cards)
    --end
    self:OpenPanel(self.panel_id);
end

local function OnEquipInfoChg(self)
    self.equips = Game.Scene.Player:GetComponent("EquipComponent").Equips
    if self.equips[(self.cur_equip ~= nil and {self.cur_equip.Id} or {0})[1]] == nil then
        self.cur_equip = table.first(self.equips)
    end
    VisitLogic.OnEquipInfoChg(self)
    ChangeLogic.OnEquipInfoChg(self)
    RecastLogic.OnEquipInfoChg(self)
    ResolveLogic.OnEquipInfoChg(self)
end

--新手引导

local function ON_Guide_Click(self,cid,num,isrun,minStep)
        if cid==13 and isrun then
            if num==5 and minStep == 1 then
                self:OpenPanel(2)
            elseif num==8 and minStep == 1 then
                self:OpenPanel(3)
            elseif num==17 and minStep == 1 then
                self:OpenPanel(4)
            end
        end
end

function this.OnAddListener(self)
    base.OnAddListener(self);
    self:AddUIListener(UIMessageNames.ON_EQUIP_INFO_CHG,OnEquipInfoChg);
    self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.ON_EQUIP_INFO_CHG);
    self:RemoveUIListener(UIMessageNames.ON_Guide_Click)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self);
    VisitLogic.OnDisable(self)
    ChangeLogic.OnDisable(self)
    RecastLogic.OnDisable(self)
    ResolveLogic.OnDisable(self)
end

function this.OnDestroy(self)
    self.object_list = nil;
    self.card_object_list = nil;
    self.visit_object_list = nil;
    base.OnDestroy(self);
end

return this