---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UIRoomView = BaseClass("UIRoomView",UIBaseView)
local base = UIBaseView
local this = UIRoomView

local function IntPanel(self)
    coroutine.start(function()
        if Game.Scene.Player.MainWife == 0 then
            self.uiDrawing:CoPlayImage()
        else
            local cardComponent = Game.Scene.Player:GetComponent("CardComponent")
            local cardInfo = cardComponent:Get(Game.Scene.Player.MainWife)

            self.uiDrawing:CoPlayImage(Game.Scene.Player.MainWife, cardInfo.Skin)
            self.uiDrawing:CoPlay(SoundType.Home)
            
            local zSkin = Z_Skin[cardInfo.Skin]

            if self.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
               self.uiDrawing:ChangeMode(Game.Scene.Player.MainWife, cardInfo.Skin)
            end
        end
        
        local hasLive2D = self.uiDrawing:HasLive2D()
        -- self.live_btn.gameObject:SetActive(hasLive2D)
        -- self.bg_btn.gameObject:SetActive(hasLive2D)
        if hasLive2D then
            if self.uiDrawing.showMode == 2 then -- 没有spine动画
                -- self.liveOff_img.enabled = false
                -- self.liveOn_img.enabled = true
            elseif self.uiDrawing.showMode == 1 then
                -- self.liveOff_img.enabled = true
                -- self.liveOn_img.enabled = false
            end
            if self.uiDrawing.bgMode == 1 then
                -- self.bgLiveOff_img.enabled = true
                -- self.bgLiveOn_img.enabled = false
            elseif self.uiDrawing.bgMode == 2 then -- 隐藏
                -- self.bgLiveOff_img.enabled = false
                -- self.bgLiveOn_img.enabled = true
            end
        end
    end)
end

local function OnClickCard(self)
    coroutine.start(function()
        self.uiDrawing:CoClick(SoundType.Home)
    end)
end

local function OnHomeCardRectChg(self,info)
    if info == nil or info.liveType == Live2DType.Room then
        local info = ClientData:GetInstance():GetRoomCardRect()
        self.paintRootRect:DOMove(Vector2.New(info.posX,info.posY),0)
        self.paintRootRect:DOScale(Vector2.New(info.scale,info.scale),0)
        coroutine.start(function()
            coroutine.waitforseconds(0.1)
            self.paintY = self.paintRootRect:GetComponent("RectTransform").localPosition.y
        end)
    end
end

local function OnLive2d(self)
    --self.uiDrawing:Hide()
    local transform = self.paintRootRect.transform
    local info = {}
    info.liveType = Live2DType.Room
    info.resetPos = transform.position
    info.resetScale = transform.localScale.x
    info.image = self.homeCard
    info.offset = self.homeCard:GetComponent("RectTransform").localPosition
    info.isSpine = self.uiDrawing.showMode
    info.spineRoot = self.spinePic
    info.uiDrawing = self.uiDrawing
    info.bgMode = self.uiDrawing.bgMode
    UIManager:GetInstance():OpenWindow(UIWindowNames.UILive2d,info)
end

function this.OnCreate(self)
    base.OnCreate(self)
    
    self.clientData = ClientData:GetInstance()

    self.homeCard = self.rc:GetObject("Pic"):GetComponent("Image")
    self.spinePic = self.rc:GetObject("SpinePic")
    self.mask = self.rc:GetObject("Mask").transform
    self.paint = self.rc:GetObject("Paint"):GetComponent("Image")
    self.backBtn = self.rc:GetObject("BackButton")
    
    self.sleepBtn = self.rc:GetObject("SleepButton")
    self.restBtn = self.rc:GetObject("RestButton")
    
    self.sleepText = self.rc:GetObject("SleepTimeText"):GetComponent("Text")
    self.restText = self.rc:GetObject("RestTimeText"):GetComponent("Text")
    self.restSlider = self.rc:GetObject("RestSlider"):GetComponent("Slider")
    self.sleepSlider = self.rc:GetObject("SleepSlider"):GetComponent("Slider") 
    self.rest = self.rc:GetObject("Rest")
   
    self.sleep = self.rc:GetObject("Sleep")
    
    self.paintRootRect = self.rc:GetObject("PaintRoot"):GetComponent("RectTransform")
    self.y =self.paintRootRect.localPosition.y
    
    local eventArea = self.rc:GetObject("EventArea")
    EventTriggerListener.Get(eventArea).onLuaClick = function() OnClickCard(self) end
    
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UIRoom,
        561
    )
    UIPublic.SetHelpButton(self.rc:GetObject("HelpButton"), UIWindowNames.UIRoom)
    UIUtil.AddBtnEvent(self.sleepBtn,function()
        self.ctrl:SendSleepRequest(self.uiDrawing)
    end)
    UIUtil.AddBtnEvent(self.restBtn,function()
        self.ctrl:SendRestRequest() 
    end)

    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    hintComponent.Room:AddObject(self.restBtn.transform:Find("Hint").gameObject,"SleepButton")
    hintComponent.Room:AddObject(self.sleepBtn.transform:Find("Hint").gameObject,"Sleep2Button")
   
    self.see_btn = self.rc:GetObject("SeeButton")
    self.live_btn = self.rc:GetObject("LiveButton")
    self.bg_btn = self.rc:GetObject("BgButton")
    self.liveOff_img = self.live_btn:GetComponent("Image")
    self.liveOn_img = self.live_btn.transform:Find("Image"):GetComponent("Image")
    self.bgLiveOff_img = self.bg_btn:GetComponent("Image")
    self.bgLiveOn_img = self.bg_btn.transform:Find("Image"):GetComponent("Image")
    UIUtil.AddBtnEvent(self.see_btn,function(go) OnLive2d(self)  end)

    self.uiDrawing = UIDrawing.New(self.paintRootRect, self.homeCard, self.spinePic, SoundType.Home, UIWindowNames.UIRoom, self.rc:GetObject("Lines"))
    UIUtil.AddBtnEvent(self.live_btn,function(go)
        coroutine.start(function ()
            self.uiDrawing:ChangeMode()
            if self.uiDrawing.showMode == 2 then -- 没有spine动画
                -- self.liveOff_img.enabled = false
                -- self.liveOn_img.enabled = true
            elseif self.uiDrawing.showMode == 1 then
                -- self.liveOff_img.enabled = true
                -- self.liveOn_img.enabled = false
            end
        end)
    end)
    UIUtil.AddBtnEvent(self.bg_btn, function(go)
        coroutine.start(function ()
            self.uiDrawing:ChangeBgMode()
            self.uiDrawing:ShowOrHideBg(self.uiDrawing.bgMode)
            if self.uiDrawing.bgMode == 1 then
                -- self.bgLiveOff_img.enabled = true
                -- self.bgLiveOn_img.enabled = false
            elseif self.uiDrawing.bgMode == 2 then
                -- self.bgLiveOff_img.enabled = false
                -- self.bgLiveOn_img.enabled = true
            end
        end)
    end)

    --新手引导
    local guide=Game.Scene:GetComponent("GuideComponent")
    local guideData = table.first(guide.GuideList,function (h) return h.Id == 16001  end)
    if guideData == nil or guideData.Step < 3 then
        guide:CheckStart(15,0)
        ChannelManager:GetInstance():CommonCallback(GameEvent.HouseClick)
    end
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.rest.transform:Find("Desc")).text = LangUtil.GetSysLang(2214)
    LangUtil.BindText(self.sleep.transform:Find("SleepText")).text = LangUtil.GetSysLang(301)
    LangUtil.BindText(self.sleep.transform:Find("Desc")).text = LangUtil.GetSysLang(2214)
    LangUtil.BindText(self.sleepText, "Number")
    LangUtil.BindText(self.restText, "Number")
end

function this.OnEnable(self)
    base.OnEnable(self)
    OnHomeCardRectChg(self)
    self:OnRefresh()
    coroutine.start(function()
        self.uiDrawing:CoPlay(SoundType.Home)
        --coroutine.waitforframes(10)
        --Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"Room")
    end)
end

function this.OnRefresh(self)
    self.roomComponent = Game.Scene.Player:GetComponent("RoomComponent")
    IntPanel(self)
end
local function ConvertTimeForm(second)
    if second < 0 then second = 0 end
    local tb = {}
    tb.day     = math.floor(second/86400)--math.modf(s/(24*60*60))
    tb.hour    = math.fmod(math.floor(second/3600), 24)--math.modf(s/(60*60))
    tb.minute  = math.fmod(math.floor(second/60), 60)--math.modf(s/60%60)
    tb.second  = math.floor(math.fmod(second, 60))-- math.modf(s%60)
    return tb
end

function this.secondsToTime(self,seconds)
    local days = math.floor(seconds / (24 * 3600))
    local remainingSeconds = seconds % (24 * 3600)
    local hours = math.floor(remainingSeconds / 3600)
    remainingSeconds = remainingSeconds % 3600
    local minutes = math.floor(remainingSeconds / 60)

    if days > 0 then
        local str = string.gsub(LangUtil.GetSysLang(885), "XX", days)--离重置还剩XX天YY小时
        return string.gsub(str, "YY", hours)
    else
        local str = string.gsub(LangUtil.GetSysLang(886), "XX", hours)--离重置还剩XX小时YY分
        return string.gsub(str, "YY", minutes)
    end
end

function this.Update(self)
    local player = Game.Scene.Player
    local lastRestTime = player.LastRoomRestTime
    local lastRestTimeTable = TimeUtil.FormatUnixTime2Date(lastRestTime)
    local serverTimeTable = TimeUtil.FormatUnixTime2Date(TimeUtil.ServerTime)
    local time1 = tonumber(Z_Misc["HOUSE_REST_TIME_POINT"].Value[1])
    local time2 = tonumber(Z_Misc["HOUSE_REST_TIME_POINT"].Value[2])

    local nextTimeTable = 
        {
            day = serverTimeTable.day,
            month = serverTimeTable.month,
            year = serverTimeTable.year,
            hour = time1/100,
            minute = 0,
            second = 0
        }

    local restTime1 = TimeUtil.convertToTimestamp(
        serverTimeTable.day, 
        serverTimeTable.month, 
        serverTimeTable.year,
            time1/100, 
            0, 
            0)
    local restTime2 = TimeUtil.convertToTimestamp(
        serverTimeTable.day, 
        serverTimeTable.month, 
        serverTimeTable.year,
            time2/100, 
            0, 
            0)
    local tb 


    if TimeUtil.ServerTime < restTime1 then
        if restTime1 < lastRestTime then
            self.sleep:SetActive(false)
            self.rest:SetActive(false)
            if player.MainWife == 0 then
                self.restBtn:SetActive(true)
                self.sleepBtn:SetActive(false)
            else
                self.restBtn:SetActive(false)
                self.sleepBtn:SetActive(true)
            end
            return
        end
        nextTimeTable.hour = time1/100
    elseif TimeUtil.ServerTime < restTime2 and TimeUtil.ServerTime >= restTime1 then
        if restTime1 > lastRestTime then
            self.sleep:SetActive(false)
            self.rest:SetActive(false)
            if player.MainWife == 0 then
                self.restBtn:SetActive(true)
                self.sleepBtn:SetActive(false)
            else
                self.restBtn:SetActive(false)
                self.sleepBtn:SetActive(true)
            end
            return
        end
        nextTimeTable.hour = time2/100
    elseif TimeUtil.ServerTime >= restTime2 then
        if restTime2 > lastRestTime then
            self.sleep:SetActive(false)
            self.rest:SetActive(false)
            if player.MainWife == 0 then
                self.restBtn:SetActive(true)
                self.sleepBtn:SetActive(false)
            else
                self.restBtn:SetActive(false)
                self.sleepBtn:SetActive(true)
            end
            return
        end
        nextTimeTable.day = nextTimeTable.day + 1
        nextTimeTable.hour = time1/100
    end

    self.restBtn:SetActive(false)
    self.sleepBtn:SetActive(false)
    local nextTime = TimeUtil.convertToTimestamp(
        nextTimeTable.day, 
        nextTimeTable.month, 
        nextTimeTable.year,
        nextTimeTable.hour, 
        0, 
        0)
    tb = ConvertTimeForm( nextTime - TimeUtil.ServerTime)

    if ClientData:GetInstance().isSleepWithMainWife == 0 then
        self.sleep:SetActive(false)
        self.rest:SetActive(true)
        self.restText.text  = string.format("%02d:%02d:%02d", tb.hour,tb.minute, tb.second)
    else
        self.sleep:SetActive(true)
        self.rest:SetActive(false)
        self.sleepText.text = string.format("%02d:%02d:%02d", tb.hour,tb.minute, tb.second)
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_HOME_CARD_RECT_CHG,OnHomeCardRectChg)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_HOME_CARD_RECT_CHG)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
    self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
    self.comTopView:InitComTop(self, self:GetName())
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self)
    Game.Scene:GetComponent("SoundComponent"):Stop()
    --coroutine.start(function ()
        --coroutine.waitforframes(3)
        --Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"Home")
    --end)
    self.uiDrawing:Disable()
end
function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

