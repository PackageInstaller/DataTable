---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/13 17:16
---

local UIMoreSettingView = BaseClass("UIMoreSettingView",UIBaseView);
local this = UIMoreSettingView;
local base = UIBaseView;
local off_color = Color.New(0.45,0.5,0,0.1)
local on_color = Color.white

local function OnLangTypechg(self)
    self:OnLangCreate()
end


local function OnItemClicked(self, name)
    self.mask.gameObject:SetActive(true);
    coroutine.start(function()
        if self.clientData.LangName ~= name then
            self.clientData:SetLangName(name)
            LangUtil.SetLangType()
            for i, v in ipairs(self.dropItems) do
                v.Checkmark:SetActive(name == self.dropItems[i].LangName)
            end
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_LANG_TYPE_CHG)
            self.mask.gameObject:SetActive(false);
        end
    end)
end


function this.OnLangCreate(self)
    LangUtil.BindText(self.rc:GetObject("Title").transform:Find("Text")).text = LangUtil.GetSysLang(4083)
    LangUtil.BindText(self.rc:GetObject("Sound").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(4090)
    LangUtil.BindText(self.rc:GetObject("Lang").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(4089)
    LangUtil.BindText(self.rc:GetObject("Lang").transform:Find("TextTittle")).text = LangUtil.GetSysLang(869)
    LangUtil.BindText(self.rc:GetObject("Summon").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(4084)
    LangUtil.BindText(self.rc:GetObject("Summon").transform:Find("TextTittle")).text = LangUtil.GetSysLang(4085)
    LangUtil.BindText(self.rc:GetObject("Summon").transform:Find("TextTip")).text = LangUtil.GetSysLang(4086)
    LangUtil.BindText(self.rc:GetObject("Notice").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(4087)
    LangUtil.BindText(self.rc:GetObject("Notice").transform:Find("TextTittle")).text = LangUtil.GetSysLang(4081)
    LangUtil.BindText(self.rc:GetObject("Notice").transform:Find("TextTip")).text = LangUtil.GetSysLang(4088)
    LangUtil.BindText(self.rc:GetObject("Login").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(352)
    LangUtil.BindText(self.rc:GetObject("Login").transform:Find("TextTittle")).text = LangUtil.GetSysLang(352)
    LangUtil.BindText(self.rc:GetObject("Login").transform:Find("LoginButton/Text")).text = LangUtil.GetSysLang(352)
    LangUtil.BindText(self.rc:GetObject("RedeemCode").transform:Find("Tittle/Text")).text = LangUtil.GetSysLang(4054)
    LangUtil.BindText(self.rc:GetObject("RedeemCode").transform:Find("TextTittle")).text = LangUtil.GetSysLang(4054)
    LangUtil.BindText(self.rc:GetObject("RedeemCode").transform:Find("RedeemCodeButton/Text")).text = LangUtil.GetSysLang(4054)

    -- LangUtil.BindText(self.cancleButton:Find("Text")).text = LangUtil.GetSysLang(146)
    -- LangUtil.BindText(self.sureButton:Find("Text")).text = LangUtil.GetSysLang(145)

    self.dropdownText = LangUtil.BindText(self.dropdown:Find("Label"))
    self.dropdownText.text = LangUtil.GetSysLang(867)
    for k, v in pairs(self.dropItems) do
        LangUtil.BindText(v.Label).text = LangUtil.GetSysLang(869 + k)--繁体中文  日本语
    end
end

local function GetVolumeValue(self, type)
    if type=="Bgm" then
       return ClientData:GetInstance().BgmVolume
    elseif type=="Se" then
        return  ClientData:GetInstance().SoundVolume
    else
        return ClientData:GetInstance().CardVolume
    end
end

local function SetVolumeValue(type, val)
    if type=="Bgm" then
        Game.Scene:GetComponent("BgmComponent"):SetVolume(val)
    elseif type=="Se" then
        Game.Scene:GetComponent("SoundComponent"):SetVolume(val)
    else
        Game.Scene:GetComponent("SoundComponent"):SetCardVolume(val)
    end
end

local function change(self,type,val)
    if type=="Bgm" then
        ClientData:GetInstance():SetBgmVolume(val)
    elseif type=="Se" then
        ClientData:GetInstance():SetSoundVolume(val)
    else
        ClientData:GetInstance():SetCardVolume(val)
    end
    SetVolumeValue(type, val)
end

local function onClickOnOffButton(self, type, select)
    local val = 0
    local isOn
    local active = not select.activeSelf
    select:SetActive(active);
    if active then
        isOn = 0
    else
        val = GetVolumeValue(self, type)
        isOn = 1
    end
    ClientData:GetInstance():SetVolumeIson(type, isOn)
    SetVolumeValue(type, val)
end

local function creat(self,type)
    local clientData = ClientData:GetInstance()
    local sound =  self.rc:GetObject("Sound").transform
    self[type.."Slider"] = sound:Find(type.."Slider"):GetComponent("Slider")
    self[type.."Btn"] = sound:Find(type.."Btn"):GetComponent("Image")
    local _name = sound:Find(type.."Slider").transform:Find("Text")
    LangUtil.BindText(_name)
    local select = self[type.."Btn"].gameObject.transform:Find("Select").gameObject
    if type=="Bgm" then
        select:SetActive(clientData.BgmVolume == 0);
        self[type.."Slider"].value = clientData.BgmVolume
    elseif type=="Se" then
        select:SetActive(clientData.SoundVolume == 0);
        self[type.."Slider"].value = clientData.SoundVolume
    else
        select:SetActive(clientData.CardVolume == 0);
        self[type.."Slider"].value = clientData.CardVolume
    end
    UIUtil.AddBtnEvent(self[type.."Btn"].gameObject ,function() onClickOnOffButton(self, type, select)  end)
    self[type.."Slider"].onValueChanged:AddListener(function (val)
        change(self,type,val)
    end)


    self.LoginButton = self.rc:GetObject("Login").transform:Find("LoginButton")
    self.RedeemCodeButton = self.rc:GetObject("RedeemCode").transform:Find("RedeemCodeButton")
    UIUtil.AddBtnEvent(self.LoginButton, function(go)
        Game.Scene:GetComponent("SoundComponent"):Stop()
        Game.Scene:GetComponent("SessionComponent"):ExitGame(0)
    end)
    UIUtil.AddBtnEvent(self.RedeemCodeButton, function(go)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIRedeemCode)
    end)
end

function this.OnCreateSound(self)
    local clientData = ClientData:GetInstance()

    creat(self,"Bgm")
    creat(self,"Se")
    creat(self,"Voice")
    change(self,"Bgm",clientData.BgmVolume)
    change(self,"Se",clientData.SoundVolume)
    change(self,"Voice",clientData.CardVolume)
end

function this.OnCreate(self)
    base.OnCreate(self);
    self.clientData = ClientData:GetInstance()
    self.dropdown = self.rc:GetObject("Dropdown").transform
    self.dropdownBtn = self.dropdown:Find("Button").transform
    self.cancleButton = self.rc:GetObject("CancleButton").transform
    self.sureButton = self.rc:GetObject("SureButton").transform
    self.mask = self.rc:GetObject("Mask").transform
    self.mask.gameObject:SetActive(false)
    local dropdownListView = self.dropdown:Find("ListView").gameObject
    local content =  self.rc:GetObject("Content").transform
    dropdownListView:SetActive(false)
    this.OnCreateSound(self)
    
    self.dropItems = {}
    for i = 0, content.childCount - 1 do
        self.dropItems[i + 1] = {}
        local transform = content:GetChild(i)
        self.dropItems[i + 1].LangName = transform.name
        self.dropItems[i + 1].transform = transform
        self.dropItems[i + 1].Label = transform:Find("Label")
        self.dropItems[i + 1].Checkmark = transform:Find("Checkmark").gameObject
        self.dropItems[i + 1].Checkmark:SetActive(self.clientData.LangName == transform.name)
        UIUtil.AddBtnEvent(transform, function(go)
            dropdownListView:SetActive(false)
            OnItemClicked(self, transform.name)
        end)
    end

    UIUtil.AddBtnEvent(self.dropdownBtn, function(go)
        dropdownListView:SetActive(not dropdownListView.activeInHierarchy)
    end)
 
    local func = function()
        dropdownListView:SetActive(false)
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIMoreSetting)
    end
    --UIUtil.AddBtnEvent(self.rc:GetObject("CloseButton"), func)
    EventTriggerListener.Get(self.rc:GetObject("EventBg")).onLuaClick = func
    UIUtil.AddBtnEvent(self.cancleButton, function(go)
        func()
    end)

    UIUtil.AddBtnEvent(self.sureButton, function(go)
        func()
    end)
end

function this.OnEnable(self)
    base.OnEnable(self);
    self:OnRefresh();
end

function this.OnRefresh(self)
    local isShowSummon = ClientData:GetInstance().GetIsShowSummon(self)
    self.SummonBtnOff = self.rc:GetObject("Summon").transform:Find("BtnContent/Bg/Off").gameObject
    self.SummonBtnOn = self.rc:GetObject("Summon").transform:Find("BtnContent/Bg/On").gameObject
    if isShowSummon == 1 then
        self.SummonBtnOff.transform:GetComponent("Image").color = on_color
        self.SummonBtnOn.transform:GetComponent("Image").color = off_color
    else
        self.SummonBtnOff.transform:GetComponent("Image").color = off_color
        self.SummonBtnOn.transform:GetComponent("Image").color = on_color
    end
    UIUtil.AddBtnEvent(self.SummonBtnOff, function(go)
        self.SummonBtnOff.transform:GetComponent("Image").color = on_color
        self.SummonBtnOn.transform:GetComponent("Image").color = off_color
        ClientData:GetInstance().SetIsShowSummon(self,1)
    end)
    UIUtil.AddBtnEvent(self.SummonBtnOn, function(go)
        self.SummonBtnOff.transform:GetComponent("Image").color = off_color
        self.SummonBtnOn.transform:GetComponent("Image").color = on_color
        ClientData:GetInstance().SetIsShowSummon(self,0)
    end)

    local isShowDMBanner = ClientData:GetInstance().GetIsShowDMBanner(self)
    self.NoticeBtnOff = self.rc:GetObject("Notice").transform:Find("BtnContent/Bg/Off").gameObject
    self.NoticeBtnOn = self.rc:GetObject("Notice").transform:Find("BtnContent/Bg/On").gameObject
    if isShowDMBanner == 1 then
        self.NoticeBtnOff.transform:GetComponent("Image").color = on_color
        self.NoticeBtnOn.transform:GetComponent("Image").color = off_color
    else
        self.NoticeBtnOff.transform:GetComponent("Image").color = off_color
        self.NoticeBtnOn.transform:GetComponent("Image").color = on_color
    end
    UIUtil.AddBtnEvent(self.NoticeBtnOff, function(go)
        self.NoticeBtnOff.transform:GetComponent("Image").color = on_color
        self.NoticeBtnOn.transform:GetComponent("Image").color = off_color
        ClientData:GetInstance().SetIsShowDMBanner(self,1)
    end)
    UIUtil.AddBtnEvent(self.NoticeBtnOn, function(go)
        self.NoticeBtnOff.transform:GetComponent("Image").color = off_color
        self.NoticeBtnOn.transform:GetComponent("Image").color = on_color
        ClientData:GetInstance().SetIsShowDMBanner(self,0)
    end)
end

function this.OnAddListener(self)
    base.OnAddListener(self);
    self:AddUIListener(UIMessageNames.ON_PLAYER_INFO_CHG,self.OnRefresh)
    self:AddUIListener(UIMessageNames.ON_LANG_TYPE_CHG, OnLangTypechg)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.ON_PLAYER_INFO_CHG)
    self:RemoveUIListener(UIMessageNames.ON_LANG_TYPE_CHG)
end

function this.OnDisable(self)
    base.OnDisable(self)
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end
return this;
