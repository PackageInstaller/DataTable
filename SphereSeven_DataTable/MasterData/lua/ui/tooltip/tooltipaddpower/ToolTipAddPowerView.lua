---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/12 17:40
---
local ToolTipAddPowerView = BaseClass("ToolTipAddPowerView",UIBaseView)
local base = UIBaseView
local this = ToolTipAddPowerView

local darkColor = Color.New(129/255,130/255,134/255,1)
local whiteColor = Color.New(1,1,1,1)
local maxBuyPowerCount = tonumber(Z_Misc["MAX_BUY_POWER"].Value[1])

SelectType = {
    UseItem = 1,
    UseDiamond = 2,
}

local currentSelectType = SelectType.UseItem
local leftTime = 0
local currentSelectCount = 1
local nextTotalPower = 0

function this.clickButton(self)
    self.UseItemContent.gameObject:SetActive(currentSelectType == SelectType.UseItem)
    self.UseDiamondContent.gameObject:SetActive(currentSelectType == SelectType.UseDiamond)
    self.UseItem.transform:Find("OnUse").gameObject:SetActive(currentSelectType == SelectType.UseItem)
    self.UseDiamond.transform:Find("OnUse").gameObject:SetActive(currentSelectType == SelectType.UseDiamond)
    if currentSelectType == SelectType.UseDiamond then
        self.UseItem.transform:Find("UseItemText"):GetComponent("Text").color = darkColor
        self.UseDiamond.transform:Find("UseItemText"):GetComponent("Text").color = whiteColor
        this.CalculateDianmondToPower(self, currentSelectCount)
    else
        self.UseItem.transform:Find("UseItemText"):GetComponent("Text").color = whiteColor
        self.UseDiamond.transform:Find("UseItemText"):GetComponent("Text").color = darkColor
        self.NextPower.text = math.floor( UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) ).. "<size=45>/" .. Z_PlayerLevelUp[self.player.Level].Energy .. "</size>" 
        this.CalculateItemToPower(self)
    end
end

function this.PlusButton(self)
    if currentSelectCount +1 <= maxBuyPowerCount - self.alreadyBuyTimes then
        currentSelectCount = currentSelectCount + 1
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
    end

    self.currentNumberText.text = currentSelectCount
    this.CalculateDianmondToPower(self, currentSelectCount)
end

function this.MinusButton(self)
    if currentSelectCount -1 >= 1 then
        currentSelectCount = currentSelectCount - 1
    else
        --UIUtil.ToolTipFourth(LangUtil.GetSysLang(1065))
        return
    end

    self.currentNumberText.text = currentSelectCount
    this.CalculateDianmondToPower(self, currentSelectCount)
end

function this.MaxButton(self)
    --currentSelectCount = maxBuyPowerCount - self.alreadyBuyTimes
    local leftBuyCount = 0
    local currentPower = UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1])
    for i = 1, maxBuyPowerCount - self.alreadyBuyTimes do
        local powerInfo = self.powerPriceList[self.alreadyBuyTimes + i]
        if powerInfo == nil then
            powerInfo = self.powerPriceList[#self.powerPriceList]
        end
        if currentPower + powerInfo.Amount >  999 then
            break
        else
            leftBuyCount = leftBuyCount + 1
            currentPower = currentPower + powerInfo.Amount
        end
    end
    currentSelectCount = leftBuyCount
    self.currentNumberText.text = currentSelectCount
    this.CalculateDianmondToPower(self, currentSelectCount)
end

function this.MinButton(self)
    currentSelectCount = 1
    self.currentNumberText.text = currentSelectCount
    this.CalculateDianmondToPower(self, currentSelectCount)
end

function this.CalculateDianmondToPower(self, buyTimes)
    self.currentDiamondToPowerList = {}
    for i = self.alreadyBuyTimes + 1, self.alreadyBuyTimes + buyTimes do
        if i > #self.powerPriceList then
            table.insert(self.currentDiamondToPowerList, self.powerPriceList[#self.powerPriceList])
        else
            table.insert(self.currentDiamondToPowerList, self.powerPriceList[i])
        end
    end

    local totalDianmond = 0
    local totalPower = 0

    for i = self.alreadyBuyTimes + 1, self.alreadyBuyTimes + buyTimes do
        if self.currentDiamondToPowerList[i] ~= nil then
            --totalDianmond = totalDianmond + self.currentDiamondToPowerList[i].TotalPrice
            totalPower = totalPower + self.currentDiamondToPowerList[i].Amount
        else
            --totalDianmond = totalDianmond + self.currentDiamondToPowerList[#self.currentDiamondToPowerList].TotalPrice
            totalPower = totalPower + self.currentDiamondToPowerList[#self.currentDiamondToPowerList].Amount
        end
    end

    for i, value in ipairs(self.currentDiamondToPowerList) do
        totalDianmond = totalDianmond + value.TotalPrice
    end

    nextTotalPower = math.floor( UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) + totalPower )

    self.NextPower.text = nextTotalPower.. "<size=45>/" .. Z_PlayerLevelUp[self.player.Level].Energy .. "</size>" 
    self.CostDiamondTextNumber.text = totalDianmond
    if #self.currentDiamondToPowerList ~= 0 then
        self.UnitRecoverText.text = self.currentDiamondToPowerList[#self.currentDiamondToPowerList].Amount
        self.UnitPriceText.text = self.currentDiamondToPowerList[#self.currentDiamondToPowerList].TotalPrice
    end
    self.LeftBuyTimes.text = string.gsub(LangUtil.GetSysLang(2112), "XX", (tonumber(Z_Misc["MAX_BUY_POWER"].Value[1]) - self.alreadyBuyTimes) ..  "/" .. maxBuyPowerCount)
end
--11

function this.BuyPowerByDiamond(self)
    if (self.alreadyBuyTimes + #self.currentDiamondToPowerList) > maxBuyPowerCount then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
        return
    end

    if nextTotalPower > tonumber(Z_Misc["POWER_ITEM_USE_LIMIT"].Value[1]) then
        UIUtil.ToolTipFourth(string.gsub(LangUtil.GetSysLang(2118), "XX", Z_Misc["POWER_ITEM_USE_LIMIT"].Value[1]))
        return
    end

    local goods = {}
    for _, value in ipairs(self.currentDiamondToPowerList) do
        if goods[value.Id] == nil then
            goods[value.Id] = {}
            goods[value.Id].goods_id = value.Id
            goods[value.Id].count = 1
        else
            goods[value.Id].count = goods[value.Id].count + 1
        end
    end

    if tonumber(self.CostDiamondTextNumber.text) > (UIPublic.GetItemAmount(Z_Misc["FREE_DIAMOND_ID"].Value[1]) + UIPublic.GetItemAmount(Z_Misc["DIAMOND_ID"].Value[1]))then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1086))
        return
    end

    local goodsInfo = {}
    table.walk(goods , function (k, v)
        table.insert(goodsInfo, v)
    end)

    table.sort(goodsInfo,function (a,b) return a.goods_id < b.goods_id end)

    local reqTable = {
        shop_id = StoreType.Power,
        goods = goodsInfo
    }

    local func = function()
        PublicRequest.SendRequest(PROTOCOL.BuyGoodsReq, reqTable, function(response, errorCode)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG)
            if errorCode == 0 then 
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(2119))
            end
        end)
    end

    if UIPublic.GetItemAmount(Z_Misc["FREE_DIAMOND_ID"].Value[1]) < tonumber(self.CostDiamondTextNumber.text) then
        ---@type ToolTipFirstData
        local tipData = {}
        tipData.message = string.gsub(LangUtil.GetSysLang(2122), "XX", tonumber(self.CostDiamondTextNumber.text) - UIPublic.GetItemAmount(Z_Misc["FREE_DIAMOND_ID"].Value[1]))
        tipData.callBack = function()
            func()
        end

        UIUtil.ToolTipFirstStarLight(tipData)
    else
        func()
    end

    -- PublicRequest.SendRequest(PROTOCOL.BuyGoodsReq, reqTable, function(response, errorCode)
    --     DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG)
    --     if errorCode == 0 then 
    --         UIUtil.ToolTipFourth(LangUtil.GetSysLang(2119))
    --     end
    -- end)
end

function this.BuyPowerByItem(self)
    local countValue = 0
    for key, value in pairs(self.currentSelectItemList) do
        countValue = value + countValue
    end

    if countValue == 0 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2123))
        return
    end

    local reqData = {}
    local itemList = {}
    for key, value in pairs(self.currentSelectItemList) do
        table.insert(itemList, {
            uid = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(key).Id,
            count = value
        })
    end
    reqData.items = itemList
    PublicRequest.SendRequest(PROTOCOL.UseItemReq, reqData, function(response, errorCode)
        if errorCode == 0 then 
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2119))
        end
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG)
    end)
end

function this.InitPowerItemList(self)
    self.powerPriceList = {}

    for _, storeInfo in pairs(Z_Store) do
        if storeInfo.StoreType == StoreType.Power then
            if storeInfo.QuotaNum ~= 0 then
                for i = 1, storeInfo.QuotaNum do
                    table.insert(self.powerPriceList, storeInfo)
                end
            else
                table.insert(self.powerPriceList, storeInfo)
            end
        end
    end

    table.sort(self.powerPriceList,function (a,b) return a.Id < b.Id end)
end

function this.CalculateItemToPower(self)
    local addPowerNumber = 0
    for key, value in pairs(self.currentSelectItemList) do
        local zItem = Z_Item[key]
        if zItem ~= nil then
            addPowerNumber = addPowerNumber + value * zItem.UseParams[1]
        end
    end

    self.NextPower.text = math.floor( UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) + addPowerNumber ).. "<size=45>/" .. Z_PlayerLevelUp[self.player.Level].Energy .. "</size>"
end

function this.InitPowerPropList(self)
    self.powerPropList = Game.Scene.Player:GetComponent("ItemComponent"):GetItemsByUesType(ItemUseType.ItemUseTypeGetPower)

    for index, value in ipairs(self.powerPropItemPool) do
        GameObject.Destroy(value)
    end
    self.powerPropItemPool = {}
    
    for index, powerPropInfo in ipairs(self.powerPropList) do
        local powerPropButton = self.powerPropItemPool[index]
        self.currentSelectItemList[powerPropInfo.TemplateId] = 0
        if powerPropButton == nil then
            powerPropButton = CS.UnityEngine.GameObject.Instantiate(self.powerPropitem)
            powerPropButton:SetActive(true)
            powerPropButton.transform:SetParent(self.powerPropitem.transform.parent)
            powerPropButton.transform.localPosition = Vector3.New(0,0,0)
            powerPropButton.transform.localScale = Vector3.New(1,1,1)

            self.powerPropItemPool[index] = powerPropButton
            UIPublic.InitItemIconNew(
                powerPropButton.transform:Find("ItemPrefab/Icon"):GetComponent("Image"), 
                powerPropButton.transform:Find("ItemPrefab/ItemBg"):GetComponent("Image"),
                RewardType.RewardTypeItem, powerPropInfo.TemplateId)
            powerPropButton.transform:Find("ItemPrefab/Num"):GetComponent("Text").text = powerPropInfo.Amount
            powerPropButton.transform:Find("ItemPrefab/Name/Value"):GetComponent("Text").text = powerPropInfo.config.Name

            UIUtil.AddBtnEvent(powerPropButton.transform:Find("ItemPrefab/Icon"),function()
                local addPowerNumber = 0
                local curPower = UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1])
                for key, value in pairs(self.currentSelectItemList) do
                    local zItem = Z_Item[key]
                    if zItem ~= nil then
                        addPowerNumber = addPowerNumber + value * zItem.UseParams[1]
                    end
                end

                if curPower+ addPowerNumber + Z_Item[powerPropInfo.TemplateId].UseParams[1] > 999 then
                    UIUtil.ToolTipFourth(string.gsub(LangUtil.GetSysLang(2118), "XX", Z_Misc["POWER_ITEM_USE_LIMIT"].Value[1]))
                    return
                end

                powerPropButton.transform:Find("MinusItem").gameObject:SetActive(true)
                if self.currentSelectItemList[powerPropInfo.TemplateId] + 1 > powerPropInfo.Amount then
                    return
                end
                self.currentSelectItemList[powerPropInfo.TemplateId] = self.currentSelectItemList[powerPropInfo.TemplateId] + 1
                powerPropButton.transform:Find("UseCount"):GetComponent("Text").text = self.currentSelectItemList[powerPropInfo.TemplateId] .. "/" .. powerPropInfo.Amount
                this.CalculateItemToPower(self)
            end)

            UIUtil.AddBtnEvent(powerPropButton.transform:Find("MinusItem"),function()
                self.currentSelectItemList[powerPropInfo.TemplateId] = self.currentSelectItemList[powerPropInfo.TemplateId] - 1
                powerPropButton.transform:Find("MinusItem").gameObject:SetActive(self.currentSelectItemList[powerPropInfo.TemplateId] ~= 0)
                powerPropButton.transform:Find("UseCount"):GetComponent("Text").text = self.currentSelectItemList[powerPropInfo.TemplateId] .. "/" .. powerPropInfo.Amount
                this.CalculateItemToPower(self)
            end)

            powerPropButton.transform:Find("MinusItem").gameObject:SetActive(false)
            powerPropButton.transform:Find("UseCount"):GetComponent("Text").text = self.currentSelectItemList[powerPropInfo.TemplateId] .. "/" .. powerPropInfo.Amount
        else
            powerPropButton.transform:Find("MinusItem").gameObject:SetActive(false)
            powerPropButton.transform:Find("ItemPrefab/Num"):GetComponent("Text").text = powerPropInfo.Amount
            powerPropButton.transform:Find("UseCount"):GetComponent("Text").text = self.currentSelectItemList[powerPropInfo.TemplateId] .. "/" .. powerPropInfo.Amount
        end
    end
end

function this.OnRefresh(self)
    local alreadyBuyTimes = 0
    self.currentDiamondToPowerList = {}
    self.currentSelectItemList = {}
    if self.shopComponent.PurchasesDetailList[StoreType.Power] ~= nil then
        for _, powerInfo in pairs(self.shopComponent.PurchasesDetailList[StoreType.Power]) do
            if powerInfo.buy_times ~= nil then
                alreadyBuyTimes = alreadyBuyTimes + powerInfo.buy_times
            end
        end
    end
    self.alreadyBuyTimes = alreadyBuyTimes

    currentSelectCount = 1

    self.currentNumberText.text = currentSelectCount
    self.CurrentPower.text = UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) .. "<size=45>/" .. Z_PlayerLevelUp[self.player.Level].Energy .. "</size>" 
    self.NextPower.text = math.floor( UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) ).. "<size=45>/" .. Z_PlayerLevelUp[self.player.Level].Energy .. "</size>" 
    self.MyDiamondTextNumber.text = UIPublic.GetItemAmount(Z_Misc["FREE_DIAMOND_ID"].Value[1])
    this.CalculateDianmondToPower(self, currentSelectCount)
    this.InitPowerPropList(self)
end

function this.OnUpdate(self)
    if UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1]) >= Z_PlayerLevelUp[self.player.Level].Energy then
        self.PowerRecoverText.gameObject:SetActive(false)
        return
    end

    self.PowerRecoverText.gameObject:SetActive(true)
    leftTime = self.player.EnergyNextTime + 300 - TimeUtil.ServerTime--+ 300 - os.clock()
    local timetable = TimeUtil.ConvertTimeForm(leftTime)
    local secondText = timetable.second
    if tonumber(secondText) < 10 then
        secondText = "0" .. secondText
    end
    self.PowerRecoverText.text = string.gsub(LangUtil.GetSysLang(2110), "XX", timetable.minute .. ":" .. secondText)
end

function this.OnCreate(self)
    base.OnCreate(self)

    self.player = Game.Scene.Player
    self.shopComponent = Game.Scene.Player:GetComponent("ShopComponent") 
    
    self.powerPropItemPool = {}
    self.currentSelectItemList = {}

    self.eventBg = self.rc:GetObject("EventBg")
    self.UseItem = self.rc:GetObject("UseItem")
    self.UseDiamond = self.rc:GetObject("UseDiamond")
    self.UseItemContent = self.rc:GetObject("UseItemContent")
    self.UseDiamondContent = self.rc:GetObject("UseDiamondContent")
    self.CancelButton = self.rc:GetObject("CancelButton")
    self.ConfirmButton = self.rc:GetObject("ConfirmButton")
    self.plusButton = self.rc:GetObject("PlusButton")
    self.minusButton = self.rc:GetObject("MinusButton")
    self.maxButton = self.rc:GetObject("MaxButton")
    self.minButton = self.rc:GetObject("MinButton")
    self.powerPropitem = self.rc:GetObject("PowerPropitem")
    self.powerPropitem:SetActive(false)
    self.currentNumberText = self.rc:GetObject("NumberText"):GetComponent("Text")

    self.PowerRecoverText = self.rc:GetObject("PowerRecoverText"):GetComponent("Text")
    self.DiamondRecoverText = self.rc:GetObject("DiamondRecoverText")
    self.LeftBuyTimes = self.rc:GetObject("LeftBuyTimes"):GetComponent("Text")
    self.PowerText = self.rc:GetObject("PowerText")
    self.CostStarLIghtText = self.rc:GetObject("CostStarLIghtText")

    self.CurrentPower = self.rc:GetObject("CurrentPower"):GetComponent("Text")
    self.NextPower = self.rc:GetObject("NextPower"):GetComponent("Text")

    self.CostDiamondTextNumber = self.rc:GetObject("CostDiamondTextNumber"):GetComponent("Text")
    self.MyDiamondTextNumber = self.rc:GetObject("MyDiamondTextNumber"):GetComponent("Text")
    self.UnitRecoverText = self.rc:GetObject("UnitRecoverText"):GetComponent("Text")
    self.UnitPriceText = self.rc:GetObject("UnitPriceText"):GetComponent("Text")

    UIUtil.AddBtnEvent(self.eventBg,function()self.ctrl:CloseSelf()end,"Back")
    UIUtil.AddBtnEvent(self.CancelButton,function()self.ctrl:CloseSelf()end,"Back")

    UIUtil.AddBtnEvent(self.ConfirmButton,function()
        if currentSelectType == SelectType.UseDiamond then
            this.BuyPowerByDiamond(self)
        else
            this.BuyPowerByItem(self)
        end
    end)

    UIUtil.AddBtnEvent(self.UseItem,function()
        currentSelectType = SelectType.UseItem
        self.CostStarLIghtText:GetComponent("Text").text = LangUtil.GetSysLang(2114)
        this.clickButton(self)
    end)

    UIUtil.AddBtnEvent(self.UseDiamond,function()
        currentSelectType = SelectType.UseDiamond
        self.CostStarLIghtText:GetComponent("Text").text = LangUtil.GetSysLang(2113)
        this.clickButton(self)
    end)

    UIUtil.AddBtnEvent(self.plusButton,function()this.PlusButton(self)end)
    UIUtil.AddBtnEvent(self.minusButton,function()this.MinusButton(self)end)
    UIUtil.AddBtnEvent(self.maxButton,function()this.MaxButton(self)end)
    UIUtil.AddBtnEvent(self.minButton,function()this.MinButton(self)end)

    self.timeUpdate=function(self)
        self:OnUpdate()
    end
    self.timer = TimerManager:GetInstance():GetTimer(0.001, self.timeUpdate , self)
    -- 启动定时器
    self.timer:Start()

    this.InitPowerItemList(self)
end

function this.OnLangCreate(self)
    self.PowerText:GetComponent("Text").text = LangUtil.GetSysLang(171)
    self.CostStarLIghtText:GetComponent("Text").text = LangUtil.GetSysLang(2114)

    self.UseItem.transform:Find("UseItemText"):GetComponent("Text").text = LangUtil.GetSysLang(2114)
    self.UseDiamond.transform:Find("UseItemText"):GetComponent("Text").text = LangUtil.GetSysLang(2115)

    --self.DiamondRecoverText:GetComponent("Text").text = LangUtil.GetSysLang(2111)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_ITEM_INFO_CHG, this.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_ITEM_INFO_CHG)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.currentDiamondToPowerList = {}
    this.OnRefresh(self)
    this.clickButton(self)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

