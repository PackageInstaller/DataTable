---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UICardListView : UIBaseView
---@field ctrl UICardListCtrl
local UICardListView = BaseClass("UICardListView",UIBaseView);
local base = UIBaseView
local this = UICardListView

local recordOrder = {order = 1,kind = 1}  --是否正序  顺序类型
--- 筛选
local screenTypes

local selectColor = Color.New(1,1,1)
local defColor = Color.New(130/255,160/255,228/255)

local function ResetScreenTypes()
    screenTypes = UIPublic.GetDefaultScreenTypes()
    recordOrder.order = 1
end

local function SetActive(btn,bool)
    local transform = btn.transform
    --transform:Find("Text"):GetComponent("Text").color = (bool and {selectColor} or {defColor})[1]
    transform:Find("Active").gameObject:SetActive(bool)
    transform:GetComponent("Button").enabled  = (not bool)
end

function this.OnClickOrderButton(self)
    recordOrder.order = (recordOrder.order == 1 and {2} or {1} )[1]
    self.sortTxt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    self:InitCardListData()
    self:RefreshContent()
end

---@param self UICardListView
local function OnScreen(self)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.currentClass = self.class
    -- uiData.cardList = self.list
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        self:InitButtons()
        self:InitCardListData(self)
        self:RefreshContent(self)
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardSort,uiData)
end

--
--local isViewChange = false
--local viewBuffer = false
--local viewBusing = true

function this.InitCardListData(self)
    self.list = {}
    for k,v in table.pairsByKeys(self.cards) do
        table.insert(self.list,v)
    end

    self.list = UIPublic.ScreenFunc(self.list, screenTypes)
    table.sort(self.list, function(a,b) return UIPublic.SortFunc(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.list = table.reverseTable(self.list)
    end

    if self.model.currentCard ~= nil then
        table.removeget(self.list, function(v) return v.Id == self.model.currentCard.Id end)
        table.insert(self.list, 1, self.model.currentCard)
    end
end

function this.InitContent(self)  --刷新角色
    self.scroll:Clear()
    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    local cardHint = hintComponent.Card
    local prefabName = "CardItemNew"
    if self.ctrl.GetItemPrefabName ~= nil then
        prefabName = self.ctrl.GetItemPrefabName()
    end
    self.scroll:ScrollInit(self.list, self.scrollView, prefabName, function (arg)
        arg.go:SetActive(true)
        local transform = arg.go.transform
        local cardInfo = transform:Find("CardInfo").gameObject
        local isRoom = transform:Find("CardInfo/other/IsRoom").gameObject
        local isHome = transform:Find("CardInfo/other/IsHome").gameObject
        local isSupport = transform:Find("CardInfo/other/IsSupport").gameObject
        local TextBg = transform:Find("CardInfo/Text_bg").gameObject
        local hint = transform:Find("CardInfo/Hint").gameObject
        cardInfo:SetActive(true)
        UIPublic.InitCardItemDataNew(arg.data, cardInfo)
        isRoom:SetActive(self.player.BedroomCardId == arg.data.Id)
        isHome:SetActive(self.player.MainUICardId == arg.data.Id)
        isSupport:SetActive(self.player.AidId == arg.data.Id)
        TextBg:SetActive(false)
        if self.ctrl:IsCardInit() then
            self.ctrl:CardInit(arg.data, cardInfo.transform)
        end
        if self.ctrl:isAddHint() then
            cardHint:GetChild("Cards"):GetChild(arg.data.Id):AddObject(hint, "CardItem")
        end
        arg.go.transform:SetSiblingIndex(arg.index - 1)
        UIUtil.AddBtnEventNoBug(arg.go, function(go)
            self.ctrl:OnClickCardButton(arg.data, arg.go, self.list)

            if self.ctrl:ClickCardToResetScreenTypes() then
                ResetScreenTypes()
            end
        end)
    end)
end

function this.RefreshContent(self)
    local player = Game.Scene.Player
    local cardMax = player.CardMax
    self.holdNumTxt.text  = table.count(self.cards).."/"..cardMax
    self.hint:SetActive(table.count(self.list) <= 0)
    self.scroll:RefreshData(self.list)
end

---@param self UICardListView
local function OnClickLeftBtn(self,id, force)
    if not force and self.class == id then
        return
    end

    -- 清空 排序里面的 Class
    if id == 0 then
        screenTypes.class = {}
    else
        screenTypes.class = {id}
    end
    self.class = id
    self:InitCardListData()
    self:RefreshContent()
    SetActive(self.allBtn,id == 0)
    for k,v in pairs(self.leftBtnTab) do
        SetActive(v,k == id)
        
    end
end

function this.InitButtons(self)
    self.sortTxt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    SetActive(self.allBtn, self.class == 0)
    for k,v in pairs(self.leftBtnTab) do
        SetActive(v,k == self.class)
    end
end

function this.OnLangCreate(self)
    --标签栏
    local root1 = self.langRc:GetObject("LeftBtnCtrl").transform
    for i = 0, root1.childCount-1 do
        UIPublic.SetClassSprite(root1:GetChild(i):Find("Image"):GetComponent("Image"), i, false)
        UIPublic.SetClassSprite(root1:GetChild(i):Find("Active/Image"):GetComponent("Image"), i, true)
    end

    --持有书
    self.holdNumTxt = LangUtil.BindText(self.langRc:GetObject("NumInfo").transform:Find("Value"),FontType.All_Number)
    LangUtil.BindText(self.langRc:GetObject("NumInfo").transform:Find("Text"))

    LangUtil.BindText(self.langRc:GetObject("ScreenButton").transform:Find("Text")).text =  LangUtil.GetSysLang(155)
    LangUtil.GetSpriteLang(426, function(Sprite) self.langRc:GetObject("ConfirmText"):GetComponent("Image").sprite = Sprite  end) -- 确认
    self.sortTxt = LangUtil.BindText(self.sortOrder.transform:Find("Text"))
end

function this.OnCreate(self)
    base.OnCreate(self);
    screenTypes = UIPublic.GetDefaultScreenTypes()
    recordOrder = {order = 1,kind = 1}
    self.class = 0

    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(5)
    self.hint = self.rc:GetObject("Hint")
    self.vertical = self.rc:GetObject("Scrollbar Vertical")
    self.scrollView = self.rc:GetObject("Scroll View"):GetComponent("ScrollRect")
    local backBtn = self.rc:GetObject("BackButton")
    self.sort_btn =  self.rc:GetObject("SortButton")
    self.sortOrder = self.rc:GetObject("SortOrder")
  
    self.content = self.rc:GetObject("Content")
    self.numInfo = self.rc:GetObject("NumInfo").transform
    self.leftBtnTab = {}

    local leftBtnCtrl = self.rc:GetObject("LeftBtnCtrl").transform
    self.allBtn = leftBtnCtrl:GetChild(0).gameObject
    for i = 0, leftBtnCtrl.childCount - 1 do
        local child =  leftBtnCtrl:GetChild(i)
        local btn = child.gameObject
        self.leftBtnTab[i] = btn
        UIUtil.AddBtnEvent(btn,function (go)
            if self.clickTabTime ~= nil and TimeUtil.GetServerTime() - self.clickTabTime < ClickTimeInterval then
                return
            end
            self.clickTabTime = TimeUtil.GetServerTime()

            OnClickLeftBtn(self, i)
        end)
    end
    
    UIUtil.AddBtnEvent(self.sort_btn,function(v) OnScreen(self) end)
    UIUtil.AddBtnEvent(self.sortOrder,function(v)
        self:OnClickOrderButton()
    end)
    
    UIPublic.SetBackButton(
        backBtn,
        self.ctrl.GetUIName(),
        415
    )

    self.confirmButton = self.rc:GetObject("ConfirmButton")
    self.player = Game.Scene.Player

    self.list = {}
    self:InitContent()

    self.confirmButton:SetActive(self.ctrl:ShowConfirmButton())
    UIUtil.AddBtnEvent(self.confirmButton,function(v) 
        self.ctrl:OnConfirmButton()
    end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    if self.ctrl:OnEnableResetScreenTypes() then
        ResetScreenTypes()
    end
    self:OnRefresh()
end

---@param self UICardListView
function this.OnRefresh(self)
    self.cards = self.ctrl:GetCardList()


    self.hint:SetActive(table.count(self.cards) == 0)

    self:InitButtons()
    coroutine.start(function () 
		coroutine.waitforframes(10)
		OnClickLeftBtn(self, self.class, true)
	end)

    local cardMax = self.player.CardMax
    self.holdNumTxt.text  = table.count(self.cards).."/"..cardMax
    self.hint:SetActive(table.count(self.list) <= 0)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_CARD_INFO_CHG, self.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.ON_CARD_INFO_CHG)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    -- UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    -- UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self)
    
    coroutine.start(function () 
        coroutine.waitforframes(1)
        local name = UIManager:GetInstance():GetLastBgWindowName()
        if name == UIWindowNames.UIHome or name == UIWindowNames.UIMainIntens then
            self.scroll:ClearRecord()
        else
            self.scroll:RecordPosition()
        end
    end)
end

function this.OnDestroy(self)
    base.OnDestroy(self);
    self.scroll:Dispose()
end

return this;

