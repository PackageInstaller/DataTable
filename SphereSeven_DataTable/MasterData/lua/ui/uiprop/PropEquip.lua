---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/18 11:29
---
---@class UIPropEquip
---@field cur_equip Equip @ 当前选中装备
local PropEquip = {};
local this = PropEquip;
local pfbName = "EquipItemNew_Prop"

local recordOrder = { order = 1, kind = 1 }  --是否正序  顺序类型
local screenTypes = { star = 0, Part = 0, exclusive = 0, isEquip = 0 }
-- local color1 = Color.New(103/255,111/255,126/255)

local EQUIPMENT_MAX_LEVEL = tonumber(Z_Misc["EQUIPMENT_MAX_LEVEL"].Value[1])
local EQUIP_CAPACITY_ITEM_SHOP_ID = tonumber(Z_Misc["EQUIP_CAPACITY_ITEM_DATA"].Value[1])
local EQUIP_CAPACITY_ITEM_ID = tonumber(Z_Misc["EQUIP_CAPACITY_ITEM_DATA"].Value[2])

function this.OnScreenButton(propSelf)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.callBack = function(list, kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        this.cur_equip = nil
        this.InitEquipListData(propSelf)
        this.vs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipSort1, uiData)
end

local function InitSortButton(propSelf)
    this.vs_sortBtnText.text = (recordOrder.order == 1 and { LangUtil.GetSysLang(154) } or { LangUtil.GetSysLang(153) })[1]
end

function this.OnSortButton(propSelf)
    recordOrder.order = (recordOrder.order == 1 and { 2 } or { 1 })[1]
    InitSortButton(this)
    this.cur_equip = nil
    this.InitEquipListData(propSelf)
end

---@param propSelf UIPropView
function this.OnResolve(propSelf)
    if this.cur_equip.Lock then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1035)) -- 装备已被锁定
        return
    end

    ---@type ToolTipGetItemData
    local uiData = {}
    uiData.itemText = LangUtil.GetSysLang(252) -- 分解可获得
    uiData.items = UIPublic.GetEquipDecomposeItem(this.cur_equip.TemplateId, this.cur_equip.Star, this.cur_equip.Level)

    uiData.callBack = function()
        PublicRequest.SendRequest(
            PROTOCOL.EquipmentPackScrapReq,
            {eids = {this.cur_equip.Id}},
            function(response, errorCode)
                UIPublic.OpenRewardUIByRewardDateils(response.reward_details)
            end
        )
    end

    local bottomText = {}
    if this.cur_equip.Level > 1 then
        table.insert(bottomText, LangUtil.GetSysLang(1300)) -- 该装备已升级
    end

    if this.cur_equip.characterId ~= 0 and this.cur_equip.characterId ~= nil then
        table.insert(bottomText, LangUtil.GetSysLang(1301)) -- 该装备已装备
    end

    -- if table.count(bottomText) > 0 then
    --     uiData.bottomText = table.concat(bottomText, "\n")
    --     uiData.topText = LangUtil.GetSysLang(788) -- 确定要进行装备分解吗？
    -- else
    --     uiData.bottomText = LangUtil.GetSysLang(788) -- 确定要进行装备分解吗？
    -- end
    uiData.bottomText = LangUtil.GetSysLang(788) .. "\n" .. table.concat(bottomText, "\n") -- 确定要进行装备分解吗？

    UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGetItem, uiData)

end

local ItemTextColor = {
    [Rarity.R] = "B4A8C2",
    [Rarity.SR] = "CC68FF",
    [Rarity.SSR] = "E4A15B",
}

---@param propSelf UIPropView
function this.InitEquipInfo(propSelf)
    if this.cur_equip == nil or this.cur_equip.TemplateId == nil then
        this.name.text = ""
        this.part.text = ""
        this.limitText.text = ""
        this.limitValue.text = ""
        this.prop.text = ""
        this.effect.text = ""
        this.desc.text = ""
        this.lock.gameObject:SetActive(false)
    else
        this.lock.gameObject:SetActive(true)
        this.lock0:SetActive(not this.cur_equip.Lock)
        this.lock1:SetActive(this.cur_equip.Lock)

        local zEquip = Z_Equip[this.cur_equip.TemplateId]

        this.name.text = zEquip.Name
        this.part.text = this.partNames[zEquip.Part]
        if zEquip.Exclusive ~= 0 and Z_Character[zEquip.Exclusive] ~= nil then
            this.limitText.text = LangUtil.GetSysLang(1453) -- 专属
            local color = ItemTextColor[Z_Character[zEquip.Exclusive].Rarity]
            this.limitValue.text = string.gsub(LangUtil.GetSysLang(1454), "XXX", "<color=#" .. color .. ">" .. Z_Card[zEquip.Exclusive].Name .. "</color>")
        else
            this.limitText.text = LangUtil.GetSysLang(1182) -- 职业
            local className = ""
            if zEquip.Class ~= nil then
                if table.count(zEquip.Class) >= 6 then
                    className = LangUtil.GetSysLang(1380) -- 全职业通用
                else
                    for index, value in ipairs(zEquip.Class) do
                        if SysLangKeys.ClassName[value] ~= nil then
                            className = className .. " " .. LangUtil.GetSysLang(SysLangKeys.ClassName[value])
                        end
                    end
                end
            end
            this.limitValue.text = className
        end

        local propertyText = ""
        local propertyList = UIPublic.GetEquipPropertyByEid(this.cur_equip.Id)
        for _, value in ipairs(PropertySort) do
            local propertyValue = propertyList[value.type]
            if propertyValue ~= nil then
                local zProperty = Z_Property[value.type]
                local sign = propertyValue > 0 and "+" or "-"
                if value.IsPct then
                    propertyValue = propertyValue.. "%"
                end
                if propertyText == "" then
                    propertyText =  LangUtil.GetSysLang(zProperty.SysLangKey) .. " " .. sign .. propertyValue
                else
                    propertyText = propertyText .. "\n" .. LangUtil.GetSysLang(zProperty.SysLangKey) .. " " .. sign .. propertyValue
                end
            end
        end

        this.prop.text = propertyText
        
        local equipEffectText =UIPublic.GetEquipEffectTextByEid(this.cur_equip.Id)
        if string.IsNullOrEmpty(equipEffectText) then
            -- this.effect.color = Color.black
            this.effect.text = LangUtil.GetSysLang(911)
        else
            -- this.effect.color = Color.white
            this.effect.text = equipEffectText
        end
        this.desc.text = zEquip.Desc

        UIPublic.InitEquipItemNew(this.equipItem.transform, this.cur_equip)
        
    end

    UIPublic.InitButton(this.levelUpButton, this.cur_equip ~= nil and this.cur_equip.Level < EQUIPMENT_MAX_LEVEL)
    UIPublic.InitButton(this.scrapButton, this.cur_equip ~= nil and not this.cur_equip.Lock)
end

---@param propSelf UIPropView
local function OnItem(propSelf, equipId)
    this.cur_equip = Game.Scene.Player:GetComponent("EquipComponent"):Get(equipId)
    this.InitEquipInfo(propSelf)
end

---@param propSelf UIPropView
function this.InitEquipListData(propSelf)
    this.vs_list = {}
    this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
    for k, v in table.pairsByKeys(this.equips) do
        table.insert(this.vs_list, v)
    end

    this.vs_list = UIPublic.EquipScreenFunc(this.vs_list, screenTypes)
    table.sort(this.vs_list, function(a, b)
        return UIPublic.EquipSortFunc(a, b, recordOrder)
    end)

    if recordOrder.order ~= 1 then
        this.vs_list = table.reverseTable(this.vs_list)
    end
    if this.cur_equip == nil then
        if table.count(this.vs_list) > 0 then
            this.cur_equip = this.vs_list[1]
        else
            this.cur_equip = nil
        end
    elseif not table.any(this.equips, function(v) return v.Id == this.cur_equip.Id end) then
        this.cur_equip = this.vs_list[1]
    end
    propSelf:InitHint(table.count(this.vs_list) == 0)
    this.equipHoldNumValue.text = table.count(this.equips) .. "/" .. Game.Scene.Player:GetComponent("EquipComponent"):GetBagCapacity()

    this.root:SetActive(table.count(this.vs_list) > 0)
    propSelf:InitHint(table.count(this.vs_list) == 0)

    this.vs_scroll:RefreshData(this.vs_list)
    this.InitEquipInfo(propSelf)
end

---@param propSelf UIPropView
function this.InitEquipList(propSelf)
    this.vs_scroll:Clear()
    this.vs_scroll:ScrollInit(this.vs_list, this.scrollView, pfbName, function(arg)
        local gameObject = arg.go
        local equip = arg.data
        local select = gameObject.transform:Find("Bg/Select").gameObject
        gameObject.transform:Find("Bg/Mask").gameObject:SetActive(false)
        UIPublic.InitEquipItemNew(gameObject.transform, equip)
        if this.cur_equip ~= nil then
            select:SetActive(this.cur_equip.Id == equip.Id)
        end
        UIUtil.AddBtnEvent(gameObject, function(go)
            OnItem(propSelf, equip.Id)
            local Content = this.scrollView.transform:Find("Viewport/Content")
            for i = 0, Content.childCount - 1 do
                if Content:GetChild(i).gameObject ~= gameObject then
                    Content:GetChild(i).gameObject.transform:Find("Bg/Select").gameObject:SetActive(false)
                else
                    select:SetActive(true)
                end
            end
        end)
    end)
end

---@param propSelf UIPropView
function this.Init(propSelf)
    if not this.visit_init then
        this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
        InitSortButton(this)
        this.InitEquipListData(propSelf)
        this.visit_init = true
    else
        this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
        propSelf:InitHint(table.count(this.vs_list) == 0)
        this.equipHoldNumValue.text = table.count(this.equips) .. "/" .. Game.Scene.Player:GetComponent("EquipComponent"):GetBagCapacity()
    end
end

---@param propSelf UIPropView
---@param dataStatus {isUpdate:boolean, isRemove:boolean} @ isUpdate - 是否有更新, isRemove - 是否有删除
function this.Refresh(propSelf, dataStatus)
    this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
    InitSortButton(this)
    if this.cur_equip ~= nil then
        if table.any(this.equips, function(v) return v.Id == this.cur_equip.Id end) then
            this.cur_equip = Game.Scene.Player:GetComponent("EquipComponent"):Get(this.cur_equip.Id)
        else
            this.cur_equip = nil
        end
    end
    this.InitEquipListData(propSelf)
    if dataStatus == nil then
        this.vs_scroll:MoveTop()
    else
        if dataStatus.isRemove then
            this.vs_scroll:MoveTop()
        end
    end
end

---@param propSelf UIPropView
function this.OnLangCreate(propSelf)
    local rc = propSelf.equipPanel.transform:GetComponent("ReferenceCollector")

    LangUtil.BindText(this.screenBtn:Find("Text")).text = LangUtil.GetSysLang(155)
    this.vs_sortBtnText = LangUtil.BindText(this.sortBtn:Find("Text"))
    LangUtil.BindText(this.scrapButton:Find("Text")).text = LangUtil.GetSysLang(225) -- 分解
    LangUtil.BindText(this.allScrapBtn:Find("Text")).text = LangUtil.GetSysLang(1174) -- 批量分解
    LangUtil.BindText(this.levelUpButton:Find("Text")).text = LangUtil.GetSysLang(402) -- 强化

    this.name = LangUtil.BindText(rc:GetObject("Name"))

    local part = rc:GetObject("Part").transform
    LangUtil.BindText(part:Find("Text")).text = LangUtil.GetSysLang(680)--部位
    this.part = LangUtil.BindText(part:Find("Value"))

    local limit = rc:GetObject("Limit").transform
    this.limitText = LangUtil.BindText(limit:Find("Text"))
    this.limitValue = LangUtil.BindText(limit:Find("Value"))

    local porp = rc:GetObject("Prop").transform
    LangUtil.BindText(porp:Find("Text")).text = LangUtil.GetSysLang(683)--基础属性
    this.prop = LangUtil.BindText(porp:Find("Value"))

    local effect = rc:GetObject("Effect").transform
    LangUtil.BindText(effect:Find("Text")).text = LangUtil.GetSysLang(912)--装备效果
    this.effect = LangUtil.BindText(effect:Find("Value"))

    local desc = rc:GetObject("Desc").transform
    this.desc = LangUtil.BindText(desc:Find("Value"))

    this.equipHoldNumValue = LangUtil.BindText(propSelf.equipTopRc:GetObject("HoldNumValue"))
    LangUtil.BindText(propSelf.equipTopRc:GetObject("HoldNumText")).text = LangUtil.GetSysLang(354)
end

---@param propSelf UIPropView
function this.OnCreate(propSelf)
    this.vs_list = {}
    local rc = propSelf.equipPanel.transform:GetComponent("ReferenceCollector")
    this.vs_scroll = VerticalScroll.New()
    this.vs_scroll:SetUpdateCount(5)

    this.scrollView = rc:GetObject("EquipScrollView"):GetComponent("ScrollRect")
    this.screenBtn = propSelf.equipTopRc:GetObject("ScreenButton").transform
    this.sortBtn = propSelf.equipTopRc:GetObject("SortButton").transform
    this.allScrapBtn = propSelf.equipTopRc:GetObject("ScrapButton").transform
    this.addButton = propSelf.equipTopRc:GetObject("AddButton")
    this.levelUpButton = rc:GetObject("LevelUpButton").transform
    this.scrapButton = rc:GetObject("ScrapButton").transform
    this.lock = rc:GetObject("Lock").transform
    this.lock0 = this.lock:Find("0").gameObject
    this.lock1 = this.lock:Find("1").gameObject

    this.equipItem = rc:GetObject("EquipItemNew")
    this.root = rc:GetObject("Root")

    UIUtil.AddBtnEvent(this.lock, function()
        PublicRequest.SendRequest(
            PROTOCOL.EquipmentPackLockReq,
            {
                eid = this.cur_equip.Id,
                lock = not this.cur_equip.Lock
            },
            nil
        )
    end)

    UIUtil.AddBtnEvent(this.screenBtn, function() this.OnScreenButton(propSelf) end)
    UIUtil.AddBtnEvent(this.sortBtn, function() this.OnSortButton(propSelf) end)
    UIUtil.AddBtnEvent(this.levelUpButton, function() 
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipLevelUp,{equipId = this.cur_equip.Id})
    end)
    UIUtil.AddBtnEvent(this.scrapButton, function() this.OnResolve(propSelf) end)
    UIUtil.AddBtnEvent(this.allScrapBtn, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipScrap)
    end)

    UIUtil.AddBtnEvent(this.addButton, function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop, {
            ShopTitleType = ShopTitleType.General,
            GeneralShopType = GeneralShopType.Normal, -- 非GeneralShop不用填
        })
    end)

    this.targetNames = {LangUtil.GetSysLang(175),LangUtil.GetSysLang(176),LangUtil.GetSysLang(675),}
    this.atkRangeNames = {LangUtil.GetSysLang(185),LangUtil.GetSysLang(186),LangUtil.GetSysLang(675)}
    this.partNames = {LangUtil.GetSysLang(243),LangUtil.GetSysLang(244),LangUtil.GetSysLang(245),LangUtil.GetSysLang(246),
                      LangUtil.GetSysLang(247),LangUtil.GetSysLang(248),}
end

function this.OnEnable(propSelf)
    this.InitEquipList(propSelf)
end

function this.UpdateItem(propSelf)
    this.visit_init = false
end

function this.OnDisable(propSelf)
    this.vs_scroll:Dispose()
    if this.visit_init then
        this.visit_init = false
    end
    screenTypes = { star = 0, Part = 0, exclusive = 0, isEquip = 0 }
    recordOrder.order = 1
end

return this