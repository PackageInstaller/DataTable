---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/3 13:59
---

local UILaunchAtkCtrl = BaseClass("UILaunchAtkCtrl",UIBaseCtrl);


local function OnSectionChg(self,id,difficulty)
    UIData.SetSectionId(id,difficulty);
end

local function LaunchAtk(data)
    local ac=Game.Scene:GetComponent("AgainstComponent")
    --ac.CurLevelId = data.CurLevelId;
    --ac.CurLevelDifficulty = data.CurLevelDifficulty;
    ac:SetCurLevel(data)
    Game.Scene.SceneComponent:SwitchScene(SceneConfig.BattleScene)

end


local function OnQuickBattle(self,data)
    print(table.dump(data));
    Game.Scene:GetComponent("AgainstComponent").StorySkip = data.Skip
    if data.Skip then
        LaunchAtk(data)
    else
        local curLevelId = Game.Scene:GetComponent("AgainstComponent").CurLevelId
        local zStorySection = self.model.levelExcel[curLevelId]
        Game.Scene:GetComponent("DialogComponent"):OpenDialog(zStorySection.ChapterId, zStorySection.StoryId, StoryMode.BattleBefore, function() LaunchAtk(data) end, true)
    end
end

local function SendMopUpRequest(self,data)
   
end


function UILaunchAtkCtrl.SendCustoms(self, levelId,diff) --发送通关请求
    if self.model.levelExcel[levelId].LevelId == 0 then
        coroutine.start(function ()
            local levelType = LevelType.LevelTypeStory
            if Z_GameEventsLevel[levelId] ~= nil then
                levelType = LevelType.LevelTypeGameEvent
            end
            local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
            PROTOCOL.PassNoBattleLevelReq, {
                level_type = levelType,
                level_id = levelId,
            })

            if info.reward_result ~= nil and info.reward_result ~= {} then
                UIPublic.OpenRewardUI(info.reward_result)
            end
        end)
                
        -- coroutine.start(function ()
        --     local reqData = {
        --         LevelTypeInfo = 0,
        --         LevelId = levelId,
        --         Difficulty = diff,
        --         IsReachRewardCond1 = 1,
        --         IsReachRewardCond2 = 1,
        --         IsReachRewardCond3 = 1,
        --     }
            -- local response = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
            --         OuterOpcode.Name2Code.ETModel_C2M_BattleSettle,reqData)
            -- if response.Error == ErrorCode.ERR_Success then
            -- end
        -- end)
    --else
    --    coroutine.start(function ()
    --        local energyData = {
    --            LevelTypeInfo = 0,
    --            LevelId =  levelId,
    --            Difficulty = diff,
    --        }
    --        local energyResponse = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
    --                OuterOpcode.Name2Code.ETModel_C2M_BattleEnergy,energyData)
    --        if energyResponse.Error == ErrorCode.ERR_Success then
    --            Game.Scene.Player.Energy=energyResponse.PlayerEnergy
    --            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG)
    --            local reqData = {
    --                LevelTypeInfo = 0,
    --                LevelId = levelId,
    --                Difficulty = diff,
    --                IsReachRewardCond1 = 1,
    --                IsReachRewardCond2 = 1,
    --                IsReachRewardCond3 = 1,
    --            }
    --            local response = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
    --                    OuterOpcode.Name2Code.ETModel_C2M_BattleSettle,reqData)
    --            DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_STORY_CHG)
    --            if response.Error == ErrorCode.ERR_Success then
    --            end
    --        end
    --    end)
    end
    
end

local function PlaySectionStory(self,data,diff)
    local tipData = {};
    tipData.title = LangUtil.GetSysLang(238)
    tipData.message = LangUtil.GetSysLang(237)
    tipData.callBack = function()
        local zStorySection = self.model.levelExcel[data.Id]
        Game.Scene:GetComponent("DialogComponent"):OpenDialog(zStorySection.ChapterId, zStorySection.StoryId, StoryMode.BattleBefore, function()
            self.SendCustoms(self, data.Id, diff)
        end, false)
    end
    UIUtil.ToolTipFirst(tipData);
end

local function OpenFormatWindow(self)
    print("--打开编成面板")
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew);
end


local function OpenSelectWindow(self)
    print("--打开选择界面")
    UIData.select = self.model:GetSelectData();
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISelect);
end

local function OpenReadyWindow(self,data)
    print("--打开准备界面");
    UIUtil.OpenFormat(data)
end

local function OnOpenMonsterMessageWindow(monsterData)
    print("--打开敌人详情界面");
    local showData = {};
    showData.monster = monsterData;
    showData.showType = 4;
    UIUtil.OpenThingsDetailWindow(showData);
end

local function OnOpenItemMessageWindow(gameObject)
    print("--打开物品详情界面");
    local showData = gameObject:GetComponent("BindData"):Get("showData");
    UIUtil.OpenThingsDetailWindow(showData);
end

local function CloseSelf()
    UIManager:GetInstance():CloseWindow(UIWindowNames.UILaunchAtkBg);
end

local function OpenIntensWindow()
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMainIntens);
end
UILaunchAtkCtrl.OpenIntensWindow = OpenIntensWindow
UILaunchAtkCtrl.OnSectionChg = OnSectionChg
UILaunchAtkCtrl.OnOpenMonsterMessageWindow = OnOpenMonsterMessageWindow
UILaunchAtkCtrl.OnOpenItemMessageWindow = OnOpenItemMessageWindow
UILaunchAtkCtrl.OpenFormatWindow = OpenFormatWindow
UILaunchAtkCtrl.CloseSelf = CloseSelf
UILaunchAtkCtrl.OpenReadyWindow = OpenReadyWindow
UILaunchAtkCtrl.OpenSelectWindow = OpenSelectWindow
UILaunchAtkCtrl.OnQuickBattle = OnQuickBattle
UILaunchAtkCtrl.SendMopUpRequest = SendMopUpRequest
UILaunchAtkCtrl.PlaySectionStory = PlaySectionStory

return UILaunchAtkCtrl