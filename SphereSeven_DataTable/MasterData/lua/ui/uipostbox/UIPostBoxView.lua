---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UIPostBoxView = BaseClass("UIPostBoxView",UIBaseView)
local base = UIBaseView
local this = UIPostBoxView
local pfbName = "PostItem"
local pfbRewardName = "PostRewardItem"
local pfbTextLineItem = PathUtil.Path_UIPrefabsItems .. "TextLineItem.prefab"

local function UpdatePostState(self, clickPost)
    self:InitPostContent(true)
    
    if table.count(self.postList) <= 0 or IsNull(clickPost) then
        return
    end

    for k,v in table.pairsByKeys(self.listCommon) do
        if v.mid == clickPost.mid then
            self.panelIndex[self.kindId] = k
            break
        end
    end
    
    local transform = self.postList[clickPost.mid].gameObject.transform
    
    for i, v in pairs(self.postList) do
        local select = v.gameObject.transform:Find("IsSelect").gameObject
        select:SetActive(v.post.mid == clickPost.mid)
        v.gameObject:GetComponent("Button").enabled = v.post.mid ~= clickPost.mid
    end

    --State  0.未读(显示红点)  2.已领取  1.已读(领取、未领取)
    --local hint = transform:Find("Hint").gameObject
    local isGet = transform:Find("Icon/IsGet").gameObject
    isGet:SetActive(#clickPost.rewards > 0 and clickPost.status == MailStatus.MailStatusReceived)
    transform:Find("Icon/IsGet").gameObject:SetActive(clickPost.status == MailStatus.MailStatusReceived)
    --hint:SetActive(clickPost.State == 0 )
end


local function RemovePostItem(self,post) --删除邮件
    local mid = post.mid
    if self.post ~= nil and self.post.mid == mid then
        self.post = nil
    end
    local gameObject = self.postList[mid].gameObject
    ListChildPool:GetInstance():Remove(gameObject)
    table.removebyvalue(self.postList,self.postList[mid])
    Game.Scene.Player:GetComponent("PostBoxComponent"):Remove(mid)
end

local function OnClickLeftPostItem(self, clickPost)
    self.post = clickPost
    UpdatePostState(self, clickPost)
    --this.InitContent(self)
    -- if clickPost and clickPost.State == 0 then
    --     coroutine.start(function()
    --         -- UIUtil.ActiveLoad(LangUtil.GetSysLang(3066))
    --         local reqData = {mid = clickPost.mid,Type = 0}
    --         local response =coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
    --                 OuterOpcode.Name2Code.ETModel_C2M_OperationMail,reqData)
    --         if response.Error == ErrorCode.ERR_Success then
    --             clickPost.State = 1
    --             self.postHint:AddCount(-1)
    --             UpdatePostState(self, clickPost)
    --         end
    --         -- UIUtil.DeActiveLoad()
    --     end)
    -- else
    --     UpdatePostState(self, clickPost)
    -- end
end

local function GetPostData(self, post)
    local data = {}
    if post.Title =="SysMail"  then
        if tonumber(post.Msg) and Z_SysMail[tonumber(post.Msg)]  then
            data = Z_SysMail[tonumber(post.Msg)]
        else
            data = post
        end
    elseif post.Title == "1785" then
        local str = string.split(post.Msg,'|')
        local Captain =  string.split(str[1],':')
        local CompetitionNO =  string.split(str[2],':')
        data.Title = string.gsub(Z_SysMail[tonumber(post.Title)].Title,"Y",CompetitionNO[2])
        data.Msg = string.gsub(Z_SysMail[tonumber(post.Title)].Msg,"X",Z_Competition[tonumber(Captain[2])].Name )
        data.Msg = string.gsub(data.Msg,"Y",CompetitionNO[2])
    elseif post.Title == "5002" or post.Title == "5003" then
        local str = Z_Item[5001].Name
        if Z_Item[tonumber(post.Msg)] then
            str = Z_Item[tonumber(post.Msg)].Name
        end
        data.Title = string.gsub(Z_SysMail[tonumber(post.Title)].Title,"ExNum", str)
        data.Msg = string.gsub(Z_SysMail[tonumber(post.Title)].Msg,"ExNum", str)
    elseif post.Title == "3001" then
        data = Z_SysMail[tonumber(post.Title)]
    else
        data.Title = post.Title
        data.Msg = post.Msg
        for i, v in pairs(LangUtil.LangTypeList) do
            if LangUtil.GetLangType() == v then
                data.Title = (string.IsNullOrEmpty(string.split(data.Title,"|")[i]) and  {data.Title} or {string.split(data.Title,"|")[i]} )[1]
                data.Msg =  (string.IsNullOrEmpty(string.split(data.Msg,"|")[i]) and  {data.Title} or {string.split(data.Msg,"|")[i]} )[1]
            end
        end
    end
    
    return data
end

local function AddPostItem(self,v)
    ListChildPool:GetInstance():GetChild(pfbName,self.viewList[1].content,function (object)
        self.postList[v.mid] = {}
        self.postList[v.mid].gameObject = object
        self.postList[v.mid].post = v
        local transform = object.transform
        local timeTxt = transform:Find("TimeText"):GetComponent("Text")
        local titleTxt = transform:Find("TitleBg/Size/TitleText"):GetComponent("Text")
        local sysData
        if v.tid ~= nil then
            sysData = Z_SysMail[v.tid]
        end
        timeTxt.text=""
        titleTxt.text =""
        LangUtil.BindText(timeTxt,"Number")
        LangUtil.BindText(titleTxt)
        local avatar = transform:Find("Icon/Avatar"):GetComponent("Image")
        local numTxt = transform:Find("Icon/Avatar/Num"):GetComponent("Text")
        numTxt.text=""
        LangUtil.BindText(numTxt,"Number")
        
        local goodsNum = transform:Find("GoodsNum/Text"):GetComponent("Text")
        goodsNum.text =""
        LangUtil.BindText(goodsNum)
        local itemBg =  transform:Find("Icon/ItemBg"):GetComponent("Image")
        local notGoods = transform:Find("Icon/NotGoods").gameObject
        local isGet = transform:Find("Icon/IsGet").gameObject
        local hint = transform:Find("Hint").gameObject
        goodsNum.text = LangUtil.GetSysLang(394)..table.count(v.rewards)
        --local data = --GetPostData(self, v)
        titleTxt.text = v.title
        UIUtil.ScrollText(titleTxt)

        if self.PostHint:GetChild(v.mid) ~= nil then
            self.PostHint:GetChild(v.mid):AddObject(hint, "PostBoxItem")
        else
            hint:SetActive(false)
        end
        isGet:SetActive(v.status == MailStatus.MailStatusReceived and table.count(v.rewards )>0)
        if sysData ~= nil then
            titleTxt.text = sysData.Title
        end

        

        -- if table.count(v.rewards )>0 then
        --     notGoods:SetActive(false)
        --     avatar.gameObject:SetActive(true)
        --     -- UIUtil.SetRewardInfo(table.first(v.rewards), avatar, {numText = numTxt}, true)
        --     -- UIUtil.SetSprite(itemBg,AtlasConfig.ItemBg,"3.png")
        -- else
        --     notGoods:SetActive(true)
        --     avatar.gameObject:SetActive(false)
        --     itemBg.gameObject:SetActive(false)
        -- end
        
        timeTxt.text = os.date("%Y-%m-%d", v.receive_time)
        
        UIUtil.AddBtnEventNoBug(object,function() OnClickLeftPostItem(self,v)  end)
    end)
end

function this.InitContent(self)
    self.listCommon = {} 
    for k,v in pairs(self.posts) do
        table.insert(self.listCommon, v)
    end
    table.sort(self.listCommon,function(a,b) return a.receive_time > b.receive_time end)
    
    coroutine.start(function ()
        for k,v in table.pairsByKeys(self.listCommon) do
            AddPostItem(self,v)
        end
        self:OnKind(self.kindId)
    end)
end
------------------------------------------------------------------------------------------------

local function InitItem(self,transform,reward,state) --奖励数据
    local itemBg = transform:Find("Icon/ItemBg"):GetComponent("Image")
    local avatar =  transform:Find("Icon/Avatar"):GetComponent("Image") 
    local numTxt = transform:Find("Icon/Avatar/Num"):GetComponent("Text")
    numTxt.text = ""
    numTxt.text = reward.count
    local isGet = transform:Find("Icon/IsGet").gameObject
    isGet:SetActive(state == MailStatus.MailStatusReceived)

    coroutine.start(function()
        UIPublic.InitItemIconNew(avatar, itemBg, reward.type, reward.id)
    end)
end

local function InitButtonState(self)
    if  table.count(self.posts) == 0 then
        UIPublic.InitButton(self.getAllBtn,false,1)
        UIPublic.InitButton(self.deleteBtn,false,2)
    else
        UIPublic.InitButton(self.getAllBtn,true,1)
        UIPublic.InitButton(self.deleteBtn,true,2)
    end
end

local function displayLine(self)
    local height = math.max(self.messageTxt.preferredHeight + 9, 100)
    self.messageContent.preferredHeight = height
    local lines
    if height <= 100 then
        self.textScrollView.movementType = 2
        lines = 2
    else
        self.textScrollView.movementType = 1
        lines =  math.floor(height / 61 + 1)
    end
    local layoutGroup = self.lineContent:GetComponent("VerticalLayoutGroup")
    local type = LangUtil.GetLangType()
    if type == LangType.JA then
        layoutGroup.spacing = 59
        layoutGroup.padding.top = 37
    else
        layoutGroup.spacing = 59
        layoutGroup.padding.top = 39
    end
    
    for i = 0, self.lineContent.childCount - 1 do
        self.lineContent:GetChild(i).gameObject:SetActive(false)
    end
    for i = 1, lines do
        local LineItem
        if i <= self.lineContent.childCount then
            LineItem = self.lineContent:GetChild(i - 1).gameObject
        else
            LineItem = GameObjectPool:GetInstance():CoGetGameObjectAsync(pfbTextLineItem)
            LineItem.transform:SetParent(self.lineContent, false)
        end
        LineItem:SetActive(true)
    end
    
end

function this.InitPostContent(self,isRefresh) --邮件内容数据 isRefresh 避免重复刷新
    self.textContent.localPosition = Vector3.zero
    if self.post ~= nil then
        self.notReward:SetActive(false)
        self.rewardRoot:SetActive(true)
        self.getBtn:SetActive(true)
        self.timeTxt.text = os.date("%Y-%m-%d", self.post.receive_time)
        local sysData
        if self.post.tid ~= nil then
            sysData = Z_SysMail[self.post.tid]
        end

        if sysData ~= nil then
            self.post.content = sysData.Msg
            self.post.title = sysData.Title
            self.post.msg = sysData.Msg
        end
        --local data = GetPostData(self, self.post)
        --self.messageTxt.text = self.post.content
        self.titleTxt.text = self.post.content--self.post.msg
        
        self.fromTxt.text = self.post.title--LangUtil.GetSysLang(578)--"系统邮件"
        local rewardCount = #self.post.rewards --table.count(self.post.RewardInfoList)
        if rewardCount == 0 then
            self.getBtn:SetActive(false)
            self.rewardRoot:SetActive(false)
            self.notReward:SetActive(true)
            UIPublic.InitButton(self.getBtn,false,1,LangUtil.GetSysLang(395))
            if self.post.status == MailStatus.MailStatusUnread then
                local reqData = {mids = {self.post.mid}}
                PublicRequest.SendRequest(
                PROTOCOL.MailboxReadReq,
                reqData,
                function(info, errorCode)              
                        if errorCode == 0 then 
                            
                        end
                    end)
                end
            self.textScrollView:GetComponent("RectTransform").sizeDelta = Vector2.New(820, 400)
        elseif self.post.status == MailStatus.MailStatusReceived then
            UIPublic.InitButton(self.getBtn,false,1,LangUtil.GetSysLang(395))
            self.textScrollView:GetComponent("RectTransform").sizeDelta = Vector2.New(820, 250)
        else
            UIPublic.InitButton(self.getBtn,true,1,LangUtil.GetSysLang(389))
            self.textScrollView:GetComponent("RectTransform").sizeDelta = Vector2.New(820, 250)
        end
        
        -- if rewardCount <= 4 then
        --     self.reRectTrans.sizeDelta = Vector2.New(self.rewardsRect[1],self.rewardsRect[2])
        -- else
        --     self.reRectTrans.sizeDelta = Vector2.New(self.rewardsRect[1],self.rewardsRect[3])
        -- end
        ListChildPool:GetInstance():ClearContent(self.rewardContent)
        for k = 1, rewardCount do
            ListChildPool:GetInstance():GetChild(pfbRewardName,self.rewardContent,function (object)
                InitItem(self, object.transform, self.post.rewards[k], self.post.status)
            end)
        end
    else
        self.notReward:SetActive(true)
        self.rewardRoot:SetActive(false)
        self.fromTxt.text = ""
        self.timeTxt.text = ""
        self.messageTxt.text = ""
        self.titleTxt.text = ""
        self.getBtn:SetActive(false)
    end

    displayLine(self)
end


local function OnGetAll(self) --一键领取
    if table.count(self.posts) == 0 then  return end
    if self.kindId ~= self.kind.Common then return end

    coroutine.start(function()
        -- local response =coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
        --         PROTOCOL.MailboxAllRewardsReq,{})
        PublicRequest.SendRequest(
            PROTOCOL.MailboxAllRewardsReq,
            {},
            function(info, errorCode)              
                    if errorCode == 0 then 
                        UIPublic.OpenRewardUI(info.reward_results)
                    end
                end)
    end)


end

local function OnGet(self) --领取
    coroutine.start(function()
        local reqData = {
            mids = {self.post.mid}
        }
        -- local response =coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
        --     PROTOCOL.MailboxRewardsReq,reqData)

        PublicRequest.SendRequest(
            PROTOCOL.MailboxRewardsReq,
            reqData,
            function(info, errorCode)              
                    if errorCode == 0 then 
                        UIPublic.OpenRewardUI(info.reward_results)
                    end
                end)
            --end
    end)
end

local function OnDelete(self) --删除
    if table.count(self.posts) == 0 then  return end
    if self.kindId ~= self.kind.Common then return end
    coroutine.start(function()
        local response =coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
                PROTOCOL.MailboxDeleteAllReq,{})
    end)
end

function this.OnKind(self, id) --类型
    self.kindId = id 
    for k,v in pairs(self.viewList) do
        v.gameObject:SetActive(k == id)
    end
    
    -- self.kind1Btn.transform:Find("Select").gameObject:SetActive(id == self.kind.Common)
    -- self.kind2Btn.transform:Find("Select").gameObject:SetActive(id == self.kind.Important)
    self.kind1Btn.gameObject:GetComponent("Button").enabled  = (not (id == self.kind.Common))
    self.kind2Btn.gameObject:GetComponent("Button").enabled  = (not (id == self.kind.Important))

    if table.count(self.posts) == 0 or id == self.kind.Important then
        self.hint:SetActive(true)
    else
        self.hint:SetActive(false)
    end
    local clickPost = nil
    if self.kindId ~= self.kind.Common then
        self.holdTxt.text = "0"
        self.maxText.text = "/99"
    else--普通类型
        self.holdTxt.text = table.count(self.posts)
        self.maxText.text = "/" .. math.max(99, table.count(self.posts))
        
        if self.listCommon ~= nil and self.listCommon[self.panelIndex[self.kindId]] ~= nil then
            clickPost = self.listCommon[self.panelIndex[self.kindId]]
        elseif self.listCommon ~= nil and self.listCommon[1] ~= nil then
            clickPost = self.listCommon[1]
        end
    end
    OnClickLeftPostItem(self, clickPost)
end

function this.OnCreate(self)
    base.OnCreate(self)
    --local testBtn1 = self.rc:GetObject("Test1Button")
    --local testBtn2 = self.rc:GetObject("Test2Button")
    --UIUtil.AddBtnEvent(testBtn1,function() OnTest(self,1) end)
    --UIUtil.AddBtnEvent(testBtn2,function() OnTest(self,2) end)
    
    local close = self.rc:GetObject("Close")
    local eventBg = self.rc:GetObject("EventBg")
    local func = function()UIManager:GetInstance():CloseWindow(UIWindowNames.UIPostBox) end
    UIUtil.AddBtnEvent(close,func)
    EventTriggerListener.Get(eventBg).onLuaClick = func

    self.notReward = self.rc:GetObject("NotRward")
    self.rewardContent = self.rc:GetObject("RewardContent")

    self.textScrollView = self.rc:GetObject("TextScrollView"):GetComponent("ScrollRect")
    self.textContent = self.rc:GetObject("TextContent").transform
    self.messageContent = self.rc:GetObject("MessageContent"):GetComponent("LayoutElement")
    self.lineContent = self.rc:GetObject("LineContent").transform

    self.fromTxt = self.rc:GetObject("FromTxt"):GetComponent("Text")
    self.timeTxt = self.rc:GetObject("TimeText"):GetComponent("Text")
    self.messageTxt = self.rc:GetObject("MessageTxt"):GetComponent("Text")
    self.titleTxt = self.rc:GetObject("TitleTxt"):GetComponent("Text")
    self.fromTxt.text= ""
    self.timeTxt.text = ""
    self.messageTxt.text = ""
    self.titleTxt.text = ""
    
    self.getBtn = self.rc:GetObject("GetButton")
    self.getAllBtn = self.rc:GetObject("GetAllButton")
    self.deleteBtn = self.rc:GetObject("DeletButton")
   
    self.holdTxt = self.rc:GetObject("HoldNumText"):GetComponent("Text")
    self.holdTxt.text=""
    
    self.hint = self.rc:GetObject("Hint")
    local viewRoot = self.rc:GetObject("ViewRoot").transform
    self.kind1Btn = self.rc:GetObject("Kind1Button")
    self.kind2Btn = self.rc:GetObject("Kind2Button")
    self.rewardRoot = self.rc:GetObject("Rewards")
    self.maxText= self.rc:GetObject("MaxText"):GetComponent("Text")
    self. reRectTrans =self.rewardRoot:GetComponent("RectTransform")
    self.rewardsRect = {self.reRectTrans.rect.width, self.reRectTrans.rect.height, 240}
    self.maxText.text=""
    
    self.viewList = {}
    for i = 0,viewRoot.childCount - 1 do
        local child = viewRoot:GetChild(i)
        local t = {}
        t.gameObject = child.gameObject
        t.content = child:Find("Viewport/Content")
        table.insert(self.viewList,t)
    end
    self.kind = {Common = 1, Important = 2}--self.kindId值
    self.kindId = self.kind.Common
    self.panelIndex = {1, 1}--下标为 1普通  2重要、值为记录打开的第几个邮件index
    
    UIUtil.AddBtnEvent(self.kind1Btn,function() self:OnKind(self.kind.Common) end)
    UIUtil.AddBtnEvent(self.kind2Btn,function() self:OnKind(self.kind.Important) end)
    UIUtil.AddBtnEvent(self.deleteBtn,function() OnDelete(self) end)
    UIUtil.AddBtnEvent(self.getBtn, function() OnGet(self) end)
    UIUtil.AddBtnEvent(self.getAllBtn,function() OnGetAll(self)  end)

    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    self.PostHint = hintComponent.Post
end


function this.OnLangCreate(self)
    LangUtil.BindText(self.rc:GetObject("Tip_Text"))
    LangUtil.BindText(self.fromTxt)
    LangUtil.BindText(self.timeTxt,"Number")
    LangUtil.BindText(self.messageTxt)
    LangUtil.BindText(self.titleTxt)
    LangUtil.BindText(self.getAllBtn.transform:Find("Text"))
    LangUtil.BindText(self.deleteBtn.transform:Find("Text"))
    LangUtil.BindText(self.getBtn.transform:Find("Text"))
    LangUtil.BindText(self.holdTxt,"Number")
    LangUtil.BindText(self.kind1Btn.transform:Find("Text")).text = LangUtil.GetSysLang(514)
    LangUtil.BindText(self.kind2Btn.transform:Find("Text"))
    LangUtil.BindText(self.maxText,"Number")
end

function this.OnRefresh(self)
    self.postList = {}
    ListChildPool:GetInstance():ClearContent(self.viewList[1].content)
    if self.post ~= nil and self.posts[self.post.mid] == nil then
        self.post = nil
    end
    
    InitButtonState(self)
    this.InitContent(self)
end

local function OnPostBoxChg(self)
    coroutine.start(function()
        self:OnRefresh()
    end)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_POST_BOX_CHG,OnPostBoxChg)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_POST_BOX_CHG)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.postHint = Game.Scene:GetComponent("HintComponent").Post
    self.posts = Game.Scene.Player:GetComponent("PostBoxComponent").Posts
    
    self:OnRefresh()
end
function this.OnDisable(self)
    base.OnDisable(self)
    ListChildPool:GetInstance():ClearContent(self.viewList[1].content)
    ListChildPool:GetInstance():ClearContent(self.rewardContent)
    self.postList = {}
end

function this.OnDestroy(self)
    base.OnDestroy(self)
    for i = 0, self.lineContent.childCount - 1 do
        GameObjectPool:GetInstance():RecycleGameObject(pfbTextLineItem, self.lineContent:GetChild(0).gameObject)
    end
end

return this

