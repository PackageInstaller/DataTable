---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/3 13:59
---

local UILordTowerView = BaseClass("UILordTowerView",UIBaseView);
local base = UIBaseView;
local this = UILordTowerView

local levelNames = {[1]="A",[2]="B",[3]="C",[4]="D"}
local maxLevel = 110
local pfbName = "LordTowerItem"
local isBusing = false
local stopLoad = false

local function InitSectionPanel(self,zStoryLevel)
    local info = {zStoryLevel = zStoryLevel,selectDiff = self.selectDiff}
   UIManager:GetInstance():OpenWindow(UIWindowNames.UILordTowerSectionInfo,info)
end


local function GoodInfoBtnClick(self,rewardInfo)
    local icon = self.GoodInfo.transform:Find("Icon/Value"):GetComponent("Image")
    self.infoname.text = rewardInfo.name
    self.infotext.text = rewardInfo.desc
    UIPublic.InitItemIcon(icon, nil, rewardInfo.kind, rewardInfo.id, {spriteName = rewardInfo.spriteName})

    self.GoodInfo:SetActive(true)
    self.GoodInfoEvent:SetActive(true)

end

local function InitSectionItem(self,gameObject,zLordTower,isActive)
    local zStoryLevel = self.againstComponent:GetZLordTowerLevel(zLordTower.Id,self.selectDiff)
    local transform = gameObject.transform
    local icon = transform:Find("Icon/Value"):GetComponent("Image")
    local amountTxt = transform:Find("Icon/Amount"):GetComponent("Text")
    local apTxt = transform:Find("Ap"):GetComponent("Text")
    local levelTxt = transform:Find("Level"):GetComponent("Text")
    local isPort = transform:Find("Icon/IsPort").gameObject
    local button = transform:Find("Button").gameObject
    --local deButton = transform:Find("Button/De").gameObject
    --local maxRecord = transform:Find("MaxRecord").gameObject
    local select = transform:Find("Select").gameObject
    local maskImage = transform:Find("maskImage").gameObject
    local LockImage = transform:Find("LockImage").gameObject
    --local maxComp = self.storyComponent["TowerHistory"..levelNames[self.selectDiff]]
    LangUtil.BindText(amountTxt,"Number")
    LangUtil.BindText(apTxt)
    LangUtil.BindText(levelTxt)
    LangUtil.BindText(button.transform:Find("Text"))

    maskImage:SetActive(false)
    LockImage:SetActive(false)
    select:SetActive(false)
    isPort:SetActive(false)
    apTxt.text = "AP " .. zStoryLevel.EnergyExpend

    local ranReward = loadtable(zStoryLevel.RanRewards)[1]
    if ranReward.id == nil and ranReward.type == GoodsKind.Item then 
        ranReward.id = ranReward.ranIds[1] 
    end
    local rewardInfo = UIPublic.GetRewardData(ranReward.type, ranReward.id)
    rewardInfo.spriteName = zStoryLevel.RewardIcon-- 图标替换(多合一的图标)
    if not string.IsNullOrEmpty(zStoryLevel.Desc) and not string.IsNullOrEmpty(zStoryLevel.RewardIcon) then
        rewardInfo.desc = zStoryLevel.Desc
    end
    UIPublic.InitItemIcon(icon, nil, ranReward.type, ranReward.id, {spriteName = rewardInfo.spriteName})

    amountTxt.text = ranReward.num..(ranReward.ranNum == nil and "" or "~"..(ranReward.num + ranReward.ranNum - 1))
    levelTxt.text = string.gsub(LangUtil.GetSysLang(496),"X",zLordTower.Id - 100)--"第"..(zLordTower.Id - 100).."层"
    local _bool = (zLordTower.Id <= self.storyComponent["Tower"..levelNames[self.selectDiff]])

    UIUtil.AddBtnEvent(button,function() InitSectionPanel(self,zStoryLevel)  end)
    local GoodInfoBtn = transform:Find("GoodInfoBtn").gameObject
    UIUtil.AddBtnEvent(GoodInfoBtn,function() GoodInfoBtnClick(self,rewardInfo)  end)
    
    if isActive == false then
        UIPublic.InitButton(button,false,1,LangUtil.GetSysLang(494))--攻略
        LockImage:SetActive(true)
        LangUtil.BindText(LockImage.transform:Find("Text")).text = LangUtil.GetSysLang(495)--未开启
    else
        if _bool == true then
            UIPublic.InitButton(button,false,1,LangUtil.GetSysLang(493))--已攻略
            isPort:SetActive(true)
            maskImage:SetActive(true)
        else
            UIPublic.InitButton(button,true,1,LangUtil.GetSysLang(494))
            select:SetActive(true)
        end
    end
end


local function InitSectionContent(self)
    if isBusing == true then
        stopLoad = true
    end
    ListChildPool:GetInstance():ClearContent(self.secContent)
    self.secContent.gameObject:SetActive(false)
    local completedTower = self.storyComponent["Tower"..levelNames[self.selectDiff]]
    if completedTower == 0 then completedTower = 100 end
    coroutine.start(function()
        isBusing = true
        for k,v in table.pairsByKeys(Z_LordTower) do
            if k - completedTower  <= 1  then
                ListChildPool:GetInstance():GetChild(pfbName,self.secContent,function(gameObject)
                    if self.active == false or stopLoad then 
                        ListChildPool:GetInstance():Remove(gameObject) 
                        isBusing = false
                        stopLoad = false
                        return  
                    end
                 --   SetItemActive(gameObject,true)
                    InitSectionItem(self,gameObject,v,true)
                end)
            elseif k - completedTower  <= 2  then
                ListChildPool:GetInstance():GetChild(pfbName,self.secContent,function(gameObject)
                    if self.active == false or stopLoad then
                        ListChildPool:GetInstance():Remove(gameObject)
                        isBusing = false
                        stopLoad = false
                        return
                    end
                --    SetItemActive(gameObject,false)
                    InitSectionItem(self,gameObject,v,false)
                end)
            end
        end
        coroutine.waitforframes(2)
        for i = 0,self.secContent.transform.childCount - 1 do
            self.secContent.transform:GetChild(i):SetAsFirstSibling()
        end
        self.secContent:SetActive(true)
        self.secContent.transform.parent.parent:GetComponent("ScrollRect"):DOVerticalNormalizedPos(1,0)
        isBusing = false
    end)
end

local function InitDiffBtns(self)  --初始化难度按钮
    for k,v in pairs(self.diffList) do
        local transform = v.transform
        local lock = transform:Find("Lock").gameObject
        local btn = transform:GetComponent("Button")
        if k ~= 1 then
            if self.storyComponent["TowerHistory"..levelNames[k -1]] < maxLevel then
                lock:SetActive(true)
                btn.enabled = false
            else
                lock:SetActive(false)
                btn.enabled = true
            end
        else
            lock:SetActive(false)
            btn.enabled = true
        end
    end
   
    for k,v in pairs(self.diffSelectList) do
        v:SetActive(k  == self.selectDiff);
    end
end

local function OnDiff(self,id)
    if id == self.selectDiff then return end
    self.clientData:SetLordTowerLevel(nil,id)
    if id ~= nil then
        self.selectDiff = id
        self:OnRefresh()
    end
    local maxComp = self.storyComponent["TowerHistory"..levelNames[self.selectDiff]]
    if maxComp == 0 then maxComp = 100 end
    self.maxTxt.text = string.gsub(LangUtil.GetSysLang(2040),"X",(maxComp - 100))--历史最高x层

    for k,v in pairs(self.diffSelectList) do
       v:SetActive(k  == id);
    end
    
end



function this.OnCreate(self)
    base.OnCreate(self);
    self.secContent = self.rc:GetObject("Content")
    self.backBtn = self.rc:GetObject("BackButton")
    self.maxTxt = self.rc:GetObject("MaxTxt"):GetComponent("Text")
    self.selectRoot = self.rc:GetObject("Select").transform
    self.GoodInfoEvent = self.rc:GetObject("GoodInfoEvent")
    self.GoodInfo = self.rc:GetObject("GoodInfo")
    
    UIUtil.AddBtnEvent(self.backBtn,function(go)
        self.GoodInfo:SetActive(false)
        self.ctrl:CloseSelf()  
        --if UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleMode) == nil then
        --local window =UIManager:GetInstance():GetWindow(UIWindowNames.UIHome)
        --local view =window.View
        --view:ToolTip()
        --end 
    end,"Back")

    self.GoodInfo:SetActive(false)
    self.GoodInfoEvent:SetActive(false)
    UIUtil.AddBtnEvent(self.GoodInfoEvent,function(go) 
        self.GoodInfo:SetActive(false)
        self.GoodInfoEvent:SetActive(false)
    end)

    self.diffList = {}
    self.diffSelectList = {}
    for i= 0,self.selectRoot.childCount - 1 do
        self.diffList[i+1] = self.selectRoot:GetChild(i).gameObject
        self.diffSelectList[i+1] = self.selectRoot:GetChild(i):GetChild(0).gameObject
        UIUtil.AddBtnEvent(self.diffList[i+1],function () OnDiff(self,i+1) end)
    end
    
    self.TipsPanel = self.rc:GetObject("TipsPanel").transform
    local TipsBgBtn = self.rc:GetObject("TipsBgBtn")
    local TipsBtn = self.TipsPanel:Find("TipsBtn")
    local Tips = self.TipsPanel:Find("Tips").gameObject
    Tips:SetActive(false)
    TipsBgBtn:SetActive(false)
    UIUtil.AddBtnEvent(TipsBtn,function(go)
        local localActive = Tips.activeInHierarchy
        TipsBgBtn:SetActive(not localActive)
        Tips:SetActive(not localActive)
    end)
    UIUtil.AddBtnEvent(TipsBgBtn,function(go)
        Tips:SetActive(false)
        TipsBgBtn:SetActive(false)
    end)
end

function this.OnLangCreate(self)
    local intensBtn = self.rc:GetObject("Intens")
    local formatBtn = self.rc:GetObject("Format")
    LangUtil.GetSpriteLang(120, function(sprite) intensBtn:GetComponent("Image").sprite = sprite end)
    LangUtil.GetSpriteLang(19, function(sprite) formatBtn:GetComponent("Image").sprite = sprite end)
    UIUtil.AddBtnEvent(intensBtn,function() UIManager:GetInstance():OpenWindow(UIWindowNames.UIMainIntens) end)
    UIUtil.AddBtnEvent(formatBtn,function() UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew) end)
    
    LangUtil.BindText(self.backBtn.transform:Find("Text"))
    LangUtil.BindText(self.maxTxt)
    LangUtil.BindText(self.rc:GetObject("DiffText"))
    self.timeText = LangUtil.BindText(self.rc:GetObject("timeText"))--.text = LangUtil.GetSysLang(409);--每周一4点更新
    LangUtil.BindText(self.TipsPanel:Find("Tips/Text")).text = LangUtil.GetSysLang(4051)
    self.infoname = LangUtil.BindText(self.GoodInfo.transform:Find("name"))
    self.infotext = LangUtil.BindText(self.GoodInfo.transform:Find("info"))
    
    for i = 0,  self.selectRoot.childCount-1 do
        LangUtil.GetSpriteLang(112+(i*2),function(sprite)
            self.diffList[i+1]:GetComponent("Image").sprite = sprite
        end)
        LangUtil.GetSpriteLang(113+(i*2),function(sprite)
            self.diffSelectList[i+1]:GetComponent("Image").sprite = sprite
        end)
    end
    
end

--local function SetTimeText(self)
--    local tb = UIUtil.GetTimeForm(2)
--    if tb.day > 0 then
--        local str = string.gsub(LangUtil.GetSysLang(885), "XX", tb.day)
--        self.timeText.text = string.gsub(str, "YY", tb.hour)
--    else
--        local str = string.gsub(LangUtil.GetSysLang(886), "XX", tb.hour)
--        self.timeText.text = string.gsub(str, "YY", tb.minute)
--    end
--end

function this.OnEnable(self)
    base.OnEnable(self);
    self.clientData = ClientData:GetInstance()
    self.selectDiff =  self.clientData.CurLordTowerDifficulty
    self.selectLevel =  self.clientData.CurLordTowerLevelId
    self.countDownId = TimeUtil.GetCountDownId()
    self:OnRefresh()
end

function this.OnRefresh(self)
    self.player = Game.Scene.Player
    self.againstComponent = Game.Scene:GetComponent("AgainstComponent")
    self.storyComponent =  self.player:GetComponent("StoryComponent")
    if self.selectDiff > 1 and self.storyComponent["TowerHistory"..levelNames[self.selectDiff -1]] < maxLevel then
        self.selectDiff = 1
        self.clientData:SetLordTowerLevel(nil,1)
        self.selectLevel =  self.clientData.CurLordTowerLevelId
    end
    local countDownData = {type = TimeType.Two, text = self.timeText, endTime = UIUtil.GetRefreshTime(2)}--4点刷新
    self.timeText.text = TimeUtil.BindTime(self.countDownId, 1, countDownData)
    InitSectionContent(self)
    InitDiffBtns(self)
end

function this.OnBusing(self)
    ListChildPool:GetInstance():ClearContent(self.secContent)
    isBusing = false
end


function this.OnAddListener(self)
    base.OnAddListener(self);
    self:AddUIListener(UIMessageNames.ON_LORD_TOWER_DIFF_CHG, self.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.ON_LORD_TOWER_DIFF_CHG)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self);
    TimeUtil.RemoveCountDown(self.countDownId)
    ListChildPool:GetInstance():ClearContent(self.secContent)
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this

