---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UISummonStage1View : UIBaseView
---@field model UISummonStage1Model
---@field result {reward:protocol.Reward, rewardResult:protocol.RewardResult[], isNew:boolean}
local UISummonStage1View = BaseClass("UISummonStage1View", UIBaseView);
local base = UIBaseView
local this = UISummonStage1View

local isBuysing = false

local effectPaths = { "SummonEffect_1", "SummonEffect_2", "SummonEffect_4" }

local effectSkipPaths = { "SummonEffect_5", "SummonEffect_6", "SummonEffect_7" }

local soundPaths = { "Summon_1", "Summon_1", "Summon_1", "Summon_1" }

local SkyPaths = { "WhiteSky", "GoldSky", "URSky" }

local skipType = {
    None = 0,
    NoNew = 1, --- 只跳过已有的
    All = 2,
}

local showType = {
    character = 1,
    fightSoul = 2,
}

local EffectStage1Time = 10
local EffectStage2Time = 12
local EffectSpeed = 3

local effectParticleList = {}

local outline = { Color.New(32 / 255, 54 / 255, 100 / 255), Color.New(67 / 255, 19 / 255, 100 / 255),
                  Color.New(100 / 255, 57 / 255, 19 / 255), Color.New(100 / 255, 74 / 255, 19 / 255) }
local EffectTime = 0

local function DoOutLightFade(self, img)
    coroutine.start(function()
        while (true) do
            if img.gameObject.activeInHierarchy == false then
                return
            end
            img:DOFade(0, 1)
            coroutine.waitforseconds(1)
            if img.gameObject.activeInHierarchy == false then
                return
            end
            img:DOFade(1, 1)
            coroutine.waitforseconds(1)
            if img.gameObject.activeInHierarchy == false then
                return
            end
        end
    end)
end

local function FadeUI(transform, bool, delayTime)
    transform = transform.transform
    delayTime = delayTime or 0
    local fadeValue = (bool == true and { 1 } or { 0 })[1]

    table.csenuObject(transform, function(v)
        if v.gameObject.name ~= "NameRoot" then
            local img = v:GetComponent("Image")
            local txt = v:GetComponent("Text")
            if img then
                img:DOFade(fadeValue, delayTime)
            end
            if txt then
                txt:DOFade(fadeValue, delayTime)
            end
        end
    end, true)

end

local function AddEffect(effect)
    if effectParticleList[effect.name] == nil then
        effectParticleList[effect.name] = {}
        local particleSystems = effect.transform:GetComponentsInChildren(typeof(CS.UnityEngine.ParticleSystem))
        for i = 0, particleSystems.Length - 1 do
            local particleSystem = particleSystems[i]
            local rawSpeed = particleSystem.main.simulationSpeed
            effectParticleList[effect.name][i] = {
                particleSystem = particleSystem,
                rawSpeed = rawSpeed,
            }
        end
    end
end

local function ChangeEffectSpeed(effect)
    if effectParticleList[effect.name] == nil then
        return
    end

    for _, value in pairs(effectParticleList[effect.name]) do
        if not IsNull(value.particleSystem) then
            value.particleSystem.main.simulationSpeed = value.rawSpeed * EffectSpeed
        end
    end
end

local function ResetEffectSpeed(effect)
    if effectParticleList[effect.name] == nil then
        return
    end

    for _, value in pairs(effectParticleList[effect.name]) do
        if not IsNull(value.particleSystem) then
            value.particleSystem.main.simulationSpeed = value.rawSpeed
        end
    end
end

local function PopResult(self)
    --显示召唤结果
    if self.kind == showType.character then
        FadeUI(self.cardFace, true)
        self.cardFace.gameObject:SetActive(true)
    elseif self.kind == showType.fightSoul then
        FadeUI(self.fightSoulFace, true)
        self.fightSoulFace.gameObject:SetActive(true)
    end
end

local function PopUI(self, bool)
    --显示UI
    FadeUI(self.labelRoot, bool)
    FadeUI(self.left, bool)
    self.labelRoot.gameObject:SetActive(bool)
    self.left.gameObject:SetActive(bool)
end

---@param result {reward:protocol.Reward, rewardResult:protocol.rewardResult[], isNew:boolean}
local function InitCardFace(self, result)
    --角色卡面
    local transform = self.cardFace.transform
    local zCard = self.zCard
    local zCharacter = Z_Character[zCard.Id]
    local star = transform:Find("Star")
    local line = transform:Find("DividingLine")
    local name = LangUtil.BindText(transform:Find("Name/NameTextRoot/Text"))
    -- local atkDistance = transform:Find("AtkDistance")
    local mainProp = transform:Find("MainProp")
    local subProp = transform:Find("SubProp")
    local raility = transform:Find("Raility"):GetComponent("Image")
    -- local cardFrom = transform:Find("CardFrom"):GetComponent("Image")
    -- local cardType = transform:Find("CardType"):GetComponent("Image")
    local rareFrame = transform:Find("RareFrame"):GetComponent("Image")
    local face = transform:Find("CardFace/CardFaceValue"):GetComponent("Image")
    local new = transform:Find("New").gameObject
    -- local outLight = transform:Find("OutLight"):GetComponent("Image")
    -- outLight.gameObject:SetActive(false)
    name.text = zCard.Name
    new:SetActive(result.isNew)
    star.gameObject:SetActive(false)
    -- UIPublic.NewInitStar(star:GetComponent("Image"), zCharacter.Star)
    UIPublic.NewInitLine(line:GetComponent("Image"), zCharacter.Rarity)

    -- UIPublic.InitStar(star, card) --星级
    -- UIPublic.InitAtkDistance(atkDistance, zCard.AtkType) --攻击距离
    UIUtil.SetSprite(mainProp:GetComponent("Image"), AtlasConfig.Class, 
    zCharacter.Class .. "_" .. zCharacter.Rarity ..".png")

    UIPublic.InitSubProp(subProp, zCharacter.Prop) --副属性
    -- UIUtil.SetSprite(cardFrom, AtlasConfig.CardFrom, zCard.Sphere .. ".png", true)
    rareFrame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/RareFrame/" .. UIPublic.RareNames[zCharacter.Rarity] .. ".png")
    UIUtil.SetCardSprite(face, zCard.Id, nil, CardPictureType.Big, true)
    raility.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCharacter.Rarity]..".png")
    -- Logger.AuthLog("--角色加载完成" .. Time.time - self.initTime)
    return coroutine.yieldbreak(true)
end

---@param result {reward:protocol.Reward, rewardResult:protocol.rewardResult[], isNew:boolean}
local function InitFightSoulFace(self, result)
    --战魂卡面

    local fightSoul = {
        TemplateId = result.reward.id,
        isEquip = false,
        Star = nil,
        config = Z_FightSoul[result.reward.id],
    }
    UIPublic.InitFightSoulFace(fightSoul, self.fightSoulFace.transform, true)
    local new = self.fightSoulFace.transform:Find("New").gameObject
    new:SetActive(result.isNew)
    return coroutine.yieldbreak(true)
end

local function InitLabel(self)
    if self.kind == showType.character then
        self.labels[1]:SetActive(true)
        self.labels[2]:SetActive(false)
        local transform = self.labels[1].transform:Find("Image")
        FadeUI(transform, false)
    elseif self.kind == showType.fightSoul then
        self.labels[1]:SetActive(false)
        self.labels[2]:SetActive(true)
        FadeUI(self.labels[2], false)
    end
end

local function InitName(self)
    if self.zCard ~= nil then
        self.cardTitleTxt.text = self.zCard.TitleVertical
        self.cardNameTxt.text = self.zCard.NameVertical
        self.cardNameBg:SetActive(true)
        self.fightSoulNameBg:SetActive(false)
    else
        self.fightSoulNameTxt.text = self.zFightSoul.Name
        self.cardNameBg:SetActive(false)
        self.fightSoulNameBg:SetActive(true)
    end

    FadeUI(self.leftNameRoot, false)
end

local function InitRare(self)
    for k, v in pairs(self.rares) do
        v:SetActive(k == self.rare)
        FadeUI(v, false)
    end
end

local function PlaySkip(self)
    self.audio:Stop()
    isBuysing = true
    local transform
    if self.effect ~= nil then
        transform = self.effect.transform
    end
    local guide = Game.Scene:GetComponent("GuideComponent")
    local GuideStep = table.first(guide.GuideList, function(v)
        return v.Id == 1
    end)
    self.mainUI:GetComponent("RectTransform"):DOLocalMoveY(0, 0)
    if self.effect ~= nil and (self.effect.name == "SummonEffect_5(Clone)" or self.effect.name == "SummonEffect_6(Clone)" or self.effect.name == "SummonEffect_7(Clone)") then
        coroutine.waitforframes(5)
        local soundType = (self.kind == showType.character and { SoundType.Summon } or { SoundType.SoulGet })[1]
        if soundType == SoundType.SoulGet then
            if self.zCard ~= nil then
                self.soundComponent:PlayCardIdSound(soundType, self.zCard.Id)
            else
                Logger.Log("fightSoul no bgm")
            end
        end
        PopUI(self, true)
        PopResult(self)
        coroutine.waitforseconds(0.5)
        isBuysing = false

        local Window2 = UIManager:GetInstance():GetWindow(UIWindowNames.UISummonStage2)
        if GuideStep ~= nil and Window ~= nil  and Window.View.run == 1 then
            self.skipButton:SetActive(false)
        elseif Window2 == nil or not Window2.Active then
            self.skipButton:SetActive(true)
        end
        for i = 0, transform.childCount - 1 do
            local child = transform:GetChild(i)
            if i == 1 then
                if self.effect.name == "SummonEffect_4(Clone)" or self.effect.name == "SummonEffect_7(Clone)" then
                    child:Find("JinngShi").gameObject:SetActive(false)
                else
                    child:Find("Glow1/JinngShi").gameObject:SetActive(false)
                end
                child:Find("HuiJu1").gameObject:SetActive(false)
            else
                child.gameObject:SetActive(false)
            end
        end
        return coroutine.yieldbreak(true)
    else
        if not IsNull(self.effect) then
            ResetEffectSpeed(self.effect)
            ListChildPool:GetInstance():Remove(self.effect)
            self.effectMask.gameObject:SetActive(true)
            self.effect = nil
        end
        isBuysing = true
        local RMmaterial = ResourcesManager:GetInstance():CoLoadAsync("Effect/Sky/Material/" .. SkyPaths[self.effectSkipKind] .. ".mat", typeof(Material))
        local RenderSettings = CS.UnityEngine.RenderSettings;
        RenderSettings.skybox = RMmaterial
        ListChildPool:GetInstance():GetChild(effectSkipPaths[self.effectSkipKind], self.effectRoot, function(gameObject)
            self.effect = gameObject
            gameObject:SetActive(false)
            gameObject.transform:GetChild(0).gameObject:SetActive(true)
            gameObject:SetActive(true)
            self.effectMask.gameObject:SetActive(false)
            coroutine.waitforframes(2)
            local soundType = (self.kind == showType.character and { SoundType.Summon } or { SoundType.SoulGet })[1]
            if soundType == SoundType.SoulGet then
                if self.zCard ~= nil then
                    self.soundComponent:PlayCardIdSound(soundType, self.zCard.Id)
                else
                    Logger.Log("fightSoul no bgm")
                end
            end
            PopUI(self, true)
            PopResult(self)
            coroutine.waitforseconds(0.5)
            isBuysing = false
            for i = 0, gameObject.transform.childCount - 1 do
                local child = gameObject.transform:GetChild(i)
                if i == 1 then
                    if self.effect ~= nil and self.effect.name == "SummonEffect_4(Clone)" or self.effect.name == "SummonEffect_7(Clone)" then
                        local c = child:Find("JinngShi")
                        if not IsNull(c) then
                            c.gameObject:SetActive(false)
                        end
                    else
                        local c = child:Find("Glow1/JinngShi")
                        if not IsNull(c) then
                            c.gameObject:SetActive(false)
                        end
                    end
                    child:Find("HuiJu1").gameObject:SetActive(false)
                else
                    child.gameObject:SetActive(false)
                end
            end
        end)

        return coroutine.yieldbreak(true)
    end

end

function this.Update(self)
    if self.IsPlayerEffect then
        if self.skipState == skipType.All then
            return
        end
        EffectTime = EffectTime + CS.UnityEngine.Time.deltaTime
        local transform = self.effect.transform
        if EffectTime >= EffectStage1Time / EffectSpeed and self.resultEffect then
            -- Logger.AuthLog("--弹出result" .. EffectTime)
            self.resultEffect = false
            self.transform:DOShakePosition(1, 40, 80, 90);
            self.mainUI:GetComponent("RectTransform"):DOLocalMoveY(0, 0)
            PopResult(self)
            local soundType = (self.kind == showType.character and { SoundType.Summon } or { SoundType.SoulGet })[1]
            if soundType == SoundType.SoulGet then
                if self.zCard ~= nil then
                    self.soundComponent:PlayCardIdSound(soundType, self.zCard.Id)
                else
                    Logger.Log("fightSoul no bgm")
                end
            end
        end
        if EffectTime >= EffectStage2Time / EffectSpeed and self.mainEffect then
            self.mainEffect = false
            ResetEffectSpeed(self.effect)
            -- Logger.AuthLog("--弹出UI" .. EffectTime)
            PopUI(self, true)
            isBuysing = false
        end
        for i = 0, transform.childCount - 1 do
            local child = transform:GetChild(i)
            if i == 1 then
                if self.effectKind == 1 or self.effectKind == 2 then
                    child:Find("Glow1/JinngShi").gameObject:SetActive(true)
                else
                    child:Find("JinngShi").gameObject:SetActive(true)
                end
                child:Find("HuiJu1").gameObject:SetActive(true)
            end
        end
    end
end

local function PlayEffect(self)
    --播放特效
    EffectTime = 0
    self.IsPlayerEffect = true
    self.resultEffect = true
    self.mainEffect = true
    local transform = self.effect.transform
    ChangeEffectSpeed(self.effect)
    -- if self.skipState == skipType.None then
    --     self.skipButton:SetActive(true)
    -- end
    for i = 0, transform.childCount - 1 do
        transform:GetChild(i).gameObject:SetActive(true)
    end

end

local function Load(self)
    --加载资源
    isBuysing = true
    self.mainUI:GetComponent("RectTransform"):DOLocalMoveY(2000, 0)
    self.mainUI.gameObject:SetActive(true)
    self.Skip1Parent.gameObject:SetActive(true)
    -- if self.skipState ~= skipType.None then
    -- coroutine.start(function()
    --     InitRare(self)
    --     InitName(self)
    --     InitLabel(self)
    --     if self.kind == showType.character then
    --         coroutine.yieldstart(InitCardFace, nil, self, self.result)
    --     elseif self.kind == showType.fightSoul then
    --         coroutine.yieldstart(InitFightSoulFace, nil, self, self.result)
    --     end
    --     coroutine.yieldstart(PlaySkip, nil, self)
    -- end)
    -- else
        if not IsNull(self.effect) then
            ResetEffectSpeed(self.effect)
            ListChildPool:GetInstance():Remove(self.effect)
            self.effectMask.gameObject:SetActive(true)
            self.effect = nil
        end
        coroutine.start(function()

            local RMmaterial = ResourcesManager:GetInstance():CoLoadAsync("Effect/Sky/Material/" .. SkyPaths[self.effectKind] .. ".mat", typeof(Material))
            local RenderSettings = CS.UnityEngine.RenderSettings;
            RenderSettings.skybox = RMmaterial
            ListChildPool:GetInstance():GetChild(effectPaths[self.effectKind], self.effectRoot, function(gameObject)
                self.effect = gameObject
                AddEffect(self.effect)
                ChangeEffectSpeed(self.effect)
                gameObject:SetActive(false)
                for i = 0, gameObject.transform.childCount - 1 do
                    gameObject.transform:GetChild(i).gameObject:SetActive(false)
                end
                -- if self.skipState == skipType.None then
                    local soundPath = "Sound/UI/" .. soundPaths[self.effectKind] .. ".wav"
                    local soundAsset = ResourcesManager:GetInstance():CoLoadAsync(soundPath, typeof(AudioClip))
                    self.audio.clip = soundAsset
                    self.audio.volume = ClientData:GetInstance():GetVolume("SoundVolume")

                    local soundType = (self.kind == showType.character and { SoundType.Summon } or { SoundType.SoulGet })[1]
                    if soundType == soundType.SoulGet then
                        if self.zCard ~= nil then
                            self.soundComponent:PlayCardIdSound(soundType, self.zCard.Id, true)
                        else
                            Logger.Log("fightSoul no bgm")
                        end
                    end
                -- end
                InitRare(self)
                InitName(self)
                InitLabel(self)
                -- Logger.AuthLog("--角色赋值前" .. Time.time - self.initTime)
                if self.kind == showType.character then
                    coroutine.yieldstart(InitCardFace, nil, self, self.result)
                elseif self.kind == showType.fightSoul then
                    coroutine.yieldstart(InitFightSoulFace, nil, self, self.result)
                end
                gameObject:SetActive(true)
                -- Logger.AuthLog("--特效播放" .. Time.time - self.initTime)
                self.audio:Play()
                self.effectMask.gameObject:SetActive(false)
                -- if self.skipState == skipType.None then
                    PlayEffect(self)
                -- else
                --     coroutine.yieldstart(PlaySkip, nil, self)
                -- end

            end)
        end)
    -- end
end

---@param self UISummonStage1View
local function OnClick(self)
    if isBuysing == true then
        return
    end
    local result = self.resultList[self.index]
    if result == nil then
        return
    end
    if result.reward.type == RewardType.RewardTypeCharacter and self.result.isNew then
        isBuysing = true
        self:OpenStage3(result.reward.id)
    else
        self:Stage3CallBack()
    end
end

local function DeSprite(self)
    -- local transform = self.cardFace.transform
    -- local rareFrame = transform:Find("RareFrame"):GetComponent("Image")
    -- local face = transform:Find("MaskCard/Face"):GetComponent("Image")
    -- local transform1 = self.fightSoulFace.transform
    -- local face1 = transform1:Find("Mask/Face"):GetComponent("Image")
    -- local frame = transform1:Find("Frame"):GetComponent("Image")
    -- rareFrame.sprite = DeActiveSprite
    -- face1.sprite = DeActiveSprite
    -- face.sprite = DeActiveSprite
    -- frame.sprite = DeActiveSprite
end

function this:Stage3CallBack()
    --点击事件
    EffectTime = 0
    self.IsPlayerEffect = false
    self.resultEffect = false
    self.mainEffect = false
    self.fightSoulFace.gameObject:SetActive(false)
    self.cardFace.gameObject:SetActive(false)
    FadeUI(self.cardFace, false)
    FadeUI(self.fightSoulFace, false)
    PopUI(self, false)
    isBuysing = false
    DeSprite(self)
    --self.soundComponent:Stop()
    self.soundComponent:MainStop()
    self.index = self.index + 1
    self.result = nil
    self.kind = nil
    self.zCard = nil

    self.effectKind = 0
    local rare = 0
    local result = self.resultList[self.index]

    if self.skipState == skipType.NoNew then
        while result ~= nil and not result.isNew do
            -- 不是new 且还有下一个
            self.index = self.index + 1
            result = self.resultList[self.index]
        end
    elseif self.skipState == skipType.All then
        result = nil
    end
    if not self.model.skip and result ~= nil then
        -- gh: 依次显示每个角色or战魂
        if result.reward.type == RewardType.RewardTypeCharacter then
            self.kind = showType.character
            self.result = result
            self.zCard = Z_Card[self.result.reward.id]
            self.zCharacter = Z_Character[self.result.reward.id]
            self.zFightSoul = nil
            self.rare = self.zCharacter.Rarity
            rare = self.zCharacter.Rarity
        elseif result.reward.type == RewardType.RewardTypeFightSoul then
            self.kind = showType.fightSoul
            self.result = result
            self.zFightSoul = Z_FightSoul[self.result.reward.id]
            self.zCard = nil
            self.zCharacter = nil
            self.rare = self.zFightSoul.Rare
            rare = self.zFightSoul.Rare
        else
            error("--召唤界面stage1:召唤结果数据错误")
        end
        -- self.effectKind = rare


        if rare <= 2 then
            --R - SR
            self.effectKind = 1
        elseif rare < 4 then
            --SSR
            self.effectKind = 2
        else
            --UR
            self.effectKind = 3
        end
        --print("进入Load前"..Time.time-self.initTime)
        Load(self)
    else
        self.skipState = skipType.All
        coroutine.start(function()
            coroutine.yieldstart(PlaySkip, nil, self)
        end)

        self.skipButton:SetActive(false)
        local guide = Game.Scene:GetComponent("GuideComponent")
        local GuideStep = table.first(guide.GuideList, function(v)
            return v.Id == 1
        end)
        local Window = UIManager:GetInstance():GetWindow(UIWindowNames.UIPlayerInceptionInfo)
        if (GuideStep ~= nil and Window ~= nil and GuideStep.Step >= 7 and Window.View.run == 1) or self.model.hideStage2 then
            if Window ~= nil and Window.View ~= nil then
                Window.View:ON_Click()
            end
            UIManager:GetInstance():CloseWindow(UIWindowNames.UISummonStage1)
        else
            self.mainUI.gameObject:SetActive(false)
            self.Skip1Parent.gameObject:SetActive(false)
            self.skipButton.gameObject:SetActive(false)
            local Window2 = UIManager:GetInstance():GetWindow(UIWindowNames.UISummonStage2)
            if Window2 == nil or not Window2.Active then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage2, {
                    resultList = self.model.resultList,
                    poolId = self.model.poolId,
                    briefItem = self.model.briefItem,
                    isConfirm = self.model.isConfirm,
                    otherRewards = self.model.otherRewards
                })
            end
        end
    end
end

local function OnSkip(self)
    coroutine.start(function()
        coroutine.yieldstart(PlaySkip, nil, self)
    end)
end

--- 打开单一角色的页面(显示最新角色)
function this.OpenStage3(self, id)
    self.soundComponent:MainStop()
    local info = {}
    info.cardIdList = {id}
    info.callBack = function()
        self:Stage3CallBack()
    end
    self.mainUI.gameObject:SetActive(false)
    self.Skip1Parent.gameObject:SetActive(false)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage3, info)
end

local function ResultMaxKind (self)

    for i, v in pairs(self.resultList) do
        local rare = 0
        if v.reward.type == RewardType.RewardTypeCharacter then
            self.kind = showType.character
            self.result = v
            self.zCard = Z_Card[self.result.reward.id]
            self.zCharacter = Z_Character[self.result.reward.id]
            self.zFightSoul = nil
            rare = self.zCharacter.Rarity
        elseif v.reward.type == RewardType.RewardTypeFightSoul then
            self.kind = showType.fightSoul
            self.result = v
            self.zFightSoul = Z_FightSoul[self.result.reward.id]
            self.zCard = nil
            self.zCharacter = nil
            rare = self.zFightSoul.Rare
        else
            Logger.LogError("error: UISummonStage1: result data is error")
        end
        -- if rare <= 2 then
        --     --R - SR
        --     rare = 1
        -- elseif rare < 4 then
        --     --SSR
        --     rare = 2
        -- else
        --     --UR
        --     rare = 3
        -- end
        if rare > self.effectSkipKind then
            self.effectSkipKind = rare
        end
    end

end

function this:OnCreate()
    base.OnCreate(self)
    self.initTime = Time.time
    self.audio = self.gameObject:GetComponent(typeof(AudioSource))

    self.mask = self.rc:GetObject("Mask")
    self.mainUI = self.rc:GetObject("Main").transform
    self.effectRoot = self.rc:GetObject("EffectRoot").transform
    self.effectRoot.gameObject:SetActive(true)

    self.cardFace = self.mainUI:Find("Result/CardFace")
    self.fightSoulFace = self.mainUI:Find("Result/FightSoulFace")

    self.left = self.mainUI:Find("Left")
    self.leftNameRoot = self.mainUI:Find("Left/leftNameRoot")
    self.cardNameBg = self.mainUI:Find("Left/leftNameRoot/CardBg").gameObject
    self.cardTitleTxt = self.mainUI:Find("Left/leftNameRoot/CardBg/Title"):GetComponent("Text")
    self.cardNameTxt = self.mainUI:Find("Left/leftNameRoot/CardBg/Name"):GetComponent("Text")
    self.fightSoulNameBg = self.mainUI:Find("Left/leftNameRoot/FightSoulBg").gameObject
    self.fightSoulNameTxt = self.mainUI:Find("Left/leftNameRoot/FightSoulBg/Name"):GetComponent("Text")
    self.cardTitleTxt.text = ""
    self.cardNameTxt.text = ""
    self.fightSoulNameTxt.text = ""
    self.effectMask = self.rc:GetObject("effectMask")

    self.rareRoot = self.mainUI:Find("Left/RareRoot")
    self.labelRoot = self.mainUI:Find("Right")

    self.skipButton = self.rc:GetObject("Skip")
    -- self.skip1Button = self.rc:GetObject("Skip1")
    -- self.skip1Button:SetActive(false)

    self.Skip1Parent = self.rc:GetObject("Skip1Parent")
    UIUtil.AddBtnEvent(self.skipButton, function()
        -- 第一次按跳过
        -- if self.skip
        if self.skipState == skipType.None then
            self.skipState = skipType.NoNew
            -- 如果 isNew, 就正常结束
            -- 否则 跳过 到下一个
            if not self.result.isNew then
                self:Stage3CallBack()
                -- OnSkip(self)
            end
        else
            self.skipState = skipType.All
            isBuysing = true
            -- self.skip1Button:SetActive(false)
            self.mainUI.gameObject:SetActive(false)
            self.skipButton.gameObject:SetActive(false)
            if self.model.hideStage2 then
                local Window = UIManager:GetInstance():GetWindow(UIWindowNames.UIPlayerInceptionInfo)
                if Window ~= nil and Window.View ~= nil then
                    Window.View:ON_Click()
                end
                UIManager:GetInstance():CloseWindow(UIWindowNames.UISummonStage1)
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage2, {
                    resultList = self.model.resultList,
                    poolId = self.model.poolId,
                    briefItem = self.model.briefItem,
                    isConfirm = self.model.isConfirm,
                    otherRewards = self.model.otherRewards
                })
            end
            UIManager:GetInstance():CloseWindow (UIWindowNames.UISummonStage3)
            isBuysing = false
            -- end

            coroutine.start(function()
                coroutine.yieldstart(PlaySkip, nil, self)
            end)
        end
    end)
    -- UIUtil.AddBtnEvent(self.skip1Button, function()
    --     -- 第二次按跳过

    -- end)

    self.rares = {}
    self.labels = {}

    for i = 0, self.rareRoot.childCount - 1 do
        local child = self.rareRoot:GetChild(i).gameObject
        self.rares[i + 1] = child
    end

    for i = 0, self.labelRoot.childCount - 1 do
        local child = self.labelRoot:GetChild(i).gameObject
        self.labels[i + 1] = child
    end

    EventTriggerListener.Get(self.gameObject).onLuaClick = function()
        OnClick(self)
    end
end

function this.OnLangCreate(self)
    self.abiliTypeNames = { LangUtil.GetSysLang(158), LangUtil.GetSysLang(159), LangUtil.GetSysLang(160),
                            LangUtil.GetSysLang(161), LangUtil.GetSysLang(162) }
    LangUtil.BindText(self.cardTitleTxt) -- ignoreLang
    LangUtil.BindText(self.cardNameTxt)-- ignoreLang
    LangUtil.BindText(self.fightSoulNameTxt)-- ignoreLang

    LangUtil.GetSpriteLang(245, function(sprite) self.labels[1].transform:Find("Image/ImageText"):GetComponent("Image").sprite = sprite end)
    LangUtil.GetSpriteLang(246, function(sprite) self.labels[2].transform:Find("ImageText"):GetComponent("Image").sprite = sprite end)

end

function this.OnEnable(self)
    base.OnEnable(self)
    isBuysing = false
    EffectTime = 0
    self.IsPlayerEffect = false
    self.resultEffect = false
    self.mainEffect = false

    self.soundComponent = Game.Scene:GetComponent("SoundComponent")
    self.audio.volume = ClientData:GetInstance():GetVolume("SoundVolume")
    self.effect = nil

    self.skipButton:SetActive(true)
    self.skipState = skipType.None
    local guide = Game.Scene:GetComponent("GuideComponent")
    local GuideWindow = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide)
    if guide.GuideRun and  GuideWindow ~= nil and  GuideWindow.View ~= nil then
        GuideWindow.View.mask_bc.transform.parent.gameObject:SetActive(false)
    end

    self:OnRefresh()
end

function this:OnRefresh()
    self.effectMask.gameObject:SetActive(true)
    self.newCardList = {} --
    self.newFightSoulList = {} --
    for index, value in ipairs(self.model.resultList) do
        if value.isNew then
            if value.reward.type == RewardType.RewardTypeCharacter then
                self.newCardList[value.reward.id] = true
            elseif value.reward.type == RewardType.RewardTypeFightSoul then
                self.newFightSoulList[value.reward.id] = true
            end
        end
    end
    self.effectSkipKind = 0
    self.resultList = self.model.resultList
    self.skipButton.gameObject:SetActive(true)
    ResultMaxKind(self)
    self.index = 0
    self:Stage3CallBack()
end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnDisable(self)
    DeSprite(self)
    self.soundComponent:MainStop()
    if not IsNull(self.effect) then
        ResetEffectSpeed(self.effect)
        ListChildPool:GetInstance():Remove(self.effect)
        self.effectMask.gameObject:SetActive(true)
        self.effect = nil
    end

    base.OnDisable(self)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this;

