---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UIMusicHandBookView = BaseClass("UIMusicHandBookView",UIBaseView);
local base = UIBaseView
local this = UIMusicHandBookView
local isLoading = false
local prefabName = "MusicItem"
local iconPfbName = "MusicIcon"

local MusicKind = { Normal = 1, Collect = 2 }



local function OnClickMusicItem(self, id)
    self.PageView:pageTo(id - 1)
end

local function ChangeOrder(self, isChage)
    if isChage then
        self.orderMode = (self.orderMode == 1 and {2} or {1})[1]
    end
    self.orderText.text = (self.orderMode == 2 and {LangUtil.GetSysLang(319)} or {LangUtil.GetSysLang(318)})[1]

    if self.orderMode == 1 then
        for _,v in table.pairsByKeys(self.nameItems) do
            v.transform:SetAsLastSibling()
        end
    else
        for _,v in table.pairsByKeys(self.nameItems) do
            v.transform:SetAsFirstSibling()
        end
    end
end

local function ActivePlayButton(self,_bool)
    self.playBtn.transform:Find("De").gameObject:SetActive(_bool)
    local fade = _bool and 0 or 1
    self.playBtn:GetComponent("Image"):DOFade(fade, 0)
end

local function InitCollectButton(self)
    local collectMusics = self.clientData:GetCollectMusic()
    if table.any(collectMusics,function(v) return tonumber(v) == self.zMusics[self.index].Id end) then
        self.playCollectBtn.transform:Find("Active").gameObject:SetActive(true)
    else
        self.playCollectBtn.transform:Find("Active").gameObject:SetActive(false)
    end
    
    for _,v in pairs(self.nameItems) do
        if table.any(collectMusics,function(c) return c == v.Id end) then
            v.collect:SetActive(true)
        else
            v.collect:SetActive(false)
        end
    end
end

local function RestMainInfo(self)
    if self.index <= 0 or self.index > self.musicCount then
        self.littleName.text = ""
        self.musicName.gameObject:SetActive(false)
        self.playIcon.sprite = DeActiveSprite
    else
        local zMusic = self.zMusics[self.index]
        self.littleName.text = zMusic.Name
        self.musicName.text = zMusic.Name
        self.musicName.gameObject:SetActive(true)
        UIUtil.SetSprite(self.playIcon,AtlasConfig.MusicIcon,zMusic.Avatar..".png",true)
    end

    self.slider.value = 0
    self.timeTxt.text = "00:00/00:00"
    InitCollectButton(self)
    ActivePlayButton(self,false)
end

local function OnCollect(self, id)
    if self.index <= 0 or self.index > self.musicCount then return end

    if id == nil then
        id = self.index
    end
    self.clientData:SetCollectMusic(self.zMusics[id].Id)
    --print(table.dump(self.clientData:GetCollectMusic()))
    local collect = self.nameItems[id].collect
    collect:SetActive(not collect.activeInHierarchy)
    InitCollectButton(self)
end

local function InitMusicItem(self,gameObject, zMusic, k)
    local item = {}
    local transform = gameObject.transform
    item.transform = transform
    item.Id = zMusic.Id
    item.nameTxt = LangUtil.BindText(transform:Find("Mask/Name"))
    item.collect = transform:Find("Collect/Active").gameObject
    item.play = transform:Find("Playing").gameObject
    item.playName = LangUtil.BindText(transform:Find("PlayingMask/PlayingName"))
    self.nameItems[k] = item

    item.nameTxt.text = zMusic.Name
    item.playName.text = zMusic.Name

    UIUtil.ScrollText(item.nameTxt)
    UIUtil.ScrollText(item.playName)
    item.nameTxt.gameObject:SetActive(true)
    item.playName:DOFade(1/255, 0)
    item.play:SetActive(false)
    if table.any(self.clientData:GetCollectMusic(),function(v) return v == zMusic.Id end) then
        item.collect:SetActive(true)
    else
        item.collect:SetActive(false)
    end
    UIUtil.AddBtnEvent(transform:Find("Collect"),function() OnCollect(self, k) end)
    UIUtil.AddBtnEvent(transform.gameObject,function() OnClickMusicItem(self, k) end)
end

local function InitContent(self)
    self.iconItems = {}
    ListChildPool:GetInstance():ClearContent(self.IconContent)
    for k,v in table.pairsByKeys(self.zMusics) do
        ListChildPool:GetInstance():GetChild(iconPfbName,self.IconContent,function(gameObject)
            if self.active == false then ListChildPool:GetInstance():Remove(gameObject) return end
            self.iconItems[k] = gameObject.transform
            local icon = gameObject.transform:Find("Bg/Value"):GetComponent("Image")
            UIUtil.SetSprite(icon, AtlasConfig.MusicIcon, v.Avatar..".png", true)
        end)
    end
    self.PageView = self.IconScrollView.gameObject:GetComponent("PageView")
    self.PageView.OnPageChanged = function(id) self:OnPageChanged(id) end
    self.PageView:UpdataPageViewRect()
    
    self.nameItems = {}
    ListChildPool:GetInstance():ClearContent(self.nameContent)
    for k,v in table.pairsByKeys(self.zMusics) do
        ListChildPool:GetInstance():GetChild(prefabName, self.nameContent,function(gameObject)
            if self.active == false then ListChildPool:GetInstance():Remove(gameObject) return end
            InitMusicItem(self, gameObject, v, k)
        end)
    end
end

local function ChangeAllMusicIcon(self)
    for k,v in pairs(self.iconItems) do
        local bg = v:Find("Bg")
        local icon = v:Find("Bg/Value")
        local f_v = (self.index == k and {1} or {0.55})[1]
        local s_v = (self.index == k and {1} or {0.8})[1]
        bg:DOScale(s_v, 0)
        bg:GetComponent("Image"):DOFade(f_v, 0)
        icon:GetComponent("Image"):DOFade(f_v, 0)
    end
end

local function InitCollectMusicData(self)
    self.collectMusic = {}
    local collist = self.clientData:GetCollectMusic()
    for _,v in table.pairsByKeys(Z_Music) do
        if v.IsOpen == 1 and table.any(collist,function(a) return v.Id == tonumber(a) end) then
            table.insert(self.collectMusic, v)
        end
    end
end

local function StopMusic(self)  --暂停播放
    self.isPlaying = false
    self.audio_source:Stop()
    ActivePlayButton(self,false)
end

local function ChageMusicKind(self)
    self.maskImg:SetActive(true)
    self.ScrollViewCanvas.enabled = false
    if self.play_id > 0 then
       StopMusic(self)
    end
    self.play_id = -1
    self.index = 1
    self.isPlaying = false
    if self.musicKind == MusicKind.Collect then
        InitCollectMusicData(self)
        self.zMusics = self.collectMusic
        self.musicCount = table.count(self.collectMusic)
    else
        self.zMusics = self.normalMusic
        self.musicCount = table.count(self.normalMusic)
    end
    self.labelTxt.text = self.musicCount .."/" .. self.musicCount

    coroutine.start(function()
        InitContent(self)
        ChangeOrder(self)
        OnClickMusicItem(self, self.index)
        coroutine.waitforframes(2)
        self.ScrollViewCanvas.enabled = true
        self.isOpen = true
    end)
end

local function GetTime(second)
    local m,s
    second = math.modf(second)
    m = math.modf(second / 60)
    s = second%60
    
    if m < 10 then m = "0"..m end
    if s < 10 then s = "0"..s end 
    
    return m..":"..s
end

local function MoveScrollRect(self)
    local scrollRect = self.musicNamePanel.transform:Find("Scroll View"):GetComponent("ScrollRect")
    local maxCount = 0
    for i = 0,self.nameContent.childCount - 1 do
        local gameObject = self.nameContent:GetChild(i).gameObject
        if gameObject.activeInHierarchy then
            maxCount = maxCount + 1
        end
    end
    local index = self.nameItems[self.index].transform:GetSiblingIndex();
    if index >= 4 and  index <  maxCount - 5  then
        scrollRect:DOVerticalNormalizedPos(1-index/maxCount,0.5)
    elseif index >=  maxCount - 5 then
        scrollRect:DOVerticalNormalizedPos(0,0.5)
    end
end


local function PlayMusic(self)
    RestMainInfo(self)
    if self.index <= 0 or self.index > self.musicCount then
        self.main = nil
        self.maskImg:SetActive(false)
        return
    end
    
    self.main = self.iconItems[self.index]:Find("Bg")
    for k,v in pairs(self.nameItems) do
        if k == self.index then
            v.nameTxt.gameObject:SetActive(false)
            v.playName:DOFade(1, 0)
            v.play:SetActive(true)
        else
            v.nameTxt.gameObject:SetActive(true)
            v.playName:DOFade(1/255, 0)
            v.play:SetActive(false)
        end
    end
    
    MoveScrollRect(self)
    isLoading = true
    self.maskImg:SetActive(true)
    coroutine.start(function()
        local zMusic = self.zMusics[self.index]
        self.timeTxt.text = LangUtil.GetSysLang(2012)
        local asset = ResourcesManager:GetInstance():CoLoadAsync("Bgm/"..zMusic.Path,typeof(AudioClip))
        self.audio_source.clip = asset
        self.audio_source:Play()
        self.audio_source.time = 0
        self.isPlaying = true
        self.play_id = self.index
        isLoading = false
        ActivePlayButton(self,true)
        coroutine.waitforframes(2)
        self.maxTime = GetTime(self.audio_source.clip.length)
        self.maskImg:SetActive(false)
    end)     
end

local function ContinueMusic(self) --继续播放
    self.isPlaying = true
    self.audio_source:Play()
    self.audio_source.time = self.curTime
    ActivePlayButton(self,true)
end

function this.OnNextButton(self,isOrder)  --点击下一曲
    if self.orderMode == 2 then
        if self.index == 1 then
            self.index = self.musicCount
        else
            self.index = self.index - 1
        end
    elseif self.orderMode == 1 then
        if self.index == self.musicCount then
            self.index = 1
        else
            self.index = self.index + 1
        end
    end
    OnClickMusicItem(self,self.index)
end

function this.OnLastButton(self)  --点击上一曲
    if self.orderMode == 2 then
        if self.index == self.musicCount then
            self.index = 1
        else
            self.index = self.index + 1
        end
    elseif self.orderMode == 1 then
        if self.index == 1 then
            self.index = self.musicCount
        else
            self.index = self.index - 1
        end
    end
    OnClickMusicItem(self,self.index)
end

local function OnPlayButton(self) --点击播放
    if self.isPlaying == false then
        if self.play_id == self.index then
            ContinueMusic(self)
        else
            PlayMusic(self)
        end
    else
        StopMusic(self)
    end
end

local function OnCloseButton(self)  --关闭列表
    self.musicNamePanel:SetActive(false)
end

local function OnListButton(self) --打开列表
    if self.musicNamePanel.gameObject.activeSelf then
        self.musicNamePanel:SetActive(false)
    else
        self.musicNamePanel:SetActive(true)
    end
    
end

local function OnCollectButton(self)  --点击收藏
    self.musicKind = (MusicKind.Normal == self.musicKind and {MusicKind.Collect} or {MusicKind.Normal})[1]
    self.collectBtn.transform:Find("Active").gameObject:SetActive(self.musicKind == MusicKind.Collect)
    ChageMusicKind(self)
end

function this.OnPageChanged(self,id)
    if self.play_id == id + 1 then return end
    if not self.isOpen then
        ChangeAllMusicIcon(self)
        RestMainInfo(self)
        self.maskImg:SetActive(false)
        return
    end

    if self.musicCount > 0 then
        self.index = id + 1
        self.labelTxt.text = self.musicCount.."/"..self.musicCount
        ChangeAllMusicIcon(self)
    end
    
    PlayMusic(self)
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.langRc:GetObject("Title")).text = LangUtil.GetSysLang(672)--音乐列表
    LangUtil.BindText(self.langRc:GetObject("LabelText")).text = LangUtil.GetSysLang(312)--持有数

    self.labelTxt = LangUtil.BindText(self.rc:GetObject("Label"),FontType.All_Number)
    self.musicName = LangUtil.BindText(self.rc:GetObject("MusicName"))
    self.littleName = LangUtil.BindText(self.playCtrl:Find("Mask/Name"))
    self.timeTxt = LangUtil.BindText(self.playCtrl:Find("Time"),FontType.All_Number)
    self.orderText = LangUtil.BindText(self.order.transform:Find("Text"))
    
    LangUtil.GetSpriteLang(32,function(sprite) self.collectBtn:GetComponent("Image").sprite = sprite end)
    LangUtil.GetSpriteLang(31,function(sprite) self.collectBtn:Find("Active"):GetComponent("Image").sprite = sprite end)
end

local function InitNormalMusicData(self)
    self.normalMusic = {}
    for _,v in table.pairsByKeys(Z_Music) do
        if v.IsOpen == 1 then
            table.insert(self.normalMusic, v)
        end
    end
    
end

function this.OnCreate(self)
    base.OnCreate(self)

    self.playCtrl = self.rc:GetObject("PlayCtrl").transform
    self.order = self.rc:GetObject("Order")
    self.collectBtn = self.rc:GetObject("Collect").transform
    self.musicNamePanel = self.rc:GetObject("MusicNamePanel")
    self.nameContent = self.rc:GetObject("Content").transform
    self.maskImg = self.rc:GetObject("Mask")

    self.slider = self.playCtrl:Find("Slider"):GetComponent("Slider")
    self.playBtn = self.playCtrl:Find("PlayBtn").gameObject
    self.playCollectBtn = self.playCtrl:Find("Collect").gameObject
    self.playIcon = self.playCtrl:Find("Avatar/Mask/Value"):GetComponent("Image")
    self.IconScrollView = self.rc:GetObject("IconScrollView"):GetComponent("ScrollRect")
    self.IconContent = self.IconScrollView.transform:Find("Viewport/Content").transform
    self.ScrollViewCanvas = self.rc:GetObject("ScrollViewCanvas"):GetComponent("Canvas")
    self.ScrollViewCanvas.transform.localPosition = self.rc:GetObject("Left").transform.localPosition

    UIPublic.SetBackButton(
            self.rc:GetObject("BackButton"),
            UIWindowNames.UIMusicHandBook,
            614
    )
    UIUtil.AddBtnEvent(self.playBtn,function() OnPlayButton(self) end)
    UIUtil.AddBtnEvent(self.playCtrl:Find("Last"),function() self:OnLastButton() end)
    UIUtil.AddBtnEvent(self.playCtrl:Find("Next"),function() self:OnNextButton()  end)
    UIUtil.AddBtnEvent(self.collectBtn,function() OnCollectButton(self)  end)--已收藏的
    UIUtil.AddBtnEvent(self.playCtrl:Find("ListBtn"),function() OnListButton(self)  end)
    UIUtil.AddBtnEvent(self.playCollectBtn,function() OnCollect(self)  end)
    UIUtil.AddBtnEvent(self.order,function() ChangeOrder(self, 1) end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.maskImg:SetActive(true)
    self.isOpen = false
    self.main = nil
    self.index = 1--下标
    self.play_id = -1
    self.clientData = ClientData:GetInstance()
    self.bgmComponent = Game.Scene:GetComponent("BgmComponent")
    InitNormalMusicData(self)
    self:OnRefresh()
end

function this.OnRefresh(self)
    self.orderMode = 1--1.升序、2.降序
    self.musicKind = MusicKind.Collect
    self.isPlaying = false
    self.audio_source = self.bgmComponent.audio_source
    self.maxTime = "00:00"
    self.curTime = 0
    OnCollectButton(self)
end


function this.Update(self)
    if self.isPlaying and not isLoading  then
        self.slider.value = self.audio_source.time/self.audio_source.clip.length
        self.curTime = self.audio_source.time
        self.timeTxt.text =  GetTime(self.audio_source.time).."/"..self.maxTime
        if not IsNull(self.main) then
            self.main.transform:Rotate(Vector3.New(0,0,1),1/3)
        end
        if self.audio_source.time/self.audio_source.clip.length == 1 then
            self:OnNextButton()
        end
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnDisable(self)
    base.OnDisable(self)
    self.main = nil
    self.isPlaying = false
    self.normalMusic = {}
    self.collectMusic = {}
    self.nameItems = {}
    self.iconItems = {}
    ListChildPool:GetInstance():ClearContent(self.IconContent)
    ListChildPool:GetInstance():ClearContent(self.nameContent)
    coroutine.start(function()
        self.bgmComponent:CoPlay(BgmType.UI,"HandBook")
    end)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end


return this;

