---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/1 16:21
---

local UICardHandBookDetailView = BaseClass("UICardHandBookDetailView",UIBaseView)
local base = UIBaseView
local this = UICardHandBookDetailView
local InfoLogic = require "UI.UIHandBook.UICardHandBookDetail.InfoLogic"
local SkillLogic = require "UI.UIHandBook.UICardHandBookDetail.SkillLogic"
local SoundLogic = require "UI.UIHandBook.UICardHandBookDetail.SoundLogic"
local ClothLogic = require "UI.UIHandBook.UICardHandBookDetail.ClothLogic"

local isBusying = false
local screeY = 1080
local defPox = Vector3.New(12.6,-33.5, -1000)
local delayTime = 0.3
local defaultPos = Vector3.New(724, -48, 0)

local function PlayState1(self)
    self.cardFace.transform:SetParent(self.minRoot.transform)
    self.animBg:GetComponent("Image"):DOFade(0,delayTime).onComplete = function() self.animBg:SetActive(false) end
    self.cardFace:GetComponent("RectTransform"):DOLocalMove(defaultPos,delayTime).onComplete = function()
        isBusying = false
    end
    self.cardFace.transform:DOScale(Vector2.New(1,1),delayTime)
    self.cardFace.transform:DORotate(Vector3.New(0,0,0),delayTime)
    table.csenuObject(self.cardFace.transform,function(v)
        if v.name ~= "FaceMask" and v.name ~= "BgMask" then
            local txt = v:GetComponent("Text")
            local img = v:GetComponent("Image")
            if txt  then txt:DOFade(1,delayTime-0.2) end
            if img then img:DOFade(1,delayTime-0.2) end
        end
    end)
    if self.linesRoot then
        self.linesRoot.gameObject:SetActive(true)
    end
end

local function PlayState2(self)
    local scale = screeY/self.width
    self.cardFace.transform:SetParent(self.maxRoot.transform)
    self.cardFace:GetComponent("RectTransform"):DOLocalMove(Vector3.New(0,0, -1000),delayTime).onComplete = function()
        self.animBg:SetActive(true)
        self.animBg:GetComponent("Image"):DOFade(1,delayTime)
        isBusying = false
    end
    self.cardFace.transform:DOScale(Vector2.New(scale,scale),delayTime)
    self.cardFace.transform:DORotate(Vector3.New(0,0,90),delayTime)
    if self.linesRoot then
        self.linesRoot.gameObject:SetActive(false)
    end
end

local function PlayState3(self)
    isBusying = true
    table.csenuObject(self.cardFace.transform,function(v)
        if v.name ~= "FaceMask" and v.name ~= "BgMask" then
            local txt = v:GetComponent("Text")
            local img = v:GetComponent("Image")
            if txt  then txt:DOFade(0,delayTime) end
            if img then img:DOFade(0,delayTime) end
        end
    end)
    coroutine.start(function()
        coroutine.waitforseconds(delayTime)
        isBusying = false
    end)
end

local function OnClickCardFace(self)
    if isBusying == false then
        isBusying =  true
        if self.state == 1 then
            PlayState2(self)
            self.state = 2
        elseif self.state == 2 then
            local info
            local zCardOriginalOffset = Z_CardOriginalOffset[self.zCard.Id]
            assert(self.selectStage)
            local combCounts = zCardOriginalOffset.CombCounts[self.selectStage]
            assert(combCounts)
            if combCounts == 1 then
                info = {
                    image = self.bgImage,
                    subImage = self.cardImage,
                    id = self.zCard.Id,
                    stage = self.selectStage,
                    state = 2, --角色原画
                    scale = self.cardFace.transform.localScale.x,
                    bgCard = self.bgCard,
                    scaleRot =  screeY/self.height,
                    cardOffset = self.cardImage.transform.localPosition, --(self.cardImage.transform.localPosition+self.cardImage.transform.parent.localPosition),
                    bgOffset = self.bgImage.transform.localPosition, --(self.bgImage.transform.localPosition+self.bgImage.transform.parent.localPosition),
                    callBack = function()
                        PlayState1(self)
                        self.state = 1
                    end }
            elseif combCounts == 4 then
               local subImages = {}
               for i = 0,self.cardFaceCombRoot.childCount -1 do
                   subImages[i+1] = self.cardFaceCombRoot:GetChild(i):GetComponent("Image")
               end
               info = {
                   image = self.bgImage,
                   subImage =  self.cardImage,--subImages,
                   id = self.zCard.Id,
                   state = 3, --角色原画需要拼接
                   scale = self.cardFace.transform.localScale.x,
                   bgCard = self.bgCard,
                   scaleRot =  screeY/self.height,
                   cardOffset = (self.cardFaceCombRoot.localPosition+self.cardFaceCombRoot.parent.localPosition),
                   bgOffset = (self.bgImage.transform.localPosition+self.bgImage.transform.parent.localPosition),
                   callBack = function()
                       PlayState1(self)
                       self.state = 1
                   end }
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIOriginalPainting,info)
            --PlayState3(self)
            self.state = 3
        elseif self.state == 3 then

        end
    end
end


local function OnClickPanelButton(self,id)
    if self.clickPanelId == id then
        return
    end
    self.clickPanelId = id
    for k,v in pairs(self.btnList) do
        local transform = v.transform
        transform:Find("Active").gameObject:SetActive(k == id)
        transform:GetComponent("Button").enabled  = (not (id ==k))
    end

    for k,v in pairs(self.panelList) do
        v:SetActive(k == id)
    end
    
    self.logicList[id].OnEnable(self)
end

function this.SetOriginal(self,stage, bgStage)
    --local cardFace = self.cardImage
    --local cardBg = self.bgImage
    self.bgCard.gameObject:SetActive(true)
    local zCard = self.zCard
    if stage == nil then stage = 1 end
    --local object = GameObjectPool:GetInstance():CoGetGameObjectAsync("UI/Prefabs/View/Items/UIBgCard.prefab")
    for i = 1, self.bgCard.transform.childCount do
        local tnf = self.bgCard.transform:GetChild(i - 1)
        local name = zCard.Id.."_"..stage
        tnf.gameObject:SetActive(tnf.name == name)
        if tnf.name == name then
            coroutine.start(function ()
                local img = tnf:GetComponent("Image")
                self.bgImage = img
                img.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/CardBgOriginal/"..zCard.Id.."_"..bgStage..".png")
                img:SetNativeSize()
            end)
            coroutine.start(function ()
                --local zSkin = UIPublic.GetSkin(zCard.Id, stage)
                -- local cardName = zCard.Id.."_"..stage
                -- if not string.IsNullOrEmpty(zSkin.AssistImage) then
                --     cardName = zCard.Id.."_"..zSkin.AssistImage
                -- end
                local cardName = Z_FigureAsset[zCard.Id * 100 + stage].CardPaintHandBook
                local img = tnf:Find("Card"):GetComponent("Image")
                self.cardImage = img
                local path = "UI/CardPaint/"..cardName..".png"
                -- 和谐
                local skin = table.first(Z_Skin, function (v) return v.BelongCard == zCard.Id and v.Stage == stage end)
                if skin ~= nil then
                    path = "UI/CardPaint"..skin.CardPaint.."/"..cardName..".png"
                end
                img.sprite = AtlasManager:GetInstance():CoLoadImageAsync(path)
                img:SetNativeSize()
            end)
        end
    end
    --object.transform:SetParent(cardBg.transform.parent, false)
    --UIPublic.SetCardBgOriginal(zCard.Id, cardBg, stage,true,0.38)
    --UIPublic.SetCardOriginal(zCard.Id, cardFace, stage,2,true,0.6,nil, self.cardFaceCombRoot)
end

local function InitCardFace(self)
    self.mask.gameObject:SetActive(true)
    self.mask:GetComponent("Image"):DOFade(1,0)
    local transform = self.cardFace.transform
    local card = {TemplateId = self.zCard.Id,Star = 5,Stage = 3,}
    local zCard = self.zCard
    local star = transform:Find("Star")
    local name = transform:Find("Name/Value"):GetComponent("Text")
    local mainProp = transform:Find("MainProp")
    local subProp = transform:Find("SubProp"):GetComponent("Image")
    local cardFrom = transform:Find("CardFrom"):GetComponent("Image")
    local rareFrame = transform:Find("RareFrame"):GetComponent("Image")
    local dividingLine = transform:Find("DividingLine"):GetComponent("Image")
    local raility = transform:Find("Raility"):GetComponent("Image")

   -- self:SetOriginal()
    name.text = zCard.Name
    --UIPublic.InitStar(star,card) --星级
    local cardInfo = Z_Character[self.zCard.Id]

    UIPublic.NewInitStar(star:GetComponent("Image"),card.Star) --星级
    UIUtil.SetSprite(mainProp:GetComponent("Image"), AtlasConfig.Class, 
    cardInfo.Class .. "_" .. cardInfo.Rarity ..".png")

    UIUtil.SetSprite(cardFrom,AtlasConfig.CardFrom,zCard.Sphere..".png")

    coroutine.start(function ()
        rareFrame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/RareFrame/"..UIPublic.RareNames[cardInfo.Rarity]..".png")
        dividingLine.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/"..UIPublic.RareNames[cardInfo.Rarity].."_Line.png")
        raility.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[cardInfo.Rarity]..".png")
        UIPublic.InitSubProp(subProp, cardInfo.Prop)
    end)


    self.mask:GetComponent("Image"):DOFade(0,0.3)
    self.mask.gameObject:SetActive(false)

    UIPublic.InitEncyclopedia(self.collection, zCard.Id, RecordType.Character)
end

-- function this.OnLangCreate(self)
--     local btnRoot = self.langRc:GetObject("ButtonCtrl").transform
--     --local backText = self.langRc:GetObject("BackText").transform
--     local cardInfo = self.langRc:GetObject("CardInfo").transform
--     local nameTxt = cardInfo:Find("Name/Value")
--     local cardNameText = self.langRc:GetObject("CardNameText").transform

--     for i=0,btnRoot.childCount - 1 do
--         --local child = btnRoot:GetChild(i)
--         --local text = child:Find("Text")
--         --local activeText = child:Find("Active/Text")
--         --LangUtil.BindText(text).text = LangUtil.GetSysLang(276+i)
--         --LangUtil.BindText(activeText).text = LangUtil.GetSysLang(276+i)
--         --UIUtil.ScrollText(text:GetComponent("Text"))
--         --UIUtil.ScrollText(activeText:GetComponent("Text"))
--     end
--     --LangUtil.BindText(backText).text = LangUtil.GetSysLang(274)
--     LangUtil.BindText(cardNameText)
--     LangUtil.BindText(nameTxt)
--     UIUtil.ScrollText(nameTxt)
--     for k,v in pairs(self.logicList) do
--         if v.OnLangCreate then
--             v.OnLangCreate(self,self.panelList[k])
--         end
--     end
-- end
function this:ChangeCard(offset)
    if self.model.index + offset <= 0 or self.model.index + offset > #self.model.isOnCidList then
        return
    end
    self.model.index = self.model.index + offset
    self:OnRefresh()
end

function this.OnCreate(self)
    base.OnCreate(self)
    self.mask= self.rc:GetObject("Mask")
    local backBtn = self.rc:GetObject("BackButton")
    local btnCtrl = self.rc:GetObject("ButtonCtrl").transform
    local panelCtrl = self.rc:GetObject("PanelArea").transform
    self.logicList = {InfoLogic,SkillLogic,SoundLogic,ClothLogic}
    self.cardFace = self.rc:GetObject("CardFace")
    self.cardCanvas = self.cardFace:GetComponent(typeof(CS.UnityEngine.Canvas))
    self.btnsCanvas = self.rc:GetObject("ButtonCtrl"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.clothBtnsCanvas = self.rc:GetObject("BtnCtrl"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.cardFaceCombRoot = self.rc:GetObject("CardFaceComb").transform
    self.nameTxt = self.rc:GetObject("CardNameText"):GetComponent("Text")
    self.maxRoot = self.rc:GetObject("MaxRoot")
    self.animBg = self.rc:GetObject("AnimBg")
    self.animBgCanvas = self.animBg:GetComponent(typeof(CS.UnityEngine.Canvas))
    self.minRoot = self.rc:GetObject("Left")
    self.bgImage = self.cardFace.transform:Find("BgMask/Root/CardBg"):GetComponent("Image")
    self.cardImage =  self.cardFace.transform:Find("FaceMask/Root/CardFace"):GetComponent("Image")
    self.width = self.cardFace:GetComponent("RectTransform").rect.width
    self.height = self.cardFace:GetComponent("RectTransform").rect.height
    self.bgCard = self.rc:GetObject("UIBgCard")
    self.linesRoot = self.rc:GetObject("Lines")
    self.collection = self.rc:GetObject("Collection").transform

    EventTriggerListener.Get(self.cardFace).onLuaClick = function() OnClickCardFace(self) end
    UIPublic.SetBackButton(
        backBtn,
        UIWindowNames.UICardHandBookDetail,
        419
    )

    self.btnList = {}
    self.panelList = {}
    for i = 0,btnCtrl.childCount - 1 do
        local btn = btnCtrl:GetChild(i).gameObject
        self.btnList[i+1] = btn
        UIUtil.AddBtnEvent(btn, function() 
            coroutine.start(function ()
                OnClickPanelButton(self,i+1)
            end)
        end)
    end
    for i = 0,panelCtrl.childCount - 1 do
        local panel = panelCtrl:GetChild(i).gameObject
        self.panelList[i+1] = panel
    end

    for k,v in pairs(self.logicList) do
        v.OnCreate(self,self.panelList[k])
    end

    self.lastButton = self.rc:GetObject("LastCard")
    self.nextButton = self.rc:GetObject("NextCard")
    UIUtil.AddBtnEvent(self.lastButton,function()
        self:ChangeCard(-1)
    end)
    UIUtil.AddBtnEvent(self.nextButton,function()
        self:ChangeCard(1)
    end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.clickPanelId = nil
    self:OnRefresh()
end

function this.OnRefresh(self)
    for k,v in pairs(self.btnList) do
        local transform = v.transform
        transform:Find("Active").gameObject:SetActive(k == 1)
    end
    for k,v in pairs(self.panelList) do
        v:SetActive(k == 1)
    end
    self.state = 1

    --self.zCard = Z_Card[self.model.templateId]
    self.zCard = Z_Card[self.model.isOnCidList[self.model.index]]
    self.templateId = self.zCard.Id

    self.lastButton:SetActive(self.model.index ~= 1)
    self.nextButton:SetActive(self.model.index ~= #self.model.isOnCidList)

    self.nameTxt.text = self.zCard.Title .. " " .. self.zCard.Name
    InitCardFace(self) -- 加载卡片
    coroutine.start(function ()
        
        for k, v in pairs(self.logicList) do -- Init
            v.Init(self)
        end
        OnClickPanelButton(self, 1) -- Enable
        coroutine.waitforframes(3)
        if not self.enabled then
            return
        end
        local soundComponent = Game.Scene:GetComponent("SoundComponent")
        soundComponent:Stop()
        soundComponent:PlayArchiveSound(self.zCard.Id)
        --coroutine.waituntil(function () return soundComponent:GetActive() end)
        -- 图鉴台词
        local cardSound = Z_CardSound[self.zCard.Id]
        if cardSound and self.linesRoot then
            local zLines = table.first(Z_Lines, function (v) return v.BelongCard == self.zCard.Id and v.SoundType == "N" and v.SoundName == cardSound[SoundType.Archive] end)
            self.linesRoot.gameObject:SetActive(zLines ~= nil)
            if zLines then
                LangUtil.BindText(self.linesRoot.transform:Find("Text")).text = zLines.Lines
            end
        end
    end)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    self.cardCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.cardCanvas.sortingLayerName = SortingLayerNames.UI
    self.btnsCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.btnsCanvas.sortingLayerName = SortingLayerNames.UI
    self.clothBtnsCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.clothBtnsCanvas.sortingLayerName = SortingLayerNames.UI
    self.animBgCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.animBgCanvas.sortingLayerName = SortingLayerNames.UI
end

function this.Update(self)
   SoundLogic.Update(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnDisable(self)
    SoundLogic.OnDisabled(self)
    ClothLogic.OnDisabled(self)
    self.bgCard.gameObject:SetActive(false)
    --GameObjectPool:GC()
    base.OnDisable(self)
    Game.Scene:GetComponent("SoundComponent"):Stop()
    Game.Scene:GetComponent("SoundComponent"):MainStop()

    local transform = self.cardFace.transform
    transform:Find("BgMask/Root/CardBg"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("BgMask/Root/CardBg"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("FaceMask/Root/CardFace"):GetComponent("Image").sprite = DeActiveSprite
    local root = transform:Find("FaceMask/Root/CardFaceComb")
    for i = 0,root.childCount -1 do
        root:GetChild(i):GetComponent("Image").sprite = DeActiveSprite
    end

    transform:Find("RareFrame"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("AtkDistance"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("MainProp"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("SubProp"):GetComponent("Image").sprite = DeActiveSprite
    transform:Find("CardFrom"):GetComponent("Image").sprite = DeActiveSprite
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this