---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/1 16:21
---

---@class UIFightSoulHandBookModel:UIBaseModel
local UIFightSoulHandBookView = BaseClass("UIFightSoulHandBookView",UIBaseView)
local base = UIBaseView
local this = UIFightSoulHandBookView

local pfbName = "FightVisitItem_handbook"

local recordOrder = {order = 1,kind = 1, lockFirst = true}  --是否正序  顺序类型 优先显示锁定的
local screenTypes = {
    --- 职业
    abiliType = 0,
    --- 星级
    star = 0, 
    --- 稀有度
    rare = 0,
    --- 是否装备
    isEquip = 0
}

local function OnScreen(self)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        this.RefreshFightSoulListData(self)
        this.RefreshListShow(self)
        --self.vs_scrollView.verticalScrollbar.value = 1
        self.vs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulSort,uiData)
end


local function OnSort(self)
    recordOrder.order = (recordOrder.order == 1 and {2}or {1})[1]
    self.sortButtonText.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    this.RefreshFightSoulListData(self)
    this.RefreshListShow(self)
end

---@param self UIFightSoulMainView
function this:RefreshFightSoulListData(hasAllFightSoul)
    if hasAllFightSoul == nil then hasAllFightSoul = false end
    
    self.vs_list = {}
    local fightSouls = {}
    for k,v in table.pairsByKeys(self.allIdList) do
        local zFightSoul = Z_FightSoul[v]

        local f = {
            Id = v,
            Lock = false,
            TemplateId = v,
            Star = 0,
            isEquip = false,
            level = 0,
            exp = 0,
            config = Z_FightSoul[v],
        }
        table.insert(self.vs_list, f)
    end

    self.vs_list = UIPublic.FightSoulScreenFunc(self.vs_list,screenTypes)
    if hasAllFightSoul then

        for k,v in table.pairsByKeys(self.fightSoulIds[0]) do
            local zFightSoul = Z_FightSoul[v]
    
            local f = {
                Id = v,
                Lock = false,
                TemplateId = v,
                Star = 0,
                isEquip = false,
                level = 0,
                exp = 0,
                config = Z_FightSoul[v],
            }
            if zFightSoul.ClassLimit ~= nil and table.count(zFightSoul.ClassLimit) > 1 then
                table.insert(fightSouls, f)
            end
        end

        local ids = {}
        for i, v in ipairs(self.vs_list) do
            table.insert(ids, v.Id)
        end
        for i, v in ipairs(fightSouls) do
            if not table.contains(ids, v.Id) then
                table.insert(self.vs_list, v)
            end
        end
    end
    table.sort(self.vs_list, function(a,b) return UIPublic.FightSoulSortFunc(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.vs_list = table.reverseTable(self.vs_list)
    end

    self.isOnCidList = {}

    for _, v in ipairs(self.vs_list) do
        if self.recordComponent:CheckIsOn(RecordType.FightSoul, v.TemplateId) then
            table.insert(self.isOnCidList, v.TemplateId)
        end
    end
end

----------------------------------

function this:OnClickCard(id) --点击角色
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulHandBookDetail, {
        id = id,
        isOnCidList = self.isOnCidList,
    })
end

function this:InitFightSoulItemData(fightSoul,transform)
    local zFightSoul = Z_FightSoul[fightSoul.TemplateId]
    local avatar = transform:Find("Mask/Avatar"):GetComponent("Image")
    local frame = transform:Find("Frame"):GetComponent("Image")
    local sub = transform:Find("Sub"):GetComponent("Image")
    local name = transform:Find("NameTextRoot/Name"):GetComponent("Text")
    UIUtil.ScrollText(name)
    LangUtil.BindText(name.transform).text =  Z_Card[zFightSoul.CardId].Name
    local starRoot = transform:Find("StarRoot")
    local select = transform:Find("Select").gameObject
    local lock = transform:Find("Lock")
    local star = fightSoul.Star
    local lab = transform:Find("Lab")
    LangUtil.BindText(lab).text = LangUtil.GetSysLang(259)
    select:SetActive(false)
    LangUtil.BindText(sub.transform:Find("Text")).text = zFightSoul.Desc
    lock.gameObject:SetActive(false)
    UIUtil.SetFightSoulSprite(avatar,zFightSoul.Id,FightSoulPictureType.Middle, true)
    frame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/FightSoulFrame/"..UIPublic.RareNames[zFightSoul.Rare].."_1.png")
    sub.sprite = AtlasManager:GetInstance():CoLoadImageAsync(AtlasConfig.FightSoulSub.AtlasPath.."/"..zFightSoul.Id..".png")
    
    for i = 0,starRoot.childCount - 1 do
        starRoot:GetChild(i).gameObject:SetActive(star >= (i+1))
    end
end

---@param v number @ 战魂cid
function this:AddCardItem(content,go,v) --添加角色
    UIPublic.InitVsFightSoulItem(
        {
            TemplateId = v,
            Star = 0,
            level = nil,
            maxLevel = nil,
            isEquip = false,
            Lock = false,
            config = Z_FightSoul[v]
        },
        go.transform
    )

    local rc = go:GetComponent("ReferenceCollector")

    -- local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local propertyRoot = rc:GetObject("PropertyRoot").transform
    local mask = rc:GetObject("Mask")

    if not self.recordComponent:CheckIsOn(RecordType.FightSoul, v) then
        -- avatar:GetComponent("Image").material = ResourcesManager:GetInstance():CoLoadAsync("UI/Materials/UI-GreyDefault.mat", typeof(Material))
        --go:GetComponent("Button").enabled = false
        mask:SetActive(true)
        rc:GetObject("MaskImage"):SetActive(true)

        UIUtil.AddBtnEvent(go,function()
            UIUtil.OpenThingsDetailWindow({
                showType = ShowType.FightSoul,
                tempId = v,
            })
        end)
    else
        -- avatar:GetComponent("Image").material = nil
        --go:GetComponent("Button").enabled = true
        mask:SetActive(false)
        rc:GetObject("MaskImage"):SetActive(false)

        UIUtil.AddBtnEvent(go,function()
            self:OnClickCard(v)
            -- hintNode:GetChild(v):SetCount(0)
        end)
    end

    UIPublic.InitEncyclopediaDetail(propertyRoot, v, RecordType.FightSoul, 0 )
end

local function InitContent(self,content,idList) --刷新角色列表
    for k,v in table.pairsByKeys(idList) do
        coroutine.waitforframes(1)
        self:AddCardItem(content,v)
    end
end

function this:OnKindButton(id)
    for k,v in pairs(self.btnList) do
        local transform = v.transform
        local btn = v:GetComponent("Button")
        local active = transform:Find("Active").gameObject
        if k == id then
            active:SetActive(true)
            btn.enabled = false
        else
            active:SetActive(false)
            btn.enabled = true
        end
    end
    self.allIdList = self.fightSoulIds[id]

    self:RefreshFightSoulListData(true)
    self:RefreshListShow()
end

function this:RefreshListShow()
    self.hint:SetActive(table.count(self.vs_list) == 0)
    self.vs_scroll:RefreshData(self.vs_list)
    self.vs_scroll:MoveTop()
end

local function InitHint(self)
    -- local handbookNode = Game.Scene:GetComponent("HintComponent").Handbook:GetChild("FightSoul")

    -- for i =1,#self.btnList do
    --     local cardNode = handbookNode:GetChild(i)
    --     cardNode:AddObject(self.btnList[i].transform:Find("Hint").gameObject,"FightSoulHandBookView")
    -- end
end

function this:InitList()
    self.vs_scroll:Clear()
    self.vs_scroll:ScrollInit(self.vs_list, self.vs_scrollView, pfbName, function (arg)
        local content = self.vs_scrollView.transform:Find("Viewport/Content")
        self:AddCardItem(content,arg.go,arg.data.TemplateId)
    end)
end

function this:OnCreate()
    base.OnCreate(self)

    self.hint = self.rc:GetObject("Hint")
    self.backBtn = self.rc:GetObject("BackButton")
    local btnCtrl = self.rc:GetObject("BtnCtrl").transform
    local viewCtrl = self.rc:GetObject("Right").transform
    self.progressTxt = self.rc:GetObject("Progress").transform:Find("Value"):GetComponent("Text")
    self.holdTxt = self.rc:GetObject("Hold").transform:Find("Value"):GetComponent("Text")
    self.btnList = {}
    self.vs_list = {}
    self.isOnCidList = {}
    self.vs_scroll = VerticalScroll.New()
    self.vs_scroll:SetUpdateCount(5)
    self.vs_scrollView = viewCtrl:GetChild(0):GetComponent("ScrollRect")
    for i = 0,btnCtrl.childCount - 1 do
        local btn = btnCtrl:GetChild(i).gameObject
        self.btnList[i] =btn
        UIUtil.AddBtnEvent(btn,function() self:OnKindButton(i) end)
    end
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UIFightSoulHandBook,
        423
    )

    UIUtil.AddBtnEvent(self.rc:GetObject("OnProperty"),function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHandBookProperty)
    end)
    self.screenButton = self.rc:GetObject("ScreenButton")
    self.sortBtn = self.rc:GetObject("SortButton")
    UIUtil.AddBtnEvent(self.screenButton, function() OnScreen(self) end)
    UIUtil.AddBtnEvent(self.sortBtn, function() OnSort(self) end)
end

function this:OnLangCreate()
    local btnRoot = self.langRc:GetObject("BtnCtrl").transform
    local progress = self.langRc:GetObject("Progress").transform
    local hold = self.langRc:GetObject("Hold").transform

    for i =0,btnRoot.childCount - 1 do
        local root = btnRoot:GetChild(i)
        local rootImg = root:Find("Image"):GetComponent("Image")
        local activeImg = root:Find("Active/Image"):GetComponent("Image")

        UIPublic.SetClassSprite(rootImg, i, false)
        UIPublic.SetClassSprite(activeImg, i, true)
    end

    LangUtil.BindText(hold:Find("Text")).text = LangUtil.GetSysLang(731)
    LangUtil.BindText(progress:Find("Text")).text = LangUtil.GetSysLang(275)
    LangUtil.BindText(hold:Find("Value"),FontType.All_Number)
    LangUtil.BindText(progress:Find("Value"),FontType.All_Number)
    LangUtil.BindText(self.langRc:GetObject("OnPropertyText")).text =  LangUtil.GetSysLang(1278)

    local screenBtn = self.langRc:GetObject("ScreenButton").transform
    local sorBtn = self.langRc:GetObject("SortButton").transform
    
    LangUtil.BindText(screenBtn:Find("Text")).text = LangUtil.GetSysLang(155)
    self.sortButtonText = LangUtil.BindText(sorBtn:Find("Text"))

    self.sortButtonText.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
end

function this:OnEnable()
    base.OnEnable(self)
    self:InitList()
    self:OnRefresh()
end

function this:OnRefresh()
    ---@type RecordComponent
    self.recordComponent = Game.Scene.Player:GetComponent("RecordComponent")
    local holdCount, maxCount = self.recordComponent:GetRecordCount(RecordType.FightSoul)
    self.holdTxt.text = holdCount.."/"..maxCount
    self.progressTxt.text = math.modf(holdCount/maxCount*100).."%"

    self.fightSoulIds = self.model.fightSoulIds

    for k,v in pairs(self.fightSoulIds) do
        if table.count(v) == 0 then
            self.btnList[k].gameObject:SetActive(false)
        else
            self.btnList[k].gameObject:SetActive(true)
        end
    end

    self:OnKindButton(0)
end

function this:OnAddListener()
    base.OnAddListener(self)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self)
end

function this:OnDisable()
    base.OnDisable(self)
    self.vs_scroll:Dispose()
end

function this:OnDestroy()
    base.OnDestroy(self)
end

return this