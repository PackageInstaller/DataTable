---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/1 16:21
---

---@class UICardHandBookView : UIBaseView
---@field recordComponent RecordComponent
local UICardHandBookView = BaseClass("UICardHandBookView",UIBaseView)
local base = UIBaseView
local this = UICardHandBookView

local prefabName = "CardItemNew_HandBook"

local recordOrder = {order = 1,kind = 1}  --是否正序  顺序类型
local screenTypes

function this:OnClickOrderButton()
    recordOrder.order = (recordOrder.order == 1 and {2} or {1} )[1]
    self.sortTxt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    self:InitCardListData()
    self:RefreshContent()
end

function this:OnScreen()
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.currentClass = self.class
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        self:InitCardListData()
        self:RefreshContent()
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardSort,uiData)
end

function this.InitCardListData(self)
    self.vs_list = {}
    for k,v in table.pairsByKeys(self.allIdList) do
        table.insert(self.vs_list, {
            TemplateId = v,
            Level = 1,
            Id = v,
            Star = 0,
            CloseDegree = 0,
        })
    end

    self.vs_list = UIPublic.ScreenFunc(self.vs_list, screenTypes)
    table.sort(self.vs_list, function(a,b) return UIPublic.SortFuncByCharacterId(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.vs_list = table.reverseTable(self.vs_list)
    end
end

function this.RefreshContent(self)
    self.hint:SetActive(table.count(self.vs_list) == 0)
    self.vs_scroll:RefreshData(self.vs_list)
    self.vs_scroll:MoveTop()

    self.isOnCidList = {}

    for _, v in ipairs(self.vs_list) do
        if self.recordComponent:CheckIsOn(RecordType.Character, v.TemplateId) then
            table.insert(self.isOnCidList, v.TemplateId)
        end
    end
end

function this:OnClickCard(id) --点击角色

   UIManager:GetInstance():OpenWindow(UIWindowNames.UICardHandBookDetail,
    {
        id = id,
        isOnCidList = self.isOnCidList,
    })
end

---@param v number @ 角色cid
function this:InitCardItem(content,go,v) --添加角色
    -- local hintNode = Game.Scene:GetComponent("HintComponent").Handbook:GetChild("Card"):GetChild(Z_Card[v].Sphere)
    local card = {TemplateId = v,Level = -1,Star = 5,Stage = 3,Id = v,SkinId = nil}

    for a,b in pairs(self.cards) do
        if b.TemplateId == card.TemplateId then
            card.SkinId = b.SkinId
        end
    end
   
    go:SetActive(true)
    local transform = go.transform
    local rc = transform:GetComponent("ReferenceCollector")

    UIUtil.AddBtnSound(go)
    local cardInfo = transform:Find("CardInfo").gameObject

    UIPublic.InitCardItemDataNew(card,cardInfo)
    -- local new = go.transform:Find("CardInfo/New").gameObject
    -- hintNode:GetChild(v):AddObject(new,"CardHandBookView")

    local stage
    if not self.recordComponent:CheckIsOn(RecordType.Character, v) then
        stage = 0

        -- avatar:GetComponent("Image").material = ResourcesManager:GetInstance():CoLoadAsync("UI/Materials/UI-GreyDefault.mat", typeof(Material))
        --go:GetComponent("Button").enabled = false
        rc:GetObject("Mask"):SetActive(true)
        rc:GetObject("MaskImage"):SetActive(true)
        
        UIUtil.AddBtnEvent(go,function()
            UIUtil.OpenThingsDetailWindow({
                showType = ShowType.Card,
                tempId = v,
            })
        end)
    else
        local card = self.cards[v]
        for _, value in ipairs({0, 2, 4, 6}) do
            if card.Constellation >= value then
                stage = value
            end
        end
        LangUtil.BindText(rc:GetObject("StageText")).text = LangUtil.GetSysLang(725)
        -- avatar:GetComponent("Image").material = nil
        --go:GetComponent("Button").enabled = true
        rc:GetObject("Mask"):SetActive(false)
        rc:GetObject("MaskImage"):SetActive(false)

        UIUtil.AddBtnEvent(go,function()
            self:OnClickCard(v)
            -- hintNode:GetChild(v):SetCount(0)
        end)
    end

    UIPublic.InitEncyclopediaDetail(rc:GetObject("PropertyRoot").transform, v, RecordType.Character, stage )

end

function this:OnKindButton(id)
    for k,v in pairs(self.btnList) do
        local transform = v.transform
        local btn = v:GetComponent("Button")
        local active = transform:Find("Active").gameObject
        if k == id then
            active:SetActive(true)
            btn.enabled = false
        else
            active:SetActive(false)
            btn.enabled = true
        end
    end

    self.class = id
    -- 清空 排序里面的 Class
    if id == 0 then
        screenTypes.class = {}
    else
        screenTypes.class = {id}
    end
    self.allIdList = self.cardIds[id]
    self:InitCardListData(self)
    self:RefreshContent(self)
end


function this:OnLangCreate()
    local btnRoot = self.langRc:GetObject("BtnCtrl").transform
    local hold = self.langRc:GetObject("Hold").transform
    local progress = self.langRc:GetObject("Progress").transform
    -- local ids = { 91,93,95,0,0,0,0,97,99 }
    for i =0, btnRoot.childCount - 1 do
        local root = btnRoot:GetChild(i)
        local rootImg = root:Find("Image"):GetComponent("Image")
        local activeImg = root:Find("Active/Image"):GetComponent("Image")

        UIPublic.SetClassSprite(rootImg, i, false)
        UIPublic.SetClassSprite(activeImg, i, true)
    end
    LangUtil.BindText(hold:Find("Text")).text = LangUtil.GetSysLang(731)--发现数
    LangUtil.BindText(progress:Find("Text")).text = LangUtil.GetSysLang(275)
    LangUtil.BindText(hold:Find("Value"),FontType.All_Number)
    LangUtil.BindText(progress:Find("Value"),FontType.All_Number)
    LangUtil.BindText(self.langRc:GetObject("ScreenButton").transform:Find("Text")).text =  LangUtil.GetSysLang(155)
    LangUtil.BindText(self.langRc:GetObject("OnPropertyText")).text =  LangUtil.GetSysLang(1278)
    self.sortTxt = LangUtil.BindText(self.sortOrder.transform:Find("Text"))
end

function this:InitHint()
    -- local handbookNode = Game.Scene:GetComponent("HintComponent").Handbook:GetChild("Card")
    -- for i =1, #self.btnList do
    --     local cardNode = handbookNode:GetChild(i)q
    --     cardNode:AddObject(self.btnList[i].transform:Find("Hint").gameObject,"CardHandBookView")
    -- end
end

function this:InitEquipList()
    self.vs_scroll:Clear()
    self.vs_scroll:ScrollInit(self.vs_list, self.vs_scrollView,  prefabName, function (arg)
        self:InitCardItem(nil,arg.go,arg.data.TemplateId)
    end)
end

function this:OnCreate()
    base.OnCreate(self)
    
    screenTypes = UIPublic.GetDefaultScreenTypes()
    self.class = 0
    self.hint = self.rc:GetObject("Hint")
    self.backBtn = self.rc:GetObject("BackButton")
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UICardHandBook,
        419
    )

    local btnCtrl = self.rc:GetObject("BtnCtrl").transform
    local viewCtrl = self.rc:GetObject("Right").transform
    self.progressTxt = self.rc:GetObject("Progress").transform:Find("Value"):GetComponent("Text")
    self.holdTxt = self.rc:GetObject("Hold").transform:Find("Value"):GetComponent("Text")
    self.btnList = {}
    for i = 0,btnCtrl.childCount - 1 do
        local btn = btnCtrl:GetChild(i).gameObject
        self.btnList[i] = btn
        UIUtil.AddBtnEvent(btn,function()self:OnKindButton(i) end)
    end

    self.vs_list = {}
    self.vs_scroll = VerticalScroll.New()
    self.vs_scroll:SetUpdateCount(5)
    self.vs_scrollView = viewCtrl:GetChild(0):GetComponent("ScrollRect")
    
    UIUtil.AddBtnEvent(self.rc:GetObject("OnProperty"),function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHandBookProperty)
    end)
    -- self:InitHint()

    self.sort_btn =  self.rc:GetObject("ScreenButton")
    self.sortOrder = self.rc:GetObject("SortButton")
    UIUtil.AddBtnEvent(self.sort_btn,function(v) self:OnScreen() end)
    UIUtil.AddBtnEvent(self.sortOrder,function(v)
        self:OnClickOrderButton()
    end)
end

function this:OnEnable()
    base.OnEnable(self)
    self.cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    self:InitEquipList()
    self:OnRefresh()
end

function this:OnRefresh()
    self.recordComponent = Game.Scene.Player:GetComponent("RecordComponent")
    local holdCount, maxCount = self.recordComponent:GetRecordCount(RecordType.Character)

    self.holdTxt.text = holdCount.."/"..maxCount
    self.progressTxt.text = math.modf(holdCount/maxCount*100).."%"

    self.cardIds = self.model.cardIds

    -- for k,v in pairs(self.cardIds) do
    --     if table.count(v) == 0 then
    --         self.btnList[k].gameObject:SetActive(false)
    --     else
    --         self.btnList[k].gameObject:SetActive(true)
    --     end
    -- end

    self:OnKindButton(0)
end

function this:OnAddListener()
    base.OnAddListener(self)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self)
end

function this:OnDisable()
    base.OnDisable(self)
    self.vs_scroll:Dispose()
end

function this:OnDestroy()
    base.OnDestroy(self)
end

return this