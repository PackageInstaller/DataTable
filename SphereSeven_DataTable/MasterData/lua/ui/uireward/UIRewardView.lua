---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UIRewardView
---@field model UIRewardModel
local UIRewardView = BaseClass("UIRewardView",UIBaseView)
local base = UIBaseView
local this = UIRewardView

local itemHeight = 240

-- RewardType = 
-- {
--     Card = "Card",
--     Equip = "Equip",
--     FightSoul = "FightSoul",
--     Item = "Item",
--     Gold = "Gold",
--     PaidStarStone = "PaidStarStone",
--     FreeStarStone = "FreeStarStone",
--     StarSand = "StarSand",
--     MagicCrystal = "MagicCrystal",
--     EmperorStarPoint = "EmperorStarPoint",
--     StarLight = "StarLight",
--     MonthCard = "MonthCard",
--     CardSkin = "CardSkin",
    
-- }

RewardName = {Card = LangUtil.GetSysLang(90),Equip = LangUtil.GetSysLang(253),
              FightSoul = LangUtil.GetSysLang(259),Item = LangUtil.GetSysLang(314),Gold = Z_Currency[1].Name,
              PaidStarStone = Z_Currency[2].Name,FreeStarStone = Z_Currency[3].Name,StarSand = Z_Currency[4].Name,
              MagicCrystal = Z_Currency[5].Name,EmperorStarPoint = Z_Currency[6].Name,}

-- GetRewardTitleType = 
-- {
--     GetGoods = 1,
-- }


local pfbName = "ItemPrefab_Reward"

local function InitReward(self,gameObject,rewardInfo)
    -- local bg = transform:Find("Bg"):GetComponent("Image")
    -- local icon = transform:Find("Avatar"):GetComponent("Image")
    -- local Type = transform:Find("Type"):GetComponent("Image")
    -- local numTxt = transform:Find("Avatar/Text"):GetComponent("Text")
    local nameTxt = gameObject.transform:Find("Name/Value"):GetComponent("Text")
    -- LangUtil.BindText(numTxt.transform,FontType.All_Number)
    -- LangUtil.BindText(nameTxt.transform)
    -- numTxt.text = rewardInfo.num
    -- Type.gameObject:SetActive(false)
    local isShowCount = true
    if rewardInfo.RewardType == RewardType.RewardTypeCharacter then
        isShowCount = false
    end
    UIPublic.InitRewardItem({
        itemPrefab = gameObject,
        id = rewardInfo.templateId,
        type = rewardInfo.RewardType,
        count = rewardInfo.num,
        isShowThingsDetail = true,
        isBag = false,
        isShowCount = isShowCount,
        nameText = nameTxt,
    })

    -- UIUtil.ScrollText(nameTxt.transform)
end


local function InitContent(self,currentInfo)
   -- self.content.localPosition.y = 0
    coroutine.start(function()
        for k,v in table.pairsByKeys(currentInfo) do
            if v.RewardType ~= RewardType.RewardTypeExp then --玩家经验不显示
                ListChildPool:GetInstance():GetChild(pfbName,self.content,function(gameObject)
                    if self.active == false then 
                        ListChildPool:GetInstance():Remove(gameObject)   
                        return 
                    end 
                    InitReward(self,gameObject,v)
                end)
            end
        end
        --for k,v in table.pairsByKeys(self.objectList) do
        --    coroutine.waitforseconds(0.1)
        --    v:SetActive(true)
        --    if k%8 == 0 and k >= 8 then
        --        self.mainRoot.sizeDelta = Vector2.New(1920,self.mainRoot.rect.height + itemHeight)
        --    end
        --end
        --新手引导
        coroutine.waitforseconds(0.2)
        self.content.anchoredPosition=Vector2.New(0,0)
        local guide=Game.Scene:GetComponent("GuideComponent")
        local GuideComplete,GuideStep, GuideRun =guide:GetCurrentData()
        if GuideRun and GuideComplete == 1 and GuideStep==12 then
            guide:NextGuide(12)
        end
    end)
end


-- local function OnClick(self)
--     if self.infos[1]==nil then
--         Logger.Log("-----------UIRewardView ：点击事件infos为空")
--         return
--     end
--     self.index = self.index + 1
--     local info = self.infos[self.index]
--     if info == nil then
--         Logger.Log("-----------关闭UIRewardView ：点击次数"..self.index)
--         UIManager:GetInstance():CloseWindow(UIWindowNames.UIReward)
--     else
--         self.starBg.gameObject:SetActive(false)
--         if info.RewardType == RewardType.Equip then
--             self.starBg.gameObject:SetActive(true)
--             UIPublic.InitEquipBg(Z_Equip[info.templateId],self.starBg:GetComponent("Image"),true)
--         end
--         if info.atlasConfig == AtlasConfig.CardLittle then
--             UIUtil.SetCardSprite(self.icon,info.templateId,info.skinId, CardPictureType.Little,true)
--         else
--             UIUtil.SetSprite(self.icon,info.atlasConfig,info.iconName,true)
--         end
        
--         self.nameTxt.text = info.name
--         self.titleTxt.text = LangUtil.GetSysLang(725)..RewardName[info.RewardType]
--         self.numTxt.text = info.num or "1"
--         Logger.Log("-----------加载UIRewardView数据")
--     end
-- end

function this.OnCreate(self)
    base.OnCreate(self)
    self.infos = {}
    self.closeCallBacks = {}
    self.index = 1
    self.enterNum = 0
    self.content = self.rc:GetObject("RewardRoot"):GetComponent("RectTransform")
    self.mainRoot = self.rc:GetObject("MainRoot"):GetComponent("RectTransform")
    self.titleImage = self.rc:GetObject("TitleImage"):GetComponent("Image")
    self.closeBtn = self.rc:GetObject("CloseButton")
    self.audio = self.gameObject:GetComponent("AudioSource")
    
    EventTriggerListener.Get(self.gameObject).onLuaClick = function() self:OnCloseCur()  end --UIManager:GetInstance():CloseWindow(UIWindowNames.UIReward)
end

function this.OnLangCreate(self)
    -- LangUtil.GetSpriteLang(21,function(sprite)
    --     local img = self.closeBtn:GetComponent("Image")
    --     img.sprite = sprite
    --     img:SetNativeSize()
    -- end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self:OnRefresh()
    DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG)
    self.mainRoot.sizeDelta = Vector2.New(1920,900)
    self.audio.volume = ClientData:GetInstance():GetVolume("SoundVolume")
    self.audio:Play()
end

---@param self UIRewardView
function this.OnRefresh(self)
    self.info = self.model.rewards
    table.insert(self.infos,self.info)
    table.insert(self.closeCallBacks, self.model.closeCallBack)
    self.enterNum = self.enterNum +1
    if self.index == self.enterNum then
        local spriteId = 20

        InitContent(self,self.infos[self.index])
    end
    
    if self.model.titleKey ~= nil then
        LangUtil.GetSpriteLang(self.model.titleKey,function(sprite)
            self.titleImage.sprite = sprite
        end)
    else
        LangUtil.GetSpriteLang(552,function(sprite)
            self.titleImage.sprite = sprite
        end)
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnCloseCur(self)
    if table.count(self.infos) > self.index then
        self.index = self.index + 1
        self.content.anchoredPosition=Vector2.New(0,0)
        ListChildPool:GetInstance():ClearContent(self.content)
        InitContent(self,self.infos[self.index])
    else
        self.infos = {}
        self.index = 1
        self.enterNum = 0
        self.content.anchoredPosition=Vector2.New(0,0)
        ListChildPool:GetInstance():ClearContent(self.content)
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIReward)
        if table.count(self.closeCallBacks) > 0 then
            for index, func in ipairs(self.closeCallBacks) do
                func()
            end
        end
        self.closeCallBacks = {}
    end 
end

function this.OnDisable(self)
    base.OnDisable(self)
    local GuideComplete, GuideStep ,run = Game.Scene:GetComponent("GuideComponent"):GetCurrentData()
    if table.count(self.infos) > 0 and run == false  then return end
    self.infos = {}
    self.index = 1
    self.enterNum = 0
    self.content.anchoredPosition=Vector2.New(0,0)
    ListChildPool:GetInstance():ClearContent(self.content)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

