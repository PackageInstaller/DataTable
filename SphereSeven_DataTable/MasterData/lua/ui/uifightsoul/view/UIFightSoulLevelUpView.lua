---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/22 9:52
---
---@class UIFightSoulLevelUpView : UIBaseView
---@field model UIFightSoulLevelUpModel
---@field ctrl UIFightSoulLevelUpCtrl
---@field fightSoul FightSoul
---@field levelUpItemIds number[]
---@field indfex number @ 当前选择的道具index
---@field currentItem Item | nil @ 当前选择的道具 可能为空
---@field currentItemId number @ 当前选择的道具id
---@field currentItemCount number @ 当前选择的道具数量
---@field currentGold number @ 当前选择的道具消耗的金币
---@field itemButtonList {item:Item|nil, object:UnityEngine.Object, itemId:number}[]
---@field propertyList {property:number, text:UnityEngine.UI.Text, value:UnityEngine.UI.Text, addValue:UnityEngine.UI.Text, finalValue:UnityEngine.UI.Text}[]
local UIFightSoulLevelUpView = BaseClass("UIFightSoulLevelUpView",UIBaseView)
local this = UIFightSoulLevelUpView
local base = UIBaseView

local NilIndex = -1
local isSkipAnimation = true
local FIGHT_SOUL_EXP_GOLD_COST_RATE = tonumber(Z_Misc["FIGHT_SOUL_EXP_GOLD_COST_RATE"].Value[1])

local showPropertySort = {
    [1] = NumericType.Hp,
    [2] = NumericType.Atk,
    [3] = NumericType.Def,
    [4] = NumericType.MagicDef,
}

---@param self UIFightSoulLevelUpView
local function RefreshFightSoulProp(self)
    UIPublic.InitFightSoulFace(self.fightSoul, self.fightSoulInfo)
end

---@param self UIFightSoulLevelUpView
local function RefreshLevelText(self, nextLevel)
    if nextLevel == nil then
        nextLevel = self.fightSoul.level
    end

    self.currentLevelText.text = "<size=46>LV."..self.fightSoul.level.."</size>/"..self.fightSoul.maxLevel
    self.currentNextLevel = nextLevel
    self.nextLevelText.text = "LV."..nextLevel
    self.nextMaxLevelText.text = "/" .. self.fightSoul.maxLevel
end

---@param self UIFightSoulLevelUpView
local function RefreshCurrentProperty(self)
    for k, v in pairs(self.propertyList) do
        local value = UIPublic.GetFightSoulProperty(self.fightSoul.TemplateId, self.fightSoul.level, v.property)
        v.value.text = value
    end
end

---@param self UIFightSoulLevelUpView
local function RefreshProperty(self, nextLevel)
    if nextLevel == nil then
        nextLevel = self.fightSoul.level
    end
    -- 如果等级不变, 右边就是当前数据, 变化后, 就是最新数据
    -- 中间绿字为左右两侧数据之差, 如果为0就不显示
    for k, v in pairs(self.propertyList) do
        local finalValue = UIPublic.GetFightSoulProperty(self.fightSoul.TemplateId, nextLevel, v.property)
        v.finalValue.text = finalValue
        local addValue = finalValue - tonumber(v.value.text)
        if addValue == 0 then
            v.addValue.text = ""
        elseif addValue > 0 then
            v.addValue.text = "+" .. addValue
        else
            v.addValue.text = addValue
        end
    end
end

--- 修改道具(数量或种类)时, 刷新经验条跟金币 -> 刷新等级跟属性
---@param self UIFightSoulLevelUpView
local function RefreshExp(self)
    self.chooseItemCountText.text = self.currentItemCount
    local addExp = 0
    local nextLevel = nil
    if self.currentItem ~= nil and self.currentItemCount ~= 0 then
        addExp = self.currentItem.config.UseParams[1] * self.currentItemCount
        self.addExpText.text = addExp
        self.addExpText.gameObject:SetActive(true)

        self.currentGold = addExp * FIGHT_SOUL_EXP_GOLD_COST_RATE
        nextLevel = self.fightSoul.level
        local lastExp = addExp + self.fightSoul.exp
        for i = self.fightSoul.level, self.fightSoul.maxLevel - 1 do
            local needExp = Z_FightSoulLevelUpExp[i][RarityName[self.fightSoul.config.Rare]]
            if lastExp >= needExp then
                lastExp = lastExp - needExp
                nextLevel = i + 1
            else
                break
            end
        end
        self.expBar.value = lastExp / Z_FightSoulLevelUpExp[nextLevel][RarityName[self.fightSoul.config.Rare]]
        self.currentExpText.text = lastExp .. "/" .. Z_FightSoulLevelUpExp[nextLevel][RarityName[self.fightSoul.config.Rare]]
    else
        self.addExpText.gameObject:SetActive(false)
        self.expBar.value = self.fightSoul.exp / Z_FightSoulLevelUpExp[self.fightSoul.level][RarityName[self.fightSoul.config.Rare]]
        self.currentExpText.text = self.fightSoul.exp .. "/" .. Z_FightSoulLevelUpExp[self.fightSoul.level][RarityName[self.fightSoul.config.Rare]]
    end

    self.currentGoldCount = FIGHT_SOUL_EXP_GOLD_COST_RATE * addExp
    self.needGoldText.text = self.currentGoldCount
    local gold = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(tonumber(Z_Misc["GOLD_ID"].Value[1]))
    if gold == nil or gold.Amount < self.currentGoldCount then
        self.needGoldText.text = "<color=#FF0000>" .. self.currentGoldCount .. "</color>"
    end
    RefreshLevelText(self, nextLevel)
    RefreshProperty(self, nextLevel)
end

---@param self UIFightSoulLevelUpView
local function OnAdd(self)
    if self.currentItem == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(568)) -- 没有选择物品
        return
    end
    if self.currentItemCount >= self.currentItem.Amount then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(567)) -- 物品数量不足
        return
    end
    if self.currentNextLevel ~= nil and self.currentNextLevel >= self.fightSoul.maxLevel then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2015)) -- 已经最大等级
        return
    end

    local addExp = self.currentItem.config.UseParams[1]
    local newGoldCount = FIGHT_SOUL_EXP_GOLD_COST_RATE * addExp
    local gold = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(tonumber(Z_Misc["GOLD_ID"].Value[1]))
    if gold == nil or gold.Amount < self.currentGoldCount + newGoldCount then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1033)) -- 金币不足
        return
    end
    self.currentItemCount = self.currentItemCount + 1
    RefreshExp(self)
end

---@param self UIFightSoulLevelUpView
local function OnReduce(self)
    if self.currentItem == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(568)) -- 没有选择物品
        return
    end
    if self.currentItemCount <= 0 then
        return
    end
    self.currentItemCount = self.currentItemCount - 1
    RefreshExp(self)
end

---@param self UIFightSoulLevelUpView
local function OnMax(self)
    if self.currentItem == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(568)) -- 没有选择物品
        return
    end
    local gold = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(tonumber(Z_Misc["GOLD_ID"].Value[1]))
    if gold == nil then
        self.currentItemCount = 0
    else
        local itemCountByGold = gold.Amount // (self.currentItem.config.UseParams[1] * tonumber(Z_Misc["FIGHT_SOUL_EXP_GOLD_COST_RATE"].Value[1]))
        local lastAllExp = Game.Scene.Player:GetComponent("FightSoulComponent"):GetLastAllExp(self.fightSoul.Id)
        local itemCountByExp
        if self.currentItem.Amount * self.currentItem.config.UseParams[1] <= lastAllExp then
            itemCountByExp = self.currentItem.Amount
        else
            itemCountByExp = math.ceil(lastAllExp / self.currentItem.config.UseParams[1])
        end
        self.currentItemCount = math.min(itemCountByGold, itemCountByExp)
    end
    RefreshExp(self)
end

---@param self UIFightSoulLevelUpView
local function OnItemClick(self, index, itemCount, force)
    local item =  Game.Scene.Player:GetComponent("ItemComponent"):GetItem(self.itemButtonList[index].itemId)
    if not force and item == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(567)) -- 物品数量不足
        return
    end
    self.index = index
    if self.itemButtonList[index] == nil then
        self.currentItem = nil
    else
        self.currentItem = self.itemButtonList[index].item
    end

    if self.currentItem ~= nil then
        for key, value in pairs(self.itemButtonList) do
            value.select:SetActive(key == index)
        end
    else
        for key, value in pairs(self.itemButtonList) do
            value.select:SetActive(false)
        end
    end
    self.currentItemCount = itemCount or 0
    RefreshExp(self)
end

---@param self UIFightSoulLevelUpView
local function OnLevelUp(self)
    if self.currentItem == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(568)) -- 没有选择物品
        return
    end
    if self.currentItemCount == nil or self.currentItemCount == 0 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(568)) -- 没有选择物品
        return
    end
    self.ctrl.SendLevelUpRequest(
        self.fightSoul.Id,
        self.currentItem.Id,
        self.currentItemCount,
        function()
            OnItemClick(self, self.index)
        end
    )
end

--- 生命周期 ---

---@param self UIFightSoulLevelUpView
function this.OnLangCreate(self)
    self.currentLevelText = LangUtil.BindText(self.langRc:GetObject("CurLevelText"), FontType.All_Number)
    self.nextLevelText = LangUtil.BindText(self.langRc:GetObject("NextLevelText"), FontType.All_Number)
    self.nextMaxLevelText = LangUtil.BindText(self.langRc:GetObject("NextMaxLevelText"), FontType.All_Number)
    self.chooseItemCountText = LangUtil.BindText(self.langRc:GetObject("ChooseItemCountText"), FontType.All_Number)
    self.addExpText = LangUtil.BindText(self.langRc:GetObject("AddExpText"), FontType.All_Number)
    self.currentExpText = LangUtil.BindText(self.langRc:GetObject("CurrentExpText"), FontType.All_Number)
    self.needGoldText = LangUtil.BindText(self.langRc:GetObject("NeedGoldText"), FontType.All_Number)
    LangUtil.BindText(self.langRc:GetObject("SkipAnimationText")).text = LangUtil.GetSysLang(1168) -- 跳过动画
end

---@param self UIFightSoulLevelUpView
function this.OnCreate(self)
    base.OnCreate(self)

    self.fightSoulInfo = self.rc:GetObject("UIFightSoulCardInfo").transform
    self.addButton = self.rc:GetObject("AddButton")
    self.reduceButton = self.rc:GetObject("ReduceButton")
    self.maxButton = self.rc:GetObject("MaxButton")
    self.levelUpButton = self.rc:GetObject("LevelUpButton")
    self.returnButton = self.rc:GetObject("ReturnButton")

    UIUtil.AddBtnEvent(self.addButton, function(v) OnAdd(self) end)
    UIUtil.AddBtnEvent(self.reduceButton, function(v) OnReduce(self) end)
    UIUtil.AddBtnEvent(self.maxButton, function(v) OnMax(self) end)
    UIUtil.AddBtnEvent(self.levelUpButton, function(v) OnLevelUp(self) end)
    UIUtil.AddBtnEvent(self.returnButton, function(v)
        self.ctrl.CloseSelf()
        if self.callback ~= nil then
            self.callback()
        end
    end)

    self.itemRoot = self.rc:GetObject("ItemRoot").transform
    self.index = NilIndex

    self.isSkipAnimation = self.rc:GetObject("IsSkipAnimation")
    self.skipAnimationButton = self.rc:GetObject("SkipAnimationButton")
    UIUtil.AddBtnEvent(self.skipAnimationButton, function(v) 
        isSkipAnimation = not isSkipAnimation
        self.isSkipAnimation:SetActive(isSkipAnimation)
    end)
    self.isSkipAnimation:SetActive(isSkipAnimation)
    self.expBar = self.rc:GetObject("ExpBar").transform:GetComponent("Slider")

    self.numerical = self.rc:GetObject("Numerical").transform
    self.nextNumerical = self.rc:GetObject("NextNumerical").transform
    self.propertyList = {}
    for index, value in ipairs(showPropertySort) do
        self.propertyList[index] = {}
        self.propertyList[index].property = value
        local numericalChild = self.numerical:GetChild(index - 1)
        self.propertyList[index].text = numericalChild:Find("Text"):GetComponent("Text")
        self.propertyList[index].value = numericalChild:Find("Value"):GetComponent("Text")
        local nextNumericalChild = self.nextNumerical:GetChild(index - 1)
        self.propertyList[index].addValue = nextNumericalChild:Find("AddText"):GetComponent("Text")
        self.propertyList[index].finalValue = nextNumericalChild:Find("FinalText"):GetComponent("Text")
    end
end

---@param self UIFightSoulLevelUpView
function this.OnEnable(self)
    base.OnEnable(self)

    self:OnRefresh()
end

---@param self UIFightSoulLevelUpView
function this.OnRefresh(self)
    self.itemButtonList = {}
    self.levelUpItemIds = self.model.levelUpItemIds
    self.callback = self.model.callback

    if self.index == NilIndex then
        for i = 1, #self.levelUpItemIds do
            local item = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(self.levelUpItemIds[i])
            if item ~= nil then
                self.index = i
                break
            end
        end
    end

    if self.index == NilIndex then
        self.index = 1
    end

    for i = 0, self.itemRoot.childCount - 1 do
        local child = self.itemRoot:GetChild(i)
        local cid = self.levelUpItemIds[i + 1]
        if cid == nil then
            
        else
            self.itemButtonList[i + 1] = {}
            self.itemButtonList[i + 1].object = child
            self.itemButtonList[i + 1].select = child.transform:Find("Active").gameObject
            self.itemButtonList[i + 1].itemId = cid
            ---@type Item
            local item = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(cid)
            self.itemButtonList[i + 1].item = item
            if item == nil then
                child.transform:Find("HoldText"):GetComponent("Text").text = 0
            else
                child.transform:Find("HoldText"):GetComponent("Text").text = item.Amount
            end
            local c =  child.transform:Find("NameTextRoot/Text")
            c:GetComponent("Text").text = Z_Item[cid].Name
            UIUtil.AddBtnEvent(child, function(v) OnItemClick(self, i + 1) end)
        end
    end

    self.fightSoul = self.model.fightSoul
    self.currentExpText.text = self.fightSoul.exp .. "/" .. Z_FightSoulLevelUpExp[self.fightSoul.level][RarityName[self.fightSoul.config.Rare]]
    RefreshFightSoulProp(self)
    RefreshCurrentProperty(self)
    OnItemClick(self, self.index, self.currentItemCount, true)
end

local function OnFightSoulDataUpdate(self)
    self.currentItemCount = 0
    self:OnRefresh()
end

local function OnItemDataUpdate(self, updateIds, removeIds)
    self:OnRefresh()
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_FIGHTSOUL_DATA_UPDATE, OnFightSoulDataUpdate)
    self:AddUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE, OnItemDataUpdate)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_FIGHTSOUL_DATA_UPDATE)
    self:RemoveUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
end

function this.OnDisable(self)
    base.OnDisable(self)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end
return this
