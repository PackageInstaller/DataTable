---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

---@class UIFormatNewView : UIBaseView
---@field model UIFormatNewModel
---@field cardList {card:Card|nil, index:number, id:number}[] @ key: index
---@field cardPfbList {id:number|nil, object:GameObject|nil}[] @ key: index -- 保存生成的角色对象 id:角色id
---@field ctrl UIFormatNewCtrl
---@field uiEventHandlerList UIEventHandler[] @ key: index
---@field positionObjectList table<number,{rc:ReferenceCollector, fightSoulLevelText:UnityEngine.UI.Text, cardLevelText:UnityEngine.UI.Text, subText:UnityEngine.UI.Text, text:UnityEngine.UI.Text}> @ key: index
---@field supportCanSame boolean @ 助战角色和当前上阵角色是否可以相同
local UIFormatNewView = BaseClass("UIFormatNewView",UIBaseView)
local base = UIBaseView
local this = UIFormatNewView
local zTab = {[1] = 1005,[2] = 1004,[3] = 1003,  -- 之前都是负数
              [4] = 1002,[5] = 1001,[6] = 1000,
}

local MILITARY_ORDER_ID = tonumber(Z_Misc["MILITARY_ORDER_ID"].Value[1])
local FORMATION_CHARACTER_COUNT = tonumber(Z_Misc["FORMATION_CHARACTER_COUNT"].Value[1])

function this:ReadyToRequestChangeCard(callBack)
    local isChanged = false
    for key, value in pairs(self.cardList) do
        if value.id ~= self.model.rawCardIdList[key] then
            isChanged = true
            break
        end
    end

    if not isChanged then
        for key, value in pairs(self.fightSoulList) do
            if value.id ~= self.model.rawFightSoulIdList[key] then
                isChanged = true
                break
            end
        end
    end

    if isChanged then
        self.waitForChangeTeamCallBack = callBack
        self.ctrl:SendChangeTeamRequest(self.cur_team.Id, self.cardList, self.fightSoulList)
    else
        self.waitForChangeTeamCallBack = nil
        if callBack ~= nil then
            callBack()
        end
    end
end

function this:InitTeamNumText()
    self.teamNum_Text.text = LangUtil.GetSysLang(831)..self.cur_team.Id
end

function this:getCharacterCount()
    local count = 0
    for index, value in ipairs(self.cardList) do
        if value.id ~= nil then
            count = count + 1
        end
    end
    return count
end

---@param card Card | nil
function this:ChangeCard(index, card)
    if card ~= nil and self.support.role ~= nil then
        if card.Id == self.support.role.supportUnits.characterId then
            self:ChooseSupport(nil)
            self:InitCards(self.support.index)
            self.support.index = nil 
        end
    end
    if index == nil then
        return
    end
    local oldCard = self.cardList[index].card
    if card == nil then
        if oldCard ~= nil then
            self.cardList[index].card = nil
            self.cardList[index].id = nil
            self:ChangeFightSoul(index, nil)
            self:InitCards(index)
            return
        else
            return
        end
    end
    if oldCard ~= nil and oldCard.Id == card.Id then
        return
    end

    self:ChangeFightSoul(index, nil)
    if oldCard == nil and card ~= nil then
        -- 加了新的
        if self:getCharacterCount() == FORMATION_CHARACTER_COUNT then 
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(1014))--"队伍人数已满"
            return
        end
    end

    -- 加了新的 或者 替换
    self.cardList[index].card = card
    self.cardList[index].id = card.Id
    self:InitCards(index)
    coroutine.start(function()
        Game.Scene:GetComponent("SoundComponent"):Stop()
        Game.Scene:GetComponent("SoundComponent"):PlayIntoSound(card)
    end)
end

---@param fightSoul FightSoul | nil
function this:ChangeFightSoul(index, fightSoul)
    local oldFightSoul = self.fightSoulList[index].fightSoul
    if fightSoul == nil and oldFightSoul == nil then
        return
    end

    if fightSoul == nil then
        -- 下掉战魂
        UIUtil.EquipFightSoul(self.model.formationsType, self.cur_team.Id, oldFightSoul.Id, false)
    else
        for key, value in pairs(self.fightSoulList) do
            if value.id == fightSoul.Id then
                -- 该战魂已存在于编队中
                if key == index then
                    return
                end
                -- 下掉另一个位置的战魂
                UIUtil.EquipFightSoul(self.model.formationsType, self.cur_team.Id, fightSoul.Id, false)
                self.fightSoulList[key].id = nil
                self.fightSoulList[key].fightSoul = nil
                self:InitNineBox(key)
                break
            end
        end

        if oldFightSoul == nil then
            -- 装上
            UIUtil.EquipFightSoul(self.model.formationsType, self.cur_team.Id, fightSoul.Id, true)
        else
            -- 切换
            UIUtil.EquipFightSoul(self.model.formationsType, self.cur_team.Id, oldFightSoul.Id, false)
            UIUtil.EquipFightSoul(self.model.formationsType, self.cur_team.Id, fightSoul.Id, true)
        end
    end
    self.fightSoulList[index].fightSoul = fightSoul
    self.fightSoulList[index].id = fightSoul and fightSoul.Id or nil
    self:InitNineBox(index)
end

function this:OnOrderChange()
    table.walk(self.cardPfbList, function (k, v)
        if not IsNull(v.object) then
            table.csenu(v.object:GetComponentsInChildren(typeof(SkinnedMeshRenderer)),function (smr)
                smr.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
                smr.sortingLayerName = SortingLayerNames.UI
            end)
        end
    end)
end

function this:OnSortingOrderChanged()
    base.OnSortingOrderChanged()
    self:OnOrderChange()
end

function this:OnClickResetButton()
    local hasCard = false
    for key, value in pairs(self.cardList) do
        if value.card ~= nil then
            hasCard = true
            break
        end
    end
    if not hasCard then
        return
    end
    ---@type ToolTipFirstData
    local tipData = {}
    tipData.message = LangUtil.GetSysLang(1352)
    tipData.callBack = function()
        for key, value in pairs(self.cardList) do
            value.card = nil
            value.id = nil
        end
    
        self:InitCards()
    end

    UIUtil.ToolTipFirst(tipData)
end

function this:InitCardItem(v,gameObject)

end

local function ConvertVector3ToVector2(vec3)
    return CS.UnityEngine.Vector2(vec3.x, vec3.y)
end

local function _getUIPosition(uiGameObject, pos)
    local pos = ConvertVector3ToVector2(pos)
    local uiCamara = CS.UnityEngine.GameObject.Find( "UICamera" ).transform:GetComponent( typeof( CS.UnityEngine.Camera ) )
    local rectTransform = uiGameObject:GetComponent( typeof(CS.UnityEngine.RectTransform))
    local _, vector2


    _, vector2= RectTransformUtility.ScreenPointToLocalPointInRectangle( rectTransform, pos, uiCamara, vector2 )
    return vector2
end

-- 获取卡片部分物体 到屏幕中心点的坐标差值
---@param self UIFormatNewView
local function _getCharacterPartRelativePositionToScreenCenter(center, pos )
    local layoutTopLeftPointPosition = center:GetComponent( typeof( CS.UnityEngine.RectTransform ) ).localPosition
    local vector2 = CS.UnityEngine.Vector2.zero
    vector2.x = pos.x + layoutTopLeftPointPosition.x
    vector2.y = pos.y + layoutTopLeftPointPosition.y
    return vector2
end

---@param self UIFormatNewView
local function _getCardCorners(self, dragRange)
    local cardCorners = {}
    local rect = dragRange.transform:GetComponent( typeof( CS.UnityEngine.RectTransform ) ).rect
    local width = rect.width
    local height = rect.height
    for i = 1, 6 do
        -- anchoredPosition 是相对于锚点处( layout的左上角 )的坐标
        -- local anchoredPosition = self.positionObjectList[i].rc:GetObject("DragRange"):GetComponent( typeof( CS.UnityEngine.RectTransform ) ).anchoredPosition
        -- local x, y = _getUIPosition(self, anchoredPosition.x, anchoredPosition.y )
        local vector2 = CS.UnityEngine.Vector2.zero
        local selfObject = self.positionObjectList[i].rc:GetObject("Self"):GetComponent( typeof( CS.UnityEngine.RectTransform ) )
        -- vector2.x = dragRangePos.x + selfObjectPos.x
        -- vector2.y = dragRangePos.y + selfObjectPos.y
        -- local pos = _getUIPosition(self.center, vector2 )
        local dragRange = self.positionObjectList[i].rc:GetObject("DragRange"):GetComponent( typeof( CS.UnityEngine.RectTransform ) ).anchoredPosition
        local selfObject = self.positionObjectList[i].rc:GetObject("Self"):GetComponent( typeof( CS.UnityEngine.RectTransform ) ).anchoredPosition
        local vector2 = CS.UnityEngine.Vector2.zero
        vector2.x = dragRange.x + selfObject.x
        vector2.y = dragRange.y + selfObject.y
        local pos = _getCharacterPartRelativePositionToScreenCenter(self.center, vector2)
        cardCorners[i] = {}
        cardCorners[i][1] = { x = pos.x - width * 0.5, y = pos.y + height * 0.5 }
        cardCorners[i][2] = { x = pos.x + width * 0.5, y = pos.y - height * 0.5 }
    end
    return cardCorners
end

    ---@param x number @ 鼠标坐标 x
    ---@param y number @ 鼠标坐标 y
---@param self UIFormatNewView
    ---@return number|nil @如果在其他卡片上, 返回其索引, 否则返回nil
local function _onPointIntoOtherCards(self,  x, y )
    for key, theCardCorners in pairs( self.cardCorners ) do
        -- theCardCorners 是一个table, 包含2个顶点的 {x = 1 , y = 1}, 左上, 右下
        if theCardCorners[1].x <= x
            and theCardCorners[1].y >= y
            and theCardCorners[2].x >= x
            and theCardCorners[2].y <= y then
            return key
        end
    end
end

--- 刷新ui显示部分
function  this:InitNineBox(index)
    local cardList = {}
    for key, value in pairs(Game.Scene.Player:GetComponent("CardComponent").Cards) do
        table.insert(cardList, value)
    end

    for k,v in pairs(self.positionObjectList) do
        if index == nil or index == k then
            local add = v.rc:GetObject("Add")
            local shadow = v.rc:GetObject("Shadow")
            local card = self.cardList[k].card
            local fightSoul = self.fightSoulList[k].fightSoul
            local _isSupport = false
            local maskText = v.rc:GetObject("MaskText")
            if self.support.index == k  then
                _isSupport = true
                if self.support.role ~= nil then
                    card = self.support.role.supportUnits.cardData
                    fightSoul = self.support.role.supportUnits.fightSoulEntity
                end
            end
            if self.model.openType == FormationOpenType.Bossraid and card ~= nil then
                if self.usedRole ~= nil and table.contains(self.usedRole, card.TemplateId) and not _isSupport then
                    maskText:SetActive(true)
                    LangUtil.BindText(maskText).text = LangUtil.GetSysLang(1495)
                elseif self.support.role ~= nil and card ~= nil and _isSupport then
                    maskText:SetActive(true)
                    LangUtil.BindText(maskText).text = LangUtil.GetSysLang(1510)
                else
                    maskText:SetActive(false)
                end
            else
                maskText:SetActive(false)
            end

            local _hasCard = card ~= nil
            add:SetActive(not _hasCard)
            shadow:SetActive(_hasCard)
            
            v.rc:GetObject("CardInfo"):SetActive(_hasCard)
            if _hasCard then
                local zCharacter = Z_Character[card.TemplateId]
                coroutine.start(function()
                    shadow:GetComponent("Image").sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Formation/bg_dizuo_".. zCharacter.Rarity ..".png")
                end)
                UIPublic.InitSubProp(v.rc:GetObject("PropImage"), Z_Character[zCharacter.Id].Prop)
                -- UIUtil.SetSprite(v.rc:GetObject("PropImage"):GetComponent("Image"), AtlasConfig.Prop, zCharacter.Prop.."_S.png")
                UIUtil.SetSprite(v.rc:GetObject("ClassImage"):GetComponent("Image"), AtlasConfig.Class, "light" .. zCharacter.Class .. ".png")
                v.cardLevelText.text = "Lv." .. card.Level
            end
    
            local _hasFightSoul = fightSoul ~= nil
            local item = v.rc:GetObject("FightVisitItemMid")
            item.name = k
            item:SetActive(_hasFightSoul and _hasCard)
            v.rc:GetObject("AddFightSoul"):SetActive(_hasCard and not _hasFightSoul)
            v.rc:GetObject("AddButton"):SetActive(_hasCard)
            if _hasCard and _hasFightSoul then
                UIPublic.InitVsFightSoulItemMId(fightSoul, item.transform, false, true)
                item.transform.localScale = Vector2.New(0.55,0.55)
            end
    
            local index = k
            UIUtil.AddBtnEventNoBug(add,function(go)
                self:OnClickCard(index)
            end)
            local cardClickImage = v.rc:GetObject("CardClickImage")
            cardClickImage:SetActive(_hasCard)
            UIUtil.AddBtnEventNoBug(cardClickImage,function(go)
                self:OnClickCard(index)
            end)
            UIUtil.AddBtnEventNoBug(v.rc:GetObject("AddButton"),function(go)
                self:OnClickFightSoul(index)
            end)
            local selfObject = v.rc:GetObject("Self")
            local dragRange = v.rc:GetObject("DragRange")
            local uiEventHandler = self.uiEventHandlerList[k]
            if uiEventHandler == nil then
                uiEventHandler = UIEventHandler(selfObject, true)
                self.uiEventHandlerList[k] = uiEventHandler
            end
            uiEventHandler.ClearListener()
            uiEventHandler.AddBeginDragListener(function(pointerEventData)
                if not _hasCard then
                    return
                end
                if self.cardPfbList[index].object == nil then
                    Logger.LogError("AddBeginDragListener   self.cardPfbList[index] is nil, card未加载完成, index:"..index)
                    return
                end
                local mousePosition = _getUIPosition(self.center, pointerEventData.position )
                local cardPos = _getCharacterPartRelativePositionToScreenCenter(self.center, dragRange.transform.position )
                self.dragPointRelativePosition = { x = cardPos.x - mousePosition.x, y = cardPos.y - mousePosition.y }

                -- 如果是第一次 就获取卡片坐标
                -- if self.cardCorners == nil then
                    self.cardCorners = _getCardCorners(self, dragRange)
                -- end
            end)
            uiEventHandler.AddDragListener(function( pointerEventData )
                if not _hasCard then
                    return
                end
                if self.cardPfbList[index].object == nil then
                    Logger.LogError("AddDragListener   self.cardPfbList[index] is nil, card未加载完成, index:"..index)
                    return
                end
                local gameObject = self.cardPfbList[index].object
                local mousePosition = _getUIPosition(self.center, pointerEventData.position )
                -- 判断鼠标坐标是否在卡片范围内
                self.isOnPointIntoOtherCards = _onPointIntoOtherCards(self, mousePosition.x, mousePosition.y )
                -- gameObject 跟随鼠标
                local vector3 = CS.UnityEngine.Vector3.zero
                vector3.x = mousePosition.x + self.dragPointRelativePosition.x -- - selfObject.transform.localPosition.x 
                vector3.y = mousePosition.y + self.dragPointRelativePosition.y -- - selfObject.transform.localPosition.y 
                gameObject.transform.localPosition = vector3
            end)

            uiEventHandler.AddEndDragListener(function( pointerEventData )
                if not _hasCard then
                    return
                end
        
                if self.isOnPointIntoOtherCards ~= nil then
                    local newIndex = self.isOnPointIntoOtherCards
                    local card1 = card
                    local fightSoul1 = fightSoul

                    if not _isSupport and self.support.index ~= newIndex then
                        -- 无助战
                        local card2 = self.cardList[newIndex].card
                        local fightSoul2 = self.fightSoulList[newIndex].fightSoul

                        self.cardList[newIndex].card = card1
                        self.cardList[newIndex].id = card1 ~= nil and card1.Id or nil
                        self.fightSoulList[newIndex].fightSoul = fightSoul1
                        self.fightSoulList[newIndex].id = fightSoul1 and fightSoul1.Id or nil
                    
                        self.cardList[index].card = card2
                        self.cardList[index].id = card2 ~= nil and card2.Id or nil
                        self.fightSoulList[index].fightSoul = fightSoul2
                        self.fightSoulList[index].id = fightSoul2 and fightSoul2.Id or nil
                    else
                        if _isSupport then
                            -- 拖得是助战 拖到newIndex
                            self.support.index = newIndex

                            local card2 = self.cardList[newIndex].card
                            local fightSoul2 = self.fightSoulList[newIndex].fightSoul
    
                            self.cardList[index].card = card2
                            self.cardList[index].id = card2 ~= nil and card2.Id or nil
                            self.fightSoulList[index].fightSoul = fightSoul2
                            self.fightSoulList[index].id = fightSoul2 and fightSoul2.Id or nil

                            self.cardList[newIndex].card = nil
                            self.cardList[newIndex].id = nil
                            self.fightSoulList[newIndex].fightSoul = nil
                            self.fightSoulList[newIndex].id = nil
                        else
                            -- 拖一个card 拖到助战角色上
                            self.support.index = index

                            self.cardList[newIndex].card = card1
                            self.cardList[newIndex].id = card1 ~= nil and card1.Id or nil
                            self.fightSoulList[newIndex].fightSoul = fightSoul1
                            self.fightSoulList[newIndex].id = fightSoul1 and fightSoul1.Id or nil

                            self.cardList[index].card = nil
                            self.cardList[index].id = nil
                            self.fightSoulList[index].fightSoul = nil
                            self.fightSoulList[index].id = nil
                        end
                    end
                end

                self:InitCards(index)
                if self.isOnPointIntoOtherCards ~= nil then
                    self:InitCards(self.isOnPointIntoOtherCards)
                end
            end)
        end
    end
end

function this:OnClickTeam(id)
    self:ReadyToRequestChangeCard()
    if id > 0 and id <= UIData.MaxTeamNo then
        -- self:ReadyToRequestChangeCard()
        UIData.SetFormatArray(id)
    end
end

---@param self UIFormatNewView
---@param v {card:Card|nil, index:number, id:number}
local function CreateCardPrefab(self, index, v)
    if v.card ~= nil then
        local card = v.card
        local zCard = Z_Card[card.TemplateId]
        local zSsUnit = Z_SsUnit:GetConfig(zCard.SsUnitId)
        local matrix = v.index
        local object=Game.Scene.Player:GetComponent("CardComponent"):CreatUnitByCard(card,false)

        object.transform:SetParent(self.positionObjectList[matrix].rc:GetObject("Self").transform)
        local z = zTab[matrix]
        local scale = 140

        local normalizeScale = 1
        if isNewBattleSpine == 1 then
            normalizeScale = Z_FigureAsset[card.SkinId].UnitScale
        else
            if Z_FigureAsset[card.SkinId].UnitScale ~= 0 then
                normalizeScale = Z_FigureAsset[card.SkinId].UnitScale
            else
                normalizeScale = Z_SsUnit:GetConfig(zCard.SsUnitId).UnitScale
            end
        end

        -- if zSsUnit.UnitScale > 0 then
        --     scale = scale *zSsUnit.UnitScale
        -- end
        scale = scale * normalizeScale
        
        local skeletonMecanim = object:GetComponent("SkeletonMecanim")
        local MeshRenderer = object:GetComponent("MeshRenderer")
        if not IsNull(skeletonMecanim) and not IsNull(MeshRenderer) then
            MeshRenderer.sortingLayerName = "UI"
            MeshRenderer.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
        end
        
        object.transform.localScale = Vector3.New(scale,scale,scale)
        object.transform.localPosition = Vector3.New(0,10, z)
        object.layer = 5
        self.cardPfbList[index] = {
            id = v.id,
            object = object
        }
        table.csenuObject(object.transform,function(tra)
            tra.gameObject.layer = 5
        end)
    else
        self.cardPfbList[index] = {}
    end
end


--- 刷新card角色显示
---@param self UIFormatNewView
local function InitMembers(self, index)
    self.initCardDone = false

    if index == nil then
        for k ,v in pairs(self.cardPfbList) do
            if not IsNull(v.object) then
                ListChildPool:GetInstance():Remove(v.object,"SsUnit")
            end
        end

        self.cardPfbList = {}
        for k ,v in pairs(self.cardList) do
            CreateCardPrefab(self, k, v)
        end
    else
        if not IsNull(self.cardPfbList[index].object) then
            ListChildPool:GetInstance():Remove(self.cardPfbList[index].object,"SsUnit")
        end
        CreateCardPrefab(self, index, self.cardList[index])
    end

    if self.support.index ~= nil and self.support.role ~= nil then
        CreateCardPrefab(self, self.support.index, {
            id = self.support.role.supportUnits.characterId,
            index = self.support.index,
            card = self.support.role.supportUnits.cardData
        })
    end

        --无脑清空所有 Clone, 为什么要写这个代码, 会有特殊情况下存在的 Clone?(加载慢切换队伍?)
    local tab = {}
    for k,v in pairs(self.positionObjectList) do
        local transform = v.rc:GetObject("Self").transform
        for i = 0,transform.childCount - 1 do
            local child = transform:GetChild(i).gameObject
            if string.contains(child.name,"(Clone)")  and  not table.any(self.cardPfbList, function(v) return v.object == child end)  then
                -- ListChildPool:GetInstance():Remove(child,"SsUnit")
                table.insert(tab,child)
            end
        end 
    end
    for k,v in pairs(tab) do
        ListChildPool:GetInstance():Remove(v,"SsUnit")
    end

    self.initCardDone = true
    self:OnOrderChange()

    coroutine.waitforframes(3)
    for k ,v in pairs(self.cardPfbList) do
        if not IsNull(v.object) and self.cardList[k].id == nil and self.support.index ~= k then
            ListChildPool:GetInstance():Remove(v.object,"SsUnit")
        end
    end

end

--- 刷新card角色显示
function this:InitCards(index)
    self:InitTeamNumText()
    self:InitNineBox(index)
    coroutine.start(function()
        InitMembers(self, index)
    end)
    for i, value in ipairs(self.teamActives) do
        value:SetActive(i == self.cur_team.Id)
    end
end

function this:OnLangCreate()
    self.support.cardLevel = LangUtil.BindText(self.rc:GetObject("SupportCardLevel"))
    for _, v in pairs(self.positionObjectList) do
        v.text = LangUtil.BindText(v.rc:GetObject("Text"))
        v.cardLevelText = LangUtil.BindText(v.rc:GetObject("CardLevelText"))
        -- v.subText = LangUtil.BindText(v.rc:GetObject("SubText"))
    end
    LangUtil.GetSpriteLang(537, function(Sprite) self.auto_Btn:GetComponent("Image").sprite = Sprite  end) -- 确认
    LangUtil.GetSpriteLang(535, function(Sprite) self.confirm_Btn:GetComponent("Image").sprite = Sprite  end) -- 确认
    LangUtil.GetSpriteLang(536, function(Sprite) self.reset_Btn:GetComponent("Image").sprite = Sprite  end) -- 确认

    UIUtil.SetSprite(self.auto_Btn.transform:Find("Image"):GetComponent("Image"),AtlasConfig.Item,GetItemIcon(Z_Item[MILITARY_ORDER_ID]))
    LangUtil.BindText(self.auto_Btn.transform:Find("Text")).text = "x2"

end

function this:OnCreate()
    base.OnCreate(self)
    self.object_list = {}
    self.cardPfbList = {}
    self.uiEventHandlerList = {}
    self.teamNum_Text = self.rc:GetObject("TeamText"):GetComponent("Text")
    self.nineBox = self.rc:GetObject("NineBox").transform
    self.confirm_Btn = self.rc:GetObject("ConfirmButtom")
    self.auto_Btn = self.rc:GetObject("AutoButton")
    self.reset_Btn = self.rc:GetObject("ResetButton")
    self.backButtonRoot = self.rc:GetObject("BackButton")

    self.right_Btn = self.rc:GetObject("RightButton")
    self.left_Btn = self.rc:GetObject("LeftButton")
    self.ChgTeamCtrl = self.rc:GetObject("ChgTeamCtrl")
    -- self.home_Btn = self.rc:GetObject("HomeButton")
    self.teamContent = self.rc:GetObject("TeamContent").transform
    self.teamsRoot = self.rc:GetObject("TeamsRoot")
    self.scrollView = self.rc:GetObject("ScrollView"):GetComponent("ScrollRect")
    self.center = self.rc:GetObject("Center")
    self.positionObjectList = {}
    self.mainCamera = CS.UnityEngine.GameObject.Find("UICamera"):GetComponent("Camera")
    UIUtil.AddBtnEvent(self.reset_Btn,function(go) self:OnClickResetButton()  end)

    local back, home = UIPublic.SetBackButton(
        self.backButtonRoot,
        nil,
        410
    )
    UIUtil.AddBtnEventNoBug(back,function(go)
        if not self.initCardDone then
            return
        end
        if self.model.openType == FormationOpenType.Competition then
            local hasCard = false
            for index, value in ipairs(self.cardList) do
                if value.card ~= nil then
                    hasCard = true
                    break
                end
            end
            if not hasCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1293))
                return
            end
        end
        self:ReadyToRequestChangeCard()
        self.ctrl:CloseSelf() 
    end,"Back")

    UIUtil.AddBtnEventNoBug(home, function()
        if not self.initCardDone then
            return
        end
        if self.model.openType == FormationOpenType.Competition then
            local hasCard = false
            for index, value in ipairs(self.cardList) do
                if value.card ~= nil then
                    hasCard = true
                    break
                end
            end
            if not hasCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1293))
                return
            end
        end
        self:ReadyToRequestChangeCard()
        UIManager:GetInstance():CloseAllWindows()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHome)
    end)
    -- UIUtil.AddBtnEvent(self.home_Btn, function(go)
    --     self:ReadyToRequestChangeCard()
    --     UIManager:GetInstance():CloseWindowByStackExcept(UIWindowNames.UIHome)
    -- end,"Back")

    -- UIUtil.AddBtnEvent(self.saveButton,function(go)
    --     self:ReadyToRequestChangeCard()
    -- end)

    for i = 0,self.nineBox.childCount - 1 do
        local rc = self.nineBox:GetChild(i).gameObject:GetComponent(typeof(ReferenceCollector))
        self.positionObjectList[i + 1] = {
            rc = rc,
        }
    end

    self.teamActives = {}
    for i = 0, self.teamContent.childCount - 1 do
        local image = self.teamContent:GetChild(i):Find("Image"):GetComponent("Image")
        coroutine.start(function()
            image.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Formation/zhandui".. i + 1 ..".png")
        end)
        UIUtil.AddBtnEvent(self.teamContent:GetChild(i), function(go)
            self:OnClickTeam(i + 1)
        end)
        self.teamActives[i+1] = self.teamContent:GetChild(i):Find("Active").gameObject
    end
    
    self.support = {}
    self.support.root = self.rc:GetObject("SupportRoot")
    self.support.addImage = self.rc:GetObject("SupportAddImage")
    self.support.addButton = self.rc:GetObject("SupportAddButton")
    self.support.fightSoulItem = self.rc:GetObject("SupportFightSoulItem")
    self.support.fightSoulRoot = self.rc:GetObject("SupportFightSoulRoot")
    self.support.cardImage = self.rc:GetObject("SupportCardImage")
    self.support.cardInfo = self.rc:GetObject("SupportCardInfo")
    self.support.cardLevel = self.rc:GetObject("SupportCardLevel")
    self.support.cardPropImage = self.rc:GetObject("SupportCardPropImage")
    self.support.cardClassImage = self.rc:GetObject("SupportCardClassImage")
    self.support.index = nil
    ---@type SocietyRole
    self.support.role = nil --- 每个玩家只有一个助战角色, 所以这里选的是玩家
end

function this:OnEnable()
    base.OnEnable(self)
    self.support.role = nil
    self.support.index = nil
    for k, v in pairs(self.positionObjectList) do
        v.rc:GetObject("CardInfo"):GetComponent("Canvas").sortingOrder = self.canvas:GetOrder() + 1
        v.rc:GetObject("FightSoulRoot"):GetComponent("Canvas").sortingOrder = self.canvas:GetOrder() + 1
    end
    self.cur_team = self.model.cur_team
    if self.cur_team.Id == 1 then
        self.scrollView.horizontalScrollbar.value = 0
    else
        self.scrollView.horizontalScrollbar.value = self.cur_team.Id / UIData.MaxTeamNo
    end
    self:OnRefresh()
end

function this:OnRefresh()
    self.cur_team = self.model.cur_team
    self.cardList = self.model.cardList
    self.fightSoulList = self.model.fightSoulList

    if self.model.openType == FormationOpenType.Battle then
        self.confirm_Btn:SetActive(true)
        self.auto_Btn:SetActive(self.model.autoCallBack ~= nil)
        self.reset_Btn:SetActive(false)
        self.support.root:SetActive(self.model.isSupport)
        -- self.saveButton:SetActive(false)
        UIUtil.AddBtnEvent(self.confirm_Btn, function()
            if not self.initCardDone then
                return
            end

            if not self.model.ignoreEquipCountLimit and UIPublic.CheckOutOfLimit(RewardType.RewardTypeEquipment, 1) then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1376))
                return
            end

            local hasCard = false
            for key, value in pairs(self.cardList) do
                if value.card ~= nil then
                    hasCard = true
                    break
                end
            end
            if not hasCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1188))
                return
            end

            local arg = {
                support_unit_select = {}
            }
            if self.support.role ~= nil then
                arg.support_unit_select.role_id = self.support.role.info.roleId
                arg.support_unit_select.character_id = self.support.role.supportUnits.characterId
            end


            self:ReadyToRequestChangeCard(function()
                self.ctrl:OnConfirmClick(arg)
            end)

        end)

        UIUtil.AddBtnEvent(self.auto_Btn, function()
            if not self.initCardDone then
                return
            end
            local hasCard = false
            for key, value in pairs(self.cardList) do
                if value.card ~= nil then
                    hasCard = true
                    break
                end
            end
            if not hasCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1188))
                return
            end

            local arg = {
                support_unit_select = {}
            }
            if self.support.role ~= nil then
                arg.support_unit_select.role_id = self.support.role.info.roleId
                arg.support_unit_select.character_id = self.support.role.supportUnits.characterId
            end

            self:ReadyToRequestChangeCard(function()
                self.ctrl:OnAutoClick(arg)
            end)
        end)

        UIUtil.AddBtnEventNoBug(self.support.addButton, function(go)
            self:ReadyToRequestChangeCard()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationChooseSupport, {
                role = self.support.role,
                callBack = function(role)
                    local oldIndex = self.support.index
                    self.support.index = nil
                    self:ChooseSupport(role, oldIndex)
                end
            })
        end)
        self.supportCanSame = true
        self:RefreshSupport()
    elseif self.model.openType == FormationOpenType.Normal then
        self.confirm_Btn:SetActive(false)
        self.auto_Btn:SetActive(false)
        self.reset_Btn:SetActive(true)
        self.support.root:SetActive(false)
        -- self.saveButton:SetActive(true)
    elseif self.model.openType == FormationOpenType.Competition then
        self.confirm_Btn:SetActive(false)
        self.auto_Btn:SetActive(false)
        self.reset_Btn:SetActive(true)
        self.support.root:SetActive(false)
    elseif self.model.openType == FormationOpenType.Bossraid then
        self.confirm_Btn:SetActive(true)
        self.auto_Btn:SetActive(false)
        self.reset_Btn:SetActive(false)
        self.support.root:SetActive(self.model.isSupport)
        self.supportCanSame = false
        ---@type BossraidComponent
        local bossraidComponent = Game.Scene.Player:GetComponent("BossraidComponent")
        local bossraid = bossraidComponent:GetFirstBossraid()
        self.usedRole = {}
        if bossraid.remainBattle ~= nil and bossraid.remainBattle.usedRoles ~= nil then
            self.usedRole = bossraid.remainBattle.usedRoles
        end
        UIUtil.AddBtnEvent(self.confirm_Btn, function()
            if not self.initCardDone then
                return
            end

            if not self.model.ignoreEquipCountLimit and UIPublic.CheckOutOfLimit(RewardType.RewardTypeEquipment, 1) then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1376))
                return
            end

            local hasCard = false
            local hasCannotCard = false
            for key, value in pairs(self.cardList) do
                if value.card ~= nil then
                    hasCard = true
                end
                if table.contains(self.usedRole, value.id) then
                    hasCannotCard = true
                end
            end
            if not hasCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1188))
                return
            end
            if hasCannotCard then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1511))
                return
            end


            local arg = {
                support_unit_select = {}
            }
            if self.support.role ~= nil then
                arg.support_unit_select.role_id = self.support.role.info.roleId
                arg.support_unit_select.character_id = self.support.role.supportUnits.characterId
            end

            self:ReadyToRequestChangeCard(function()
                self.ctrl:OnConfirmClick(arg)
            end)
        end)
        UIUtil.AddBtnEventNoBug(self.support.addButton, function(go)
            self:ReadyToRequestChangeCard()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationChooseSupport, {
                role = self.support.role,
                callBack = function(role)
                    local oldIndex = self.support.index
                    if role ~= nil and oldIndex == nil then
                        self.support.index = 6
                        for i, v in pairs(self.cardList) do
                            if v.id == nil and v.index < self.support.index then
                                self.support.index = v.index
                                break
                            end
                        end
                    elseif oldIndex == nil then
                        self.support.index = nil
                    end
                    self:ChooseSupport(role, oldIndex)
                    self:ChangeCard(self.support.index, nil)
                    self:InitCards(self.support.index)
                end
            })
        end)
        self:RefreshSupport()

    end
    self.teamsRoot.gameObject:SetActive(self.model.openType ~= FormationOpenType.Competition)
    self:InitCards()
    if self.waitForChangeTeamCallBack ~= nil then
        self.waitForChangeTeamCallBack()
        self.waitForChangeTeamCallBack = nil
    end
end

function this:RefreshSupport()
    local hasSupport = self.support.role ~= nil
    self.support.addImage:SetActive(not hasSupport)
    self.support.cardImage:SetActive(hasSupport)
    self.support.cardInfo:SetActive(hasSupport)
    self.support.fightSoulRoot:SetActive(hasSupport)

    if hasSupport then
        local zCharacter = Z_Character[self.support.role.supportUnits.characterId]
        UIUtil.NewSetCardSprite(self.support.cardImage:GetComponent("Image"), self.support.role.supportUnits.characterId, self.support.role.supportUnits.skin, CardPictureType.Little)
        UIPublic.InitSubProp(self.support.cardPropImage, Z_Character[zCharacter.Id].Prop)
        UIUtil.SetSprite(self.support.cardClassImage:GetComponent("Image"), AtlasConfig.Class, "light" .. zCharacter.Class .. ".png")
        self.support.cardLevel.text = "Lv. " .. self.support.role.supportUnits.level

        if self.support.role.supportUnits.fightSoulEntity ~= nil then
            UIPublic.InitVsFightSoulItemMId(
                self.support.role.supportUnits.fightSoulEntity,
                self.support.fightSoulItem
            )
            self.support.fightSoulItem:SetActive(true)
        else
            self.support.fightSoulItem:SetActive(false)
        end
    end
end

function this:ChooseSupport(role, oldIndex)
    self.support.role = role
    if role == nil then
        self.support.index = nil
    end
    if not self.supportCanSame and role ~= nil then
        for k, v in pairs(self.cardList) do
            if v.id == role.supportUnits.characterId then
                self:ChangeCard(k, nil)
                self:InitCards(k)
                break
            end
        end
    end
    self:RefreshSupport()
    if oldIndex ~= nil then
        self:InitCards(oldIndex)
    end
end

function this:OnClickCard(index)
    if index == nil then 
        Logger.LogError("error 请先选择一个位置")
        return
    end
        if self.support.index == index  then
            self:ReadyToRequestChangeCard()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationChooseSupport, {
                role = self.support.role,
                callBack = function(role)
                    local oldIndex = self.support.index
                    if role ~= nil and oldIndex == nil then
                        self.support.index = 6
                        for i, v in pairs(self.cardList) do
                            if v.id == nil and v.index < self.support.index then
                                self.support.index = v.index
                                break
                            end
                        end
                    elseif oldIndex == nil then
                        self.support.index = nil
                    end
                    self:ChooseSupport(role, oldIndex)
                    self:InitCards(self.support.index)
                end
            })
        else
            self:ReadyToRequestChangeCard()
            local chooseCardUI = UIWindowNames.UIFormationChooseCard
            if self.model.chooseCardUI ~= nil then
                chooseCardUI = self.model.chooseCardUI
            end
            UIManager:GetInstance():OpenWindow(chooseCardUI, {
                currentCard = self.cardList[index].card,
                cardList = self.cardList,
                confirmCallBack = function(card)
                    self:ChangeCard(index, card)
                end
            })
        end

end

function this:OnClickFightSoul(index)
    if index == nil then 
        Logger.LogError("error 请先选择一个位置")
        return
    end
    if self.support.index == index then
        self:ReadyToRequestChangeCard()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationChooseSupport, {
            role = self.support.role,
            callBack = function(role)
                local oldIndex = self.support.index
                if role ~= nil and oldIndex == nil then
                    self.support.index = 6
                    for i, v in pairs(self.cardList) do
                        if v.id == nil and v.index < self.support.index then
                            self.support.index = v.index
                            break
                        end
                    end
                elseif oldIndex == nil then
                    self.support.index = nil
                end
                self:ChooseSupport(role, oldIndex)
                self:InitCards(self.support.index)
            end
        })
        return
    end

    local fightSoulToCard = {}
    for key, value in pairs(self.cardList) do
        if value.id ~= nil and self.fightSoulList[key].id ~= nil then
            fightSoulToCard[self.fightSoulList[key].id] = value.id
        end
    end
    local class
    if self.cardList[index] ~= nil then
        class = Z_Character[self.cardList[index].card.TemplateId].Class
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormationChooseFightSoul, {
        -- index = index,
        class = class,
        characterId = self.cardList[index].card.Id,
        isShowProperty = true,
        chooseFightSoul = self.fightSoulList[index].fightSoul,
        fightSoulToCard = fightSoulToCard,
        confirmCallBack = function(fightSoul)
            self:ChangeFightSoul(index, fightSoul)
        end
    })
end

-- function this:OnClickCardPrefab(gameObject)
--     if gameObject == nil then return end
--     local cardId
--     for _,v in ipairs(self.cardPfbList) do
--         if v.object == gameObject then
--             cardId = v.id
--         end
--     end
--     local cardData = table.first(self.cardList,function(a) return a.id == cardId end)

--     self:OnClickCard(cardData.index)
-- end

function this:Update()
    -- local guide = Game.Scene:GetComponent("GuideComponent") --立绘点击穿透
    -- if guide.GuideRun then
    --     local GuideView = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide).View.mask_bc.transform.parent.gameObject
    --     if not IsNull(GuideView) and GuideView.activeSelf then return end
    -- end

    -- local U = CS.UnityEngine
    -- if U.Input.GetMouseButtonDown(0) then
    --     -- 临时处理
    --     local ray = self.mainCamera:ScreenPointToRay(Input.mousePosition)
    --     local hits = U.Physics.RaycastAll(ray,10000,LayerMask.GetMask("UI"))
    --     if hits.Length > 0 then
    --         local gameObject = hits[0].collider.gameObject
    --         if not IsNull(gameObject) and gameObject.activeInHierarchy then
    --             self:OnClickCardPrefab(gameObject)
    --         end
    --     end
    -- end
end

function this:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.UIFORMAT_ON_ARRAY_CHG, self.OnRefresh)
    self:AddUIListener(UIMessageNames.UIFORMAT_ON_DATA_CHG, self.OnRefresh)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.UIFORMAT_ON_ARRAY_CHG)
    self:RemoveUIListener(UIMessageNames.UIFORMAT_ON_DATA_CHG)
end

function this:OnViewTop()
    base.OnViewTop(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
    table.walk(self.cardPfbList, function (k, v)
        if not IsNull(v.object) then
            v.object:SetActive(true)
        end
    end)
end

function this:OnDisViewTop()
    base.OnDisViewTop(self)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
    table.walk(self.cardPfbList, function (k, v)
        if not IsNull(v.object) then
            v.object:SetActive(false)
        end
    end)
end

function this:OnDisable()
    -- self:ReadyToRequestChangeCard()
    base.OnDisable(self)

    local tab = {}
    for k,v in pairs(self.positionObjectList) do
        local transform = v.rc:GetObject("Self").transform
        for i = 0,transform.childCount - 1 do
            local child = transform:GetChild(i).gameObject
            if string.contains(child.name,"(Clone)") then
                -- ListChildPool:GetInstance():Remove(child,"SsUnit")
                table.insert(tab,child)
            end
        end
    end

    for k,v in pairs(tab) do
        ListChildPool:GetInstance():Remove(v,"SsUnit")
    end
    tab = nil

    self.cardPfbList = {}
    self.object_list = {}
    --
    --DataManager:GetInstance():Broadcast(DataMessageNames.ON_LAUNCHATK_READY_CLOSE)
    --GameObjectPool:GC()
end

function this:OnDestroy()
    -- self:ReadyToRequestChangeCard()
    base.OnDestroy(self)
end

return this

