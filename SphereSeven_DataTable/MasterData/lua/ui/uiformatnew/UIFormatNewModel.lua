---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

---@class UIFormatNewModel : UIBaseModel
---@field cur_team Team
---@field cardList {card:Card|nil, index:number, id:number}[] @ key: index
---@field fightSoulList {fightSoul:FightSoul|nil, index:number, id:number}[] @ key: index
local UIFormatNewModel = BaseClass("UIFormatNewModel",UIBaseModel);
local base = UIBaseModel
local this = UIFormatNewModel

local FORMATIONS_COUNT = tonumber(Z_Misc["FORMATIONS_COUNT"].Value[1])
local FORMATION_CHARACTER_COUNT = tonumber(Z_Misc["FORMATION_CHARACTER_COUNT"].Value[1])

function this:OnCreate()
    base.OnCreate(self);
end

--- type, isSupport, confirmCallBack
function this:OnEnable(data)
    if data == nil then data = {} end
    if data.type == nil then
        self.openType = FormationOpenType.Normal
    else
        self.openType = data.type
    end
    self.chooseCardUI = data.chooseCardUI
    self.ignoreEquipCountLimit = data.ignoreEquipCountLimit or false
    if self.openType == FormationOpenType.Competition then
        self.formationsType = FormationsType.FormationsTypeArena
    elseif self.openType == FormationOpenType.Bossraid then
        self.formationsType = FormationsType.FormationsTypeBossraid
    else
        self.formationsType = FormationsType.FormationsTypeSystem
    end
    if data.isSupport == nil then data.isSupport = false end
    self.isSupport = data.isSupport
    self.confirmCallBack = data.confirmCallBack
    self.autoCallBack = data.autoCallBack
    base.OnEnable(self);
    self:OnRefresh();
end

---@param self UIFormatNewModel
function this:OnRefresh()
    self.cur_team = UIData.GetCurTeam(self.formationsType)

    local cardList = self.cur_team:GetCardList()
    local fightSoulList = self.cur_team:GetFightSoulList()

    self.cardList = {}
    self.rawCardIdList = {}
    for i = 1, FORMATION_CHARACTER_COUNT do
        local cardData = {}
        cardData.card = cardList[i]
        cardData.index = i
        if cardList[i] == nil then
            cardData.id = nil
        else
            cardData.id = cardList[i].Id
        end

        self.cardList[i] = cardData
        self.rawCardIdList[i] = cardData.id
    end

    self.fightSoulList = {}
    self.rawFightSoulIdList = {}
    for i = 1, FORMATION_CHARACTER_COUNT do
        local fightSoul = {}
        fightSoul.fightSoul = fightSoulList[i]
        fightSoul.index = i
        if fightSoulList[i] == nil then
            fightSoul.id = nil
        else
            fightSoul.id = fightSoulList[i].Id
        end

        self.fightSoulList[i] = fightSoul
        self.rawFightSoulIdList[i] = fightSoul.id
    end
end

function this:OnTaskDataChg()
    self:OnRefresh();
end

---@param self UIFormatNewModel
local function OnDataChg(self)
    self:OnRefresh()
    self:UIBroadcast(UIMessageNames.UIFORMAT_ON_DATA_CHG);
end

local function OnArrayChg(self)
    self:OnRefresh()
    self:UIBroadcast(UIMessageNames.ON_BATTLE_ARRAY_CHG);
end

local function OnEnhanceTypeChg(self)
    self:OnRefresh()
    --self:UIBroadcast(UIMessageNames.ON_ENHANCETYPE_CHG);
end

local function OnCurTeamChg(self)
    self:OnRefresh();
    self:UIBroadcast(UIMessageNames.UIFORMAT_ON_ARRAY_CHG);
end
    
--local function ON_Guide_Click(self,cid,num,isrun,minStep)
--    self:UIBroadcast(UIMessageNames.ON_Guide_Click,cid,num,isrun,minStep)
--end

function this:OnAddListener()
    base.OnAddListener(self);
    self:AddDataListener(DataMessageNames.ON_FORMAT_ARRAY_CHG,OnCurTeamChg);
    self:AddDataListener(DataMessageNames.ON_FORMATION_DATA_UPDATE,OnDataChg);
    self:AddDataListener(DataMessageNames.ON_BATTLE_ARRAY_CHG,OnArrayChg);
    --self:AddDataListener(DataMessageNames.ON_ENHANCETYPE_CHG,OnEnhanceTypeChg);
    --self:AddDataListener(DataMessageNames.ON_Guide_Click,ON_Guide_Click)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self);
    self:RemoveDataListener(DataMessageNames.ON_FORMAT_ARRAY_CHG);
    self:RemoveDataListener(DataMessageNames.ON_FORMATION_DATA_UPDATE);
    self:RemoveDataListener(DataMessageNames.ON_BATTLE_ARRAY_CHG);
    --self:RemoveDataListener(DataMessageNames.ON_ENHANCETYPE_CHG);
    --self:RemoveDataListener(DataMessageNames.ON_Guide_Click)
end

return this;
