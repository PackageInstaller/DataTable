---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/12 10:59
---
---@class UISummonCtrl : UIBaseCtrl
local UISummonCtrl = BaseClass("UISummonCtrl",UIBaseCtrl)
local this = UISummonCtrl

local DIAMOND_ID = tonumber(Z_Misc["DIAMOND_ID"].Value[1])
local FREE_DIAMOND_ID = tonumber(Z_Misc["FREE_DIAMOND_ID"].Value[1])
--- 可以多次单抽的道具
local RECRUIT_MULTI_USE_SINGLE_ITEM = Z_Misc["RECRUIT_MULTI_USE_SINGLE_ITEM"].Value

---@class RecruitItemData
---@field templateId number
---@field count number
---@field id number
---@field enough boolean
---@field itemConfig ItemExcel
---@field useDiamondCount number @ 使用付费钻石数量

---@return RecruitItemData
function this.GetRecruitItemData(self, poolId, recruitCountType)
     ---@type RecruitItemData
     local recruitItemData
     local recruitDefaultShowIndex
     local lastShowIndex
     local zRecruitPool = Z_Recruit[poolId]
 
     for index, value in ipairs(Z_RecruitItem[zRecruitPool.Item]) do
        ---@type Item
        local itemData = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(value.ItemId)
         if value.Time == recruitCountType and recruitItemData == nil then
             if itemData ~= nil and itemData.Amount >= value.Count then
                 recruitItemData = {}
                 recruitItemData.id = itemData.Id
                 recruitItemData.templateId = value.ItemId
                 recruitItemData.count = value.Count
                 recruitItemData.enough = true
                 recruitItemData.itemConfig = Z_Item[value.ItemId]
             elseif value.ItemId == FREE_DIAMOND_ID then
                local freeDiamonCount = UIPublic.GetItemAmount(FREE_DIAMOND_ID)
                local diamonCount = UIPublic.GetItemAmount(DIAMOND_ID)
                if freeDiamonCount + diamonCount >= value.Count then
                    ---@type Item
                    local itemData = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(FREE_DIAMOND_ID)
                    recruitItemData = {}
                    if itemData ~= nil then
                        recruitItemData.id = itemData.Id
                    else
                        itemData = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(DIAMOND_ID)
                        recruitItemData.id = itemData.Id
                    end
                    recruitItemData.templateId = value.ItemId
                    recruitItemData.count = value.Count
                    recruitItemData.enough = true
                    recruitItemData.itemConfig = Z_Item[value.ItemId]
                    recruitItemData.useDiamondCount = recruitItemData.count - freeDiamonCount
                 end
             end

             if value.DefaultShow == 1 then
                 recruitDefaultShowIndex = index
             end
             lastShowIndex = index
         end
     end

     if recruitDefaultShowIndex == nil then
        recruitDefaultShowIndex = lastShowIndex
    end
 
     if recruitItemData == nil and recruitDefaultShowIndex ~= nil then
        local itemId = Z_RecruitItem[zRecruitPool.Item][recruitDefaultShowIndex].ItemId
        if itemId == DIAMOND_ID then itemId = FREE_DIAMOND_ID end

         recruitItemData = {}
         recruitItemData.id = nil
         recruitItemData.count = Z_RecruitItem[zRecruitPool.Item][recruitDefaultShowIndex].Count
         recruitItemData.templateId = itemId
         recruitItemData.enough = false
         recruitItemData.itemConfig = Z_Item[itemId]
     end

     return recruitItemData

end

---@param msg protocol.RecruitResp
local function OnRecruit(msg, poolId, briefItem)
    local resultList = {}

    local recrultIds = {}

    ---@type RecruitPool
    local poolData = Game.Scene.Player:GetComponent("RecruitComponent"):GetPool(poolId)

    if msg.reward_details == nil then
        return
    end
    for index, value in ipairs(msg.reward_details) do
        local isNew = false

        local rewards = value.reward_results
        if poolData.config.CardPoolType == RecruitPoolType.RecruitPoolRookie then
            rewards = value.rewards
        end
    
        for k, v in ipairs(rewards) do
            if v.type == RewardType.RewardTypeCharacter then
                if not Game.Scene.Player:GetComponent("RecordComponent"):CheckIsOnOld(RecordType.Character, v.id) then
                    if recrultIds[RewardType.RewardTypeCharacter] == nil then
                        recrultIds[RewardType.RewardTypeCharacter] = {}
                    end

                    if not table.contains(recrultIds[RewardType.RewardTypeCharacter], v.id) then
                        isNew = true
                        table.insert(recrultIds[RewardType.RewardTypeCharacter], v.id)
                        break
                    end
                end
            elseif v.type == RewardType.RewardTypeFightSoul then
                if not Game.Scene.Player:GetComponent("RecordComponent"):CheckIsOnOld(RecordType.FightSoul, v.id) then
                    if recrultIds[RewardType.RewardTypeFightSoul] == nil then
                        recrultIds[RewardType.RewardTypeFightSoul] = {}
                    end

                    if not table.contains(recrultIds[RewardType.RewardTypeFightSoul], v.id) then
                        isNew = true
                        table.insert(recrultIds[RewardType.RewardTypeFightSoul], v.id)
                        break
                    end
                end
            end
        end

        table.insert(resultList, {
            reward = value.rewards[1], -- 只有一个 所以这里只处理一个
            rewardResult = value.reward_results,
            isNew = isNew
        })
        -- Logger.Log(value.rewards[1].type .. " " .. value.rewards[1].id .. ", isNew:" .. tostring(isNew) )
    end
    Game.Scene.Player:GetComponent("RecordComponent"):ClearOldRecord()
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage1, {
        resultList = resultList,
        poolId = poolId,
        isConfirm = false,
        briefItem = briefItem,
        otherRewards = msg.other_rewards,
    })
end

---@param recruitItemData RecruitItemData
---@param checkMultiRecruit boolean @ 是否检查进行多次抽卡
function this:ReadyToRecruit(poolId, recruitCountType, recruitItemData, checkMultiRecruit)
    -- 1. 免费钻石购买
    -- 2. 收费钻石购买
    -- 3. 不够的话跳转到商城页面
    local poolData = Game.Scene.Player:GetComponent("RecruitComponent"):GetPool(poolId)
    if poolData == nil then
        Logger.LogError("recruit pool id is error :" .. poolId == nil and "nil" or poolId)
        return
    end
    if poolData.status == RecruitPoolStatus.RecruitPoolStatusAfterEndTime then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1171))
        return
    elseif poolData.status == RecruitPoolStatus.RecruitPoolStatusBeforeStartTime then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1172))
        return
    elseif poolData.status == RecruitPoolStatus.RecruitPoolStatusOverRecruitLimit then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1173))
        return
    end

    -- 检查战魂上限
    if UIPublic.CheckOutOfLimit(RewardType.RewardTypeFightSoul, 1) then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1375))
        return
    end

    if recruitItemData == nil then
        recruitItemData = self:GetRecruitItemData(poolId, recruitCountType)
    end

    if recruitItemData ~= nil and recruitItemData.enough then
        local func = function(uid, count)
            local briefItem = {
                uid = uid,
                count = count,
            }
            PublicRequest.SendRequest(
                PROTOCOL.RecruitReq,
                {
                    id = poolId,
                    brief_item = briefItem
                },
                function(response, error)
                    if error == 0 then
                        OnRecruit(response, poolId, briefItem)
                    end
                end,
                function()
                    Logger.LogError("RecruitReq error")
                end
            )
        end
        
        local multiRecruitItemTempId = nil
        if checkMultiRecruit == nil then
            checkMultiRecruit = false
        end
        if checkMultiRecruit and recruitCountType == RECRUIT_COUNT.ONE then
            for i, v in ipairs(RECRUIT_MULTI_USE_SINGLE_ITEM) do
                local itemId = tonumber(v)
                if itemId == recruitItemData.templateId then
                    multiRecruitItemTempId = itemId
                    break
                end
            end
        end

        if multiRecruitItemTempId ~= nil then
            local text = string.gsub(LangUtil.GetSysLang(1434), "XXX", Z_Item[multiRecruitItemTempId].Name)
            text = string.gsub(text, "YYY", UIPublic.GetItemAmount(multiRecruitItemTempId))
            local data = {
                message = text,
                title = nil,
                maxCount = 11,
                tempId = multiRecruitItemTempId,
                callBack = func,
            }
            UIUtil.ToolTipFirstChooseCount(data)
        elseif recruitItemData.useDiamondCount ~= nil then
            ---@type ToolTipFirstData
            local tipData = {}
            tipData.message = string.gsub(LangUtil.GetSysLang(1350), "XX", recruitItemData.useDiamondCount)
            tipData.callBack = function()
                func(recruitItemData.id, recruitItemData.count)
            end

            UIUtil.ToolTipFirstStarLight(tipData)
        else
            func(recruitItemData.id, recruitItemData.count)
        end
    else
        ---@type ToolTipFirstData
        local tipData = {}
        tipData.message = LangUtil.GetSysLang(540)
        tipData.callBack = function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop, {
                ShopTitleType = ShopTitleType.Diamond,
            })
        end
        UIUtil.ToolTipFirst(tipData)
    end
end

-- function this.OpenToUpStoneWindow(self)
--     local tooltip_first_data = {};
--     tooltip_first_data.title = LangUtil.GetSysLang(547)--"错误";
--     tooltip_first_data.message = LangUtil.GetSysLang(541)--"此功能暂未开放";
--     self:OpenFirstToolTip(tooltip_first_data)
-- end


-- function this.OpenFirstToolTip(self,data)
--     UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipFirst,data);
-- end

function this.CloseSelf()
    UIManager:GetInstance():CloseWindow(UIWindowNames.UISummon);
end

return this