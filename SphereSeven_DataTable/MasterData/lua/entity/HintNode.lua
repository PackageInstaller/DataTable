---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/4 15:12
---
---@class HintNode
---@field ParentNode HintNode @ 父节点
---@field Count number @ 子节点数量
---@field ChildNode HintNode[] @ 子节点
---@field isLocal boolean @ 是否是本地节点
local HintNode = BaseClass("HintNode",Entity);
local base = Entity
---@type HintNode
local this = HintNode

-- 1.创建节点树  添加相关逻辑子节点,孙节点  => 计算逻辑节点的数量
-- 2.AddObject 绑定红点GameObject  => UI数字同步
-- 3.SetCount AddCount 修改某个节点的数量 => 该节点以及父节点更新数量

---@param node HintNode
local function UpDateNodeObject(node)
    for k,v in pairs(node.Objects) do -- 遍历该节点绑定的obj 并同步成该节点的数量
        for a, b in pairs(v) do
            if not IsNull(b) then
                if node.Count > 0 then
                    local tet = b.transform:Find("Text")
                    if not IsNull(tet)then
                        tet:GetComponent("Text").text = "" -- node.Count
                    end
                    b:SetActive(true)
                else
                    b:SetActive(false)
                end
            else
                b = nil
            end
        end
    end
end

function this:Awake(info)
    base.Awake(self)
    self.ParentNode = info.parent
    self.name = info.name
    self.isLocal = info.isLocal
    if info.name == nil or info.name == "" then
        Logger.LogError("HintNode name is nil")
    end
    self.Count = 0 
    self.ChildNode = {}
    self.Objects = {}
    
    if info.object ~= nil then
        self:AddObject(info.object) 
    end
end

-- 当前节点添加个数
function this:AddCount(count)
    self.Count = self.Count + count
    if self.ParentNode ~= nil and table.count(self.ChildNode) == 0 then
        self:UpdateParents(count)
    end
    UpDateNodeObject(self)
end

-- 当前节点设置个数
function this:SetCount(count)
    local redCount = count - self.Count 
    self.Count = count
    if self.ParentNode ~= nil then
        self:UpdateParents(redCount)
    end
    UpDateNodeObject(self)
end

function this:Click()
    if not self.isLocal then
        Logger.LogError("当前红点不是local节点")
    end
    if self.Count <= 0 then
        return
    end
    self:AddCount(-1)

    ClientData:GetInstance():SetHintData(Game.Scene.Player.Id, self.name, self.Count)
end

-- 更新父节点数量
function this:UpdateParents(Count)
    local node = self.ParentNode
    while(node ~= nil) do
        node.Count = node.Count + Count
        UpDateNodeObject(node)
        node = node.ParentNode
    end
end

-- 获取子节点
---@return HintNode
function this:GetChild(nodeName)
    -- if self.ChildNode[nodeName] == nil then
    --     self.ChildNode[nodeName] = self:AddChild(nodeName)
    -- end
    return self.ChildNode[nodeName]
end

-- 添加子节点
---@return HintNode
function this:AddChild(nodeName,count, isLocal)
    if count == nil then count = 0 end
    local name = self.name .. "_" .. nodeName
    self.ChildNode[nodeName] = Game.Registry:NewObject("HintNode",{parent = self, name = name, isLocal = isLocal})
    if isLocal and ClientData:GetInstance():GetHintData(Game.Scene.Player.Id)[name] ~= nil then
        count = ClientData:GetInstance():GetHintData(Game.Scene.Player.Id)[name]
    end
    self.ChildNode[nodeName].Count = count
    self.ChildNode[nodeName]:UpdateParents(count)

    return self.ChildNode[nodeName]
end

--- 该节点绑定红点obj => 同时绑定的obj显示该节点的count
---@param object GameObject @ 当count>0时显示, 如果下面存在text, 也会显示text
---@param name string @ 好像没有什么用
function this:AddObject(object, name)
    self.Objects[name] = {}
    table.insert(self.Objects[name],object)
    UpDateNodeObject(self)
end

-- 移除子节点
function this:RemoveChild(nodeName)
    if self.ChildNode[nodeName] == nil then
        Logger.LogError("移除的节点不存在")
        return
    end
    local removeCount = self.ChildNode[nodeName].Count
    self.Count = self.Count - removeCount
    self.ChildNode[nodeName] = nil

    UpDateNodeObject(self)
    self:UpdateParents(-removeCount)
end

function this:RemoveAllChildren()
    for nodeName, node in pairs(self.ChildNode) do
        node:SetCount(0)
    end
    self.ChildNode = {}
    self:SetCount(0)
end

function this:Dispose()
    base.Dispose(self)
end

return this