---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/11 20:08
---
---@class TeamComponent
---@field Teams table<number,table<number,Team>> @ key-type, value:( key:teamId, value:Team )
---@field supportRole {friends:SocietyRole[], recomends:SocietyRole[]}
local TeamComponent = BaseClass("TeamComponent", Component)
local base = Component

local function Awake(self)
    base.Awake(self)
    self.Teams = {}
    self.allEquipFightSoulIds = {}
    self.supportRole = {}
end

---@param self TeamComponent
local function CoLoadData(self)
    ---@type protocol.FormationsListInfoResp
    local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
            PROTOCOL.FormationsListInfoReq, {})
    for _,v in ipairs(info.formations_list.formations_list) do
        --每一类编队
        for key, value in ipairs(v.formations) do
            self:Add(Game.Registry:NewObject("Team",value), v.type)
        end
    end

    self:UpdateFightSoulData()

    return coroutine.yieldbreak(info)
end

---@param self TeamComponent
---@param team Team
local function Add(self, team, type)
    if type == nil then type = -1 end
    if self.Teams[type] == nil then
        self.Teams[type] = {}
    end
    self.Teams[type][team.Id] = team
end

---@param teamInfo protocol.Formation
local function UpdateData(self, teamInfo, type)
    if self.Teams[type] == nil then
        self.Teams[type] = {}
    end

    local team = self.Teams[type][teamInfo.id]
    if team == nil then
        self:Add(Game.Registry:NewObject("Team", teamInfo), type)
    else
        team:UpdateData(teamInfo)
    end
end

--- 获取一类所有队伍( 不填就获取 system 类型的队伍 )
---@return table<number,Team> @ key: id, value: Team
function TeamComponent:GetTeams(type)
    if type == nil then
        type = FormationsType.FormationsTypeSystem
    end
    return self.Teams[type]
end

---@param self TeamComponent
---@return Team
local function Get(self, id, type)
    if type == nil then type = FormationsType.FormationsTypeSystem end
    return self.Teams[type][id]
end

local function GetDefaultTeam(self)
    return table.first(self.Teams[FormationsType.FormationsTypeSystem])
end

local function Remove(self,id, type)
    if type == nil then type = FormationsType.FormationsTypeSystem end
    self.Teams[type][id] = nil
end

local function Dispose(self)
    base.Dispose(self)
end

function TeamComponent:UpdateFightSoulData()
    self.allEquipFightSoulIds = {}
    for type, teams in pairs(self.Teams) do
        for id, team in pairs(teams) do
            for key, value in pairs(team.fightSoulIds) do
                if value ~= 0 and not table.contains(self.allEquipFightSoulIds, value) then
                    table.insert(self.allEquipFightSoulIds, value)
                end
            end
        end
    end
    Game.Scene.Player:GetComponent("FightSoulComponent"):UpdateAllFightSoulEquipStatus(self.allEquipFightSoulIds)
end

function TeamComponent:GetAllEquipFightSoulIds()
    return self.allEquipFightSoulIds
end

---@return SocietyRole[], SocietyRole[]
function TeamComponent:GetSupportRole()
    return table.clone(self.supportRole.friends), table.clone(self.supportRole.recomends)
end

---@param friends protocol.SocietyRole[]
---@param recomends protocol.SocietyRole[]
function TeamComponent:SetSupportRole(friends, recomends)
    self.supportRole.friends = {}
    for _, friend in ipairs(friends) do
       table.insert(self.supportRole.friends, Game.Registry:NewObject("SocietyRole", friend))
    end

    self.supportRole.recomends = {}
    for _, recomend in ipairs(recomends) do
        table.insert(self.supportRole.recomends, Game.Registry:NewObject("SocietyRole", recomend))
     end
end

TeamComponent.Awake = Awake
TeamComponent.Add = Add
TeamComponent.UpdateData = UpdateData
TeamComponent.Get = Get
TeamComponent.Remove=Remove
TeamComponent.Dispose = Dispose
TeamComponent.CoLoadData=CoLoadData
TeamComponent.GetDefaultTeam = GetDefaultTeam
return TeamComponent