---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/11 22:43
---
local AgainstComponent = BaseClass("AgainstComponent", Component)
local base = Component

local function Awake(self)
    base.Awake(self)
    self.ChapterId = nil
    self.SectionId = nil
    
    self.CurLevelId = ClientData:GetInstance().CurLevelId
    self.CurLevelDifficulty = ClientData:GetInstance().CurLevelDifficulty
    self.CurTeamNo = ClientData:GetInstance().CurTeamNo
    if self.CurTeamNo == 0 then
        self:SetCurTeamNo(1)
    end
    
    self.StorySkip = false
    self.BattleSpeed = ClientData:GetInstance().BattleSpeed
    if self.BattleSpeed == 0 then
        self:SetBattleSpeed(BattleSpeedMode.Low)
    end
    self.IsForceAutoBattle = false
    self.AutoBattleValue = ClientData:GetInstance().AutoBattleValue
    self.AutoAwakenSkill = ClientData:GetInstance().AutoAwakenSkill
    self.AutoSkill = ClientData:GetInstance().AutoSkill
    
    self.IsOptEnemySkill = ClientData:GetInstance().IsOptEnemySkill

    self.IsIgnoreCooldown = ClientData:GetInstance().IsIgnoreCooldown
    self.LevelType = LevelType.LevelTypeStory
    -- self.BattleData = {
    --     Story = {CurLevelId = ClientData:GetInstance().CurLevelId, CurLevelDifficulty = ClientData:GetInstance().CurLevelDifficulty},
    --     SevenStar = {Day = UIUtil.GetDayForWeek(),Diff = ClientData:GetInstance().CurSevenStarDiff},
    --     Tower = {CurLevelId = ClientData:GetInstance().CurTowerLevelId, CurLevelDifficulty = 1},
    --     Challenge = {},
    --     MonthlyTower = {CurLevelId = ClientData:GetInstance().CurMonthlyTowerLevelId, CurLevelDifficulty = 1},
    --     LordLand = {CurLevelId = ClientData:GetInstance().CompletedLordLandLayer, CurLevelDifficulty = 4},
    --     Guide ={CurLevelId = 1, CurLevelDifficulty = 1},
    --     BattleId = 0,
    --     Test = {CurLevelId = ClientData:GetInstance().CurTestLevelId, CurLevelDifficulty = 1},
    -- }
    self.BattleData = {
        Story = {},
        SevenStar = {},
        MonthlyTower = {},
        Tower = {},
        Challenge = {},
        Guide ={},
        Bossraid ={},
        BattleId = 0,
        GameEvent = {}
    }

    self.BattleStartResp = nil
    self.PlayerFormation = nil
    self.EnemyPlayerFormation = nil

    self.UnitExtraProperties = {}
end

local function AutoGame(self)
end

-- ！！！打开详情信息就要设置难度级别！！！
local function SetCurLevel(self,data)
    self.IsForceAutoBattle = false
    self.LevelType = data.LevelType
    if data.LevelType == LevelType.LevelTypeStory then
        self.BattleData.Story.CurLevelId = data.CurLevelId
        self.BattleData.Story.CurLevelDifficulty = data.CurLevelDifficulty or self.BattleData.Story.CurLevelDifficulty
    elseif data.LevelType == LevelType.LevelTypeSevenStar then
        self.BattleData.SevenStar.CurLevelId = data.CurLevelId
        self.BattleData.SevenStar.CurLevelDifficulty = data.CurLevelDifficulty        
    elseif data.LevelType == LevelType.LevelTypeTower then
        self.BattleData.Tower.CurLevelId = data.CurLevelId
        self.BattleData.Tower.CurLevelDifficulty = data.CurLevelDifficulty
    elseif data.LevelType == LevelType.LevelTypeMonthlyTower then
        self.BattleData.MonthlyTower.CurLevelId = data.CurLevelId
        self.BattleData.MonthlyTower.CurLevelDifficulty = data.CurLevelDifficulty
    elseif data.LevelType == LevelType.LevelTypeChallenge then
        self.BattleData.Challenge.CurLevelId = data.CurLevelId
        self.BattleData.Challenge.CurLevelDifficulty = data.CurLevelDifficulty
    elseif data.LevelType == LevelType.LevelTypeGuide then
        self.BattleData.Guide.CurLevelId = data.CurLevelId
        self.BattleData.Guide.CurLevelDifficulty = data.CurLevelDifficulty
    elseif data.LevelType == LevelType.LevelTypeArena then
        self.IsForceAutoBattle = (data.isAuto == 1)
    elseif data.LevelType == LevelType.LevelTypeBossraid then
        self.BattleData.Bossraid.CurLevelId = data.CurLevelId
        self.BattleData.Bossraid.CurLevelDifficulty = data.CurLevelDifficulty
        self.BattleData.Bossraid.bossraidId = data.bossraidId
    elseif data.LevelType == LevelType.LevelTypeGameEvent then
        self.BattleData.GameEvent.CurLevelId = data.CurLevelId
        self.BattleData.GameEvent.CurLevelDifficulty = data.CurLevelDifficulty
    end
end

local function GetCurLevelDiff(self)
    if self.LevelType == LevelType.LevelTypeStory then
        return self.BattleData.Story.CurLevelDifficulty
    elseif self.LevelType == LevelType.LevelTypeSevenStar then
        return self.BattleData.SevenStar.CurLevelDifficulty        
    elseif self.LevelType == LevelType.LevelTypeTower then
        return self.BattleData.Tower.CurLevelDifficulty
    elseif self.LevelType == LevelType.LevelTypeMonthlyTower then
        return self.BattleData.MonthlyTower.CurLevelDifficulty
    elseif self.LevelType == LevelType.LevelTypeChallenge then
        return self.BattleData.Challenge.CurLevelDifficulty
    elseif self.LevelType == LevelType.LevelTypeBossraid then
        return self.BattleData.Bossraid.CurLevelDifficulty
    elseif self.LevelType == LevelType.LevelTypeStory then
        return self.BattleData.GameEvent.CurLevelDifficulty
    end
    return nil
end

local function GetCurLevelInfo(self)
    local currentLevelInfo
    if self.LevelType == LevelType.LevelTypeStory then
        local storyComponent = Game.Scene.Player:GetComponent("StoryComponent")
        currentLevelInfo = storyComponent:GetLevelInfo(self.LevelType, self.BattleData.Story.CurLevelId)
        return currentLevelInfo
    elseif self.LevelType == LevelType.LevelTypeSevenStar then
        local sevenStarComponent = Game.Scene.Player:GetComponent("SevenStarComponent")
        local sevenStarInfo = Z_SevenStar[self.BattleData.SevenStar.CurLevelId]
        currentLevelInfo = sevenStarComponent.Days[sevenStarInfo.TypeId][sevenStarInfo.Day][sevenStarInfo.Diff]  
        return  currentLevelInfo  
    elseif self.LevelType == LevelType.LevelTypeTower then --帝王之路
        local CommonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
        local levels = CommonLevelComponent.CommonLevels[LevelType.LevelTypeMonthlyTower]
        for key, levelInfo in pairs(levels) do
            if levelInfo.id == self.BattleData.Challenge.CurLevelId then
                currentLevelInfo = levelInfo
            end
        end
        return  currentLevelInfo
    elseif self.LevelType == LevelType.LevelTypeMonthlyTower then --帝王之塔
        local CommonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
        local levels = CommonLevelComponent.CommonLevels[LevelType.LevelTypeMonthlyTower]
        for key, levelInfo in pairs(levels) do
            if levelInfo.id == self.BattleData.Challenge.CurLevelId then
                currentLevelInfo = levelInfo
            end
        end
        return  currentLevelInfo
    elseif self.LevelType == LevelType.LevelTypeChallenge then--挑战模式
        local CommonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
        local LevelType = CommonLevelComponent.CommonLevels[LevelType.LevelTypeChallenge]
        for key, levels in pairs(LevelType) do
            for key, levelInfo in pairs(levels) do
                if levelInfo.id == self.BattleData.Challenge.CurLevelId then
                    currentLevelInfo = levelInfo
                end
            end
        end
        return  currentLevelInfo
    elseif self.LevelType == LevelType.LevelTypeGuide then
        return nil
    elseif self.LevelType== LevelType.LevelTypeArena then
        return nil
    elseif self.LevelType== LevelType.LevelTypeBossraid then
        return nil
    elseif self.LevelType == LevelType.LevelTypeGameEvent then
        local storyComponent = Game.Scene.Player:GetComponent("StoryComponent")
        currentLevelInfo = storyComponent:GetLevelInfo(self.LevelType, self.BattleData.GameEvent.CurLevelId)
        return currentLevelInfo
    end
    
    return nil
end

local function SetCurTeamNo(self,curTeamNo)
    self.CurTeamNo = curTeamNo
    ClientData:GetInstance():SetCurTeamNo(curTeamNo)
end

local function SetBattleSpeed(self,battleSpeed)
    self.BattleSpeed = battleSpeed
    ClientData:GetInstance():SetBattleSpeed(battleSpeed)
end

local function SetAutoBattleValue(self,AutoBattleValue)
    if not table.any({0, 1}, function(p) return p == AutoBattleValue end) then
        AutoBattleValue = 0
    end
    self.AutoBattleValue = AutoBattleValue
    ClientData:GetInstance():SetAutoBattleValue(AutoBattleValue)
end

local function SetDebugInfo(self,isOptEnemySkill,isIgnoreCooldown)
    self.IsOptEnemySkill = isOptEnemySkill
    self.IsIgnoreCooldown = isIgnoreCooldown
    ClientData:GetInstance():SetDebugInfo(isOptEnemySkill,isIgnoreCooldown)
    
    print(self.IsOptEnemySkill)
    print(self.IsIgnoreCooldown)
end

local function GetZStoryLevel(self,sectionId,difficulty)
    if sectionId > 1000 then
        local zStoryLevel = require("Config/Excel/Z_StoryTestLevel_A_1")
        return zStoryLevel[Z_StoryTestSection[sectionId].LevelId]
    end 
    
    local zStorySection = Z_StorySection[sectionId]
    return Z_BattleLevel[zStorySection.LevelId]
end

local function GetZLordTowerLevel(self,sectionId,difficulty)
    local zSection = Z_LordTower[sectionId]
    return zBattleLevel[zSection.LevelId]
    
end

local function GetZLordLandLevel(self,sectionId)
    local zSection = z_LordLand[sectionId]
    return zSection[zSection.LevelId]
end

local function GetBattleLevelFromSectionId(self, z_Section, sectionId)
    local levelId = z_Section[sectionId].LevelId
    return Z_BattleLevel[levelId]
end

local function GetTestLevel(self)
    return self.TestBattleData.BattleLevel
end

local function GetCurZBattleLevel(self)
    if self.LevelType == LevelType.LevelTypeStory then
        return GetBattleLevelFromSectionId(self, Z_StorySection, self.BattleData.Story.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeSevenStar then
        return GetBattleLevelFromSectionId(self, Z_SevenStar, self.BattleData.SevenStar.CurLevelId)        
    elseif self.LevelType == LevelType.LevelTypeTower then --帝王之路
        return GetBattleLevelFromSectionId(self, Z_LordTower, self.BattleData.Tower.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeMonthlyTower then --帝王之塔
        return GetBattleLevelFromSectionId(self, Z_MonthlyTowerLevel, self.BattleData.MonthlyTower.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeChallenge then--挑战模式
        return  GetBattleLevelFromSectionId(self, Z_Challenge, self.BattleData.Challenge.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeGuide then
        return GetBattleLevelFromSectionId(self, Z_GuideSection, self.BattleData.Guide.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeTest then
        return GetTestLevel(self)
    elseif self.LevelType== LevelType.LevelTypeArena then
        local bgm = {"1", "2", "5", "6"}
        return { Bgm = table.randget(bgm) }
    elseif self.LevelType== LevelType.LevelTypeBossraid then
        return GetBattleLevelFromSectionId(self, Z_BossraidLevel, self.BattleData.Bossraid.CurLevelId)
    elseif self.LevelType == LevelType.LevelTypeGameEvent then
        return GetBattleLevelFromSectionId(self, Z_GameEventsLevel, self.BattleData.GameEvent.CurLevelId)
    end
end

local function GetZSection(self)
    if self.LevelType == LevelType.LevelTypeStory then
        return Z_StorySection[self.BattleData.Story.CurLevelId]
    elseif self.LevelType == LevelType.LevelTypeSevenStar then
        return Z_SevenStar[self.BattleData.SevenStar.CurLevelId]        
    elseif self.LevelType == LevelType.LevelTypeTower then
        return Z_LordTower[self.BattleData.Tower.CurLevelId]
    elseif self.LevelType == LevelType.LevelTypeMonthlyTower then
        return Z_MonthlyTowerLevel[self.BattleData.MonthlyTower.CurLevelId]
    elseif self.LevelType == LevelType.LevelTypeChallenge then
       return  Z_Challenge[self.BattleData.Challenge.CurLevelId];
    elseif self.LevelType == LevelType.LevelTypeGuide then
        return Z_GuideSection[self.BattleData.Guide.CurLevelId]
    elseif self.LevelType== LevelType.LevelTypeArena then
        return {Name=LangUtil.GetSysLang(3005),LevelTitle=LangUtil.GetSysLang(3005),SceneId=8}
    elseif self.LevelType == LevelType.LevelTypeBossraid then
        return  Z_BossraidLevel[self.BattleData.Bossraid.CurLevelId];
    elseif self.LevelType == LevelType.LevelTypeTest then
        return Z_StorySection[10021]
    elseif self.LevelType == LevelType.LevelTypeGameEvent then
        return Z_GameEventsLevel[self.BattleData.GameEvent.CurLevelId]
    end
end

local function LoadBatch(self, batchId)
    if batchId == 0 or batchId == nil then
        return nil
    end
    local batch = Game.Registry:NewObject("MonsterBatch", batchId)
    batch:InitMonsterBatchComponent()
    return batch
end

local function SetBattleInfo(self, battleStartResp)
    self.BattleStartResp = battleStartResp
    self.BattleData.BattleId = battleStartResp.battle_id
    if battleStartResp.level_type == LevelType.LevelTypeGuide then
        local guideFormation = require("Misc.GuideFormation")
        local selectedCharacterId = tonumber(Z_Misc["INIT_CHARACTERS"].Value[Game.Scene.Player.first_character_selected])
        local selectedCharacter = guideFormation.SelectedCharacter[selectedCharacterId]
        table.insert(guideFormation.Formation.units, 2, selectedCharacter)
        self.PlayerFormation = guideFormation.Formation
        return
    end
    for _, team in ipairs(self.BattleStartResp.teams) do
        if team.side == 1 then
            self.PlayerFormation = team.formation
        elseif team.side == 2 then
            self.EnemyPlayerFormation = team.formation
        end
    end

    self.UnitExtraProperties = {}
    for _, team in ipairs(self.BattleStartResp.extra_properties) do
        local group = BattleUtil.GetGroupByServerTeamSide(team.side)
        if group == nil then
            goto continue
        end

        self.UnitExtraProperties[group] = team
        ::continue::
    end
end

local function GetUnitExtraProperty(self, group, batch, posId)
    local teamExtraProperty = self.UnitExtraProperties[group]
    if teamExtraProperty == nil then
        return
    end

    return table.first(teamExtraProperty.units, 
        function(unitExtraProperty) 
            return unitExtraProperty.batch == batch and unitExtraProperty.position == posId
        end)
end

local function Dispose(self)
    base.Dispose(self)
end

AgainstComponent.Awake = Awake
AgainstComponent.SetCurLevel = SetCurLevel
AgainstComponent.SetCurTeamNo = SetCurTeamNo
AgainstComponent.SetBattleSpeed = SetBattleSpeed
AgainstComponent.SetAutoBattleValue = SetAutoBattleValue
AgainstComponent.SetDebugInfo = SetDebugInfo
AgainstComponent.GetZStoryLevel = GetZStoryLevel
AgainstComponent.GetZLordTowerLevel = GetZLordTowerLevel
AgainstComponent.GetZLordLandLevel = GetZLordLandLevel
AgainstComponent.GetCurZBattleLevel = GetCurZBattleLevel
AgainstComponent.GetZSection = GetZSection
AgainstComponent.LoadBatch = LoadBatch
AgainstComponent.GetCurLevelInfo = GetCurLevelInfo

AgainstComponent.Dispose = Dispose 
AgainstComponent.GetCurLevelDiff = GetCurLevelDiff
AgainstComponent.AutoGame = AutoGame
AgainstComponent.SetBattleInfo = SetBattleInfo
AgainstComponent.GetUnitExtraProperty = GetUnitExtraProperty

return AgainstComponent