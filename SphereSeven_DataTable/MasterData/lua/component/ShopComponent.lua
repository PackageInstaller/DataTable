---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/9 11:32
---

---@class ShopComponent
local ShopComponent = BaseClass("ShopComponent", Component)
local base = Component
local this = ShopComponent

---@param self ShopComponent
function this.Awake(self)
    base.Awake(self)
    self.PurchasesDetailList = {
    }
    for _, v in pairs(StoreType) do
        self.PurchasesDetailList[v] = {}
    end

    self.PaymentDetailList = {
    }
    self.PaymentDetailList[1] = {} --付费商店暂定为1

    self.StarLightPurchasesRecord = {}
    for i, v in pairs(Z_StarLightStoneShop) do
        self.StarLightPurchasesRecord[v.Id] = 0
    end

    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    self.shopHint = hintComponent.Shop

    self.shopHint:AddChild("GeneralShop", 0)
    self.shopHint:AddChild("SkinShop", 0)
    for _, value in pairs(StoreType) do
        if value ~= StoreType.Skin then
            self.shopHint:GetChild("GeneralShop"):AddChild(value, 0)
        end
    end

    -- 这里也会用到 StarLightStoneShop 节点 所以这里也要初始化一次.
    if self.shopHint:GetChild("StarLightStoneShop") == nil then
        self.shopHint:AddChild("StarLightStoneShop", 0)
    end
    for i = 1, 4 do
        if self.shopHint:GetChild("StarLightStoneShop"):GetChild(i) == nil then
            self.shopHint:GetChild("StarLightStoneShop"):AddChild(i, 0)
        end
    end
    
    for key, value in pairs(Z_Store) do
        ---@type HintNode
        local hintNode
        if value.StoreType == StoreType.GiftPackage then
            hintNode = self.shopHint:GetChild("StarLightStoneShop"):GetChild(value.QuotaPeriod):AddChild(value.Id)
        elseif value.StoreType ~= StoreType.Skin then
            if self.shopHint:GetChild("GeneralShop"):GetChild(value.StoreType) ~= nil then
                hintNode = self.shopHint:GetChild("GeneralShop"):GetChild(value.StoreType):AddChild(value.Id)
            end
        else
            hintNode = self.shopHint:GetChild("SkinShop"):AddChild(value.Id)
        end
        self:UpdateShopHintNode(
            {
                id = value.Id,
                buy_times = 0
            }
        )
    end
end

---@param self ShopComponent
function this.CoLoadData(self)
    -- local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
    --         OuterOpcode.Name2Code.ETModel_C2M_StoreRestrict, {});
    -- if info.Error == ErrorCode.ERR_Success then
    --     self.PurchasesDetailList = info.PurchasesDetail;
    -- else
    --     Logger.LogError("ETModel_C2M_StoreRestrict:"..info.Error)
    -- end
    -- return coroutine.yieldbreak(info)

    local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
            PROTOCOL.ShopInfoReq, {})
    self:SetData(info)
    return coroutine.yieldbreak(info)
end

---@param self ShopComponent
---@param info protocol.ShopInfoResp
local function SetData(self, info)
    for _, shopInfo in pairs(info.shops) do
        for _, goodsInfo in ipairs(shopInfo.goods) do
            self.PurchasesDetailList[shopInfo.id][goodsInfo.id] = goodsInfo
            self:UpdateShopHintNode(goodsInfo)
        end
    end
end

---@param goodsInfo protocol.Goods
function this:UpdateShopHintNode(goodsInfo)
    local hintCount = 0
    local zStore = Z_Store[goodsInfo.id]
    if zStore == nil then
        return
    end

    if zStore.StoreType ~= StoreType.GiftPackage then
        return
    end

    local hasCondition = false
    if not string.IsNullOrEmpty(zStore.OnSaleStartCondition) then
        hasCondition = true
        if zStore.TotalPrice == 0 and UIPublic.CheckCondition(zStore.OnSaleStartCondition) then
            if zStore.QuotaNum > goodsInfo.buy_times or zStore.QuotaNum == 0 then
            -- 价格为0 购买次数未达到上限
                hintCount = 1
            end
        end
    else
        if zStore.TotalPrice == 0 then
            if zStore.QuotaNum > goodsInfo.buy_times or zStore.QuotaNum == 0 then
            -- 价格为0 购买次数未达到上限
                hintCount = 1
            end
        end
    end

    if self.shopHint:GetChild("StarLightStoneShop"):GetChild(zStore.QuotaPeriod) ~= nil and
        self.shopHint:GetChild("StarLightStoneShop"):GetChild(zStore.QuotaPeriod):GetChild(goodsInfo.id) ~= nil then
            local hint = self.shopHint:GetChild("StarLightStoneShop"):GetChild(zStore.QuotaPeriod):GetChild(goodsInfo.id)
            hint:SetCount(hintCount)
            if hasCondition then
                ---@type HintComponent
                local hintComponent = Game.Scene:GetComponent("HintComponent")
                hintComponent:AddCondition(hint, goodsInfo.id)
            end
    end

end

local function SetPaymentData(self, info)
    for _, goodsInfo in ipairs(info.payment_info.shop.goods) do
        self.PaymentDetailList[1][goodsInfo.id] = goodsInfo
    end
end

-- local function GetDetailVal(self, Id, shopType)
--     --local purchases = table.first(self.PurchasesDetailList,function(v) return v.Key == Id  end)
--     local purchases = self.PurchasesDetailList[shopType][Id]
--     if purchases ~= nil then return purchases.Val end
--     return 0
-- end

function this.ChangeDetail(self,key,val)
    local purchases = table.first(self.PurchasesDetailList,function(v) return v.Key == key  end)
    if purchases == nil then
        table.insert(self.PurchasesDetailList,{Key = key,Val = val})
    else
        purchases.Val = purchases.Val + val
    end
end

function this.ClearDayDetail(self)
    for k,v in pairs(self.PurchasesDetailList) do
        if Z_Store[v.Key].QuotaPeriod == 1 then
            self.PurchasesDetailList[k] = nil
        end
    end
end

function this.ClearWeekDetail(self)
    for k,v in pairs(self.PurchasesDetailList) do
        if Z_Store[v.Key].QuotaPeriod == 2 then
            self.PurchasesDetailList[k] = nil
        end
    end
end

function this.ClearMonthDetail(self)
    for k,v in pairs(self.PurchasesDetailList) do
        if Z_Store[v.Key].QuotaPeriod == 3 then
            self.PurchasesDetailList[k] = nil
        end
    end
end

function this.Dispose(self)
    base.Dispose(self)

end

ShopComponent.SetData = SetData
ShopComponent.SetPaymentData = SetPaymentData
--ShopComponent.GetDetailVal = GetDetailVal


return ShopComponent

