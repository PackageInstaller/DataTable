---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/16 11:29
---
local BgmComponent = BaseClass("BgmComponent",Component);
local base = Component

BgmType ={
    UI = "UI",
    Battle = "Battle",
    Story = "Story",
    Activities = "Activities"
}

local bgmSuffix = ".wav"
local battleBgmSuf = ".mp3" 

local function Awake(self)
    base.Awake(self)

    local ssAudio = GameObject.Find("SsAudio")
    if ssAudio == nil then
        ssAudio = GameObject("SsAudio")
        CS.UnityEngine.Object.DontDestroyOnLoad(ssAudio)
    end
    local bgm = GameObject.Find("SsAudio/Bgm")
    if bgm == nil then
        bgm = GameObject("Bgm")
        bgm.transform.parent = ssAudio.transform
    end
    self.audio_source = bgm:AddComponent(typeof(AudioSource))
    self.audio_source.loop = true
    self:SetVolume(ClientData:GetInstance():GetVolume("BgmVolume"))
    self.duration = 0
    self.ui_bgms = {}
    table.walk(Z_Bgm,function (k,v)
        self.ui_bgms[v.Name] = v.Bgm
    end)
end

local function GetFullPath(self,bgmType,bgmName)
    if bgmType == BgmType.UI then
        bgmName = self.ui_bgms[bgmName]
    end
    local suf = bgmSuffix
    if bgmType == BgmType.Battle or bgmType == BgmType.UI or BgmType.Story then
        suf = battleBgmSuf
    end
    local ret = "Bgm/"..bgmType.."/"..bgmName..suf
    return ret
end

local function CoPlay(self,bgmType,bgmName,isNotLoop)
    if not IsNull(self.audio_source.clip) then
        self:Stop()
    end
    if isNotLoop ~= nil and isNotLoop then
        self.audio_source.loop = false
    else
        self.audio_source.loop = true
    end
    
    local bgmPath = GetFullPath(self,bgmType,bgmName)

    local asset = ResourcesManager:GetInstance():CoLoadAsync(bgmPath,typeof(AudioClip))
    self.audio_source.clip = asset
    self.audio_source.volume = ClientData:GetInstance():GetVolume("BgmVolume")
    self.audio_source:Play()
end

local function Stop(self)
    if not IsNull(self.audio_source.clip) then
        self.audio_source:Stop()
        self.audio_source.clip:UnloadAudioData()
    end
end

local function SetVolumePercent(self, vol)
    --if ClientData:GetInstance().BgmIsOn == 0 then
    --    self.audio_source.volume = 0
    --    return
    --end
    --if vol < 0 then vol = 0 end
    --self.audio_source.volume = vol * ClientData:GetInstance().BgmVolume
end

local function SetVolume(self,vol)
    if ClientData:GetInstance().BgmIsOn == 0 then
        vol = 0
    end
    self.audio_source.volume = vol
end

local function GetVolume(self)
    return self.audio_source.volume
end

local function GetClipName(self)
    if self.audio_source.clip == nil then
        return nil
    end
    return self.audio_source.clip.name
end

local function Dispose(self)
    base.Dispose(self)
end

BgmComponent.Awake = Awake
BgmComponent.GetFullPath = GetFullPath
BgmComponent.CoPlay = CoPlay
BgmComponent.Stop = Stop
BgmComponent.SetVolumePercent = SetVolumePercent
BgmComponent.SetVolume = SetVolume
BgmComponent.GetVolume = GetVolume
BgmComponent.Dispose = Dispose
BgmComponent.GetClipName = GetClipName

return BgmComponent