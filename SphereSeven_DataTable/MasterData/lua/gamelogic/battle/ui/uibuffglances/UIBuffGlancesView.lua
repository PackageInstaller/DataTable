---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/6/11 15:50
---
local UIBuffGlancesView = BaseClass("UIBuffGlancesView", UIBaseView)
local this = UIBuffGlancesView
local base = UIBaseView

local buffPf = PathUtil.Path_UIBattleCommonBuffGlancePrefab.."Buff.prefab"
local LeftColPf = PathUtil.Path_UIBattleCommonBuffGlancePrefab.."LeftCol.prefab"
local RightColPf = PathUtil.Path_UIBattleCommonBuffGlancePrefab.."RightCol.prefab"

-- 小头像
local atlasPathPrefix= "UI/Atlas/"
local srAvatarPathPrefix = atlasPathPrefix.."CardLittle/"

function this.OnCreate(self)
    base.OnCreate(self)

    require("GameLogic.Battle.UI.UIBuffGlances.UIBattlePlayerInfo")
    
    self.greyMtrl = ResourcesManager:GetInstance():CoLoadAsync("UI/Materials/UI-GreyDefault.mat", typeof(Material))

    self.leftContent = self.rc:GetObject("LeftContent")--敌方列表  状态
    self.rightContent = self.rc:GetObject("RightContent")
    self.clamp = self.rc:GetObject("BuffDetail")
    self.bg = self.rc:GetObject("Bg")

    self.battlePlayerInfo = self.rc:GetObject("UIBattlePlayerInfo")
    self.attributeInfo = self.rc:GetObject("AttributeInfo")
    self.attributeBtn = self.rc:GetObject("AttributeBtn")
    self.attributeCloseBtn = self.rc:GetObject("AttributeCloseBtn")
    self.scanBtn = self.rc:GetObject("ScanBtn")
    self.backBtn = self.rc:GetObject("BackBtn")
    local close = self.rc:GetObject("Close")

    EventTriggerListener.Get(self.attributeInfo).onLuaClick = function() self.attributeInfo:SetActive(false) end
    UIUtil.AddBtnEvent(self.attributeBtn, function(go) self.attributeInfo:SetActive(true) end)
    UIUtil.AddBtnEvent(self.attributeCloseBtn, function(go) self.attributeInfo:SetActive(false) end)
    UIUtil.AddBtnEvent(self.scanBtn, function(go) UIManager:GetInstance():OpenWindow(UIWindowNames.UIBuffDetails) end)
    UIUtil.AddBtnEvent(self.backBtn, function(go) UIManager:GetInstance():CloseWindow(UIWindowNames.UIBuffGlances) end)
    UIUtil.AddBtnEvent(close, function(go) UIManager:GetInstance():CloseWindow(UIWindowNames.UIBuffGlances) end)

    -- 显示回合
    self.leftScroll = self.rc:GetObject("LeftScroll"):GetComponent("ScrollRect")
    self.rightScroll = self.rc:GetObject("RightScroll"):GetComponent("ScrollRect")
    self.leftScroll.onValueChanged:AddListener(function () self:OnScroll() end)
    self.rightScroll.onValueChanged:AddListener(function () self:OnScroll() end)
    self.clickBuff = nil

    self:OnPlayerInfoCreate()
    self.isCreated = false
    self.colGroups = {}
    self.unitGroups = {}
    self.dataList = {}
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.scanBtn.transform:Find("ScanText")).text = LangUtil.GetSysLang(3020)
    LangUtil.BindText(self.backBtn.transform:Find("BackText")).text = LangUtil.GetSysLang(3021)
    LangUtil.BindText(self.attributeBtn.transform:Find("AttributeText")).text = LangUtil.GetSysLang(3071)
    LangUtil.BindText(self.rc:GetObject("LeftTitleText")).text = LangUtil.GetSysLang(820)
    LangUtil.BindText(self.rc:GetObject("RightTitleText")).text = LangUtil.GetSysLang(821)
    LangUtil.BindText(self.rc:GetObject("StateText")).text = LangUtil.GetSysLang(3023)
    LangUtil.BindText(self.rc:GetObject("SkillScanText")).text = LangUtil.GetSysLang(3034)
    LangUtil.BindText(self.rc:GetObject("SkillDataText")).text = LangUtil.GetSysLang(3035)
    LangUtil.BindText(self.rc:GetObject("AttributeTitleTxt")).text = LangUtil.GetSysLang(3072)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.clamp:SetActive(false)
    self.battlePlayerInfo:SetActive(false)
    self.attributeInfo:SetActive(false)
    self.currentAvatar = nil
    self.clickBuff = nil
    self:OnRefresh()
end

function this.SetAvatarMaterial(self, ssUnitId, deadOrRevive)
    local avatar = self.colGroups[ssUnitId].transform:Find("Icon/Mask/Avatar")
    local avatarImg = avatar:GetComponent(typeof(UE_UI.Image))
    avatarImg.material = deadOrRevive and self.greyMtrl or nil
end

function this.OnRefresh(self)
    if self.isBusy then return end
    self.isBusy = true
    coroutine.start(function ()
        if not self.isCreated then
            self.isCreated = true
            self.battle_component = Game.Scene:GetComponent("BattleComponent")
            self.LeftGroup = self.battle_component:SortByRowAndLine(self.battle_component:GetGroupUnits(MatrixGroup.Enemy))
            self.RightGroup = self.battle_component:SortByRowAndLine(self.battle_component:GetGroupUnits(MatrixGroup.Friend))
            for i = 1, #self.LeftGroup do
                local u = self.LeftGroup[i]
                local col = GameObjectPool:GetInstance():CoGetGameObjectAsync(LeftColPf)
                col.transform:SetParent(self.leftContent.transform, false)
                local data = {left = true}-- true左边的怪
                self:BuildCol(col, u, data)
                self.colGroups[u.UID] = col
                self.unitGroups[u.UID] = u
                self.dataList[u.UID] = data
            end
            for i = 1, #self.RightGroup do
                local u = self.RightGroup[i]
                local col = GameObjectPool:GetInstance():CoGetGameObjectAsync(RightColPf)
                col.transform:SetParent(self.rightContent.transform, false)
                local data = {left = false}
                self:BuildCol(col, u, data)
                self.colGroups[u.UID] = col
                self.unitGroups[u.UID] = u
                self.dataList[u.UID] = data
            end
        else
            table.walk(self.colGroups, function (k, v)
                self:BuildCol(self.colGroups[k], self.unitGroups[k], self.dataList[k])
            end)
        end
        self.isBusy = false
    end)
end

function this.BuildCol(self, col, u, data)
    local zCard = u.ZCard
    local card = u.BattleCharacter
    local skinId = (card == nil and {1} or {card.SkinId})[1]
    if skinId == nil then skinId = 1 end
    local avatar = col.transform:Find("Icon/Mask/Avatar")
    local avatarImg = avatar:GetComponent(typeof(UE_UI.Image))
    local avatarBtn = avatar:GetComponent(typeof(UE_UI.Button))

    local zFigureAsset = u:GetComponent("BattleUnitComponent").FigureAssetConfig
    avatarImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync(srAvatarPathPrefix..zFigureAsset.SrAvatar..".png")
    avatarImg.material = u:GetComponent("CharacterComponent").IsDead and self.greyMtrl or nil
    local buffsRoot = col.transform:Find("BuffScroll/Viewport/Content")
    local buffs = u:GetComponent("BuffComponent"):GetBuffs()
    --local scroll = col.transform:Find("BuffScroll").gameObject:GetComponent("ScrollRect")
    --scroll.onValueChanged:RemoveAllListeners()
    --scroll.onValueChanged:AddListener(function () self:OnScroll() end)
    if self.clickBuff ~= nil and self.clickBuff.entity == u and not table.any(buffs, function (v) return v.UUID == self.clickBuff.buff.UUID end) then
        self.clickBuff = nil
        self.clamp:SetActive(false)
    end
    for i = 0, buffsRoot.childCount - 1 do
        buffsRoot:GetChild(i).gameObject:SetActive(false)
    end
    for i = 1, #buffs do
        local zBuff = Z_Buff[buffs[i].Id]
        local buff
        if i <= buffsRoot.childCount then
            buff = buffsRoot:GetChild(i - 1).gameObject
        else
            buff = GameObjectPool:GetInstance():CoGetGameObjectAsync(buffPf)
            buff.transform:SetParent(buffsRoot, false)
        end
        for index = 0, buff.transform.childCount - 1 do
            buff.transform:GetChild(index).gameObject:SetActive(false)
        end
        local img = buff:GetComponent("Image")
        img.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Atlas/Buff_"..LangUtil.GetLangType().."/"..zBuff.Icon..".png")
        img:SetNativeSize()
        buff:SetActive(true)
        UIUtil.AddBtnEvent(buff, function() self:OnClickBuff(buffs[i], buff, u) end)
        -- 更新buff说明的位置
        if self.clickBuff ~= nil and buffs[i].UUID == self.clickBuff.buff.UUID then
            self.clickBuff.go = buff
            self:UpdateDesc(buffs[i])
            self:UpdateClamp(buff)
        end
    end
    UIUtil.AddBtnEvent(avatarBtn, function()
        self.currentAvatar = u
        self:OpenPlayerInfo(card, u, data)
    end)
    if self.currentAvatar ~= nil then
        self:UpdatePlayerBuff(self.currentAvatar)
    end
end

function this.OnScroll(self)
    if self.clickBuff == nil then
        return
    end
    self:UpdateClamp(self.clickBuff.go)
end

function this.OnClickBuff(self, buff, go, entity)
    if self.clickBuff ~= nil and self.clickBuff.buff == buff then
        self.clickBuff = nil
        self.clamp:SetActive(false)
    else
        self.clickBuff = {buff = buff, go = go, entity = entity}
        self.clamp:SetActive(true)
        self:UpdateDesc(buff)
        coroutine.start(function ()
            self.clamp.transform.position = Vector3.New(9999, 9999, 9999)
            coroutine.waitforframes(1)
            self.clamp:SetActive(false)
            coroutine.waitforframes(1)
            self.clamp:SetActive(true)
            coroutine.waitforframes(1)
            self:UpdateClamp(go)
        end)
    end
end

function this.Update(self)
    if Input.GetMouseButtonDown(0) then
        if self.clickBuff ~= nil then
            self.clickBuff = nil
            self.clamp:SetActive(false)
        end
    end
end

function this.UpdateDesc(self, buff)
    -- 设置
    local name = self.clamp.transform:Find("Name")
    --local image = self.clamp.transform:Find("Image")
    local desc = self.clamp.transform:Find("Desc")
    --name.gameObject:SetActive(buff.Kind == 1)
    --image.gameObject:SetActive(buff.Kind == 1)
    if buff.LeftTurn > 0 then -- buff.Kind == 1 and 
        LangUtil.BindText(name).text = LangUtil.GetSysLang(72).."："..buff.LeftTurn
    else
        LangUtil.BindText(name).text = LangUtil.GetSysLang(72).."：--"
    end
    LangUtil.BindText(desc).text = buff.Desc
end

function this.UpdateClamp(self, go)
    local bgRect = self.bg.transform:GetComponent("RectTransform")
    local clampRect = self.clamp.transform:GetComponent("RectTransform")
    
    UIPublic.SetPanelPosition(clampRect, bgRect, go.transform.position)
end

function this.ShutDown(self)
    self:Clear()
    self.isCreated = false
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIBuffGlances)
end

function this.Clear(self)
    for i = 0, self.leftContent.transform.childCount - 1 do
        local buffContent = self.leftContent.transform:GetChild(0):Find("BuffScroll/Viewport/Content")
        for index = 0, buffContent.childCount - 1 do
            GameObjectPool:GetInstance():RecycleGameObject(buffPf, buffContent:GetChild(0).gameObject)
        end
        GameObjectPool:GetInstance():RecycleGameObject(LeftColPf, self.leftContent.transform:GetChild(0).gameObject)
    end
    for i = 0, self.rightContent.transform.childCount - 1 do
        local buffContent = self.rightContent.transform:GetChild(0):Find("BuffScroll/Viewport/Content")
        for index = 0, buffContent.childCount - 1 do
            GameObjectPool:GetInstance():RecycleGameObject(buffPf, buffContent:GetChild(0).gameObject)
        end
        GameObjectPool:GetInstance():RecycleGameObject(RightColPf, self.rightContent.transform:GetChild(0).gameObject)
    end
    -- playerInfo
    for i = 0, self.buffContent.transform.childCount - 1 do
        GameObjectPool:GetInstance():RecycleGameObject(buffPf, self.buffContent.transform:GetChild(0).gameObject)
    end
    self.colGroups = {}
    self.unitGroups = {}
    self.dataList = {}
    self.playerBuffs = nil
    self.currentAvatar = nil
    self.numeric_component = nil
end

function this.OnDisable(self)
    base.OnDisable(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.UIBuffGlances_CHG, self.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.UIBuffGlances_CHG)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
    self:Clear()
end

return this