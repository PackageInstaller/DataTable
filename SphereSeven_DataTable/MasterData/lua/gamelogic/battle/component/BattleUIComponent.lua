---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/22 13:35
---
local BattleUIComponent = BaseClass("BattleUIComponent", Component)
local base = Component

local uiMaterialPathPrefix = "UI/Materials/"

local energy3_sec = {0.08,0.33}  --能量FillAmount区间
local energy2_sec = {0.41,0.59}
local energy1_sec = {0.46,0.55}

-- 点击状态按键
local function OnBuffGlancesBtn(self)
    local skill = self.battle_component.CurActSkill
    if skill ~= nil and skill.ZSkill ~= nil and skill.ZSkill.IsAwaken == 1 and self.battle_component.fsm:GetCurrentState() == BattleState.UnitAct then
        return
    end
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleStatus)
end

-- 设置战斗速度UI
local function SetSpeedText(self, battleSpeed)
    if battleSpeed == BattleSpeedMode.Pause then return end
    self.speedBtn.transform:GetChild(0).gameObject:SetActive(battleSpeed == BattleSpeedMode.Low)
    self.speedBtn.transform:GetChild(1).gameObject:SetActive(battleSpeed == BattleSpeedMode.Normal)
    self.speedBtn.transform:GetChild(2).gameObject:SetActive(battleSpeed == BattleSpeedMode.High)
end

-- 点击速度按钮
local function OnSpeedBtn(self)
    if self.battle_component.BattleSpeed == BattleSpeedMode.Low then
        self.battle_component:SetBattleSpeed(BattleSpeedMode.Normal)
    elseif self.battle_component.BattleSpeed == BattleSpeedMode.Normal then
        self.battle_component:SetBattleSpeed(BattleSpeedMode.High)
    elseif self.battle_component.BattleSpeed == BattleSpeedMode.High then
        self.battle_component:SetBattleSpeed(BattleSpeedMode.Low)
    end
end

-- 设置自动战斗UI
local function SetAutoText(self, AutoBattleValue)
    self.autoBtn.transform:GetChild(0).gameObject:SetActive(AutoBattleValue == 0)
    self.autoBtn.transform:GetChild(1).gameObject:SetActive(AutoBattleValue == 1)
end

-- 点击Auto按钮
local function OnAutoBtn(self)
    if not Game.Scene:GetComponent("GuideComponent").GuideRun then
        self.battle_component:SetAutoBattle(self.battle_component.AutoBattleValue + 1)
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(557))
    end
end

local function SetAutoAwakenSkillBtn(self, AutoAwakenSkill)
    self.awakenSkillBtn.transform:GetChild(0).gameObject:SetActive(AutoAwakenSkill == 0)
    self.awakenSkillBtn.transform:GetChild(1).gameObject:SetActive(AutoAwakenSkill == 1)
end

local function SetAutoSkillBtn(self, AutoSkill)
    self.autoSkillBtn.transform:GetChild(0).gameObject:SetActive(AutoSkill == 0)
    self.autoSkillBtn.transform:GetChild(1).gameObject:SetActive(AutoSkill == 1)
end

-- 点击Auto演出按钮
local function OnAutoAwakenSkillBtn(self)
    self.battle_component:SetAutoAwakenSkill(self.battle_component.AutoAwakenSkill + 1)
end

-- 点击Auto演出按钮
local function OnAutoSkillBtn(self)
    self.battle_component:SetAutoSkill(self.battle_component.AutoSkill + 1)
end

-- 点击暂停按键
local function OnPauseBtnClick(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattlePause)
end

-- 设置战斗回合
local function SetBattleText(self, text)
    self.battle_text.text = text
end

-- 设置战斗波数
local function SetRoundText(self, text)
    if IsNull(self.round_text) then return end
    self.round_text.text = text
end

-- 技能显示
local function ShowSkillChoose(self, go)
    self.c_GeneralAtk:SetActive(false)
    self.c_Skill1:SetActive(false)
    self.c_Skill2:SetActive(false)
    if go == nil then return end
    self["c_"..go.name]:SetActive(true)
end

local function Awake(self)
    base.Awake(self)

    self.battle_component = Game.Scene:GetComponent("BattleComponent")

    self.BattleUIRoot = GameObjectPool:GetInstance():CoGetGameObjectAsync("Scene/Common/BattleUI.prefab")
    self.BattleUIRoot.transform:SetParent(GameObject.Find("SceneRoot").transform,false)

    local battleCameraComponent = Game.Scene:GetComponent("BattleCameraComponent")
    self.BattleInfoCanvas = self.BattleUIRoot.transform:Find("BattleInfoCanvas"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.BattleInfoCanvas.transform:GetComponent("CanvasScaler").matchWidthOrHeight = UIManager:GetInstance().MatchWidthOrHeight
    self.BattleInfoCanvas.worldCamera = battleCameraComponent.InfoUICamera
    self.BattleToolCanvas = self.BattleUIRoot.transform:Find("BattleToolCanvas"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.BattleToolCanvas.transform:GetComponent("CanvasScaler").matchWidthOrHeight = UIManager:GetInstance().MatchWidthOrHeight
    self.BattleToolCanvas.worldCamera = battleCameraComponent.ToolUICamera
    self.BattleAwakenCanvas = self.BattleUIRoot.transform:Find("BattleAwakenCanvas"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.BattleAwakenCanvas.transform:GetComponent("CanvasScaler").matchWidthOrHeight = UIManager:GetInstance().MatchWidthOrHeight
    self.BattleAwakenCanvas.worldCamera = battleCameraComponent.AwakenUICamera
    self.HUDTextCanvas = self.BattleUIRoot.transform:Find("HUDTextCanvas"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.HUDTextCanvas.transform:GetComponent("CanvasScaler").matchWidthOrHeight = UIManager:GetInstance().MatchWidthOrHeight
    self.HUDTextCanvas.worldCamera = battleCameraComponent.InfoUICamera

    -- BattleInfoPanel
    self.battleInfoPanel = GameObjectPool:GetInstance():CoGetGameObjectAsync("UI/Prefabs/UI/Battle/BattleInfoPanel.prefab")
    self.battleInfoPanel.transform:SetParent(self.BattleUIRoot.transform:Find("BattleInfoCanvas").transform, false)
    local rectTnf = self.battleInfoPanel:GetComponent("RectTransform")
    rectTnf:DOAnchorMax(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOAnchorMin(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOPivot(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOSizeDelta(Vector2.New(UIManager:GetInstance().maxWidth, UIManager:GetInstance().maxHeight), 0)
    
    local infoUIRC = self.battleInfoPanel:GetComponent(typeof(ReferenceCollector))
    self.EnemyStatusBarsGo = infoUIRC:GetObject("EnemyStatusBars")
    self.roundRoot = infoUIRC:GetObject("RoundRoot")
    LangUtil.BindText(infoUIRC:GetObject("Text1"), FontType.All_Number).text = LangUtil.GetSysLang(3061)
    LangUtil.BindText(infoUIRC:GetObject("Text2"), FontType.All_Number).text = LangUtil.GetSysLang(3062)
    self.battle_text = LangUtil.BindText(infoUIRC:GetObject("BattleText"), FontType.All_Number)
    self.round_text = LangUtil.BindText(infoUIRC:GetObject("RoundText"), FontType.All_Number)
    self.StatusBarsGo = infoUIRC:GetObject("StatusBars")
    --self.skill_show = infoUIRC:GetObject("SkillShow")
    self.tactics_btn = infoUIRC:GetObject("Tactics")
    self.back_btn = infoUIRC:GetObject("Back")
    self.pause_btn = infoUIRC:GetObject("PauseBtn")
    self.buffGlances_btn = infoUIRC:GetObject("BuffGlances")
    LangUtil.GetSpriteLang(149, function(sprite) self.back_btn:GetComponent("Image").sprite = sprite end)
    -- LangUtil.GetSpriteLang(151, function(sprite) self.buffGlances_btn:GetComponent("Image").sprite = sprite end)
    
    self.speedBtn = infoUIRC:GetObject("SpeedBtn")
    self.autoBtn = infoUIRC:GetObject("AutoBtn")
    self.SrAvatarsGo = infoUIRC:GetObject("SrAvatars")
    self.skillContent = infoUIRC:GetObject("SkillContent")
    self.awakenSkillBtn = infoUIRC:GetObject("AwakenSkillBtn")
    self.autoSkillBtn = infoUIRC:GetObject("AutoSkillBtn")
    LangUtil.GetSpriteLang(290, function(sprite) self.autoSkillBtn.transform:GetChild(0):GetComponent("Image").sprite = sprite end)
    LangUtil.GetSpriteLang(291, function(sprite) self.autoSkillBtn.transform:GetChild(1):GetComponent("Image").sprite = sprite end)

    UIUtil.AddBtnEvent(self.pause_btn, function(go) OnPauseBtnClick()  end)
    UIUtil.AddBtnEvent(self.buffGlances_btn, function(go) OnBuffGlancesBtn(self)  end)
    UIUtil.AddBtnEvent(self.speedBtn, function(go) OnSpeedBtn(self)  end)
    UIUtil.AddBtnEvent(self.autoBtn, function(go) OnAutoBtn(self)  end)
    UIUtil.AddBtnEvent(self.awakenSkillBtn, function(go) OnAutoAwakenSkillBtn(self)  end)
    UIUtil.AddBtnEvent(self.autoSkillBtn, function(go) OnAutoSkillBtn(self) end)
    UIUtil.AddBtnEvent(self.back_btn, function(go)
        local skill = self.battle_component.CurActSkill
        if skill ~= nil and skill.ZSkill ~= nil and skill.ZSkill.IsAwaken == 1 and self.battle_component.fsm:GetCurrentState() == BattleState.UnitAct then
            return
        end
        if self.battle_component.fsm:GetCurrentState() == BattleState.BattleEnd then
            return
        end
        --新手指引战斗中不可以退出游戏
        if not Game.Scene:GetComponent("GuideComponent").GuideRun then
            local tooltip_first_data = {};
            tooltip_first_data.title = LangUtil.GetSysLang(60);
            tooltip_first_data.message = LangUtil.GetSysLang(61);
            tooltip_first_data.callBack = function()
                Game.Scene:GetComponent("BattleComponent").fsm:Switch(BattleState.LeaveScene)
            end
            UIUtil.ToolTipFirst(tooltip_first_data);
        else
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(558))
        end
    end)

    -- BattleToolPanel
    self.battleToolPanel = GameObjectPool:GetInstance():CoGetGameObjectAsync("UI/Prefabs/UI/Battle/BattleToolPanel.prefab")
    self.battleToolPanel.transform:SetParent(self.BattleUIRoot.transform:Find("BattleToolCanvas").transform,false)
    rectTnf = self.battleToolPanel:GetComponent("RectTransform")
    rectTnf:DOAnchorMax(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOAnchorMin(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOPivot(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOSizeDelta(Vector2.New(UIManager:GetInstance().maxWidth, UIManager:GetInstance().maxHeight), 0)
    
    local toolUIRC = self.battleToolPanel:GetComponent(typeof(ReferenceCollector))
    self.skill_slots = toolUIRC:GetObject("SkillSlots")
    self.general_atk_go = toolUIRC:GetObject("GeneralAtk")
    self.skill1_go = toolUIRC:GetObject("Skill1")
    self.skill2_go = toolUIRC:GetObject("Skill2")
    self.c_GeneralAtk = toolUIRC:GetObject("ChooseGeneralAtk")
    self.c_Skill1 = toolUIRC:GetObject("ChooseSkill1")
    self.c_Skill2 = toolUIRC:GetObject("ChooseSkill2")
    self.skillRoot = toolUIRC:GetObject("SkillRoot").transform
    self.generalAtkRoot = self.skillRoot:Find("backGround/generalAtk").transform
    self.skill1Root = self.skillRoot:Find("backGround/skill1").transform
    self.skill2Root = self.skillRoot:Find("backGround/skill2").transform
    self.skillList = {self.generalAtkRoot, self.skill1Root, self.skill2Root}
    self.skill_slots:SetActive(false)

    LangUtil.BindText(self.skill1Root:Find("coolDownLeft"), FontType.All_Number)
    LangUtil.BindText(self.skill2Root:Find("coolDownLeft"), FontType.All_Number)

    -- 觉醒
    self.awakenPanel = GameObjectPool:GetInstance():CoGetGameObjectAsync("UI/Prefabs/UI/Battle/BattleAwakenPanel.prefab")
    self.awakenPanel.transform:SetParent(self.BattleUIRoot.transform:Find("BattleAwakenCanvas").transform,false)
    rectTnf = self.awakenPanel:GetComponent("RectTransform")
    rectTnf:DOAnchorMax(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOAnchorMin(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOPivot(Vector2.New(0.5, 0.5), 0)
    rectTnf:DOSizeDelta(Vector2.New(UIManager:GetInstance().maxWidth, UIManager:GetInstance().maxHeight), 0)
    
    local awakenUIRC = self.awakenPanel:GetComponent(typeof(ReferenceCollector))
    self.awakenPanel:SetActive(false)
    LangUtil.BindText(awakenUIRC:GetObject("AwakenName")).text = LangUtil.GetSysLang(3024)
    self.awakenContent = LangUtil.BindText(awakenUIRC:GetObject("AwakenContent"))

    -- 操作指引  引导用
    self.BodyBg = toolUIRC:GetObject("BodyBg")
    self.BodyMPBg = toolUIRC:GetObject("BodyMPBg")
    self.StateBg = toolUIRC:GetObject("StateBg")
    self.SpeedBg = toolUIRC:GetObject("SpeedBg")
    self.AutoBg = toolUIRC:GetObject("AutoBg")
    self.SkillBg = toolUIRC:GetObject("SkillBg")
    self.BattleArrayBg = toolUIRC:GetObject("BattleArrayBg")
    self.SkillTarget = toolUIRC:GetObject("SkillTarget")
   
    -- 竞速条发亮文字和发亮材质
    self.OutGlowMat = ResourcesManager:GetInstance():CoLoadAsync(uiMaterialPathPrefix.."UI-GreyDefault.mat", typeof(Material))
    self.OutLineMat = ResourcesManager:GetInstance():CoLoadAsync(uiMaterialPathPrefix.."OutlineImg.mat", typeof(Material))
    self.UIGreyMat = ResourcesManager:GetInstance():CoLoadAsync(uiMaterialPathPrefix.."UI-GreyDefault.mat", typeof(Material))

    self.is_ignore_cooldown = Game.Scene:GetComponent("AgainstComponent").IsIgnoreCooldown

    self.skillRoot.gameObject:SetActive(false)
    self:SetAutoText(self.battle_component.AutoBattleValue)
    self:SetAutoAwakenSkillBtn(self.battle_component.AutoAwakenSkill)
    self:SetAutoSkillBtn(self.battle_component.AutoSkill)
    ShowSkillChoose(self)
    self.chooseSkillCur = nil

    self.HpBarRoot = infoUIRC:GetObject("HpBarRoot")
    self.CenterFarCamera = battleCameraComponent.center_far_camera
    self.InfoUICamera = battleCameraComponent.InfoUICamera
end

-- 选择技能后的选中效果
local function showSkillChooseNew(self, root)
    for k,v in pairs(self.skillList) do
        local btnImg = v:Find("button/skillIcon/value"):GetComponent("Image")
        local active = v:Find("Active").gameObject
        if v == root then
            btnImg.color = Color.New(1,1,1)
            active:SetActive(true)
            local image = active:GetComponent("Image")
            coroutine.start(function()
                while((not IsNull(image)) and image.gameObject.activeInHierarchy) do
                    image:DOFade(0,0.7)
                    if IsNull(image) then return end
                    image.transform:DOScale(Vector2.New(0.95,0.95),0.7)
                    coroutine.waitforseconds(0.7)
                    if IsNull(image) then return end
                    image:DOFade(1,0.7)
                    image.transform:DOScale(Vector2.New(1,1),0.7)
                    coroutine.waitforseconds(0.7)
                end
            end)
        else
            btnImg.color = Color.New(0.8,0.8,0.8)
            active:SetActive(false)
        end
    end
end

-- 新手指引 --选择技能
local function ChooseAtk(self,ih)
    local bc = Game.Scene:GetComponent("BattleComponent")
    local ssUnit = bc.CurActUnit
    local skillComponent = ssUnit:GetComponent("SkillComponent")
    if skillComponent.GeneralAtkId == nil then return end
    local Atk = skillComponent:GetActiveSkill(skillComponent.GeneralAtkId)
    local skillSlotGo = self.generalAtkRoot
    if ih==1 then
        Atk = skillComponent:GetActiveSkill(skillComponent.Skill1Id)
        skillSlotGo = self.skill1Root
    elseif ih==2 then
        Atk = skillComponent:GetActiveSkill(skillComponent.Skill2Id)
        skillSlotGo = self.skill2Root
    end
    local skill = Atk
    bc:SetCurActSkill(skill, nil)
    showSkillChooseNew(self,skillSlotGo)
end

-- 新手指引 判断技能是否可用--
local function ChooseSkill1(self, id)
    local bc = Game.Scene:GetComponent("BattleComponent")
    local ssUnit=bc.CurActUnit
    local skillComponent = ssUnit:GetComponent("SkillComponent")
    local sscc= ssUnit:GetComponent("CharacterComponent")
    local skillId=skillComponent.GeneralAtkId
    --local skillC = state.battleComp.CurActUnit:GetComponent("SkillComponent")
    if id==0 and sscc.UnableGeneraAtk > 0 then
        return false
    elseif id==1 then
        skillId=skillComponent.Skill1Id
    elseif id==2 then
        skillId=skillComponent.Skill2Id
    end

    local num = skillComponent.ActiveSkills[skillId].LeftCooldownTurn
    if num==0 then
        return true
    else
        return false
    end
end

--新手指引 选择释放目标
local function ChooseEnemyUnit(self,id)
    local colliderUnitId = id -- 获取选中单位的ID
    local colliderUnit = self.battle_component.IdUnits[colliderUnitId]  --获取选中单位
    --local colliderUnitGroup = colliderUnit:GetComponent("SsUnitMatrixComponent").Group --选中单位的阵营
    local zSkill = self.battle_component.CurActSkill.ZSkill
    if zSkill ~= nil then -- 行动类型为技能 或着选择了信念技能
        local isValid = self.battle_component:CheckCurrentSkillToUnit(colliderUnit, zSkill)
        if isValid then
            self.battle_component:DoSkill(colliderUnit)
        end
    end
end

-- 更新技能显示，绑定点击事件
local function RefreshSkill(self, skill, ssUnit, skillRoot, skillType)
    self.chooseSkillCur = nil
    local characterComponent = ssUnit:GetComponent("CharacterComponent")
    local zSkill = skill.ZSkill
    local transform = skillRoot
    local skillIcon = transform:Find("button/skillIcon/value"):GetComponent("Image")
    local button = transform:Find("button/skillIcon/value").gameObject
    local image= transform:Find("button/skillIcon/value"):GetComponent("Image")
    local text = transform:Find("button/Desc"):GetComponent("Text")
    text.text = UIPublic.GetSkillDescText(zSkill.Id)
    image.color = Color.New(1,1,1)
    transform:Find("Active").gameObject:SetActive(false)
    UIUtil.SetSprite(skillIcon, AtlasConfig.SkillIcon, zSkill.SkillIcon)
    if zSkill.TypeName ~= "Atk" then
        local coolDownLeftTxt = transform:Find("coolDownLeft"):GetComponent("Text")
        local coolDownMask = transform:Find("mask"):GetComponent("Image")
        coolDownMask.enabled = true
    
        local pro = 1
        if pro == 1 and skill.LeftCooldownTurn == 0 then
            coolDownMask.gameObject:SetActive(false)
        else
            coolDownMask.gameObject:SetActive(true)
            coolDownMask.fillAmount = skill.LeftCooldownTurn/skill:GetCooldownTurn()
            if pro < 1 then
                coolDownMask.fillAmount = 1
            end
        end
        coolDownLeftTxt.gameObject:SetActive(false)
        if skill.LeftCooldownTurn > 0 then
            coolDownLeftTxt.gameObject:SetActive(true)
            coolDownLeftTxt.text = skill.LeftCooldownTurn
        end
        if self.is_ignore_cooldown then
            coolDownMask.gameObject:SetActive(false)
            coolDownLeftTxt.gameObject:SetActive(false)
        end
        --if not coolDownMask.gameObject.activeSelf then
        --    image:DOFade(0,0)
        --    image:DOFade(1,0.2):SetLoops(3,LoopType.Yoyo)
        --end
    end

    local btn = button:GetComponent("Button")
    if IsNull(btn) then
        btn = button:AddComponent(typeof(CS.UnityEngine.UI.Button))
    end
    btn.interactable = table.count(self.battle_component:GetAllTargetsByCurrentSkill(skill)) > 0
    UIUtil.AddBtnEvent(button, function ()
        self:OnChooseSkill(skill, skillRoot)
    end)


    local cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    local character = cards[ssUnit.BattleCharacter.TemplateId]

    local func = function(go)
        local data = {
            title = "技能详情",
            subTitle = zSkill.Name,
            message = zSkill.SkillDesc,
            id = zSkill.Id,
            cd = zSkill.CooldownTurn,
            character = character,
            params = zSkill.Params,
            skillType = skillType
        }
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetail,data)
    end
    LongPress.New(button, func)
end

-- 点击技能 --
local function OnChooseSkill(self, unitSkill, skillRoot)
    local alpha = 0

    if unitSkill ~= nil then -- 选择技能
        if self.chooseSkillCur == nil or self.chooseSkillCur ~= unitSkill then -- 选择了新的技能
            self.chooseSkillCur = unitSkill
            if unitSkill.ZSkill.IsNeedChoose == 1 then
                showSkillChooseNew(self, skillRoot)
                if unitSkill.ZSkill.IsReviveSkill == 1 then
                    alpha = 0.5
                end
            end
        else
            self.chooseSkillCur = nil
            showSkillChooseNew(self, nil)
        end
    end
    self.battle_component:SetCurActSkill(self.chooseSkillCur)
    table.walk(self.battle_component.IdUnits, function (k, v)
        if v:GetComponent("CharacterComponent").IsDead and
                v:GetComponent("SsUnitMatrixComponent").Group == self.battle_component.CurActUnit:GetComponent("SsUnitMatrixComponent").Group then
            v:GetComponent("SsUnitBattleComponent"):SetUnitColorAlpha(alpha)
        end
    end)
end

-- 行动开始 -- 
local function OnUnitAct(self)
    showSkillChooseNew(self, nil)
    table.walk(self.battle_component.IdUnits, function (k, v)
        if v:GetComponent("CharacterComponent").IsDead then
            v:GetComponent("SsUnitBattleComponent"):SetUnitColorAlpha(0)
        end
    end)
end

-- 技能显示
local function ShowSkill(transform,_bool)
    local skillIcon = transform:Find("button/skillIcon")
    local mask = transform:Find("mask")
    local coolDownLeft = transform:Find("coolDownLeft")

    if skillIcon ~=nil then skillIcon.gameObject:SetActive(_bool) end
    if mask ~=nil then mask.gameObject:SetActive(_bool) end
    if coolDownLeft ~=nil then coolDownLeft.gameObject:SetActive(_bool) end
end

-- 加载当前行动单位的技能图标
local function LoadSkills(self, ssUnit)
    self.skillRoot.gameObject:SetActive(false)
    local skillComponent = ssUnit:GetComponent("SkillComponent")

    showSkillChooseNew(self)

    if skillComponent.GeneralAtkId ~= nil then
        local generalAtk = skillComponent:GetActiveSkill(skillComponent.GeneralAtkId)
        ShowSkill(self.generalAtkRoot,true)
        RefreshSkill(self,generalAtk,ssUnit,self.generalAtkRoot, SkillType.Attack)
    else
        ShowSkill(self.generalAtkRoot,false)
    end

    if skillComponent.Skill1Id ~= nil then
        local skill1 = skillComponent:GetActiveSkill(skillComponent.Skill1Id)
        ShowSkill(self.skill1Root,true)
        RefreshSkill(self,skill1,ssUnit,self.skill1Root, SkillType.Skill)
    else
        ShowSkill(self.skill1Root,false)
    end

    if skillComponent.Skill2Id ~= nil then
        local skill2 = skillComponent:GetActiveSkill(skillComponent.Skill2Id)
        ShowSkill(self.skill2Root,true)
        RefreshSkill(self,skill2,ssUnit,self.skill2Root, SkillType.Ultimate)
    else
        ShowSkill(self.skill2Root,false)
    end

    self.skillRoot.gameObject:SetActive(true)
end

local function ClearSkills(self)
    self.skillRoot.gameObject:SetActive(false)
    self.skill_slots:SetActive(false)
    ShowSkillChoose(self)
end

local function TransiRound(self, ss, battleText, func)
    if ss then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattleShowRound)
        UIManager:GetInstance():GetWindow(UIWindowNames.UIBattleShowRound).View:ShowTxt(battleText, func)
    else
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIBattleShowRound)
    end
end

local function PlayBossEfx(self, callBack)
    -- 加载boss登场
    if table.any(self.battle_component.IdUnits, function (v) return v.IsBoss == 1 end) then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIBossEffect)
        coroutine.start(function ()
            coroutine.waitforseconds(4)
            if callBack ~= nil then
                callBack()
            end
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIBossEffect)
        end)
    else
        if callBack ~= nil then callBack() end
    end
end

local function ShowSkillEfx(self, name)
    local skillPrefab = "UI/Prefabs/UI/Battle/BattleSkillName.prefab"
    coroutine.start(function ()
        for i = 1, self.skillContent.transform.childCount do
            self.skillContent.transform:GetChild(i - 1).gameObject:SetActive(false)
        end
        local efx = GameObjectPool:GetInstance():CoGetGameObjectAsync(skillPrefab)
        efx.transform:SetParent(self.skillContent.transform, false)
        local txt = efx.transform:Find("Text")
        LangUtil.BindText(txt).text = name
        efx.transform:DOLocalMoveY(9999, 0)
        txt.transform.gameObject:SetActive(false)
        efx.transform.gameObject:SetActive(false)
        coroutine.waitforframes(1)
        txt.transform.gameObject:SetActive(true)
        coroutine.waitforframes(1)
        efx.transform.gameObject:SetActive(true)
        coroutine.waitforframes(1)
        txt.transform.gameObject:SetActive(false)
        efx.transform.gameObject:SetActive(false)
        coroutine.waitforframes(1)
        txt.transform.gameObject:SetActive(true)
        coroutine.waitforframes(1)
        efx.transform.gameObject:SetActive(true)
        efx.transform:DOLocalMoveY(0, 0)
        coroutine.waitforseconds(3)
        GameObjectPool:GetInstance():RecycleGameObject(skillPrefab, efx)
    end)
end

local function ShowAwakenSkill(self, active)
    self.awakenPanel:SetActive(active)
    local skill = self.battle_component.CurActSkill
    if skill == nil then
        Logger.LogError("ShowAwakenSkill: self.battle_component.CurActSkill == nil")
        return
    end
    self.awakenContent.text = skill.Name
end

-- 隐藏战斗UI
local function HideBattleUIOnAwaken(self, actUnit)
    self.battleInfoPanel:SetActive(false)
    self.battleToolPanel:SetActive(false)
    if actUnit ~= nil then
        actUnit.__entity:GetComponent("SsUnitUIComponent"):SetHpBar(false)
    end
end

-- 显示战斗UI
local function ShowBattleUIOnAwaken(self)
    self.battleInfoPanel:SetActive(true)
    self.battleToolPanel:SetActive(true)
    table.walk(self.battle_component.IdUnits, function (k, v)
        v:GetComponent("SsUnitUIComponent"):SetHpBar(true)
    end)
end

local function Dispose(self)
    base.Dispose(self)
    local pp = UIManager:GetInstance():GetWindow(UIWindowNames.UISkillSkip)
    if pp ~= nil then
        UIManager:GetInstance():CloseWindow(UIWindowNames.UISkillSkip)
    end
end

BattleUIComponent.Awake = Awake
BattleUIComponent.SetSpeedText = SetSpeedText
BattleUIComponent.SetAutoText = SetAutoText
BattleUIComponent.SetAutoAwakenSkillBtn = SetAutoAwakenSkillBtn
BattleUIComponent.SetAutoSkillBtn = SetAutoSkillBtn
BattleUIComponent.SetBattleText = SetBattleText
BattleUIComponent.SetRoundText = SetRoundText
BattleUIComponent.LoadSkills = LoadSkills
BattleUIComponent.ClearSkills = ClearSkills
BattleUIComponent.TransiRound = TransiRound
BattleUIComponent.ChooseAtk=ChooseAtk
BattleUIComponent.ChooseSkill1=ChooseSkill1
BattleUIComponent.Dispose = Dispose
BattleUIComponent.ShowSkillEfx = ShowSkillEfx
BattleUIComponent.PlayBossEfx = PlayBossEfx
BattleUIComponent.ChooseEnemyUnit=ChooseEnemyUnit
BattleUIComponent.HideBattleUIOnAwaken = HideBattleUIOnAwaken
BattleUIComponent.ShowBattleUIOnAwaken = ShowBattleUIOnAwaken
BattleUIComponent.OnChooseSkill = OnChooseSkill
BattleUIComponent.OnUnitAct = OnUnitAct
BattleUIComponent.ShowAwakenSkill = ShowAwakenSkill

return BattleUIComponent