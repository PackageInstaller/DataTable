---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/16 20:30
---
local SsUnitMoveComponent = BaseClass("SsUnitMoveComponent",Component);
local base = Component

local Speed = DataClass("Speed", {
    Id = 0,
    Value = {},
    __init = function(self, id)
        self.Id = id or 0
    end
})

local function AddSpeed(self,spd)
    local speed = Speed.New()
    speed.Value = spd
    self.speeds[speed.Id] = speed
    return speed.Id
end

local function Awake(self)
    base.Awake(self)
    self.animator_component = self.__entity:GetComponent("SsUnitAnimatorComponent")
    self.speeds = {}
    self.has_dest = false
    self.dest = nil
    self.IsArrived = true
    self.main_speed = AddSpeed(self,Vector3.New())
end


local function GetSpeeds(self)
    local speed = Vector3.New()
    table.walk(self.speeds,function (k,v)
        speed:Add(v.Value)
    end)
    return speed
end

local function Update(self)
    xpcall(function ()
        --暂时忽略转向
        if self.IsArrived then return end
        if GetSpeeds(self) == Vector3.zero then return end
        local moveVector3 = GetSpeeds(self) * Time.deltaTime
        if self.has_dest then
            local dist = (self.dest - self.__entity:GetPosition()).magnitude
            if moveVector3.magnitude >= dist or dist < 0.1 then
                self.__entity:SetPosition(self.dest)
                self.IsArrived = true
                return
            end
        end
        self.__entity:SetPosition(self.__entity:GetPosition() + moveVector3)
    end, function (msg)
        Logger.LogError("SsUnitMoveComponent.Update"..msg)
    end)
end

local function GetMainSpeed(self)
    local speed = self.speeds[self.main_speed]
    if speed == nil then
        speed = Speed.New(self.main_speed)
        self.speeds[speed.Id] = speed
    end
    return speed.Value
end

local function SetMainSpeed(self,value)
    local speed = self.speeds[self.main_speed]
    if speed == nil then
        speed = Speed.New(self.main_speed)
        self.speeds[speed.Id] = speed
    end
    speed.Value = value
    self.animator_component:SetFloatValue("Speed",speed.Value.magnitude)
end

local function MoveToDest(self,dest,speedValue)
    if (dest - self.__entity:GetPosition()).magnitude < 0.1 then
        self.IsArrived = true
        return
    end
    self.IsArrived = false
    self.has_dest = true
    local speed = dest - self.__entity:GetPosition()
    speed = speed.normalized * speedValue
    SetMainSpeed(self,speed)
    self.dest = dest
end

local function CalcMoveToDestTime(self,dest,speedValue)
    return Vector3.Distance(self.__entity:GetPosition(),dest) / speedValue
end

local function MoveToDir(self,dir)
    self.IsArrived = false
    self.has_dest = false
    SetMainSpeed(self,dir)
end

local function GetSpeed(self,id)
    return self.speeds[id]
end

local function RemoveSpeed(self,id)
    local speed = self.speeds[id]
    if speed == nil then return end
    self.speeds[id] = nil
end

local function Stop(self)
    self.speeds = nil
    self.speeds = {}
    self.animator_component:SetFloatValue("Speed",0)
end

local function Dispose(self)
    base.Dispose(self)
    self.speeds = nil
    self.speeds = {}
end

SsUnitMoveComponent.Awake = Awake
SsUnitMoveComponent.Update = Update
SsUnitMoveComponent.MoveToDest = MoveToDest
SsUnitMoveComponent.CalcMoveToDestTime = CalcMoveToDestTime
SsUnitMoveComponent.MoveToDir = MoveToDir
SsUnitMoveComponent.AddSpeed = AddSpeed
SsUnitMoveComponent.Stop = Stop
SsUnitMoveComponent.Dispose = Dispose

return SsUnitMoveComponent