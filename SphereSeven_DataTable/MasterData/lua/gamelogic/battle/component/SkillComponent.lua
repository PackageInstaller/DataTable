---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/18 10:24
---
local SkillComponent = BaseClass("SkillComponent", Component)
local base = Component

if Skill == nil then
    Skill = import("..Skill.Skill")
    ActiveSkillBuff = import("..Skill.ActiveSkillBuff")
    ActiveSkillResult = import("..Skill.ActiveSkillResult")
    ActiveSkillDamage = import("..Skill.ActiveSkillDamage")
    
    ActiveSkillType = {
        GeneralAtk = 1,
        Skill1 = 2,
        Skill2 = 3,
        Awaken = 4
    }
end

if SkillImpl == nil then
    SkillImpl = import("..SkillLogic.Impl.SkillImpl")
end

local function CreateSkillFeixiao(self, skillId, skillName, srcUnit, zSkill, replaceParams, animEvt)
    local skillObj = Skill.New(skillId,skillName,srcUnit, 1, zSkill, replaceParams, animEvt)
    
    for _, effectId in ipairs(zSkill.EffectIds) do
        -- Logger.Log("generating effect " .. effectId)
        local effect = BattleEffectManager:GetInstance():GenerateEffect(effectId, skillObj)
        if effect ~= nil then
            table.insert(skillObj.EventActions[TriggerEvent.OnUseActiveSkill], function (skill, targetUnit, result)
                    return effect:RunBase(skill, targetUnit, result)
                end
            )
        end
    end

    for _, triggerId in ipairs(zSkill.TriggerIds) do
        local trigger = BattleTriggerManager:GetInstance():GenerateTrigger(triggerId, skillObj)
        if trigger ~= nil then
            table.insert(skillObj.Triggers, trigger)
        end
    end

    return skillObj
end

--创建技能
local function CreateSkill(self, skillModule, skillId, skillName, srcUnit, zSkill, replaceParams, animEvt)
    local skillCls = Skill
    local skillObj = nil
    if skillModule == "Skill" then
        if zSkill.Script == 0 then
            skillObj = CreateSkillFeixiao(self,skillId,skillName,srcUnit,zSkill, replaceParams, animEvt)
            skillObj.__ssc = self
        else
            skillCls = require("GameLogic.Battle.Skill.Skill.Skill_"..zSkill.Script)
        end
    else
        if skillModule ~= nil then
            skillCls = require("GameLogic.Battle.Skill."..skillModule.."."..skillModule.."_"..skillId)
        end
    end

    if skillCls ~= nil and skillObj == nil then
        skillObj = skillCls.New(skillId,skillName,srcUnit,1,zSkill, replaceParams, animEvt)
        skillObj.__ssc = self
    end

    if skillObj == nil then
        Logger.LogError("CreateSkill failed, skillId: "..skillId)
        return
    end

    table.insert(self.skills, skillObj)
    if skillModule == "Skill" then
        skillObj.Params = table.clone(zSkill.Params)
    end

    return skillObj
end

--主动技能
local function CreateActiveSkill(self,zSkill,srcUnit,zSkillEfx,animEvt)
    local skill = CreateSkill(self,"Skill",zSkill.Id,LangUtil.GetConfLang(zSkill,"Name"),srcUnit,table.clone(zSkill), nil, table.clone(animEvt))
    self.ActiveSkills[zSkill.Id] = skill
    skill.IsActiveSkill = true
    table.merge(skill.ZSkill,zSkillEfx)

    
    -- 常规情况
    -- if zSkill.IsMissile == 1 then --是否弹道
    -- else
    -- end

    if skill.MultistageNum == nil or skill.MultistageNum <= 1 then
        skill.MultistageNum = 0
        if not IsEmptyNumberArray(animEvt.OnMissile) then
            skill.MultistageNum = skill.MultistageNum + #animEvt.OnMissile
        end
        if not IsEmptyNumberArray(animEvt.OnDamage) then
            skill.MultistageNum = skill.MultistageNum + #animEvt.OnDamage
        end
    end

    -- 特殊攻击帧
    if animEvt.OnFrame ~= nil and #animEvt.OnFrame > 0 and not IsEmptyNumberArray(animEvt.OnFrame) then
        skill.MultistageNum = table.count(table.choose(animEvt.OnFrame, function (k, v) return v == 0 end))
    end
    
    if skill.MultistageNum <= 0 then
        skill.MultistageNum = 1
    end

    return skill
end

--初始技能
local function InitCardSkill(self, battleUnitComponent)
    local zSkillEfx = {}
    local animEvt = self.__entity.ZSsUnit.animEvt
    if animEvt.Atk~=nil and animEvt.Atk.SkillEfxId~=0 then
        zSkillEfx[animEvt.Atk.Name]=Z_SkillEfx:GetConfig(animEvt.Atk.SkillEfxId)
    end
    if animEvt.Skl01~=nil and animEvt.Skl01.SkillEfxId~=0 then
        zSkillEfx[animEvt.Skl01.Name]=Z_SkillEfx:GetConfig(animEvt.Skl01.SkillEfxId)
    end
    if animEvt.Skl02~=nil and animEvt.Skl02.SkillEfxId~=0 then
        zSkillEfx[animEvt.Skl02.Name]=Z_SkillEfx:GetConfig(animEvt.Skl02.SkillEfxId)
    end

    local skills = battleUnitComponent.Skills
    if skills.Attack ~= 0 then
        local zSkill = Z_Skill[skills.Attack]
        local skill = CreateActiveSkill(self,zSkill,self.__entity,zSkillEfx.Atk,animEvt.Atk)
        if skill ~= nil then
            self.GeneralAtkId = zSkill.Id
        end
    end

    
    if skills.Skill ~= 0 then
        local zSkill = Z_Skill[skills.Skill]
        local skill = CreateActiveSkill(self,zSkill,self.__entity,zSkillEfx.Skl01,animEvt.Skl01)
        if skill ~= nil then
            self.Skill1Id = zSkill.Id
        end
    end

    if skills.Ultimate ~= 0 and animEvt.Skl02 ~= nil then
        local zSkill = Z_Skill[skills.Ultimate]
        local skill = CreateActiveSkill(self,zSkill,self.__entity,zSkillEfx.Skl02,animEvt.Skl02)
        if skill ~= nil then
            self.Skill2Id = zSkill.Id
        end
    end

    if skills.PassiveSkill ~= 0 then
        local zSkill = Z_Skill[skills.PassiveSkill]
        self.passive_skill = CreateSkill(self,"Skill",zSkill.Id,LangUtil.GetConfLang(zSkill,"Name"),self.__entity,zSkill)
    end

    if battleUnitComponent.IsMonster then
        return
    end

    local skillAtk = self.ActiveSkills[self.GeneralAtkId]
    local skillSkill = self.ActiveSkills[self.Skill1Id]
    local skillUltimate = self.ActiveSkills[self.Skill2Id]
    local skillPassive = self.passive_skill

    local star = battleUnitComponent.Star
    local starInfoList = Z_CharacterEvolution[battleUnitComponent.TemplateId]

    for i = 1, star do
        local starInfo = starInfoList[i]
        if #starInfo.EnhanceAttack ~= 0 then
            for j = 1, #skillAtk.Params do
                skillAtk.Params[j] = skillAtk.Params[j] + starInfo.EnhanceAttack[j]
            end
        end
        if #starInfo.EnhanceSkill ~= 0 then
            for j = 1, #skillSkill.Params do
                skillSkill.Params[j] = skillSkill.Params[j] + starInfo.EnhanceSkill[j]
            end
        end
        if #starInfo.EnhanceUltimate ~= 0 then
            for j = 1, #skillUltimate.Params do
                skillUltimate.Params[j] = skillUltimate.Params[j] + starInfo.EnhanceUltimate[j]
            end
        end

        if skillPassive ~= nil then
            if #starInfo.EnhancePassiveSkill ~= 0 then
                for j = 1, #skillPassive.Params do
                    skillPassive.Params[j] = skillPassive.Params[j] + starInfo.EnhancePassiveSkill[j]
                end
            end
        end
    end

    local constellation = battleUnitComponent.Constellation
    local constellationInfoList = Z_CharacterConstellation[battleUnitComponent.TemplateId]

    for i = 1, constellation do
        local constellationInfo = constellationInfoList[i]
        if #constellationInfo.EnhanceAttack ~= 0 then
            for j = 1, #skillAtk.Params do
                skillAtk.Params[j] = skillAtk.Params[j] + constellationInfo.EnhanceAttack[j]
            end
        end
        if #constellationInfo.EnhanceSkill ~= 0 then
            for j = 1, #skillSkill.Params do
                skillSkill.Params[j] = skillSkill.Params[j] + constellationInfo.EnhanceSkill[j]
            end
        end
        if #constellationInfo.EnhanceUltimate ~= 0 then
            for j = 1, #skillUltimate.Params do
                skillUltimate.Params[j] = skillUltimate.Params[j] + constellationInfo.EnhanceUltimate[j]
            end
        end

        if skillPassive ~= nil then
            if #constellationInfo.EnhancePassiveSkill ~= 0 then
                for j = 1, #skillPassive.Params do
                    skillPassive.Params[j] = skillPassive.Params[j] + constellationInfo.EnhancePassiveSkill[j]
                end
            end
        end
    end

    local bead = battleUnitComponent.Bead
    local beadInfoList = Z_CharacterBead[battleUnitComponent.TemplateId]

    for i = 1, bead do
        local beadInfo = beadInfoList[i]
        if #beadInfo.EnhanceAttack ~= 0 then
            for j = 1, #skillAtk.Params do
                skillAtk.Params[j] = skillAtk.Params[j] + beadInfo.EnhanceAttack[j]
            end
        end
        if #beadInfo.EnhanceSkill ~= 0 then
            for j = 1, #skillSkill.Params do
                skillSkill.Params[j] = skillSkill.Params[j] + beadInfo.EnhanceSkill[j]
            end
        end
        if #beadInfo.EnhanceUltimate ~= 0 then
            for j = 1, #skillUltimate.Params do
                skillUltimate.Params[j] = skillUltimate.Params[j] + beadInfo.EnhanceUltimate[j]
            end
        end
        
        if skillPassive ~= nil then
            if #beadInfo.EnhancePassiveSkill ~= 0 then
                for j = 1, #skillPassive.Params do
                    skillPassive.Params[j] = skillPassive.Params[j] + beadInfo.EnhancePassiveSkill[j]
                end
            end
        end
    end

    if skillAtk ~= nil then
        skillAtk:onParamsInited()
    end


    if skillSkill ~= nil then
        skillSkill:onParamsInited()
    end

    if skillUltimate ~= nil then
        skillUltimate:onParamsInited()
    end

    if skillPassive ~= nil then
        skillPassive:onParamsInited()
    end
end

local function AddSkillConfScript(zConf,skill)
    if not string.IsNullOrEmpty(zConf.OnPanelAttrEnabled) then
        skill.OnPanelAttrEnabled = function(self)
            Skill.OnPanelAttrEnabled(self)
            assert(load([[return function(self)
            local nc = self.__snc
            local cc = self.__scc 
            if nc == nil or cc == nil then
                return
            end
            ]]
            ..zConf.OnPanelAttrEnabled..
            [[ end]]))()(self)
        end
    end
    if not string.IsNullOrEmpty(zConf.OnPanelAttrDisabled) then
        skill.OnPanelAttrDisabled = function(self)
            Skill.OnPanelAttrDisabled(self)
            assert(load([[return function(self)
            local nc = self.__snc
            local cc = self.__scc 
            if nc == nil or cc == nil then
                return
            end
            ]]
            ..zConf.OnPanelAttrDisabled..
            [[ end]]))()(self)
        end
    end
    if not string.IsNullOrEmpty(zConf.OnBattleStart) then
        skill.OnBattleStart = function(self)
            Skill.OnBattleStart(self)
            assert(load([[return function(self)
            local nc = self.__snc
            local cc = self.__scc
            local sc = self.__ssc
            local ubc = self.__subc
            if nc == nil or cc == nil or sc == nil or ubc == nil then
                return
            end
            ]]
            ..zConf.OnBattleStart..
            [[ end]]))()(self)
        end
    end
end

-- 初始化装备技能
local function CreateEquipSkill(self, equipment)
    local zEquip = Z_Equip[equipment.Id]
    local ZEquipLevelUp = Z_EquipLevelUp[equipment.Id][equipment.Level]

    if ZEquipLevelUp.EffectType > 0 then
        local skill = CreateSkill(self, "Equip", ZEquipLevelUp.EffectType, LangUtil.GetConfLang(zEquip,"Name"), self.__entity, nil, ZEquipLevelUp.EffectParams)
        -- skill.Params = ZEquipLevelUp.EffectParams
        -- skill:OnPanelAttrEnabled()
        self.EquipSkills[skill.SkillId] = skill
        skill:onParamsInited();
    end
    -- AddSkillConfScript(zEquip, skill)
end

-- 初始化装备技能
local function InitCardEquipSkill(self, battleUnitComponent)
    for _, equipment in pairs(battleUnitComponent.Equipments) do
        CreateEquipSkill(self, equipment)
    end
end

-- 初始化战魂技能
local function CreateFightSoulSkill(self,fightSoul)
    if fightSoul.Id == nil or fightSoul.Id == 0 then
        return
    end
    local zFightSoul = Z_FightSoul[fightSoul.Id]
    local zFightSoulMerge = Z_FightSoulMerge[fightSoul.Id][fightSoul.MergeLevel]
    local skill = CreateSkill(self, "FightSoul", fightSoul.Id, LangUtil.GetConfLang(zFightSoul,"Name"), self.__entity, nil, zFightSoulMerge.EffectParams)
    -- AddSkillConfScript(zFightSoul,skill)
    -- skill.Params = zFightSoulMerge.EffectParams
    self.FightSoulSkills[skill.SkillId]=skill
    -- skill:OnPanelAttrEnabled()
    skill:onParamsInited();
end

-- 初始化战魂技能
local function InitCardFightSoulSkill(self, battleUnitComponent)    
    if battleUnitComponent.FightSoul == nil then
        return
    end
    CreateFightSoulSkill(self, battleUnitComponent.FightSoul)
end

local function Awake(self, initSkills) -- UI只需要玉珠有用
    base.Awake(self)
    self.skills = {}
    self.ActiveSkills = {}
    self.FightSoulSkills={}
    self.EquipSkills={}
    self.GeneralAtkId = nil
    self.Skill1Id = nil
    self.Skill2Id = nil

    local battleUnitComponent = self.__entity:GetComponent("BattleUnitComponent")

    if initSkills ~= nil then
        if table.contains(initSkills, "Card") then
            InitCardSkill(self,battleUnitComponent)
        end
        -- if table.contains(initSkills, "CardEquip") then
        --     InitCardEquipSkill(self,card)
        -- end
        -- if table.contains(initSkills, "CardFightSoul") then
        --     InitCardFightSoulSkill(self,card)
        -- end
        -- if table.contains(initSkills, "JadePearl") then
        --     InitCardJadePearlSkill(self,card)
        -- end
        -- if table.contains(initSkills, "Constel") then
        --     InitCardConstelSkill(self,card)
        -- end
    else
        InitCardSkill(self,battleUnitComponent)
        -- InitFightSoulSkill(self, battleUnitComp)
        InitCardEquipSkill(self, battleUnitComponent)
        InitCardFightSoulSkill(self, battleUnitComponent)
    end
end

-- skillId为空时，返回普攻
local function GetActiveSkill(self,skillId)
    if skillId == nil then skillId = self.GeneralAtkId end
    local skill = self.ActiveSkills[skillId]
    return skill
end

-- 回复技能冷却
local function ResetCooldownTurn(self)
    for k,v in pairs(self.skills) do
        v:SetCooldownTurn(0)
    end
    self.__entity:GetComponent("SsUnitBattleComponent"):GenHUDText(LangUtil.GetSysLang(22), HUDTextType.Blue, HUDTextType.Tip)
end

-- 获取随机个数的主动技能
local function RandomActiveSkills(self, num)
    return table.randtake(table.values(self.ActiveSkills), num)
end

-- 战斗开始
local function OnBattleStart(self)
    table.walk(self.skills,function (k,v)
        v:OnBattleStart()
    end)
end

-- 批次开始
local function OnBatchStart(self)
    table.walk(self.skills,function (k,v)
        v:OnBatchStart()
    end)
end

-- 回合开始
local function OnRoundStart(self)
    table.walk(self.skills,function (k,v)
        v:OnRoundStart()
    end)
end

local function OnUnitSelfTurnStart(self)
    table.walk(self.skills,function (k,v)
        v:OnUnitSelfTurnStart()
    end)
end

-- 单位回合开始
local function OnUnitTurnStartEvent(self, unit)
    table.walk(self.skills,function (k,v)
        v:OnUnitTurnStartEvent(unit)
    end)
end

-- 行动开始
local function OnActStart(self)
    table.walk(self.skills,function (k,v)
        v:OnActStart()
    end)
end

local function OnActStartEvent(self, unit)
    table.walk(self.skills,function (k,v)
        v:OnActStartEvent(unit)
    end)
end

local function BeforeSkillEffect(self, targetUnit)
    self.__entity:GetComponent("SsUnitBattleComponent"):InitTempNumeric()
    table.walk(self.skills,function (k,v)
        v:BeforeSkillEffect(targetUnit)
    end)
    self.__entity:GetComponent("SsUnitBattleComponent"):EnableTempNumeric()
end

local function AfterSkillEffect(self, targetUnit)
    table.walk(self.skills,function (k,v)
        v:AfterSkillEffect(targetUnit)
    end)
    self.__entity:GetComponent("SsUnitBattleComponent"):DisableTempNumeric()
end

-- 攻击前
local function BeforeHit(self,activeSkillResult, targetUnit)
    table.walk(self.skills,function (k,v)
        v:BeforeHit(activeSkillResult, targetUnit)
    end)
end

local function BeforeBeHit(self, activeSkillResult, atkUnit)
    table.walk(self.skills, function (k, v)
        v:BeforeBeHit(activeSkillResult, atkUnit)
    end)
end

local function BeforeHitEvent(self, activeSkillResult, atkUnit, targetUnit)
    table.walk(self.skills,function (k,v)
        v:BeforeHitEvent(activeSkillResult, atkUnit, targetUnit)
    end)
end

-- 计算伤害前
local function OnHit(self,activeSkillResult, targetUnit)
    table.walk(self.skills,function (k,v)
        v:OnHit(activeSkillResult, targetUnit)
    end)
end

-- 计算伤害前
local function OnCri(self, targetUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:OnCri(targetUnit, activeSkillResult)
    end)
end

---- 计算伤害后，受攻击
local function AfterDamage(self, activeSkillResult, hurtUnit)
   table.walk(self.skills,function (k,v)
       v:AfterDamage(activeSkillResult, hurtUnit)
   end)
end

-- 计算伤害后
local function AfterHurt(self, activeSkillResult, atkUnit)
    table.walk(self.skills,function (k,v)
        v:AfterHurt(activeSkillResult, atkUnit)
    end)
end

-- OnActEnd => AfterAllHurt
local function AfterAllHurt(self, atkUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:AfterAllHurt(atkUnit, activeSkillResult)
    end)
end

-- OnActEnd => AfterAllHurtByPry
local function AfterAllHurtByPry(self, atkUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:AfterAllHurtByPry(atkUnit, activeSkillResult)
    end)
end

--- 造成任意伤害之后
local function AfterDealDamage(self, damageData, reduceHp, hurtUnit)
    table.walk(self.skills,function (k,v)
        v:AfterDealDamage(damageData, reduceHp, hurtUnit)
    end)
end

--- 被技能攻击且结算之后
local function AfterBeHitAll(self, atkUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:AfterBeHitAll(atkUnit, activeSkillResult)
    end)
end


--- 技能结算之后
local function AfterOneTargetAllHit(self, targetUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:AfterOneTargetAllHit(targetUnit, activeSkillResult)
    end)
end

local function OnAtkEnd(self)
    table.walk(self.skills,function (k,v)
        v:OnAtkEnd()
    end)
end

---当有单位攻击结束时
local function OnAtkEndEvent(self, atkUnit)
    table.walk(self.skills,function (k,v)
        v:OnAtkEndEvent(atkUnit)
    end)
end

local function OnActEnd(self)
    table.walk(self.skills,function (k,v)
        v:OnActEnd()
    end)
end

local function OnActEndEvent(self, unit)
    table.walk(self.skills,function (k,v)
        v:OnActEndEvent(unit)
    end)
end

local function OnUnitSelfTurnEnd(self)
    table.walk(self.skills,function (k,v)
        v:OnUnitSelfTurnEnd()
    end)
end

local function OnUnitTurnEndEvent(self, unit)
    table.walk(self.skills,function (k,v)
        v:OnUnitTurnEndEvent(unit)
    end)
end

local function OnRoundEnd(self)
    table.walk(self.skills,function (k,v)
        v:OnRoundEnd()
    end)
end

-- 计算伤害前
local function OnPrySuccess(self, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:OnPrySuccess(activeSkillResult)
    end)
end

-- HP实时
local function OnHpChange(self)
    table.walk(self.skills,function (k,v)
        v:OnHpChange()
    end)
end

local function BeforeHpReduceEvent(self, unit, reduceHpData)
    table.walk(self.skills,function (k,v)
        v:BeforeHpReduceEvent(unit, reduceHpData)
    end)
end

local function OnReduceHpEvent(self, unit, reduceHpData)
    table.walk(self.skills,function (k,v)
        v:OnReduceHpEvent(unit, reduceHpData)
    end)
end

local function OnHeal(self)
    table.walk(self.skills,function (k,v)
        v:OnHeal()
    end)
end

local function OnHealEvent(self, unit, hp)
    table.walk(self.skills,function (k,v)
        v:OnHealEvent(unit, hp)
    end)
end

-- NP实时
local function OnNpChange(self)
    table.walk(self.skills,function (k,v)
        v:OnNpChange()
    end)
end

-- UnitActEnd => OnKillEnemy
local function OnKillEnemy(self, deadUnits)
    table.walk(self.skills,function (k,v)
        v:OnKillEnemy(deadUnits)
    end)
end

-- OnActEnd => OnUseAwaken
local function OnUseAwaken(self)
    table.walk(self.skills,function (k,v)
        v:OnUseAwaken()
    end)
end

-- 被动技能生效
local function OnPassiveSkillEnabled(self)
    if self.passive_skill ~= nil then
        self.passive_skill:OnPassiveSkillEnabled()
    end
end

local function OnPassiveSkill2EnemyEnabled(self, entity)
    if self.passive_skill ~= nil then
        self.passive_skill:OnPassiveSkill2EnemyEnabled(entity)
    end
end

-- 被动技能失效
local function OnPassiveSkillDisabled(self)
    if self.passive_skill ~= nil then
        self.passive_skill:OnPassiveSkillDisabled()
    end
end

-- 死亡动画播完后
local function AfterDeadAnim(self)
    table.walk(self.skills,function (k,v)
        v:AfterDeadAnim()
    end)
end

-- 角色死亡
local function OnDead(self)
    self:OnPassiveSkillDisabled()
    table.walk(self.skills,function (k,v)
        v:OnDead()
    end)
end

-- 角色复活
local function OnRevive(self)
    self:OnPassiveSkillEnabled()
    -- 受敌人被动效果
    local enemies = Game.Scene:GetComponent("BattleComponent"):GetGroupUnits(self.__entity:GetComponent("SsUnitMatrixComponent"):GetEnemyMatrixGroup())
    table.walk(enemies, function (k, v)
        if not v:GetComponent("CharacterComponent").IsDead then
            v:GetComponent("SkillComponent"):OnPassiveSkill2EnemyEnabled(self.__entity)
        end
    end)
    table.walk(self.skills,function (k,v)
        v:OnRevive()
    end)
end

local function OnDeadEvent(self, unit)
    table.walk(self.skills,function (k,v)
        v:OnDeadEvent(unit)
    end)
end

-- 队友被打死
local function OnFriendDead(self)
    table.walk(self.skills,function (k,v)
        v:OnFriendDead()
    end)
end

-- 队友复活
local function OnFriendRevive(self)
    table.walk(self.skills,function (k,v)
        v:OnFriendRevive()
    end)
end

-- 受到持续性debuff
local function OnContinueDebuff(self)
    table.walk(self.skills,function (k,v)
        v:OnContinueDebuff()
    end)
end

local function OnBuffCalcEvent(self, unit, buff)
    table.walk(self.skills,function (k,v)
        v:OnBuffCalcEvent(unit, buff)
    end)
end

local function OnBuffAdd(self, buff)
    table.walk(self.skills,function (k,v)
        v:OnBuffAdd(buff)
    end)
end

local function OnBuffRemove(self, buff)
    table.walk(self.skills,function (k,v)
        v:OnBuffRemove(buff)
    end)
end

local function OnBuffAddEvent(self, buff)
    table.walk(self.skills,function (k,v)
        v:OnBuffAddEvent(buff)
    end)
end

local function OnBuffRemoveEvent(self, buff)
    table.walk(self.skills,function (k,v)
        v:OnBuffRemoveEvent(buff)
    end)
end

local function OnBuffMultiply(self, buff, val, data)
    table.walk(self.skills, function (k, v)
        v:OnBuffMultiply(buff, val, data)
    end)
end

local function OnDamageEvent(self, atkUnit, hurtUnit, activeSkillResult)
    table.walk(self.skills,function (k,v)
        v:OnDamageEvent(atkUnit, hurtUnit, activeSkillResult)
    end)
end

local function Dispose(self)
    base.Dispose(self)
    table.walk(self.skills,function (k,v)
        v:Dispose()
    end)
    self.skills = {}
    self.ActiveSkills = {}
    self.FightSoulSkills={}
    self.EquipSkills={}
    self.passive_skill = nil
end

SkillComponent.Awake = Awake

SkillComponent.GetActiveSkill = GetActiveSkill

SkillComponent.CreateEquipSkill = CreateEquipSkill
SkillComponent.CreateFightSoulSkill = CreateFightSoulSkill
SkillComponent.RandomActiveSkills = RandomActiveSkills

SkillComponent.OnBattleStart = OnBattleStart
SkillComponent.OnBatchStart = OnBatchStart
SkillComponent.OnActStart = OnActStart
SkillComponent.OnActStartEvent = OnActStartEvent
SkillComponent.BeforeSkillEffect = BeforeSkillEffect
SkillComponent.AfterSkillEffect = AfterSkillEffect
SkillComponent.BeforeHit = BeforeHit
SkillComponent.BeforeBeHit = BeforeBeHit
SkillComponent.BeforeHitEvent = BeforeHitEvent
SkillComponent.OnHit = OnHit
SkillComponent.OnCri = OnCri
SkillComponent.AfterDamage = AfterDamage
SkillComponent.AfterHurt = AfterHurt
SkillComponent.AfterAllHurt = AfterAllHurt
SkillComponent.AfterAllHurtByPry = AfterAllHurtByPry
SkillComponent.AfterDealDamage = AfterDealDamage
SkillComponent.AfterBeHitAll = AfterBeHitAll
SkillComponent.AfterOneTargetAllHit = AfterOneTargetAllHit
SkillComponent.OnAtkEnd = OnAtkEnd
SkillComponent.OnAtkEndEvent = OnAtkEndEvent
SkillComponent.OnActEnd = OnActEnd
SkillComponent.OnActEndEvent = OnActEndEvent
SkillComponent.OnUnitSelfTurnStart = OnUnitSelfTurnStart
SkillComponent.OnUnitTurnStartEvent = OnUnitTurnStartEvent
SkillComponent.OnUnitSelfTurnEnd = OnUnitSelfTurnEnd
SkillComponent.OnUnitTurnEndEvent = OnUnitTurnEndEvent
SkillComponent.OnRoundStart = OnRoundStart
SkillComponent.OnRoundEnd = OnRoundEnd
SkillComponent.OnPrySuccess = OnPrySuccess
SkillComponent.OnHpChange = OnHpChange
SkillComponent.BeforeHpReduceEvent = BeforeHpReduceEvent
SkillComponent.OnReduceHpEvent = OnReduceHpEvent
SkillComponent.OnHeal = OnHeal
SkillComponent.OnHealEvent = OnHealEvent
SkillComponent.OnNpChange = OnNpChange
SkillComponent.OnKillEnemy = OnKillEnemy
SkillComponent.OnUseAwaken = OnUseAwaken
SkillComponent.ResetCooldownTurn = ResetCooldownTurn
SkillComponent.OnPassiveSkillDisabled = OnPassiveSkillDisabled
SkillComponent.OnPassiveSkillEnabled = OnPassiveSkillEnabled
SkillComponent.OnPassiveSkill2EnemyEnabled = OnPassiveSkill2EnemyEnabled
SkillComponent.OnDead = OnDead
SkillComponent.OnRevive = OnRevive
SkillComponent.OnDeadEvent = OnDeadEvent
SkillComponent.OnFriendDead = OnFriendDead
SkillComponent.OnFriendRevive = OnFriendRevive
SkillComponent.AfterDeadAnim = AfterDeadAnim
SkillComponent.OnContinueDebuff = OnContinueDebuff
SkillComponent.OnBuffCalcEvent = OnBuffCalcEvent
SkillComponent.OnBuffAdd = OnBuffAdd
SkillComponent.OnBuffRemove = OnBuffRemove
SkillComponent.OnBuffAddEvent = OnBuffAddEvent
SkillComponent.OnBuffRemoveEvent = OnBuffRemoveEvent
SkillComponent.OnBuffMultiply = OnBuffMultiply
SkillComponent.OnDamageEvent = OnDamageEvent
SkillComponent.Dispose = Dispose

return SkillComponent