---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/22 13:35
---
local SsUnitUIComponent = BaseClass("SsUnitUIComponent", Component)
local base = Component

local speedRaceLen = nil
local speedRaceSmooth = 35

local deadAvatarColor = Color.New(1,1,1,0.5)
local norAvatarColor = Color.New(1,1,1,1)
local function OnClickAvatar(self)
    local component = self.battle_component
    if component.fsm.curState.stateName == BattleState.WaitChooseTarget then
        if component.AutoBattleValue ~= 0 then
            component:AutoAI()
            return
        end
        if not component.CurActUnit.IsPlayer then return end
        local colliderUnit = table.first(component.IdUnits,function(v) return v:GetComponent("SsUnitUIComponent").avatar == self.avatar  end)
        if colliderUnit == nil then return end
        local colliderUnitId
        for k,v in pairs(component.IdUnits) do
            if v == colliderUnit then colliderUnitId = k break end
        end
        local colliderUnitCharacter = colliderUnit:GetComponent("CharacterComponent")
        if colliderUnitCharacter.IsDead then return end
        local zSkill = component.CurActSkill.ZSkill
        if zSkill~= nil then
            local isValid = component:CheckCurrentSkillToUnit(colliderUnit,zSkill)
            if isValid then
                component:DoSkill(colliderUnit)
            else

            end
        end
    end
end
local effectPath = "UI/Effects/Energy.prefab"
local effectBoomPath = "UI/Effects/Charging.prefab"
local canvas_trans = GameObject.Find("UIRoot/UIEffect").transform
local ui_camera = CS.UnityEngine.GameObject.Find("UICamera"):GetComponent("Camera");

local function BossHpBar(self)
end

local function SetHpBarPosition(self)
    local followTargetComponent = self.hp_bar_go:AddComponent(typeof(CS.UnityEngine.UI.Extension.UGUIFollowTarget))
    followTargetComponent.visibleContent = self.hp_bar_go
    followTargetComponent.gameCamera = self.battle_camera_component.center_far_camera
    followTargetComponent.uiCamera = self.battle_camera_component.InfoUICamera
    followTargetComponent.target = self.__entity.GameObject.transform
    local changeNormorize = (CS.UnityEngine.Screen.width / CS.UnityEngine.Screen.height) * (1080/1920)
    followTargetComponent.offset = Vector3.New(0, 300 * changeNormorize, 0)
    local hp_bar_tf = self.hp_bar_go:GetComponent(typeof(Transform))
    hp_bar_tf:SetParent(self.battleUIComponent.HpBarRoot.transform)
    hp_bar_tf.localScale = Vector3.one
end

local function Awake(self)
    base.Awake(self)
    local battleUIComponent = Game.Scene:GetComponent("BattleUIComponent")

    self.IsDispose=false
    self.battle_component = Game.Scene:GetComponent("BattleComponent")
    self.battle_camera_component = Game.Scene:GetComponent("BattleCameraComponent")
    self.numeric_component = self.__entity:GetComponent("NumericComponent")
    self.character_component = self.__entity:GetComponent("CharacterComponent")
    self.ssUnitBattleComponent = self.__entity:GetComponent("SsUnitBattleComponent")
    self.battleUIComponent = Game.Scene:GetComponent("BattleUIComponent")
    self.hud_text_root = battleUIComponent.BattleUIRoot.transform:Find("HUDTextCanvas")
    self.hudList = {}
    self.hudQueue = Queue.New()
    --self.dmgQueue = Queue.New()

    self.energyEffects = {}

    local zCard = self.__entity.ZCard
    local battleCharacter = self.__entity.BattleCharacter

    self.buffRoot = nil
    
    if not self.__entity.IsPlayer then
        ---敌人头像和血条
        if self.__entity.IsBoss == 1 then--boss血条 等UI换了在改
            local enemyStatusBarsGo = battleUIComponent.EnemyStatusBarsGo
            self.enemy_status_bar_go = GameObjectPool:GetInstance():CoGetGameObjectAsync(PathUtil.Path_UIBattleCommonPrefab.."EnemyStatusBar.prefab")
            self.enemy_status_bar_go.transform:SetParent(enemyStatusBarsGo.transform,false)
            local enemyStatusBarGoRC = self.enemy_status_bar_go:GetComponent(typeof(ReferenceCollector))
            self.buffRoot = enemyStatusBarGoRC:GetObject("Buffs")
            self.avatar = enemyStatusBarGoRC:GetObject("Avatar"):GetComponent(typeof(UE_UI.Image))
            -- EventTriggerListener.Get(self.enemy_status_bar_go.transform.gameObject).onLuaClick = function(go) OnClickAvatar(self) end
            self.avatar.sprite = AtlasManager:GetInstance():CoLoadImageAsync(PathUtil.Path_UIAtlasCardLittle..battleCharacter.FigureAssetConfig.CardAvatar..".png")
            self.avatar.color = Color.New(1,1,1,1)
            self.hp_bar = enemyStatusBarGoRC:GetObject("Fill"):GetComponent(typeof(UE_UI.Image))
            self.hp_bar.fillAmount = 1
            local prop = enemyStatusBarGoRC:GetObject("Prop")
            UIUtil.SetSprite(prop:GetComponent("Image"),AtlasConfig.Battle,UIPublic.SubPropConfig[battleCharacter.Prop],true)
            self.hp_value = LangUtil.BindText(enemyStatusBarGoRC:GetObject("HpValue"), FontType.All_Number)
            self.hp_value.text = math.modf(self.numeric_component:Get(NumericType.MaxHp))
        else--小怪血条
            self.hp_bar_go = GameObjectPool:GetInstance():CoGetGameObjectAsync(PathUtil.Path_UIBattleCommonPrefab.."MonsterHpBar.prefab")
            SetHpBarPosition(self)

            self.capsule = self.__entity.GameObject:GetComponent(typeof(CS.UnityEngine.CapsuleCollider))
            local hp_bar_rc = self.hp_bar_go:GetComponent(typeof(ReferenceCollector))
            self.buffRoot = hp_bar_rc:GetObject("Buffs")
            self.hp_bar = hp_bar_rc:GetObject("Fill"):GetComponent(typeof(UE_UI.Image))
            self.hp_bar.fillAmount = 1
            local prop = hp_bar_rc:GetObject("Prop")
            UIUtil.SetSprite(prop:GetComponent("Image"),AtlasConfig.Battle,UIPublic.SubPropConfig[battleCharacter.Prop],true)
        end
    else
        ---新血条
        self.hp_bar_go = GameObjectPool:GetInstance():CoGetGameObjectAsync(PathUtil.Path_UIBattleCommonPrefab.."PlayerHpBar.prefab")
        SetHpBarPosition(self)

        self.capsule = self.__entity.GameObject:GetComponent(typeof(CS.UnityEngine.CapsuleCollider))
        local hp_bar_rc = self.hp_bar_go:GetComponent(typeof(ReferenceCollector))
        self.buffRoot = hp_bar_rc:GetObject("Buffs")
        self.hp_bar_new = hp_bar_rc:GetObject("Fill"):GetComponent(typeof(UE_UI.Image))
        self.hp_bar_new.fillAmount = 1
        local prop = hp_bar_rc:GetObject("Prop")

        UIUtil.SetSprite(prop:GetComponent("Image"),AtlasConfig.Battle,UIPublic.SubPropConfig[battleCharacter.Prop],true)
    end

    -- 竞速条头像    
    self.sr_avatars_go = battleUIComponent.SrAvatarsGo
    self.sr_avatar_sprite = AtlasManager:GetInstance():CoLoadImageAsync(PathUtil.Path_UIAtlasCardLittle..battleCharacter.FigureAssetConfig.CardAvatar..".png")

    self.sr_avatar = nil
    self.sr_avatar_x = 0
    
    -- buff图标
    for i = 1, self.buffRoot.transform.childCount do
        self.buffRoot.transform:GetChild(i - 1).gameObject:SetActive(false)
    end

    self.numeric_component:AddListener(function (type) self:OnNumericChange(type) end)
end

local function OnNumericChange(self, type)
    if type == NumericType.MaxHp or type == NumericType.Hp then
        self:UpdateHpBar()
    end
end

-- 创建竞速的头像
local function BuildSrAvatar(self)
    local srAvatarGo = GameObjectPool:GetInstance():CoGetGameObjectAsync(PathUtil.Path_UIBattleCommonPrefab.."SrAvatar.prefab")
    local transform = srAvatarGo.transform
    transform:SetParent(self.sr_avatars_go.transform,false)

    speedRaceLen = self.sr_avatars_go:GetComponent("RectTransform").rect.width

    self.sr_gameObject = srAvatarGo
    self.sr_avatar = transform:Find("bg/Mask/avatar"):GetComponent("Image")
    self.sr_avatar.sprite = self.sr_avatar_sprite
    -- self.sr_bg = transform:Find("bg"):GetComponent("Image")
    -- self.sr_flash = transform:Find("flash"):GetComponent("Image")
    -- local sr_boss_lab = transform:Find("bossLab"):GetComponent("Image")
    -- local sr_general_lab = transform:Find("generalLab"):GetComponent("Image")
    -- sr_boss_lab.gameObject:SetActive(self.__entity.IsBoss == 1)
    -- sr_general_lab.gameObject:SetActive(self.__entity.IsBoss == 0)
    -- self.sr_lab = (self.__entity.IsBoss == 1 and {sr_boss_lab} or {sr_general_lab})[1]
    -- self.sr_flash.color = Color.New(1,1,1,0)

    local playerAvatarFrame = transform:Find("bg/PlayerAvatarFrame")
    local playerAvatarFrameActive = transform:Find("bg/PlayerAvatarFrameActive")
    local enemyAvatarFrame = transform:Find("bg/EnemyAvatarFrame")
    local enemyAvatarFrameActive = transform:Find("bg/EnemyAvatarFrameActive")
    local bossAvatarFrame = transform:Find("bg/BossAvatarFrame")
    local bossAvatarFrameActive = transform:Find("bg/BossAvatarFrameActive")

    if self.__entity.IsPlayer then
        playerAvatarFrame.gameObject:SetActive(true)
        playerAvatarFrameActive.gameObject:SetActive(true)
        enemyAvatarFrame.gameObject:SetActive(false)
        enemyAvatarFrameActive.gameObject:SetActive(false)
        bossAvatarFrame.gameObject:SetActive(false)
        bossAvatarFrameActive.gameObject:SetActive(false)

        self.sr_bg = playerAvatarFrame:GetComponent("Image")
        self.activeBg = playerAvatarFrameActive.gameObject
    else
        if self.__entity.IsBoss == 0 then
            playerAvatarFrame.gameObject:SetActive(false)
            playerAvatarFrameActive.gameObject:SetActive(false)
            enemyAvatarFrame.gameObject:SetActive(true)
            enemyAvatarFrameActive.gameObject:SetActive(true)
            bossAvatarFrame.gameObject:SetActive(false)
            bossAvatarFrameActive.gameObject:SetActive(false)

            self.sr_bg = enemyAvatarFrame:GetComponent("Image")
            self.activeBg = enemyAvatarFrameActive.gameObject
        else
            playerAvatarFrame.gameObject:SetActive(false)
            playerAvatarFrameActive.gameObject:SetActive(false)
            enemyAvatarFrame.gameObject:SetActive(false)
            enemyAvatarFrameActive.gameObject:SetActive(false)
            bossAvatarFrame.gameObject:SetActive(true)
            bossAvatarFrameActive.gameObject:SetActive(true)

            self.sr_bg = bossAvatarFrame:GetComponent("Image")
            self.activeBg = bossAvatarFrameActive.gameObject
        end
    end
    self.activeBg:SetActive(false)

    self:SetAvatarPos(0)
    transform:DOScale(0.7, 0)
    if self.character_component.IsDead then
        self.sr_avatar.color = Color.New(1,1,1,0)
        -- self.sr_lab.color = Color.New(1,1,1,0)
        self.sr_bg.color = Color.New(1,1,1,0)
    else
        self.sr_avatar.color = Color.New(1,1,1,0.1)
        -- self.sr_lab.color = Color.New(1,1,1,0.1)
        self.sr_bg.color = Color.New(1,1,1,0.1)
    end
end

-- 竞速头像表现
local function OutGlowSrAvatar(self)
    DOTween.Sequence()
        --:Append(self.sr_flash:DOFade(1,0.1))
        :Insert(self.sr_gameObject.transform:DOScale(Vector3.New(1.2,1.2),0.1))
        :AppendCallback(function () 
            self.sr_gameObject.transform:DOScale(Vector3.New(1,1),0.2)
            -- self.sr_flash:DOFade(0,0.3)
            self.sr_gameObject.transform:SetAsLastSibling();
    end)
end

-- 更新血量
local function UpdateHpBar(self)
    -- 如果是玩家
    if self.__entity.IsPlayer then
        local pro = self.numeric_component:Get(NumericType.Hp) / self.numeric_component:Get(NumericType.MaxHp)
        self.hp_bar_new:DOFillAmount(pro, 0.01)        
    else
        if self.__entity.IsBoss == 1 then -- BOSS
            local pro = self.numeric_component:Get(NumericType.Hp) / self.numeric_component:Get(NumericType.MaxHp)
            self.hp_bar:DOFillAmount(pro, 0.01)
            self.hp_value.text = math.modf(self.numeric_component:Get(NumericType.Hp))
        else -- 小怪
            local pro = self.numeric_component:Get(NumericType.Hp) / self.numeric_component:Get(NumericType.MaxHp)
            self.hp_bar:DOFillAmount(pro, 0.01)
            --self:SetHpBar(true)
        end
    end
end

local function SetHpBar(self, active)
    if IsNull(self.hp_bar_go) then return end
    if self.character_component.IsDead and active then return end
    self.hp_bar_go:SetActive(active)
end

-- 头像竞速

local function Race(self)
    if self.__entity:GetComponent("CharacterComponent").IsDead then
        return
    end
    local progress = self.__entity:GetComponent("BattleUnitComponent").ActValue / BATTLE_ACT_VALUE_MAX
    progress = progress > 1 and 1 or progress
    if progress > 0 then
        self.sr_avatar_x = progress * speedRaceLen
        self:SetAvatarPos(self.sr_avatar_x)
    end
end

local function SetAvatarPos(self,xx)
    self.sr_gameObject.transform.localPosition = Vector3.New(xx,0,0)
    self.sr_avatar.color = Color.New(1,1,1,xx / speedRaceLen)
    -- self.sr_lab.color = Color.New(1,1,1,xx / speedRaceLen)
    self.sr_bg.color = Color.New(1,1,1,xx / speedRaceLen)
end

local function GenHud(self, hudTextTask)
    local cameraCur = self.battle_camera_component:GetCamera(CameraType.CurCamera)
    if cameraCur == nil then return end
    local ht = Game.Registry:NewObject("HUDText",self.hud_text_root, cameraCur, self.__entity, hudTextTask)
    local layer = self.__entity.GameObject.layer
    local mask = (cameraCur.cullingMask & (1 << layer)) >> layer
    -- 施法者隐藏之后不再显示效果，受击者必须显示
    if mask == 0 then ht.hudTextGo:SetActive(false) end
    table.insert(self.hudList, ht)
end

local function CoGenHUDText(self, hudTextTask)
    if self.IsDispose then return end
    if self.__entity == nil then return end
    if self.__entity.GameObject == nil then return end
    if hudTextTask.HudTextType2 == HUDTextType.Tip then
        self.hudQueue:enqueue(hudTextTask)
    else
        coroutine.start(function()
            GenHud(self, hudTextTask)
        end)
    end
end

local function LateUpdate(self)
    xpcall(function()
        table.removeall(self.hudList, function (v) return v.is_disposed end)
        table.walk(self.hudList, function (k, v) v:LateUpdate() end)
        if self.hudQueue:size() > 0 and not self.isBusy then
            self.isBusy = true
            coroutine.start(function()
                GenHud(self, self.hudQueue:dequeue())
                coroutine.waitforseconds(0.25)
                self.isBusy = false
            end)
        end
        --if self.dmgQueue:size() > 0 and not self.isDmgBusy and not self.battle_component.BattleSkip then
        --    self.isDmgBusy = true
        --    coroutine.start(function()
        --        GenHud(self, self.dmgQueue:dequeue())
        --        coroutine.waitforseconds(0.1)
        --        self.isDmgBusy = false
        --    end)
        --end
    end, function (msg) 
        Logger.LogError("SsUnitUIComponent:LateUpdate"..msg)
    end)
end

local function OnRoundStart(self)
    if self.battle_component.RoundNum == 1 then
        self:SetHpBar(true)
    end
end

local function OnActEnd(self)

end

local function OnUnitSelfTurnStart(self)
    self.sr_gameObject.transform:DOScale(1, 0)
    self:SetHpBar(true)
    self.activeBg:SetActive(true)
end

local function OnUnitSelfTurnEnd(self)
    self.sr_avatar_x = 0
    self:SetAvatarPos(0)
    self.sr_gameObject.transform:DOScale(0.7, 0)
    self:SetHpBar(true)    
    self.activeBg:SetActive(false)
    self.sr_avatar.color = Color.New(1,1,1,0.1)
    self.sr_bg.color = Color.New(1,1,1,0.1)
end

local function OnReAct(self)
    if self.__entity:GetComponent("CharacterComponent").IsDead then
        return
    end
    self.sr_avatar_x=speedRaceLen
    self:SetAvatarPos(speedRaceLen)
    self.sr_gameObject.transform:SetAsLastSibling();
    self.sr_gameObject.transform:DOScale(1, 0)
end

local function OnDead(self)
    self.sr_avatar_x = 0
    self:SetAvatarPos(0)
    self.sr_gameObject.transform:DOScale(0.7, 0)
    if not self.__entity.IsPlayer then
        if self.avatar ~= nil then
            self.avatar.material = self.UIGreyMat
        else
            self:SetHpBar(false)
        end
    else
       self:SetHpBar(false)
    end
    -- buff图标灰色
    for i = 1, self.buffRoot.transform.childCount - 1 do
        self.buffRoot.transform:GetChild(i - 1):Find("Icon"):GetComponent("Image").material = self.UIGreyMat
    end
    local wnd = UIManager:GetInstance():GetWindow(UIWindowNames.UIBuffGlances, true, true)
    if wnd ~= nil then
        wnd.View:SetAvatarMaterial(self.__entity.UID, true)
    end
end

local function OnRevive(self)
    if not self.__entity.IsPlayer  then
        if self.__entity.IsBoss == 1 then
            self.avatar.material = nil
        end
    end
    -- buff图标正常
    for i = 1, self.buffRoot.transform.childCount - 1 do
        self.buffRoot.transform:GetChild(i - 1):Find("Icon"):GetComponent("Image").material = nil
    end
    local wnd = UIManager:GetInstance():GetWindow(UIWindowNames.UIBuffGlances, true, true)
    if wnd ~= nil then
        wnd.View:SetAvatarMaterial(self.__entity.UID, false)
    end
end

local function OnBuffChanged(self, buffs)
    local tnf = self.buffRoot.transform
    local numTnf = tnf:GetChild(tnf.childCount - 1)
    numTnf.gameObject:SetActive(#buffs > tnf.childCount - 1)
    numTnf:GetComponent("Text").text = #buffs
    for i = 1, tnf.childCount - 1 do
        local bufTnf = tnf:GetChild(i - 1)
        bufTnf.gameObject:SetActive(i <= #buffs)
        if i <= #buffs then
            local zBuff = Z_Buff[buffs[i].Id]
            coroutine.start(function() 
                if bufTnf ~= nil then
                    bufTnf:Find("Icon"):GetComponent("Image").sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Atlas/LittleBuff/"..zBuff.LittleIcon..".png")
                end
            end)
        end
    end
end

-- 点击角色时，竞速头像，半身像，boss血条的效果
local function OnChoose(self,isChoose)
    if not self.__entity.IsPlayer then
        if self.choose_flag~=nil then
            self.choose_flag:SetActive(isChoose)
            if isChoose then
                DOTween.Sequence()
                       :Append( self.enemy_status_bar_go.transform:DOScale(Vector3.New(1.2,1.2),0.1))
                       :AppendCallback(function ()
                    self.enemy_status_bar_go.transform:DOScale(Vector3.New(1,1),0.2)
                end)
            end
        end
    end
    if isChoose then -- 小头像
        DOTween.Sequence()
               :Append(self.sr_gameObject.transform:DOScale(Vector3.New(1.2,1.2),0.1))
               :AppendCallback(function ()
            if self.battle_component.CurActUnit ~= nil and self.battle_component.CurActUnit == self.__entity then
                self.sr_gameObject.transform:DOScale(Vector3.New(1,1), 0.2)
            else
                self.sr_gameObject.transform:DOScale(Vector3.New(0.7,0.7), 0.2)
            end
        end)
    end
end

-- 销毁竞速头像
local function DestroySrAvatar(self)
    GameObjectPool:GetInstance():RecycleGameObject(PathUtil.Path_UIBattleCommonPrefab.."SrAvatar.prefab",self.sr_gameObject)
end

local function Dispose(self)
    base.Dispose(self)
    table.walk(self.energyEffects, function (k, v)
        local tnf = v:GetComponent(typeof(RectTransform))
        tnf:DOKill()
        GameObjectPool:GetInstance():RecycleGameObject(effectPath, v)
    end)
    table.walk(self.hudList, function (k, v)
        v:Dispose()
    end)
    if not self.__entity.IsPlayer then
        if self.enemy_status_bar_go~=nil then
            GameObjectPool:GetInstance():RecycleGameObject(PathUtil.Path_UIBattleCommonPrefab.."EnemyStatusBar.prefab",self.enemy_status_bar_go)
        else
            GameObjectPool:GetInstance():RecycleGameObject(PathUtil.Path_UIBattleCommonPrefab.."MonsterHpBar.prefab",self.hp_bar_go)
        end
    else
        -- GameObjectPool:GetInstance():RecycleGameObject(PathUtil.Path_UIBattleCommonPrefab.."StatusBar.prefab",self.hp_bar_go)
        GameObjectPool:GetInstance():RecycleGameObject(PathUtil.Path_UIBattleCommonPrefab.."PlayerHpBar.prefab",self.hp_bar_go)
    end
    DestroySrAvatar(self)
    self.IsDispose = true
end

SsUnitUIComponent.Awake = Awake
SsUnitUIComponent.BuildSrAvatar = BuildSrAvatar
SsUnitUIComponent.OutGlowSrAvatar = OutGlowSrAvatar
SsUnitUIComponent.UpdateHpBar = UpdateHpBar 
SsUnitUIComponent.SetHpBar = SetHpBar
SsUnitUIComponent.Race = Race
SsUnitUIComponent.LateUpdate = LateUpdate
SsUnitUIComponent.OnRoundStart = OnRoundStart
SsUnitUIComponent.OnActEnd = OnActEnd
SsUnitUIComponent.OnUnitSelfTurnStart = OnUnitSelfTurnStart
SsUnitUIComponent.OnUnitSelfTurnEnd = OnUnitSelfTurnEnd
SsUnitUIComponent.OnReAct = OnReAct
SsUnitUIComponent.OnDead = OnDead
SsUnitUIComponent.OnRevive = OnRevive
SsUnitUIComponent.OnChoose = OnChoose
SsUnitUIComponent.CoGenHUDText = CoGenHUDText
SsUnitUIComponent.DestroySrAvatar = DestroySrAvatar
SsUnitUIComponent.Dispose = Dispose
SsUnitUIComponent.SetAvatarPos=SetAvatarPos
SsUnitUIComponent.OnNumericChange=OnNumericChange
SsUnitUIComponent.BossHpBar=BossHpBar
SsUnitUIComponent.OnBuffChanged=OnBuffChanged
return SsUnitUIComponent