---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/22 13:35
---
local BattleComponent = BaseClass("BattleComponent", Component)
local base = Component

if BattleState == nil then
    BattleState =
    {
        PreloadResource = 0, --预加载资源
        InitScene = 1, --初始化战斗场景
        BattleStart = 2, --战斗开始
        BatchStart = 3,--批次开始
        -- 修改回合概念后，大回合概念暂时无用，后续可能会用到
        RoundStart = 4,--回合开始
        QueueAct = 5, --行动队列
        SpeedRace = 6, --竞速阶段
        ReadyQueueHandle = 7, --准备队列
        -- 一个单位的行动回合
        UnitTurnStart = 21, --单位回合开始
        WaitChooseSkill = 8, --选择技能阶段
        WaitChooseTarget = 9, --选择目标阶段
        UnitAct = 10, -- 单位在行动
        UnitActEnd = 11, -- 操作结束
        -- 一个单位的回合结束
        UnitTurnEnd = 22, --单位回合结束
        RoundEnd = 12, --回合结束  
        BatchEnd = 13, -- 批次结束
        BattleEnd = 14, --战斗结束
        LeaveScene = 15 -- 离开战斗场景
    }
end

if AtkDistance == nil then --攻击距离
    AtkDistance =
    {
        Close = 1,  --近程
        Range = 2 --远程
    }
end

if EnemyRange == nil then
    EnemyRange =
    {
        Row = 1,--整排
        Line = 2,--整列
        All = 3,--全体
        Random = 4,--随机
        Single = 5,--单体
    }
    FriendRange =
    {
        Row = 1,--整排
        Line = 2,--整列
        All = 3,--全体
        Random = 4,--随机
        Single = 5,--单体
        Self = 6,--自己
        SelfAndRandom = 7,--自己和随机
        BackRow = 8,--后排
        FrontRow = 9,--前排
        FrontAndBackRow = 10 -- 前排+后排
    }
end

if BattleSpeedMode == nil then
    BattleSpeedMode = 
    {
        Pause = 0,
        Low = 1.5,
        Normal = 2.5,
        High = 3.5,
    }
end

if ActType == nil then
    ActType = 
    {
        None = 0,
        Cac = 1,
        SuoLife = 2,
        Sinhaeng = 3,
        Storm = 4,
        Speed = 5,
        
        GAtk = 6,
        Temp = 7,
        Continue = 8,

        UnitTurn = 9,           -- 单位主动行动
        ExtraSkill = 10,        -- 额外释放一次技能
    }
end

-- 所有资源加载完毕后，初始战斗状态机
local function StartFsm(self, scene)
    self.fsm = FsmMachine:New()
    self.fsm:AddState(require "GameLogic.Battle.State.PreloadResource")
    self.fsm:AddState(require "GameLogic.Battle.State.InitScene")
    self.fsm:AddState(require "GameLogic.Battle.State.BattleStart")
    self.fsm:AddState(require "GameLogic.Battle.State.BatchStart")
    self.fsm:AddState(require "GameLogic.Battle.State.RoundStart")
    self.fsm:AddState(require "GameLogic.Battle.State.QueueAct")
    self.fsm:AddState(require "GameLogic.Battle.State.SpeedRace")
    self.fsm:AddState(require "GameLogic.Battle.State.ReadyQueueHandle")
    self.fsm:AddState(require "GameLogic.Battle.State.UnitTurnStart")
    self.fsm:AddState(require "GameLogic.Battle.State.WaitChooseSkill")
    self.fsm:AddState(require "GameLogic.Battle.State.WaitChooseTarget")
    self.fsm:AddState(require "GameLogic.Battle.State.UnitAct")
    self.fsm:AddState(require "GameLogic.Battle.State.UnitActEnd")
    self.fsm:AddState(require "GameLogic.Battle.State.UnitTurnEnd")
    self.fsm:AddState(require "GameLogic.Battle.State.RoundEnd")
    self.fsm:AddState(require "GameLogic.Battle.State.BatchEnd")
    self.fsm:AddState(require "GameLogic.Battle.State.BattleEnd")
    self.fsm:AddState(require "GameLogic.Battle.State.LeaveScene")
    self.loadingScene = scene
    self.fsm:AddInitState(BattleState.PreloadResource)
end

-- 添加组件后触发
local function Awake(self)
    base.Awake(self)
    require("GameLogic.Battle.Component.BattleComponentLogic")
    require("GameLogic.Battle.Component.BattleComponentEvent")
    require("GameLogic.Battle.Component.BattleComponentNumeric")
    self.nex = false--新手指引
    self.offline = false
    self.KilEnemyNum = 0 --杀死敌人数量
    
    self.reviveTimes = 1 -- 关卡复活次数
    -- self.battle_data = {}
    -- self.battle_data.verify_data = {}
    -- self.battle_data.statistics = {}
    -- self.battle_data.statistics.enemy_records = {}
    self.Statistics = {}
    self.Statistics.EnemyRecords = {}
    
    --获取层级
    self.UILayer = LayerMask.NameToLayer("UI")
    self.AwakenLayer = LayerMask.NameToLayer("Awaken")
    self.SsUnitLayer = LayerMask.NameToLayer("SsUnit")
    self.CutInLayer = LayerMask.NameToLayer("CutIn")
    self.DefaultLayer = LayerMask.NameToLayer("Default")
    self.MapLayer = LayerMask.NameToLayer("Map")
    self.HideLayer = LayerMask.NameToLayer("Hide")

    --创建单位根节点
    local go = GameObject.Find("SsUnit")
    if go == nil then
    go = GameObject("SsUnit")
    CS.UnityEngine.Object.DontDestroyOnLoad(go)
    end
    self.ssUnit_root = go.transform

    --创建特效根节点
    self.particleRoot = GameObject.Find("Particle")
    if self.particleRoot == nil then
        self.particleRoot = GameObject("Particle")
        CS.UnityEngine.Object.DontDestroyOnLoad(self.particleRoot)
    end

    self.battle_ui_component = nil --战斗ui

    self.against_component = Game.Scene:GetComponent("AgainstComponent") --战斗组件
    self.cur_team_no = ClientData:GetInstance().CurTeamNo  --队伍
    self.cur_team = UIData.GetCurTeam()

    self.ZBattleLevel = self.against_component:GetCurZBattleLevel() -- 关卡配置

    self.BattleSpeed = self.against_component.BattleSpeed --游戏速度

    self.is_opt_enemy_skill = self.against_component.IsOptEnemySkill --控制敌方技能
    self.IsIgnoreCooldown = self.against_component.IsIgnoreCooldown --无视技能冷却
    self.ss_unit_id = 0
    self.IdUnits = {}
    self.unitRecords = {}

    self.TotalBatch = 0 --总批次
    self.BatchNum = 1 --批次
    self.RoundNum = 0 --feixiao: 这个现在是固定时长的圈数
    self.OverallTurnNum = 0 --feixiao: 每个单位行动一次为一个回合，这个是总回合数
    self.UseSkillCount = 0 --使用技能次数
    self.UseEmperorStormCount = 0 --使用帝王风暴次数
    self.playerScore=0
    self.FriendGroup = nil
    self.EnemyGroup = nil

    self.CurActType = ActType.None
    
    self.uuid = 123456
    
    -- 初始化战斗对象
    self:OnAwake()

    self.GuideComponent=Game.Scene:GetComponent("GuideComponent")

    self.AutoBattleValue = ClientData:GetInstance():GetAutoBattleValue()--自动战斗
    self.AutoAwakenSkill = ClientData:GetInstance():GetAutoAwakenSkill()--跳过觉醒演出
    self.AutoSkill = ClientData:GetInstance():GetAutoSkill()

    if self.against_component.IsForceAutoBattle then
        self.AutoBattleValue = 1
        self.IsForceAutoBattle = true
    end
    if self.against_component.LevelType == LevelType.LevelTypeArena then --争霸模式
        self.cur_team_no = 9
        self.cur_team = Game.Scene.Player:GetComponent("TeamComponent"):Get(9)
        self.AutoSkill = 0
        self.is_opt_enemy_skill = false
        self.IsIgnoreCooldown =false
        self.TotalBatch=1
    elseif self.against_component.LevelType == LevelType.LevelTypeGuide then
        self.AutoBattleValue = 0
        self.AutoAwakenSkill = 0
        self.AutoSkill = 0
        self.cur_team_no = 100
        self.cur_team = Game.Scene.Player:GetComponent("TeamComponent"):Get(100)
        if self.against_component:LoadBatch(self.ZBattleLevel.Batch3) then
            self.TotalBatch = 3
        elseif self.against_component:LoadBatch(self.ZBattleLevel.Batch2) then
            self.TotalBatch = 2
        elseif self.against_component:LoadBatch(self.ZBattleLevel.Batch1) then
            self.TotalBatch = 1
        end
        self:ResetBattleBgm(BgmType.Battle, "二章boss战斗曲") --ignoreCN
    else        
        ---解析关卡配置
        if self.against_component:LoadBatch(self.ZBattleLevel.Batch3) ~= nil then
            self.TotalBatch = 3
        elseif self.against_component:LoadBatch(self.ZBattleLevel.Batch2) ~= nil then
            self.TotalBatch = 2
        elseif self.against_component:LoadBatch(self.ZBattleLevel.Batch1) ~= nil then
            self.TotalBatch = 1
        end
    end
    self.time = 0

    self.BattleResult = nil
end

-- BgmType.Story
local function ResetBattleBgm(self, bgmType, bgmName)
    if not table.any(BgmType, function (v) return v == bgmType end) then
        return
    end
    self.ZBattleLevel.bgmType = bgmType
    self.bgmName = bgmName
end

-- 被挤下线
local function Offline(self)
    self.offline = true
    self.fsm:Switch(BattleState.LeaveScene)
end

local function CheckBattleEnd(self)
    -- 如果敌方全部死亡
    local isPlayerAllDead = table.all(table.choose(self.IdUnits,function (k,v) return v:GetComponent("SsUnitMatrixComponent").Group == MatrixGroup.Friend end),
            function (v) return v:GetComponent("CharacterComponent").IsDead end)
    -- 达到通关条件或者玩家全部死亡，直接结算
    if isPlayerAllDead then
        self.EndMode = 5 -- 玩家全部死亡
        return true
    end

    -- if self:IsMonsterAllDead() and (self.BatchNum < self.TotalBatch) then
    --     return true
    -- end

    return false
end

local function BattleEnd(self)
    if self:CheckBattleEnd() then
        self.fsm:Switch(BattleState.BattleEnd)
        return true
    end
    return false
end

-- 获取当前阵容前排敌人 -- 
local function GetEnemyFrontRow(self,friendGroup)
    local enemyUnits = table.choose(self.IdUnits,function (k,v) return v:GetComponent("SsUnitMatrixComponent").Group ~= friendGroup end)
    local IsEnemyGroupUnitsAllHide = self:IsEnemyGroupUnitsAllHide(friendGroup)


    local frontRowUnits = table.choose(enemyUnits, function (k,v) return v:GetComponent("SsUnitMatrixComponent").Row == MatrixRow.Front and
                     v:GetComponent("CharacterComponent"):CanBeEnemyTargetCandidate(IsEnemyGroupUnitsAllHide) end)
    
    if table.count(frontRowUnits) > 0 then
        return frontRowUnits
    end

    return table.choose(enemyUnits,function (k,v) return v:GetComponent("SsUnitMatrixComponent").Row == MatrixRow.Back and 
                    v:GetComponent("CharacterComponent"):CanBeEnemyTargetCandidate(IsEnemyGroupUnitsAllHide) end)
end

--设置战斗速度
local function SetBattleSpeed(self, battleSpeed)
    -- 缓存速度有问题时
    if not table.any(BattleSpeedMode, function (v) return v == battleSpeed end) then
        battleSpeed = BattleSpeedMode.Low
    end
    Time.timeScale = battleSpeed
    self.BattleSpeed = battleSpeed
    if self.CurActUnit ~= nil then
        self.CurActUnit:GetComponent("SsUnitVoiceComponent"):SetVoiceSpeed(self.BattleSpeed)
    end
    self.battle_ui_component:SetSpeedText(battleSpeed)
    if self.BattleSpeed ~= BattleSpeedMode.Pause then -- 暂停速度不缓存
        self.against_component:SetBattleSpeed(self.BattleSpeed)
    end
end

--设置战斗加速跳过
local function SetBattleSkip(self)
    self.BattleSkip = true
    Time.timeScale = 21
    if self.CurActUnit ~= nil then
        self.CurActUnit:GetComponent("SsUnitVoiceComponent"):VoiceSkip()
    end
end

--设置战斗加速跳过恢复
local function ReSetBattleSkip(self)
    self.BattleSkip = false
    self:SetBattleSpeed(self.BattleSpeed)
end

--设置自动战斗按钮
local function SetAutoBattle(self, AutoBattleValue)
    if self.IsForceAutoBattle then
        return
    end

    if not table.any({0, 1}, function(p) return p == AutoBattleValue end) then
        AutoBattleValue = 0
    end
    ClientData:GetInstance():SetAutoBattleValue(AutoBattleValue)
    self.AutoBattleValue = AutoBattleValue
    self.battle_ui_component:SetAutoText(AutoBattleValue)
end

--设置跳过觉醒演出
local function SetAutoAwakenSkill(self, AutoAwakenSkill)
    if not table.any({0, 1}, function(p) return p == AutoAwakenSkill end) then
        AutoAwakenSkill = 0
    end
    ClientData:GetInstance():SetAutoAwakenSkill(AutoAwakenSkill)
    self.AutoAwakenSkill = AutoAwakenSkill
    self.battle_ui_component:SetAutoAwakenSkillBtn(AutoAwakenSkill)
end

--设置不使用技能
local function SetAutoSkill(self, AutoSkill)
    if self.against_component.LevelType ~= LevelType.LevelTypeArena then
        if not table.any({0, 1}, function(p) return p == AutoSkill end) then
            AutoSkill = 0
        end
        ClientData:GetInstance():SetAutoSkill(AutoSkill)
        self.AutoSkill = AutoSkill
        self.battle_ui_component:SetAutoSkillBtn(AutoSkill)
    end
end

-- 每帧更新
local function Update(self)
    xpcall(function ()
        if self.fsm then
            self.fsm:Update()
            if self.CurActUnit ~= nil then
                self.CurActUnit:GetComponent("SsUnitBattleComponent"):OnRun(Time.deltaTime)
            end
        end
    end, function (msg) 
        Logger.LogError("BattleComponent: "..msg)
    end)
end

local function GenNextSsUnitId(self)
    self.ss_unit_id = self.ss_unit_id + 1
    return self.ss_unit_id
end

local function GenUUID(self)
    self.uuid = self.uuid + 1
    return self.uuid
end

-- 清空所有单位高亮显示
local function ClearSelectedHighlight(self)
    if self.cur_selected_unit_id ~= 0 then
        table.walk(self.IdUnits,function (k,v)
            v:GetComponent("SsUnitBattleComponent"):HighlightSelectedOff()
        end)
        self.cur_selected_unit_id = 0
    end
end

-- 阵营排序
local function SortByRowAndLine(self,list)
    table.sort(list,function (_a,_b)
        local a = _a:GetComponent("SsUnitMatrixComponent")
        local b = _b:GetComponent("SsUnitMatrixComponent")
        if a.Group > b.Group then
            return true
        elseif a.Group == b.Group then
            if a.Row < b.Row then
                return true
            elseif a.Row == b.Row then
                if a.Line < b.Line then return true end
            end
        end
        return false
    end)
    return list
end

-- 获取友方所有单位
local function GetGroupUnits(self,group)
    return table.values(table.choose(self.IdUnits,function (_,v) return
        v:GetComponent("SsUnitMatrixComponent").Group == group
    end))
end

-- 获取敌方所有单位
local function GetEnemyGroupUnits(self,group)
    return table.values(table.choose(self.IdUnits,function (_,v) return
    v:GetComponent("SsUnitMatrixComponent").Group ~= group
    end))
end

-- 获取某个阵营某一行的所有单位
local function GetRowUnits(self,group,row)
    return table.values(table.choose(self.IdUnits,function (_,v)
        local smc = v:GetComponent("SsUnitMatrixComponent")
        return smc.Group == group and smc.Row == row
    end))
end

-- 获取某个阵营某一行的所有单位
local function GetLineUnits(self, group, line)
    return table.values(table.choose(self.IdUnits,function (_,v)
        local smc = v:GetComponent("SsUnitMatrixComponent")
        return smc.Group == group and smc.Line == line
    end))
end

local function RangeView(self,isPlayer)
    local zy = isPlayer and MatrixGroup.Enemy or MatrixGroup.Friend
    self:DeRangeView()
    self.DeTargetUnits2 = table.choose(self.IdUnits,
            function (k,v) return v:GetComponent("SsUnitMatrixComponent").Group == zy and v.GameObject.layer == self.SsUnitLayer
            end)
    if table.count(self.DeTargetUnits2) > 0 then
        table.walk(self.DeTargetUnits2,function(_,v)
            if not v:GetComponent("CharacterComponent").IsDead then
                v:GetComponent("SsUnitUIComponent"):SetHpBar(false)
                v:GetComponent("SsUnitEffectComponent"):SetContinueEfx(false)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.HideLayer
                end)
            end
        end)
    end
end

local function DeRangeView(self)
    if self.DeTargetUnits2 == nil then return end
    if table.count(self.DeTargetUnits2) > 0 then
        table.walk(self.DeTargetUnits2,function(_,v)
            if not v:GetComponent("CharacterComponent").IsDead then
                v:GetComponent("SsUnitUIComponent"):SetHpBar(true)
                v:GetComponent("SsUnitEffectComponent"):SetContinueEfx(true)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.SsUnitLayer
                end)
            end
        end)
    end
    self.DeTargetUnits2 = {}
end

-- 隐藏多个单位
local function TargetsHide(self,TargetUnits)
    self.DeTargetUnits3 = {}
    for k,v in pairs(self.IdUnits) do
        if table.all(TargetUnits,function(a) return a ~= v end) then
            if not v:GetComponent("CharacterComponent").IsDead then
                table.insert(self.DeTargetUnits3,v)
                v:GetComponent("SsUnitUIComponent"):SetHpBar(false)
                v:GetComponent("SsUnitEffectComponent"):SetContinueEfx(false)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.HideLayer
                end)
            end
        end
    end
end

-- 之前隐藏的单位显示
local function TargetsShow(self)
    if self.DeTargetUnits3 == nil then return end
    if table.count(self.DeTargetUnits3) > 0 then
        table.walk(self.DeTargetUnits3,function(_,v)
            if not v:GetComponent("CharacterComponent").IsDead then
                v:GetComponent("SsUnitUIComponent"):SetHpBar(true)
                v:GetComponent("SsUnitEffectComponent"):SetContinueEfx(true)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.SsUnitLayer
                end)
            end
        end)
    end
    self.DeTargetUnits3 = {}
end

-- 隐藏单位
local function TargetHide(self,TargetUnit)
    table.csenu(TargetUnit.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
        go.gameObject.layer = self.HideLayer
    end)
    TargetUnit:GetComponent("SsUnitEffectComponent"):SetContinueEfx(false)
end

-- 显示单位
local function TargetShow(self,TargetUnit)
    table.csenu(TargetUnit.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
        go.gameObject.layer = self.SsUnitLayer
    end)
    TargetUnit:GetComponent("SsUnitEffectComponent"):SetContinueEfx(true)
end

local function AwakeView(self,TargetUnits,SrcUnit)
    local battle_camera_component =  Game.Scene:GetComponent("BattleCameraComponent")

    if SrcUnit ~=nil and SrcUnit.IsPlayer then
        battle_camera_component:LeftAwakeSet()
    else
        battle_camera_component:RightAwakeSet()
    end

    Game.Scene:GetComponent("BattleCameraComponent"):LeftAwakeSet()
    self.DeTargetUnits = {}
    for k,v in pairs(self.IdUnits) do
        if table.all(TargetUnits,function(a) return a ~=v end) then
            table.insert(self.DeTargetUnits,v)
            if not v:GetComponent("CharacterComponent").IsDead then
                v:GetComponent("SsUnitUIComponent"):SetHpBar(false)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.HideLayer
                end)
            end
        end
    end
    if SrcUnit~=nil then
        table.insert(self.DeTargetUnits,SrcUnit)
    end
end

local function DeAwakeView(self)
    if self.DeTargetUnits == nil then return end
    local battle_camera_component =  Game.Scene:GetComponent("BattleCameraComponent")
    battle_camera_component:DeLeftAwakeSet()
    battle_camera_component:DeRightAwakeSet()
    if table.count(self.DeTargetUnits) > 0 then
        table.walk(self.DeTargetUnits,function(_,v)
            if not v:GetComponent("CharacterComponent").IsDead then
                v:GetComponent("SsUnitUIComponent"):SetHpBar(true)
                table.csenu(v.GameObject:GetComponentsInChildren(typeof(Transform)),function (go)
                    go.gameObject.layer = self.SsUnitLayer
                end)
            end
        end)
    end
    self.DeTargetUnits = {}
    Game.Scene:GetComponent("BattleCameraComponent"):ResetAwakenCamera()
end

local function Dispose(self)
    base.Dispose(self)
    table.walk(self.IdUnits,function(_,v) v:Dispose() end)
    self.IdUnits = {}
    -- 避免特效有残留
    for i = 1, self.particleRoot.transform.childCount do
        local tnf = self.particleRoot.transform:GetChild(i - 1)
        if not IsNull(self.particleRoot.transform:GetChild(i - 1)) then
            CS.UnityEngine.GameObject.Destroy(tnf.gameObject)
        end
    end
end

local function AddUnitRecord(self, ssUnit, batch, pos, configId)
    local matrixComp = ssUnit:GetComponent("SsUnitMatrixComponent")
    local group = matrixComp.Group
    self.unitRecords[ssUnit.UID] = Game.Registry:NewObject("BattleUnitRecord", ssUnit.UID, batch, pos, group, ssUnit.IsMonster, configId)
end

local function GetUnitRecord(self, unitId)
    return self.unitRecords[unitId]
end

local function IsMonsterAllDead(self)
    return table.all(table.choose(self.IdUnits,function (k,v) return v:GetComponent("SsUnitMatrixComponent").Group == MatrixGroup.Enemy end),
    function (v) return v:GetComponent("CharacterComponent").IsDead end)
end

local function SetBattleResult(self, result)
    self.BattleResult = result
end

local function GetBattleResult(self)
    return self.BattleResult
end

BattleComponent.Awake = Awake
BattleComponent.Update = Update
BattleComponent.SetBattleSpeed = SetBattleSpeed 
BattleComponent.SetAutoBattle = SetAutoBattle
BattleComponent.SetAutoAwakenSkill = SetAutoAwakenSkill
BattleComponent.SetAutoSkill = SetAutoSkill
BattleComponent.GenNextSsUnitId = GenNextSsUnitId
BattleComponent.ClearSelectedHighlight = ClearSelectedHighlight
BattleComponent.SortByRowAndLine = SortByRowAndLine
BattleComponent.GetEnemyFrontRow = GetEnemyFrontRow
BattleComponent.GetGroupUnits = GetGroupUnits
BattleComponent.GetEnemyGroupUnits = GetEnemyGroupUnits
BattleComponent.GetRowUnits = GetRowUnits
BattleComponent.GetLineUnits = GetLineUnits
BattleComponent.AwakeView = AwakeView
BattleComponent.DeAwakeView = DeAwakeView
BattleComponent.RangeView = RangeView
BattleComponent.DeRangeView=DeRangeView
BattleComponent.TargetsHide=TargetsHide
BattleComponent.TargetsShow=TargetsShow
BattleComponent.TargetHide=TargetHide
BattleComponent.TargetShow=TargetShow
BattleComponent.SetBattleSkip=SetBattleSkip
BattleComponent.ReSetBattleSkip=ReSetBattleSkip
BattleComponent.Dispose = Dispose
BattleComponent.StartFsm=StartFsm 
BattleComponent.ResetBattleBgm=ResetBattleBgm
BattleComponent.Offline=Offline 
BattleComponent.BattleEnd=BattleEnd
BattleComponent.CheckBattleEnd=CheckBattleEnd 
BattleComponent.GenUUID=GenUUID
BattleComponent.AddUnitRecord = AddUnitRecord
BattleComponent.GetUnitRecord = GetUnitRecord
BattleComponent.IsMonsterAllDead = IsMonsterAllDead
BattleComponent.SetBattleResult = SetBattleResult
BattleComponent.GetBattleResult = GetBattleResult

return BattleComponent