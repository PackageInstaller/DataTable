---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/12 14:16
---

local NumericComponent = BaseClass("NumericComponent", Component)
local base = Component

local function Awake(self)
    base.Awake(self)
    self.NumericDic = {}
    self.Listeners = {}
    self.queue = Queue.New()
end

local function Get(self,numericType)
    --local v = self.NumericDic[numericType]
    --if v == nil then
    --    return 0
    --else
    --    return v
    --end
    local v = self.NumericDic[numericType]
    if v == nil then
        return 0
    else
        return v:Get()
    end
end

local function Update(self, numericType)
    if numericType < NumericType.Max then
        return
    end
    local final = math.modf(numericType / 10)
    local bas = math.modf(final * 10 + 1)
    local add = math.modf(final * 10 + 2)
    local pct = math.modf(final * 10 + 3)
    local finalAdd = math.modf(final * 10 + 4)
    local finalPct = math.modf(final * 10 + 5)

    if final == NumericType.MaxHp then
        local maxHp1 = Get(self, final)
        --self.NumericDic[final] = ((Get(self,bas) + Get(self,add)) * (100 + Get(self,pct)) / 100 + Get(self,finalAdd)) * (100 + Get(self,finalPct)) / 100
        if (self.NumericDic[final] == nil) then self.NumericDic[final] = Game.Registry:NewObject("CheatData", 0) end
        local pctVal = Get(self,pct)
        if pctVal < -100 then pctVal = -100 end
        local finalPctVal = Get(self,finalPct)
        if finalPctVal < -100 then finalPctVal = -100 end
        self.NumericDic[final]:Set(((Get(self,bas) + Get(self,add)) * (100 + pctVal) / 100 + Get(self,finalAdd)) * (100 + finalPctVal) / 100)
        local maxHp2 = Get(self, final)
        if maxHp2 ~= maxHp1 then
            self:MaxHpChange(maxHp2 - maxHp1)
        end
    else
        --self.NumericDic[final] = ((Get(self,bas) + Get(self,add)) * (100 + Get(self,pct)) / 100 + Get(self,finalAdd)) * (100 + Get(self,finalPct)) / 100
        if (self.NumericDic[final] == nil) then self.NumericDic[final] = Game.Registry:NewObject("CheatData", 0) end
        local pctVal = Get(self,pct)
        if pctVal < -100 then pctVal = -100 end
        local finalPctVal = Get(self,finalPct)
        if finalPctVal < -100 then finalPctVal = -100 end
        self.NumericDic[final]:Set(((Get(self,bas) + Get(self,add)) * (100 + pctVal) / 100 + Get(self,finalAdd)) * (100 + finalPctVal) / 100)
    end
    self:NumericLimit(final, Get(self, bas))
    table.walk(self.Listeners, function (key, value) value(final) end)
end

local function Set(self, numericType, val)
    --local v = self.NumericDic[numericType]
    --if (v == nil) then v = 0 end
    --if (v == val) then return end
    --self.NumericDic[numericType] = val
    --table.walk(self.Listeners, function (key, value) value(numericType) end)
    --Update(self,numericType)
    if (self.NumericDic[numericType] == nil) then self.NumericDic[numericType] = Game.Registry:NewObject("CheatData", 0) end
    if (self.NumericDic[numericType]:Get() == val) then return end
    self.NumericDic[numericType]:Set(val)
    table.walk(self.Listeners, function (key, value) value(numericType) end)
    Update(self,numericType)
end

local function Inc(self,numericType,val)
    Set(self,numericType,Get(self,numericType) + val)
end

local function Dec(self,numericType,val)
    Set(self,numericType,Get(self,numericType) - val)
end

local function MaxHpChange(self, val)
    if Get(self, NumericType.Hp) > Get(self, NumericType.MaxHp) then
        Set(self, NumericType.Hp, Get(self, NumericType.MaxHp))
    end
    if Get(self, NumericType.Hp) <= 0 then
        return
    end
    if val > 0 then
        Inc(self, NumericType.Hp, val)
    end
end

local function NumericLimit(self, finalKey, baseData)
    if finalKey == NumericType.Hp then
        if Get(self, NumericType.Hp) > Get(self, NumericType.MaxHp) then
            Set(self, NumericType.Hp, Get(self, NumericType.MaxHp))
        end
    elseif finalKey == NumericType.MaxHp or finalKey == NumericType.Atk or finalKey == NumericType.Def or finalKey == NumericType.Speed then
        if Get(self, finalKey) < baseData * 0.1 then
            Set(self, finalKey, baseData * 0.1)
        end
    elseif finalKey == NumericType.Hit or 
            finalKey == NumericType.Pry or
            finalKey == NumericType.Blk or 
            finalKey == NumericType.Acc or 
            finalKey == NumericType.Stm or 
            finalKey == NumericType.Cri or 
            finalKey == NumericType.Cac then
        if Get(self, finalKey) < 0 then
            Set(self, finalKey, 0)
        end
    elseif finalKey == NumericType.CriDamage then -- 暴伤不低于50
        if Get(self, finalKey) < 50 then
            Set(self, finalKey, 50)
        end
    elseif finalKey == NumericType.AntiCri then
        if Get(self, finalKey) > 100 then -- 抗暴不能高于100
            Set(self, finalKey, 100)
        end
    end
end

local function AddListener(self, func)
    if table.any(self.Listeners, function (v) return v == func end) then
        return
    end
    table.insert(self.Listeners, func)
end

local function RemoveListener(self, func)
    table.removeall(self.Listeners, function (v) return v == func end)
end

local function Dispose(self)
    base.Dispose(self)
    self.NumericDic = {}
    self.Listeners = {}
end

NumericComponent.Awake = Awake
NumericComponent.Get = Get
NumericComponent.Set = Set
NumericComponent.Inc = Inc
NumericComponent.Dec = Dec
NumericComponent.AddListener = AddListener
NumericComponent.RemoveListener = RemoveListener
NumericComponent.Dispose = Dispose 
NumericComponent.NumericLimit = NumericLimit 
NumericComponent.MaxHpChange = MaxHpChange 

return NumericComponent