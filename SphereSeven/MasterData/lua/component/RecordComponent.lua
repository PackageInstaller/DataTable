---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/10/23 18:03
---
---@class RecordComponent
---@field oldRecords table<number,boolean> @ 记录上一次的图鉴id
---@field records table<number,boolean> @ 记录所有已解锁的图鉴id
---@field recordIdList table<number, table<number, number[]>> @ key: type, value : 分类下所有 id - 图鉴id[] 的对应
local RecordComponent = BaseClass("RecordComponent", Component)
local base = Component
local this = RecordComponent



-- {
--     [RecordType.Character] = 
--         {
--             [1001] = {
--                     100101,
--                     100102,
--                     100103,
--                 },
--             [1002] = {
--                     100201,
--                     100202,
--                     100203,
--                 },
--         },
--     [RecordType.Equip] = 
--         {
--         }
-- }

local RecordHasProperty = {
    [RecordType.Character] = true,
    [RecordType.Equip] = true,
    [RecordType.FightSoul] = true,
}


function this:Awake()
    base.Awake(self)

    self.records = {}
    self.oldRecords = {}
    self.recordIdList = {}

    self.recordIdList[RecordType.FightSoul] = {}
    for _, value in pairs(Z_FightSoul) do
        if value.NotOpen ~= 1 and value.Encyclopedia ~= nil and value.Encyclopedia ~= 0 then
            self.recordIdList[RecordType.FightSoul][value.Id] = { value.Encyclopedia }
        end
    end

    self.recordIdList[RecordType.Character] = {}
    for _, value in pairs(Z_Character) do
        if value.Enable == 1 and value.Encyclopedia ~= nil and value.Encyclopedia ~= 0 then
            self.recordIdList[RecordType.Character][value.Id] = { value.Encyclopedia }

            if Z_CharacterConstellation[value.Id] ~= nil then
                for _, v in pairs(Z_CharacterConstellation[value.Id]) do
                    if not table.contains(self.recordIdList[RecordType.Character][value.Id], v.Encyclopedia) then
                        table.insert(self.recordIdList[RecordType.Character][value.Id], v.Encyclopedia)
                    end
                end
            end
        end
    end

    self.recordIdList[RecordType.Equip] = {}
    for _, value in pairs(Z_Equip) do
        if value.Encyclopedia ~= nil and value.Encyclopedia ~= 0 then
            self.recordIdList[RecordType.Equip][value.Id] = { value.Encyclopedia }
        end
    end

    self.recordIdList[RecordType.Monster] = {}
    for _, value in pairs(Z_Monster) do
        if value.Encyclopedia ~= nil and value.Encyclopedia ~= 0 then
            self.recordIdList[RecordType.Monster][value.Id] = { value.Encyclopedia }
        end
    end

    self.recordIdList[RecordType.CG] = {}
    for _, value in pairs(Z_CG) do
        if value.Encyclopedia ~= nil and value.Encyclopedia ~= 0 then
            self.recordIdList[RecordType.CG][value.Id] = { value.Encyclopedia }
        end
    end

    -- self.handBookHint = Game.Scene:GetComponent("HintComponent").Handbook
    -- if self.handBookHint:GetChild("Card") == nil then
    --     self.handBookHint:AddChild("Card")
    --     self.handBookHint:AddChild("Equip")
    --     self.handBookHint:AddChild("FightSoul")
    --     self.handBookHint:AddChild("Monster")
    --     self.handBookHint:AddChild("Story")
    -- end
    -- self.handBookHint:GetChild("Card"):SetCount(0)
    -- self.handBookHint:GetChild("Equip"):SetCount(0)
    -- self.handBookHint:GetChild("FightSoul"):SetCount(0)
    -- self.handBookHint:GetChild("Monster"):SetCount(0)
    -- self.handBookHint:GetChild("Story"):SetCount(0)



    -- local zCards = table.choose(Z_Card,function(k,v) return v.IsMonster ~= 1  end)
    -- local zEquips = Z_Equip
    -- local zFightSouls = Z_FightSoul
    -- local zMonster = table.choose(Z_Card,function(k,v) return v.IsMonster == 1  end)

    -- for k,v in pairs(zCards) do
    --     self.handBookHint:GetChild("Card"):AddChild(v.Sphere):AddChild(v.Id):SetCount(0)
    -- end

    -- for k,v in pairs(zEquips) do
    --     if v.Exclusive > 0 then
    --         self.handBookHint:GetChild("Equip"):AddChild("2"):AddChild(v.Part):AddChild(v.Id):SetCount(0)
    --     else
    --         self.handBookHint:GetChild("Equip"):AddChild("1"):AddChild(v.Part):AddChild(v.Id):SetCount(0)
    --     end
    -- end

    -- for k,v in pairs(zFightSouls) do
    --     local zCard = Z_Card[v.CardId]
    --     self.handBookHint:GetChild("FightSoul"):AddChild(zCard.Sphere):AddChild(v.Id):SetCount(0)
    -- end

    -- for k,v in pairs(zMonster) do
    --     self.handBookHint:GetChild("Monster"):AddChild(v.Sphere):AddChild(v.Id):SetCount(0)
    -- end
end
function this:CoLoadData()
    local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
            PROTOCOL.EncyclopediaReq, {})
    self:RefreshData(info.records, true)

    return coroutine.yieldbreak(info)
end

function this:RefreshData(records, changeOldRecords) 
    if records == nil then records = {} end
    if changeOldRecords == nil then changeOldRecords = false end

    if not changeOldRecords then
        self.oldRecords = {}
        for recordId, _ in pairs(self.records) do
            self.oldRecords[recordId] = true
        end
    end

    for _, record in pairs(records) do
        --- 每个record 都是 新增的图鉴id
        if self.records[record] == nil then
            self.records[record] = true
        end
    end

    if changeOldRecords then
        self.oldRecords = {}
        for recordId, _ in pairs(self.records) do
            self.oldRecords[recordId] = true
        end
    end

end

--- 获取图鉴数量
---@return number, number @ 已解锁的数量, 总数量
function this:GetRecordCount(type)
    local isOn = 0
    local all = 0
    if type ~= nil then
        for cid, recordIds in pairs(self.recordIdList[type]) do
            for _, recordId in pairs(recordIds) do
                if self.records[recordId] then
                    isOn = isOn + 1
                    break
                end
            end
        end
        all = table.count(self.recordIdList[type])
    else
        for type, ids in pairs(self.recordIdList) do
            for _, id in pairs(ids) do
                if self.records[id] then
                    isOn = isOn + 1
                end
            end
            all = all + table.count(ids)
        end
    end

    return isOn, all
end

function this:GetMonsterCount()
    local cardIds = {}
    for i = 1,9 do
        cardIds[i] = {}
    end
    for k,v in table.pairsByKeys(Z_Card) do
        if v.IsMonster == 1 and v.SsUnitId ~= 0  and v.NotOpen ~= 1 then
            table.insert(cardIds[v.Sphere],v.Id)
        end
    end

    local holdCount = 0
    local maxCount = 0
    for k,v in pairs(cardIds) do
        if table.count(v) ~= 0 then
            for _, id in ipairs(v) do
                maxCount = maxCount + 1
                if self:CheckIsOn(RecordType.Monster, id) then
                    holdCount = holdCount + 1
                end
            end
        end
    end

    return holdCount, maxCount
end

function this:CheckIsOn(type, id)
    if self.recordIdList[type] == nil then
        return false
    end

    if self.recordIdList[type][id] == nil then
        return false
    end

    for _, recordId in pairs(self.recordIdList[type][id]) do
        if self.records[recordId] then
            return true
        end
    end
    return false
end

function this:CheckIsOnOld(type, id)
    if self.oldRecords == nil then
        return self:CheckIsOn(type, id)
    end

    if self.recordIdList[type] == nil then
        return false
    end

    if self.recordIdList[type][id] == nil then
        return false
    end

    for _, recordId in pairs(self.recordIdList[type][id]) do
        if self.oldRecords[recordId] then
            return true
        end
    end
    return false
end

function this:ClearOldRecord()
    self.oldRecords = nil
end

---@param self RecordComponent
local function GetProperty(self, type)
    local ret = {}
    if not RecordHasProperty[type] then
        return ret
    end
    for id, recordIds in pairs(self.recordIdList[type]) do
        for _, recordId in pairs(recordIds) do
            if self.records[recordId] then
                local property = UIPublic.GetPropertyByEncyclopediaId(recordId)
                for key, value in pairs(property) do
                    if ret[key] == nil then
                        ret[key] = value
                    else
                        ret[key] = ret[key] + value
                    end
                end
            end
        end
    end
    return ret
end

--- 获取当前已经激活的所有属性
function this:GetProperty(type)
    if type == nil then
        local all = {}
        for key, value in pairs(RecordType) do
            local property = GetProperty(self, value)
            for key, value in pairs(property) do
                if all[key] == nil then
                    all[key] = value
                else
                    all[key] = all[key] + value
                end
            end
        end
        return all
    else
        
        return GetProperty(self, type)
    end
end

function this:Dispose()
    base.Dispose(self)
end
return this