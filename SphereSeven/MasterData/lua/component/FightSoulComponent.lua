---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/11 21:43
---
---@class FightSoulComponent
---@field FightSouls table<number, FightSoul> @ key - id, value - FightSoul
local FightSoulComponent = BaseClass("FightSoulComponent", Component)
local base = Component

---@param self FightSoulComponent
local function Awake(self)
    base.Awake(self)
    self.FightSouls = {}
    self.bagCapacity = 0
    self.equipFightSoulIds = {}
end

local function Add(self,fightSoul)
    self.FightSouls[fightSoul.Id] = fightSoul
end

local function Get(self,fightSoulId)
    return self.FightSouls[fightSoulId]
end

---@return table<number, FightSoul> @ key: id, value: fightSoul
local function GetAllFightSouls(self)
    return self.FightSouls
end

local function GetFightSoulList(self)
    local fightSoulList = {}
    for key, value in pairs(self.FightSouls) do
        table.insert(fightSoulList, value)
    end
    return fightSoulList
end

---@param self FightSoulComponent
local function GetSameFightSoulList(self, templateId)
    local fightSoulList = {}
    for _,v in pairs(self.FightSouls) do
        if v.TemplateId == templateId then
            table.insert(fightSoulList, v)
        end
    end
    return fightSoulList
end

local function GetMaxLevelByStar(self, star)
    return tonumber(Z_Misc["FIGHT_SOUL_LEVEL_LIMIT_BY_MERGE"].Value[star])
end

local function Remove(self,fightSoulId)
    self.FightSouls[fightSoulId] = nil
end

local function Dispose(self)
    base.Dispose(self)

    for _,v in pairs(self.FightSouls) do
        v:Dispose()
    end
end

local function UpdateBagCapacity(self, count)
    if count ~= nil and count ~= 0 then
        self.bagCapacity = count
    end
end

local function UpdateData(self, fightSoulInfo)
    if self.FightSouls[fightSoulInfo.uid] ~= nil then
        self.FightSouls[fightSoulInfo.uid]:UpdateData(fightSoulInfo)
    else
        self:Add(Game.Registry:NewObject("FightSoul", fightSoulInfo), true)
    end
end

---@param self FightSoulComponent
local function GetLastAllExp(self, fightSoulId)
    local fightSoul = self.FightSouls[fightSoulId]
    local exp = 0
    local rare = fightSoul.config.Rare
    for i = fightSoul.level, fightSoul.maxLevel - 1 do
        exp = exp + Z_FightSoulLevelUpExp[i][RarityName[rare]]
    end
    exp = exp - fightSoul.exp
    if exp < 0 then
        exp = 0
    end
    return exp
end

--已经被装备的战魂 --所有被装备的战魂 Id
local function OnEquipFightSoulId1(self)
    local fightEquip = {}
    local Cards = Game.Scene.Player:GetComponent("CardComponent").Cards;
    for k,v in pairs(Cards) do
        for a,b in pairs({ 1,2,3}) do
            local fightSoul = v["FightSoul"..b]
            if fightSoul ~= 0 then
                if not table.any(fightEquip,function(h) return h.Id == self.FightSouls[fightSoul].Id  end)  then
                    if self.FightSouls[fightSoul] == nil then
                        Logger.LogError(Z_Card[v.TemplateId].Name.."--装备战魂"..b.."数据错误")
                    else
                        local FEquip = {Id = self.FightSouls[fightSoul].Id ,Card = v }
                        table.insert(fightEquip,FEquip)
                    end
                end
            end
        end
    end
    return fightEquip
end


--已经被装备的战魂 --所有被装备的战魂 TemplateId
local function OnEquipFightSoulId(self)
    local fightEquip = {}
    local Cards = Game.Scene.Player:GetComponent("CardComponent").Cards;
    for k,v in pairs(Cards) do
        for a,b in pairs({ 1,2,3}) do
            if v["FightSoul"..b] ~= 0 then
                if not table.any(fightEquip,function(h) return h.Id == self.FightSouls[v["FightSoul"..b]].TemplateId  end)  then
                    local FEquip = {Id = self.FightSouls[v["FightSoul"..b]].TemplateId ,Card = v }
                    table.insert(fightEquip,FEquip)
                end
            end
            
        end
    end
    return fightEquip
end

---@param fightSoul FightSoul
local function OnLock(self,fightSoul)
    ---@type protocol.FightSoulSetLockingReq
    local reqData = {}
    reqData.uid = fightSoul.Id
    reqData.lock = not fightSoul.Lock
    coroutine.start(function()
        local g2cFightSoulLock = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                PROTOCOL.FightSoulSetLockingReq, reqData)
    end)
end

--- 获取所有战魂种类数
local function GetAllFightSoulKindCount(self)
    return table.count(table.choose(Z_FightSoul,function(k,v) return v.NotOpen ~= 1 end))
end

function FightSoulComponent:GetBagCapacity()
    return self.bagCapacity
end

function FightSoulComponent:UpdateAllFightSoulEquipStatus(equipIds)
    for _, id in pairs(self.equipFightSoulIds) do
        if self.FightSouls[id] ~= nil then
            self.FightSouls[id]:ChangeEquip(false)
        end
    end

    for _, id in pairs(equipIds) do
        if self.FightSouls[id] ~= nil then
            self.FightSouls[id]:ChangeEquip(true)
        end
    end

    self.equipFightSoulIds = equipIds
end

FightSoulComponent.OnEquipFightSoulId=OnEquipFightSoulId
FightSoulComponent.OnEquipFightSoulId1=OnEquipFightSoulId1
FightSoulComponent.OnLock=OnLock
FightSoulComponent.Awake = Awake
FightSoulComponent.Add = Add
FightSoulComponent.Get = Get
FightSoulComponent.GetAllFightSouls = GetAllFightSouls
FightSoulComponent.GetFightSoulList = GetFightSoulList
FightSoulComponent.Remove = Remove
FightSoulComponent.Dispose = Dispose
FightSoulComponent.UpdateBagCapacity = UpdateBagCapacity
FightSoulComponent.UpdateData = UpdateData
FightSoulComponent.GetLastAllExp = GetLastAllExp
FightSoulComponent.GetSameFightSoulList = GetSameFightSoulList
FightSoulComponent.GetMaxLevelByStar = GetMaxLevelByStar
FightSoulComponent.GetAllFightSoulKindCount = GetAllFightSoulKindCount

return FightSoulComponent