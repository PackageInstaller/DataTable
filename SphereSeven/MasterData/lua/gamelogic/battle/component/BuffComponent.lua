---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/18 10:24
---
local BuffComponent = BaseClass("BuffComponent", Component)
local base = Component

if Buff == nil then
    Buff = import("..Buff.Buff")
    Buff_3000 = import("..Buff.TurnBuff.Buff_3000")
    Buff_4000 = import("..Buff.TurnDeBuff.Buff_4000")
end

local function GenSortId(self)
    self.sort_id = self.sort_id + 1
    return self.sort_id
end

local function Awake(self)
    base.Awake(self)
    self.sort_id = 0
    self.buffs = {}
    self.foreverBuffs = {}
    self.unit_battle_component = self.__entity:GetComponent("SsUnitBattleComponent")
    self.numeric_component = self.__entity:GetComponent("NumericComponent")
    self.character_component = self.__entity:GetComponent("CharacterComponent")
    self.unit_sound_component = self.__entity:GetComponent("SsUnitSoundComponent")
end

local function ClearMarkedRemoved(self)
    table.removeall(self.buffs,function (v) return v.IsRemoved end)
    self:OnBuffChanged()
end

---暂时是给被动技能失效时候调用，删除指定buff，必须匹配buffId,fromSkillId这两个个参数
local function RemoveBuff(self, buffId, fromSkillId, multiplyValue)
    if multiplyValue ~= nil then
        local tmptb = table.first(self.buffs,function (v) return not v.IsRemoved and v.FromSkillId == fromSkillId and v.BuffId == buffId end)
        if tmptb == nil then return end
        if tmptb.NumericVal <= multiplyValue then
            tmptb:OnRemoved()
        else
            tmptb:OnMultiply(-multiplyValue)
        end
        ClearMarkedRemoved(self)
        return
    end
    local tmptb = table.choose(self.buffs,function (k,v) 
        return not v.IsRemoved and v.FromSkillId == fromSkillId and v.BuffId == buffId
    end)
    table.walk(tmptb,function (k,v) v:OnRemoved() end)
    ClearMarkedRemoved(self)
end

---turnCount为0时，表示不限回合数
---isCannotDispelled 是否不可被驱散，默认为false可被驱散
local function CreateBuff(self,buffId,fromSkillId,srcUnit,targetUnit,turnCount,isCannotDispelled,numericType,numericVal,isCannotMultiply, data)
    local zBuff = Z_Buff[buffId]

    if zBuff == nil then
        Logger.LogError(string.format("buff %d config not found, src unit: %s, skill id: %d", buffId, srcUnit.Name, fromSkillId))
        return
    end

    if (not (zBuff.IsDeBuff == 1)) and self.character_component.UnableBuff > 0 then
        return
    end

    if zBuff.IsDeBuff == 1 and self.__entity:GetComponent("CharacterComponent"):IsImmuneDeBuff(buffId) then
        self.__entity:GetComponent("SsUnitBattleComponent"):GenHUDText(zBuff.ImmuneBuff, HUDTextType.Grey, HUDTextType.Tip)
        return
    end
    
    if zBuff.IsEachNotMultiply == 1 then
        if table.any(self.buffs,function (v) return v.IsEachNotMultiply and not v.IsRemoved end) then
            return
        end
    end
    
    local isNewBuff = true
    if zBuff.IsSelfMultiply == 1 then
        if isCannotMultiply then
            return
        end
        local mulBuff = table.first(self.buffs,function(v) return v.BuffId == buffId and not v.IsRemoved end)
        if mulBuff ~= nil then
            ClearMarkedRemoved(self)
            mulBuff:OnMultiply(numericVal or 0, data)
            if zBuff.IsDeBuff == 1 then
                self.unit_sound_component:CoPlayCommon(CommonSoundPath.buffSound)
            end
            self.unit_battle_component:BuffEffect(mulBuff.Name, zBuff.IsDeBuff ~= 1)
            self:OnBuffChanged()
            return mulBuff
        end
    elseif zBuff.IsMultiply == 1 then
        isNewBuff = true
    else
        local buff = table.first(self.buffs,function(v) return v.BuffId == buffId and not v.IsRemoved end)
        if buff ~= nil then
            -- 无法驱散的无限回合不要重置
            if buff.LeftTurn == 0 and buff.IsCannotDispelled then
                return buff
            end
            -- 剩余回合数较大不要重置
            if (turnCount ~= 0) and (buff.LeftTurn >= turnCount) then
                return buff
            end
            self:RemoveBuff(buff.BuffId, buff.FromSkillId)
            isNewBuff = false
        end
    end

    local module
    if zBuff.Kind == 1 then
        module = "TurnBuff"
    elseif zBuff.Kind == 2 then
        module = "OnceBuff"
    elseif zBuff.Kind == 3 then
        module = "TurnDeBuff"
    elseif zBuff.Kind == 4 then
        module = "SpecTrigEfx"
    elseif zBuff.Kind == 5 then
        module = "BossBuff"
    end
    local buffCls
    if buffId > 10000 then
        buffCls = require("GameLogic.Battle.Buff.NewBuff.Buff_"..buffId)
    else
        buffCls = require("GameLogic.Battle.Buff."..module..".Buff_"..buffId)
    end
    if buffCls == nil then return end
    local buff = buffCls.New(buffId,fromSkillId,srcUnit,targetUnit,zBuff.IsDeBuff == 1,LangUtil.GetConfLang(zBuff,"Name"))
    buff.IsSelfMultiply = zBuff.IsSelfMultiply == 1
    buff.IsEachNotMultiply = zBuff.IsEachNotMultiply == 1
    buff.LeftTurn = turnCount or 0
    buff.IsCannotDispelled = isCannotDispelled or false
    buff.NumericType = numericType or NumericType.Max
    buff.NumericVal = numericVal or 0
    buff.IsCannotMultiply = isCannotMultiply
    buff.Data = data
    buff.Tags = table.clone(zBuff.Tags)
    buff.Icon = zBuff.Icon
    buff.Desc = zBuff.Desc
    buff.Kind = zBuff.Kind
    buff.Efx =  zBuff.Efx
    buff.EfxSp= loadtable(zBuff.EfxSp)
    buff.SortId = GenSortId(self)
    buff:OnOccur()
    table.insert(self.buffs,buff)

    if buff.Kind == 3 then -- 受到持续性负面效果
        self.__entity:GetComponent("SkillComponent"):OnContinueDebuff()
    end
    
    ClearMarkedRemoved(self)

    if buff.LeftTurn > 0 then
        if zBuff.IsDeBuff == 1 then
            buff.LeftTurn = buff.LeftTurn - math.modf(self.numeric_component:Get(NumericType.DeBuffTurnReduce))
        else
            buff.LeftTurn = buff.LeftTurn + math.modf(self.numeric_component:Get(NumericType.BuffTurnIncrease))
        end
    end
    if zBuff.IsDeBuff == 1 and self.unit_sound_component then
        self.unit_sound_component:CoPlayCommon(CommonSoundPath.buffSound)
    end
    if self.unit_battle_component and isNewBuff then
        self.unit_battle_component:BuffEffect(buff.Name, zBuff.IsDeBuff ~= 1)
    end

    self:OnBuffChanged()

    return buff
end

-- 是否有buff
local function HasBuff(self)
    return table.any(self.buffs,function (v) return not v.IsRemoved and not v.IsDeBuff end)
end

-- 是否有debuff
local function HasDeBuff(self)
    return table.any(self.buffs,function (v) return not v.IsRemoved and v.IsDeBuff end)
end

local function HasBuffId(self, buffId)
    return table.any(self.buffs,function (v) return not v.IsRemoved and v.BuffId == buffId end)
end

local function HasBuffTag(self, tag)
    return table.any(self.buffs, 
        function (buff) 
            return table.any(buff.Tags, function (BuffTag) return BuffTag == tag end)
        end)
end

local function GetBuff(self, buffId)
    return table.first(self.buffs, function (v) return not v.IsRemoved and v.BuffId == buffId end)
end

local function GetBuffsById(self, buffId)
    return table.choose(self.buffs, function (k, v) return not v.IsRemoved and v.BuffId == buffId end)
end

local function BuffIdCount(self, buffId)
    return table.count(table.choose(self.buffs,function (k,v) return not v.IsRemoved and v.BuffId == buffId end))
end

local function BuffTypeCount(self, isDeBuff)
    return table.count(table.choose(self.buffs,function (k,v) return not v.IsRemoved and v.IsDeBuff == isDeBuff end))
end

-- 随机驱散一个buff（负面或增益）
local function RandomRemoveOneBuff(self, isDeBuff)
    if isDeBuff then
        if table.any(self.buffs,function (v) return not v.IsRemoved and v.IsDeBuff and not v.IsCannotDispelled end) then
            local tmptb = table.choose(self.buffs,function(_,v) return not v.IsRemoved and v.IsDeBuff and not v.IsCannotDispelled end)
            local buff = table.randget(table.values(tmptb))
            self.unit_battle_component:GenHUDText(Z_Buff[buff.BuffId].PurifyBuff, HUDTextType.Blue, HUDTextType.Tip)
            buff:OnRemoved()
            ClearMarkedRemoved(self)
        end
    else
        if table.any(self.buffs,function (v) return not v.IsRemoved and not v.IsDeBuff and not v.IsCannotDispelled end) then
            local tmptb = table.choose(self.buffs,function(_,v) return not v.IsRemoved and not v.IsDeBuff and not v.IsCannotDispelled end)
            local buff = table.randget(table.values(tmptb))
            self.unit_battle_component:GenHUDText(Z_Buff[buff.BuffId].PurifyBuff, HUDTextType.Blue, HUDTextType.Tip)
            buff:OnRemoved()
            ClearMarkedRemoved(self)
        end
    end
end

-- 随机获得一定数量的buff
local function RandomGetBuff(self, isDeBuff, num, filter)
    if isDeBuff then
        local tmptb = table.choose(self.buffs, function(_,v) return not v.IsRemoved and v.IsDeBuff and not v.IsCannotDispelled and (filter and filter(v) or true) end)
        local buff = table.randtake(table.values(tmptb), num)
        return buff
    else
        local tmptb = table.choose(self.buffs,function(_,v) return not v.IsRemoved and not v.IsDeBuff and not v.IsCannotDispelled and (filter and filter(v) or true) end)
        local buff = table.randtake(table.values(tmptb), num)
        return buff
    end
    -- return {}
end

-- 通常配合上面这个使用
local function RemoveOneBuff(self, buff)
    self.unit_battle_component:GenHUDText(Z_Buff[buff.BuffId].PurifyBuff, HUDTextType.Blue, HUDTextType.Tip)
    buff:OnRemoved()
    ClearMarkedRemoved(self)
end

-- 随机若干debuff
local function RandomDeBuff(self, num)
    local buffs = table.choose(Z_Buff, function (k, v) return v.IsDeBuff == 1 and v.IsShow == 1 end)
    return table.randtake(table.values(buffs), num)
end

-- 驱散全部负面buff或增益buff
local function RemoveAllBuff(self, isDeBuff)
    if isDeBuff then
        local tmptb = table.choose(self.buffs,function (_,v) return not v.IsRemoved and v.IsDeBuff and not v.IsCannotDispelled end)
        table.walk(tmptb,function (k,v)
            self.unit_battle_component:GenHUDText(Z_Buff[v.BuffId].PurifyBuff, HUDTextType.Blue, HUDTextType.Tip)
            v:OnRemoved() 
        end)
        ClearMarkedRemoved(self)
    else
        local tmptb = table.choose(self.buffs,function (_,v) return not v.IsRemoved and not v.IsDeBuff and not v.IsCannotDispelled end)
        table.walk(tmptb,function (k,v)
            self.unit_battle_component:GenHUDText(Z_Buff[v.BuffId].PurifyBuff, HUDTextType.Blue, HUDTextType.Tip)
            v:OnRemoved() 
        end)
        ClearMarkedRemoved(self)
    end
end

-- 获得所有的buff或debuff
local function GetAllBuff(self, isDebuff, includeCannotDispelled)
    if isDebuff == nil then
        isDebuff = false
    end

    if includeCannotDispelled == nil then
        includeCannotDispelled = true
    end

    return table.choose(self.buffs,
            function (_,v) 
                return not v.IsRemoved and (v.IsDebuff == isDebuff) and ((not v.IsCannotDispelled) | includeCannotDispelled) 
            end)
end

local function OnBuffChanged(self)
    UIManager:GetInstance():Broadcast(UIMessageNames.UIBuffGlances_CHG)
    local unit_ui_component = self.__entity:GetComponent("SsUnitUIComponent")
    if unit_ui_component then
        unit_ui_component:OnBuffChanged(self:GetBuffs())
    end
end

local function OnRoundStart(self)
    table.walk(self.buffs,function (k,v)
        v:OnRoundStart()
    end)
    ClearMarkedRemoved(self)
end

local function OnUnitSelfTurnStart(self)
    table.walk(self.buffs,function (k,v)
        v:OnUnitSelfTurnStart()
    end)
    ClearMarkedRemoved(self)
end

local function OnUnitTurnStartEvent(self, unit)
    table.walk(self.buffs,function (k,v)
        v:OnUnitTurnStartEvent(unit)
    end)
end

local function OnActStart(self)
    table.walk(self.buffs,function (k,v)
        v:OnActStart()
    end)
    ClearMarkedRemoved(self)
end

local function OnAtkStart(self)
    table.walk(self.buffs,function (k,v)
        v:OnAtkStart()
    end)
    ClearMarkedRemoved(self)
end

local function BeforeHit(self,activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:BeforeHit(activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function BeforeBeHit(self, activeSkillResult, atkUnit)
    table.walk(self.buffs,function (k,v)
        v:BeforeBeHit(activeSkillResult, atkUnit)
    end)
    ClearMarkedRemoved(self)
end

local function BeforeHitEvent(self, activeSkillResult, atkUnit, targetUnit)
    table.walk(self.buffs,function (k,v)
        v:BeforeHitEvent(activeSkillResult, atkUnit, targetUnit)
    end)
    ClearMarkedRemoved(self)
end

local function OnHit(self,activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:OnHit(activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function AfterHurt(self, activeSkillResult, atkUnit)
    table.walk(self.buffs,function (k,v)
        v:AfterHurt(activeSkillResult, atkUnit)
    end)
    ClearMarkedRemoved(self)
end

local function AfterAllHurt(self, atkUnit, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:AfterAllHurt(atkUnit, activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function AfterAllHurtByPry(self, atkUnit, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:AfterAllHurtByPry(atkUnit, activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function AfterAllHurtByNothing(self, atkUnit, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:AfterAllHurtByNothing(atkUnit, activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

--- 被技能攻击且结算之后
local function AfterBeHitAll(self, atkUnit, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:AfterBeHitAll(atkUnit, activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

--- 技能结算之后
local function AfterOneTargetAllHit(self, targetUnit, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:AfterOneTargetAllHit(targetUnit, activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function OnAtkEnd(self)
    table.walk(self.buffs,function (k,v)
        v:OnAtkEnd()
    end)
    ClearMarkedRemoved(self)
end

local function OnActEnd(self)
    table.walk(self.buffs,function (k,v)
        v:OnActEnd()
    end)
    ClearMarkedRemoved(self)
end

local function OnUnitSelfTurnEnd(self)
    table.walk(self.buffs,function (k,v)
        v:OnUnitSelfTurnEnd()
    end)
    ClearMarkedRemoved(self)
end

local function OnUnitTurnEndEvent(self, unit)
    table.walk(self.buffs,function (k,v)
        v:OnUnitTurnEndEvent(unit)
    end)
end

local function OnRoundEnd(self)
    table.walk(self.buffs,function (k,v)
        v:OnRoundEnd()
    end)
    ClearMarkedRemoved(self)
end

local function OnPrySuccess(self, activeSkillResult)
    table.walk(self.buffs,function (k,v)
        v:OnPrySuccess(activeSkillResult)
    end)
    ClearMarkedRemoved(self)
end

local function OnDead(self)
    self.foreverBuffs = {}
    table.walk(table.choose(self.buffs,function (k,v)
        return v.Forever
    end),function (k, v)
        table.insert(self.foreverBuffs, v)
    end)
    table.walk(table.choose(self.buffs,function (k,v) 
        return not v.IsRemoved 
    end),function (k,v) 
        v:OnRemoved() 
    end)
    ClearMarkedRemoved(self)
end

local function OnRevive(self)
    table.walk(self.foreverBuffs, function (k, v)
        local buff = self:CreateBuff(v.BuffId, v.FromSkillId, v.SrcUnit, v.TargetUnit, v.LeftTurn, v.IsCannotDispelled, v.NumericVal, v.NumericVal, v.IsCannotMultiply)
        if buff ~= nil then
            buff.Forever = true
        end
    end)
    self.foreverBuffs = {}
    self:OnBuffChanged()
end

local function GetBuffs(self)
    local buffs = {}
    table.walk(table.values(table.choose(self.buffs,function (k,v) return not v.IsRemoved end)),function (k,v)
        if buffs[v.uuid] == nil then
            buffs[v.uuid] = {UUID = v.uuid, Name=v.Name, IsRemoved = v.IsRemoved, LeftTurn=v.LeftTurn, Kind = v.Kind, Icon=v.Icon,Desc=v:GetDesc(),SortId=v.SortId,Multiply=1,Id=v.BuffId}
        else
            buffs[v.uuid]["Multiply"] = buffs[v.FromSkillId..""..v.BuffId]["Multiply"] + 1
        end
    end)
    local ret = table.values(buffs)
    table.sort(ret,function (a,b)
        return a.SortId < b.SortId
    end)
    return ret
end

local function IncAllBuffTurn(self, isDebuff, turnNum)
    turnNum = turnNum or 1
    Logger.BattleLog(string.format("所有buff延长 是否debuff:%s, 延长回合数:%s", isDebuff, turnNum))
    local tmptb = table.choose(self.buffs,function (_,v) return not v.IsRemoved and v.IsDeBuff == isDebuff and not v.IsCannotDispelled end)
    table.walk(tmptb,function (k, v)
        v:IncLeftTurn(turnNum)
    end)
end

local function Dispose(self)
    base.Dispose(self)
    --OnDead(self)
    self.buffs = {}
end

BuffComponent.Awake = Awake

BuffComponent.RemoveBuff = RemoveBuff
BuffComponent.CreateBuff = CreateBuff
BuffComponent.HasBuff = HasBuff
BuffComponent.HasDeBuff = HasDeBuff
BuffComponent.HasBuffId = HasBuffId
BuffComponent.HasBuffTag = HasBuffTag
BuffComponent.GetBuff = GetBuff
BuffComponent.GetBuffsById = GetBuffsById
BuffComponent.BuffIdCount = BuffIdCount
BuffComponent.BuffTypeCount = BuffTypeCount
BuffComponent.RandomRemoveOneBuff = RandomRemoveOneBuff
BuffComponent.RemoveAllBuff = RemoveAllBuff 
BuffComponent.GetAllBuff = GetAllBuff 
BuffComponent.RandomDeBuff = RandomDeBuff

BuffComponent.OnRoundStart = OnRoundStart
BuffComponent.OnUnitSelfTurnStart = OnUnitSelfTurnStart
BuffComponent.OnUnitTurnStartEvent = OnUnitTurnStartEvent
BuffComponent.OnActStart = OnActStart
BuffComponent.OnAtkStart = OnAtkStart
BuffComponent.BeforeHit = BeforeHit
BuffComponent.BeforeBeHit = BeforeBeHit
BuffComponent.BeforeHitEvent = BeforeHitEvent
BuffComponent.OnHit = OnHit
BuffComponent.AfterHurt = AfterHurt
BuffComponent.AfterAllHurt = AfterAllHurt
BuffComponent.AfterAllHurtByNothing = AfterAllHurtByNothing 
BuffComponent.AfterAllHurtByPry = AfterAllHurtByPry
BuffComponent.AfterBeHitAll = AfterBeHitAll
BuffComponent.AfterOneTargetAllHit = AfterOneTargetAllHit
BuffComponent.OnAtkEnd = OnAtkEnd
BuffComponent.OnActEnd = OnActEnd
BuffComponent.OnUnitSelfTurnEnd = OnUnitSelfTurnEnd
BuffComponent.OnUnitTurnEndEvent = OnUnitTurnEndEvent
BuffComponent.OnRoundEnd = OnRoundEnd 

BuffComponent.OnPrySuccess = OnPrySuccess 
BuffComponent.RandomGetBuff = RandomGetBuff  
BuffComponent.RemoveOneBuff = RemoveOneBuff

BuffComponent.OnDead = OnDead 
BuffComponent.OnRevive = OnRevive 
BuffComponent.GetBuffs = GetBuffs
BuffComponent.IncAllBuffTurn = IncAllBuffTurn

BuffComponent.OnBuffChanged = OnBuffChanged

BuffComponent.Dispose = Dispose

return BuffComponent