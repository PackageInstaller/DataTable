---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/16 16:01
---
local SsUnitAnimatorComponent = BaseClass("SsUnitAnimatorComponent",Component);
local base = Component

if SsUnitMotionType == nil then
    SsUnitMotionType = {
        None="None",
        Idle="Idle",
        FnJmp="FnJmp",
        FnJmpDown="FnJmpDown",
        BkJmp="BkJmp",
        BkJmpDown="BkJmpDown",
        Atk="Atk",
        Skl01="Skl01",
        Skl02="Skl02",
        Skl03="Skl03",
        Hit="Hit",
        ExType="ExType",
        Die = "Die",
    }
end

local worldpos=Vector4.New(0,0,0,0)
local projdir = Vector4.New(-2.55, 7.4, -6.33, 0.0)
local planePos = Vector4.New(0.0, -1.5, 0.0, 0.1)
local FadeParams = Vector4.New(1.73, 0.67, 0.51, 28.9)
local Falloff = 1.35

local function Awake(self)
    base.Awake(self)
    local animator = self.__entity.GameObject:GetComponent(typeof(CS.UnityEngine.Animator)) --获取单位的animator组件
    if animator == nil then return end

    if animator.runtimeAnimatorController == nil then return end

    if animator.runtimeAnimatorController.animationClips == nil then return end

    self.animator = animator
    self.keepHit = false -- 是否保持受击状态
    local animEvtConfs =  self.__entity.ZSsUnit.animEvt
    local newEvtFunc = function(name,length,keyFrame,totalFrames) --添加帧事件
        local ae = AnimationEvent()
        ae.functionName = name
        ae.time = length * keyFrame / totalFrames
        return ae
    end
    
    -- 获取动画
    self.animation_clips = {}
    table.csenu(self.animator.runtimeAnimatorController.animationClips,function (v)
        self.animation_clips[v.name] = v
        local conf = animEvtConfs[v.name]
        if v.name == "Attack" then
            conf = animEvtConfs["Atk"]
        elseif v.name == "Skill" then
            conf = animEvtConfs["Skl01"]
        elseif v.name == "Awake" then
            conf = animEvtConfs["Skl02"]
        end
        if conf ~= nil and conf.TotalFrames > 0 and v.events.Length == 0 then
            if conf.OnHit ~= nil and conf.OnHit > 0 then --受击动作添加受击事件
                v:AddEvent(newEvtFunc("OnHit",v.length,conf.OnHit,conf.TotalFrames))
            else
                v:AddEvent(newEvtFunc("OnSpell",v.length,1,conf.TotalFrames)) --添加施法事件
                if not IsEmptyNumberArray(conf.OnDamage) then
                    table.walk(conf.OnDamage,function (k,_v)
                        v:AddEvent(newEvtFunc("OnDamage",v.length,_v,conf.TotalFrames)) --添加伤害事件
                    end)
                end
                if not IsEmptyNumberArray(conf.OnMissile) then
                    table.walk(conf.OnMissile,function (k,_v)
                        v:AddEvent(newEvtFunc("OnMissile",v.length,_v,conf.TotalFrames)) --添加弹导事件
                    end)
                end
                if conf.OnCutIn ~= 0 then
                    v:AddEvent(newEvtFunc("OnCutIn",v.length,conf.OnCutIn,conf.TotalFrames)) --添加CutIn事件
                end
            end
        end
    end)

    self.parameters = {}
    table.csenu(self.animator.parameters,function (v)
        table.insert(self.parameters,v.name)
    end)
    --if #self.parameters == 0 then -- 有可能找不到组件上的动作，还是用定义的吧
    --    table.walk(SsUnitMotionType,function (k,v)
    --            table.insert(self.parameters,v)
    --    end)
    --end
    
    self.is_stop = false
    self.playingMotion = SsUnitMotionType.None
    self.motion_type = SsUnitMotionType.None
    self.motion_speed = 0
    self.stop_speed  = 0

    self.MatUpdateTime=0
    self.MatList={}
       table.csenu(self.__entity.GameObject:GetComponentsInChildren(typeof(SkinnedMeshRenderer)),function (smr)
       table.insert(self.MatList,smr.material)
          CSUtil.MatSetVector(smr.material,"_ShadowProjDir", projdir)
          CSUtil.MatSetVector(smr.material,"_ShadowPlane", planePos)
          CSUtil.MatSetVector(smr.material,"_ShadowFadeParams", FadeParams)
          CSUtil.MatSetFloat(smr.material,"_ShadowFalloff", Falloff)
     end)
     self.blackHoleMat = ResourcesManager:GetInstance():CoLoadAsync("UI/Materials/".."BlackHole.mat", typeof(Material))
     self.blackCon=false
     self.blacktime=0
     self.blackMatList={}
    --end
end
--特殊黑洞吸入特效
local function SetBlackHole(self)
    self.blackMatList={}
    self.oldMatList={}
    local pos= self.__entity:GetPosition()
    local worldpos=Vector4.New(pos.x,pos.y+1.5,pos.z+0.5,0)
    self.blacktime=0
    self.blackHoleMat:SetFloat("_Control", self.blacktime)
    self.blackHoleMat:SetVector("_BlackHolePos", worldpos)
    table.csenu(self.__entity.GameObject:GetComponentsInChildren(typeof(SkinnedMeshRenderer)),function (smr)
          local mat=smr.material
          smr.material=self.blackHoleMat
          smr.material:SetTexture("_MainTex",mat:GetTexture("_MainTex"))
          self.blackCon=true
          --local pos2= smr.transform.position
          table.insert(self.blackMatList,smr.material)
          self.oldMatList[smr.transform.name]=mat
    end)
end

local function OnHit(self) --受击时调用
    if self.keepHit then
        self.animator.speed = 0
    else
        self.animator.speed = 1
    end
end

local function OnDead(self)

end

local function Update(self)
    if self.blackCon then
        if self.blacktime<2 then
           self.blacktime=self.blacktime+0.6*Time.deltaTime
            table.walk(self.blackMatList,function(_,v)
                v:SetFloat("_Control", self.blacktime)
            end)
        else
           self.blacktime=0
           self.blackCon=false
           self.blackMatList={}
           table.csenu(self.__entity.GameObject:GetComponentsInChildren(typeof(SkinnedMeshRenderer)),function (smr)
                smr.material=self.oldMatList[smr.transform.name]
           end)
           self.oldMatList={}
        end
    else
        self.MatUpdateTime = self.MatUpdateTime+1
        if self.MatUpdateTime%7==0 then
            if self.MatList ~=nil then
                if self.character_component==nil then
                    self.character_component = self.__entity:GetComponent("CharacterComponent")
                end
                if self.character_component~=nil and self.character_component:IsNotDeadAndNotHide() then
                    local pos= self.__entity:GetPosition()
                    worldpos.x=pos.x
                    worldpos.y=pos.y
                    worldpos.z=pos.z
                else
                    worldpos.x=0
                    worldpos.y=-99999
                    worldpos.z=-99999
                end
                table.walk(self.MatList,function(_,v)
                    CSUtil.MatSetVector(v,"_WorldPos", worldpos)
                end)
            end
        end
    end
    if self.is_stop then return end
    if self.motion_type == SsUnitMotionType.None then 
        return 
    end
    xpcall(function ()
        self.animator.speed = self.motion_speed
        self.animator:SetTrigger(self.motion_type)
        self.motion_type = SsUnitMotionType.None
        end,function()
            error("--动作播放失败:"..self.motion_type,2)
        end)
end

local function HasParameter(self,parameter)
    if not table.contains(self.parameters,parameter) and parameter ~= "Speed" then
        Logger.LogError("Can not find animator : "..parameter)
    end
    return table.contains(self.parameters,parameter)
end

local function Play(self,motionType,motionSpeed) --设置播放的动作和速度
    if not HasParameter(self,motionType) then return end
    self.motion_speed = motionSpeed or 1
    self.motion_type = motionType
    self.playingMotion = motionType
    self.animator:Play(motionType, -1 ,0)
end

local function loggerGetCurStatus()
    local str
    local battle_comp = Game.Scene:GetComponent("BattleComponent")

    str = "CurActUnit:" .. battle_comp.CurActUnit.Name
    str = str..",CurActSkill:" .. battle_comp.CurActSkill.SkillId .. ",TargetUnits:"

    if battle_comp.CurActSkill.TargetUnits ~= nil then
        for _, value in pairs(battle_comp.CurActSkill.TargetUnits) do
            str = str.. ",".. value.Name
        end
    end
    return str
end

local function PlayInTime(self,motionType,time) --设置播放的动作和播放时间
    local animationClip = self.animation_clips[motionType]
    assert(animationClip ~= nil,"--找不到该动作:"..motionType .. " CardId :" .. self.__entity.ZCard.Id .. " " .. loggerGetCurStatus())
    local motionSpeed = animationClip.length / time
    assert(motionSpeed > 0.01 and motionSpeed < 1000,"motionSpeed--数值异常, "..motionSpeed..", --此动作跳过")
    self.motion_type = motionType
    self.motion_speed = motionSpeed
end

local function AnimationTime(self,motionType) --返回动作的播放时间
    local animationClip = self.animation_clips[motionType]
    assert(animationClip ~= nil,"--找不到该动作:"..motionType .. " CardId :" .. self.__entity.ZCard.Id .. " " .. loggerGetCurStatus())
    return animationClip.length
end

local function CurrentSkillIsPlaying(self)
    local stateInfo = self.animator:GetCurrentAnimatorStateInfo(0)
    return stateInfo:IsName(self.playingMotion)
end

local function PauseAnimator(self) --暂停播放
    if self.is_stop then return end
    self.is_stop = true
    if self.animator == nil then return end
    self.stop_speed = self.animator.speed
    self.animator.speed = 0
end

local function ResetAnimator(self,motionType) --重新播放
    local battle_comp = Game.Scene:GetComponent("BattleComponent")
    if battle_comp.CurActUnit == self.__entity and battle_comp.fsm.curState.stateName == BattleState.UnitAct then
        Logger.LogError("ResetAnimator Error: "..self.__entity.ZCard.Name.."is acting , ResetAnimator???")
        return
    end
    if self.motion_speed~=0 then
        self.animator:Play(motionType, -1 ,0)
        self.animator:Update(0)
        self.animator:ResetTrigger(motionType)
    end
end

local function ResumeAnimator(self) --重新播放
    self.motion_speed = 1
    self.keepHit=false
    self.animator.speed=1
    if not self.is_stop then return end
    self.is_stop = false
    if self.animator == nil then return end
    self.animator.speed = self.stop_speed
end

local function SetBoolValue(self,name,state) --设置参数
    if not HasParameter(self,name) then return end
    self.animator:SetBool(name,state)
end

local function SetFloatValue(self,name,state)
    if not HasParameter(self,name) then return end
    self.animator:SetFloat(name,state)
end

local function SetIntValue(self,name,val)
    if not HasParameter(self,name) then return end
    self.animator:SetInteger(name,val)
end

local function SetTrigger(self,name)
    if not HasParameter(self,name) then return end
    self.animator:SetTrigger(name)
end

local function SetAnimatorSpeed(self,speed) --设置播放速度
    self.stop_speed = self.animator.speed
    self.animator.speed = speed
end

local function ResetAnimatorSpeed(self)
    self.animator.speed = self.stop_speed
end

local function Dispose(self)
    base.Dispose(self)
    self.animation_clips = nil
    self.animation_clips = {}
    self.parameters = nil
    self.parameters = {}
    self.animator = nil
end

SsUnitAnimatorComponent.Awake = Awake
SsUnitAnimatorComponent.Update = Update
SsUnitAnimatorComponent.Play = Play
SsUnitAnimatorComponent.PlayInTime = PlayInTime
SsUnitAnimatorComponent.AnimationTime = AnimationTime
SsUnitAnimatorComponent.PauseAnimator = PauseAnimator
SsUnitAnimatorComponent.ResumeAnimator = ResumeAnimator
SsUnitAnimatorComponent.SetBoolValue = SetBoolValue
SsUnitAnimatorComponent.SetFloatValue = SetFloatValue
SsUnitAnimatorComponent.SetIntValue = SetIntValue
SsUnitAnimatorComponent.SetTrigger = SetTrigger
SsUnitAnimatorComponent.SetAnimatorSpeed = SetAnimatorSpeed
SsUnitAnimatorComponent.ResetAnimatorSpeed = ResetAnimatorSpeed
SsUnitAnimatorComponent.OnHit = OnHit
SsUnitAnimatorComponent.OnDead = OnDead
SsUnitAnimatorComponent.Dispose = Dispose
SsUnitAnimatorComponent.SetBlackHole=SetBlackHole
SsUnitAnimatorComponent.ResetAnimator=ResetAnimator 
SsUnitAnimatorComponent.CurrentSkillIsPlaying=CurrentSkillIsPlaying 
SsUnitAnimatorComponent.loggerGetCurStatus = loggerGetCurStatus

return SsUnitAnimatorComponent