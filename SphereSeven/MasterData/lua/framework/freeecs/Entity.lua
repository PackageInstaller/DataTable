---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/4/9 15:49
---
---@class Entity
local Entity = BaseClass("Entity", Updatable)

local function __init(self,...)
    self.is_disposed = false
    self.Components = {}
    self:Awake(...)
end

local function Awake(self) 
    --print("<color=green>[Entity] "..self._class_type.__cname.." Awake</color>")
end

-- 添加永久组件
local function AddForeverComponent(self, componentName, ...)
    
end

local function AddComponent(self,componentName,...)
    assert(self.Components[componentName] == nil,"AddComponent, component already exist,component:"..componentName)
    local component = Game.Registry:NewObject(componentName,self,...)
    self.Components[componentName] = component
    return component
end

local function RemoveComponent(self,componentName)
    local component = self.Components[componentName]
    --assert(component ~= nil,"RemoveComponent, component maybe already removed,component:"..componentName)
    if component == nil then
        print("RemoveComponent, component maybe already removed,component:"..componentName)
        return
    end
    component:Dispose()
    self.Components[componentName] = nil
end

local function GetComponent(self,componentName)
    local component = self.Components[componentName]
    return component
end

local function Dispose(self)
    if(self.is_disposed) then
        return
    end

    self:EnableUpdate(false)

    for k, v in pairs(self.Components) do
        v:Dispose()
    end
    
    self.is_disposed = true
end

local function __delete(self)
    self:Dispose()
end

Entity.__init = __init
Entity.__delete = __delete
Entity.Awake = Awake
Entity.AddComponent = AddComponent
Entity.RemoveComponent = RemoveComponent
Entity.GetComponent = GetComponent
Entity.Dispose = Dispose

return Entity