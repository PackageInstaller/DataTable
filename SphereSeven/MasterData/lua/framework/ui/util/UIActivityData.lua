---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/9 14:34
---

local UIActivityData = {}
local this = UIActivityData

----------------活动商店-----------------------------------------------------------------------------------

function this.GetStorePurCount(activityInfos, id)
    local purchaseData = table.first(activityInfos.PurchasesDetail,function(v)
        return v.Key == id
    end)
    if purchaseData then
        return purchaseData.Val
    end
    return 0
end

function this.InitStoreData(activityId)
    local zData = {}
    return zData
end

function this.GetStoreZItemInfo(kind, templateId)
    local name, z
    local maskEnabled = false
    --1:道具 2:角色 3:战魂 5:金币 7:装备
    if kind == 1 then --道具
        z = Z_Item[templateId]
        name = z.Name
    elseif kind == 2 then --角色
        z = Z_Card[templateId]
        name = z.Name
        maskEnabled = true
    elseif kind == 3 then --战魂
        z = Z_FightSoul[templateId]
        name =  LangUtil.GetSysLang(259) .. "\u{00A0}".. z.Name
        maskEnabled = true
    elseif kind == 5 then --金币
        name = "金.币." --z.Name
    elseif kind == 7 then --装备
        z = Z_Equip[templateId]
        name = z.Name
    end

    return {name = name, maskEnabled = maskEnabled}
end

function this.OnStoreBuy(zStore, zInfo, data, callBack)
    local tipData = {}
    local str = Z_ActivityStory[zStore.ActivityId].Name .."x".. zStore.TotalPrice
    tipData.title = LangUtil.GetSysLang(9)--"提示"
    tipData.type = 2

    tipData.message = string.gsub(LangUtil.GetSysLang(1089), "XX", str)--确定使用XX兑换YxZ
    tipData.message = string.gsub(tipData.message, "Y", zInfo.name)
    tipData.message = string.gsub(tipData.message, "Z", zStore.Amount)
    tipData.goodsKind = zStore.GoodsType
    tipData.TemplateId = zStore.GoodsId
    tipData.Item1Text = UIUtil.ScientificCount(data.demonCount)
    tipData.Item1goodsKind = GoodsKind.DemonPoint
    tipData.Item1TemplateId = zStore.ActivityId
    tipData.num = zStore.Amount
    tipData.But2 = function()
        callBack()
    end

    UIUtil.ToolTipEight(tipData)
end

function this.OnStoreBuyLimit(zStore, data)
    if not data.component:ActiveIsOpen(zStore.ActivityId, 1) then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(839))--活动已结束
        return 2
    end

    if zStore.QuotaNum > 0 and zStore.QuotaNum <= this.GetStorePurCount(data.activityInfos, zStore.Id) then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1064))--超过限购数量
        return 2
    end
    
    if data.activityInfos.DemonCount < zStore.TotalPrice then--"XX不足"
        UIUtil.ToolTipFourth(string.gsub(LangUtil.GetSysLang(1098),"XX", Z_ActivityStory[zStore.ActivityId].Name))
        return 3
    end
    
    return 1
end

function this.GetLinesCount(size, constNum)
    return math.modf(size / constNum + (size % constNum > 0 and 1 or 0 ))
end

function this.GetCellItemCounts(size, constNum, row)
    return math.modf(size / constNum > row and constNum or size % constNum)
end

function this.ExClickDiff(battleEx, id)
    battleEx.clientData:SetCurBattleDemoDifficulty(id)
    if id ~= nil then
        battleEx.selectDiff = id
    end
    for k, v in pairs(battleEx.diffSelectList) do
        v:SetActive(k == battleEx.selectDiff)
    end
end

function this.InitExDiff(battleEx)
    for k,v in pairs(battleEx.diffList) do
        local transform = v.transform
        local lock = transform:Find("Lock").gameObject
        local btn = transform:GetComponent("Button")
        if k ~= 1 then
            local detail = table.any(battleEx.activityInfos.LevelDetail,function(f) return f.Dif == k end)
            lock:SetActive(not detail)
            btn.enabled = detail
        else
            lock:SetActive(false)
            btn.enabled = true
        end
    end
    if not table.any(battleEx.activityInfos.LevelDetail,function(f) return f.Dif == battleEx.selectDiff end) then
        battleEx.selectDiff = 1
    end
    for k, v in pairs(battleEx.diffSelectList) do
        v:SetActive(k == battleEx.selectDiff)
    end
end







return this