---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/9 14:34
---

local UIPublic = {};
local this = UIPublic

this.RareNames = {[1]="R",[2]="SR",[3]="SSR"}
this.RareConfig = {[1] = "R.png",[2] = "SR.png",[3] = "SSR.png"}
this.MonsterRareConfig = {[1] = "R_0.png",[2] = "SR_0.png",[3] = "SSR_0.png",[4] = "UR_0.png"}
this.AtkDistanceConfig = {[1] = "近战图标.png",[2] = "远程图标.png" }   --ignoreCN
this.MainPropConfig = {[1] = "物.png",[2] = "法.png"}   --ignoreCN
this.SubPropConfig = {[1] = "火.png",[2] = "水.png",[3] = "地.png",[4] = "风.png",[5] = "雷.png",[6] = "光.png",[7] = "暗.png",[8] = "天.png",}   --ignoreCN
this.AbiliTypeConfig = {[1] = "万能.png",[2] = "攻击.png",[3] = "魔法.png",[4] = "防御.png",[5] = "支援.png",}   --ignoreCN
--this.EquipPartName = {LangUtil.GetSysLang(243),LangUtil.GetSysLang(244),LangUtil.GetSysLang(245),LangUtil.GetSysLang(246),
--                      LangUtil.GetSysLang(247),LangUtil.GetSysLang(248)}
--this.ArrayNames = {LangUtil.GetSysLang(177),LangUtil.GetSysLang(178),LangUtil.GetSysLang(179),LangUtil.GetSysLang(180),
--                   LangUtil.GetSysLang(181),LangUtil.GetSysLang(182),LangUtil.GetSysLang(183),LangUtil.GetSysLang(184)}

local color1 = Color.New(1,1,1,0.5)
local levelUpRate = tonumber(Z_Misc["CHARACTER_LEVEL_UP_RATE"].Value[1])

SpineAnimType = {
  Home = "home"   
}

--1 物品、2角色、3战魂、4无偿星石、5金钱、6魔晶、7装备、
--8星沙、9星皇点、10幽魂碎片、11有偿星石(充值)
GoodsKind = {
    Item = 1, Card = 2, FightSoul = 3, FreeStarStone = 4, GoldCoin = 5, MagicCrystal = 6, Equip = 7,
    StarSand = 8, EmperorStarPoint = 9, DemonPoint = 10, PaidStarStone = 11, CardSkin = 12,
    Faith = 13, SkinDefault = 100,
}
RewordTypeList = {"Item","Card","FightSoul","StarStone", "GoldCoin", "MagicCrystal","Equip",
                  "StarSand","EmperorStarPoint", "DemonPoint"}


function this.InitStar(gameObject,card) --星级
    local transform = gameObject.transform
    for i = 0,transform.childCount - 1 do
        transform:GetChild(i).gameObject:SetActive(card.Star > i)
    end
end

function this.NewInitStar(image,star)
    local func = function() 
        image.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/Star_".. star ..".png")
    end
    coroutine.start(func)
end

function this.NewInitLine(image,rare)
    coroutine.start(function ()
        image.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/".. UIPublic.RareNames[rare] .."_Line.png")
    end)
end

function this.GetSkin(cardId, skinId)
    if Z_Skin[skinId] ~= nil then
        return Z_Skin[skinId]
    end

    local zSkins = table.choose(Z_Skin,function(k,v) return v.CharacterId == cardId and v.Stage == skinId end)
    if zSkins == nil or table.count(zSkins) <= 0 then
        --Logger.LogError("can not find skin by cardId: "..cardId.." skinId: "..skinId)
        return nil
    end
    return table.first(zSkins)
end

function this.PlaySpineAnim(spineRoot,card,spineAnimType)
    local root = spineRoot.transform
    local gameObject
    if root.childCount > 0 then
        gameObject =root:GetChild(0):GetChild(0).gameObject
    else
        return
    end
    local zSkin = UIPublic.GetSkin(card.TemplateId, card.SkinId)
    --local zSkin = Z_Skin[card.TemplateId * 100 + card.SkinId]
    local animTb = loadtable(zSkin.SpineAnimNames)
    local defName = animTb.default
    local playTb = animTb[spineAnimType]
    local rdNum = Mathf.Random(1,table.count(playTb))
    print("rdNum:"..rdNum)
    local playName = playTb[rdNum]
    print("playName:"..playName)
    local sk = gameObject:GetComponent("SkeletonGraphic")
    coroutine.start(function()
        local state = sk.AnimationState:SetAnimation(0, playName, false)
        coroutine.waituntil(function()
            if not IsNull(gameObject) then
                return state.IsComplete
            else
                return true
            end
        end)
        if not IsNull(gameObject) then
            sk.AnimationState:SetAnimation(0, defName, true)
        end
    end)
end

function this.InitLock(gameObject,card) --锁
    local transform = gameObject.transform
    local open = transform:GetChild(0).gameObject
    local close = transform:GetChild(1).gameObject
    local _bool = card.Lock == 1
    open:SetActive(not _bool)
    close:SetActive( _bool)
    UIUtil.AddBtnEvent(open,function(go) PublicRequest.SendLockRequest(card) end)
    UIUtil.AddBtnEvent(close,function(go) PublicRequest.SendLockRequest(card) end)
end

function this.InitLevel(gameObject,card) --等级
    if card.Level == -1 then
        if gameObject.transform.parent:Find("Image") then
            gameObject.transform.parent:Find("Image").gameObject:SetActive(false)
        end
        gameObject:GetComponent("Text").text = ""
    else
        if gameObject.transform.parent:Find("Image") then
            gameObject.transform.parent:Find("Image").gameObject:SetActive(true)
        end
        gameObject:GetComponent("Text").text = "LV."..card.Level
    end
    
end

function this.InitFriendly(gameObject,card) --亲密度
    gameObject.transform:Find("FriendlyText"):GetComponent("Text").text = card.CloseDegree
end

function this.InitAtkDistance(gameObject,param) --攻击距离
    local distance
    if type(param) == "number" then
        distance = param
    else
        distance = param.AtkType
    end
    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.Battle,this.AtkDistanceConfig[distance],true) 
end

function this.InitAbiliType(gameObject,param) --角色能力类型 
    local abiliType
    if type(param) == "number" then
        abiliType = param
    else
        abiliType = param.AbiliType
    end
    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.CardType,this.AbiliTypeConfig[abiliType],true)
end

function this.InitRareFrame(gameObject,param,isMonster) --稀有度框
    local rare
    if type(param) == "number" then
        rare = param
    else
        rare = param.Rare
    end

   --local config
   --if isMonster then
   --    config = this.MonsterRareConfig
   --else
   --    config = this.RareConfig
   --end

    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.RareFrame,this.RareNames[rare],true)
end


function this.InitMainProp(gameObject,param)  --主属性
    local mainProp
    if type(param) == "number" then
        mainProp = param
    else
        mainProp = param.MainProp
    end
    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.MainProp,this.MainPropConfig[mainProp],true)
end

function this.InitSubProp(gameObject,param) --副属性
    local subProp
    if type(param) == "number" then
        subProp = param
    else
        subProp = param.SubProp
    end
    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.Prop,this.SubPropConfig[subProp],true)
end

function this.InitRare(gameObject,param) --稀有度
    local rare
    if type(param) == "number" then
        rare = param
    else
        rare = param.Rare
    end
    UIUtil.SetSprite(gameObject:GetComponent("Image"),AtlasConfig.Rate,this.RareConfig[rare],true)
end

function this.InitNumerical(gameObject,ssUnit) --面板属性
    local transform = gameObject.transform
    local hp_text = transform:Find("HP"):Find("Value"):GetComponent("Text")
    local atk_text = transform:Find("ATK"):Find("Value"):GetComponent("Text")
    local def_text = transform:Find("DEF"):Find("Value"):GetComponent("Text")
    local speed_text = transform:Find("SPEED"):Find("Value"):GetComponent("Text")
    local magic_def_text = transform:Find("MAGICDEF"):Find("Value"):GetComponent("Text")
    if ssUnit == nil then
        hp_text.text = ""
        atk_text.text = ""
        def_text.text = ""
        speed_text.text = ""
        magic_def_text.text = ""
        return
    end
    local numeric_component = ssUnit:GetComponent("NumericComponent")
    hp_text.text = math.modf(numeric_component:Get(NumericType.MaxHp))
    atk_text.text = math.modf(numeric_component:Get(NumericType.Atk))
    def_text.text = math.modf(numeric_component:Get(NumericType.Def))
    speed_text.text = math.modf(numeric_component:Get(NumericType.Speed))
    magic_def_text.text = math.modf(numeric_component:Get(NumericType.MagicDef))
end

function this.GetNumerical(card, nextLevel)
    if nextLevel == nil then
        nextLevel = card.Level
    end

    local numeric_component = card:GetComponent("NumericComponent")
    local zCard = Z_CharacterGrowth[card.TemplateId][nextLevel]
    local cardComponent = Game.Scene.Player:GetComponent("CardComponent")
    local curcard = cardComponent.Cards[card.Id]
    local currentCardData = Z_CharacterGrowth[card.TemplateId][curcard.Level]

    local resultTable = {
        hp =  math.modf(numeric_component:Get(NumericType.MaxHp)) - currentCardData.Hp + zCard.Hp,
        atk = math.modf(numeric_component:Get(NumericType.Atk)) - currentCardData.Atk + zCard.Atk,
        def = math.modf(numeric_component:Get(NumericType.Def)) - currentCardData.Def + zCard.Def,
        speed = math.modf(numeric_component:Get(NumericType.Speed)) - currentCardData.Speed + zCard.Speed,
        magicDef = math.modf(numeric_component:Get(NumericType.MagicDef)) - currentCardData.MagicDef + zCard.MagicDef
    }
    return resultTable
end

function this.InitEquipImage(equipId,gameObject) --装备图片
    local equip = Z_Equip[equipId]
    local transform = gameObject.transform
    local starBg = transform:Find("StarBg"):GetComponent("Image")
    local avatar = transform:Find("Avatar"):GetComponent("Image")
    
    starBg.gameObject:SetActive(false)
    avatar.gameObject:SetActive(false)
    if equip ~= nil then
        coroutine.start(function()
            UIPublic.InitEquipBg(equip,starBg)
            UIUtil.SetSprite(avatar,AtlasConfig.Equip,equip.EquipIcon)
            starBg.gameObject:SetActive(true)
            avatar.gameObject:SetActive(true)
        end)
    end
end

function this.InitOnClickEquipEvent(equipId,card,gameObject,index)  --添加点击装备框事件
    UIUtil.AddBtnEventNoBug(gameObject,function(go)
        -- local equipList = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList(index, card.Id)
        -- if table.count(equipList) == 0 then
        --     UIUtil.ToolTipFourth(LangUtil.GetSysLang(1170))
        --     return
        -- end

        UIManager:GetInstance():OpenWindow(UIWindowNames.UIChooseEquip,
        {
            characterId = card.Id,
            slot = index,
            callBack = function(newSlot, equipId)
                if equipId == nil then
                    equipId = 0
                end
                PublicRequest.SendRequest(PROTOCOL.CharacterPackEquipReq,{
                    character_id = card.Id,
                    slot = newSlot,
                    eid = equipId,
                })
            end,
        })
    end)
end

function this.InitOnClickFightSoulEvent(fightSoulId,card,gameObject,clickEvent,index)  --添加点击战魂框事件
    local fightSouls = Game.Scene.Player:GetComponent("FightSoulComponent").FightSouls
    local fightSoul = fightSouls[fightSoulId]
    if clickEvent ~= nil then
        UIUtil.AddBtnEvent(gameObject,function(go) clickEvent(card,fightSoul,index) end)
    end
end


function this.InitFightSoulImage(fightSoulId,gameObject,card) --战魂图片
    local fightSouls 
    if card ~= nil and card.IsSupport == true then
        fightSouls = card.FightSouls
    else
        fightSouls =Game.Scene.Player:GetComponent("FightSoulComponent").FightSouls
    end
    local fightSoul = fightSouls[fightSoulId]
    gameObject:SetActive(false)
    if fightSoul ~= nil then
        coroutine.start(function()
            UIUtil.SetFightSoulSprite(gameObject:GetComponent("Image"),fightSoul.config.Id,FightSoulPictureType.Little)
            gameObject:SetActive(true)
        end)
    end
end


function this.InitEquip(gameObject,card,clickEvent) --装备
    local equipList = Game.Scene.Player:GetComponent("EquipComponent")--:Get()
    local transform = gameObject.transform
    local equip1 =  transform:Find("Equip1").gameObject
    local equip2 =  transform:Find("Equip2").gameObject
    local equip3 =  transform:Find("Equip3").gameObject
    local equip4 =  transform:Find("Equip4").gameObject
    local equip5 =  transform:Find("Equip5").gameObject
    local equip6 =  transform:Find("Equip6").gameObject
    local equipTab = {{id = equipList:Get(card.Hand1Equip), gameObject = equip1},
                      {id = equipList:Get(card.Hand2Equip), gameObject = equip2},
                      {id = equipList:Get(card.BodyEquip), gameObject = equip3},
                      {id = equipList:Get(card.HeadEquip), gameObject = equip4},
                      {id = equipList:Get(card.FootEquip), gameObject = equip5},
                      {id = equipList:Get(card.AdornEquip), gameObject = equip6}
    }
    for k,v in pairs(equipTab) do
        v.gameObject.transform:Find("Avatar").gameObject:SetActive(v.id ~= nil)
        v.gameObject.transform:Find("StarBg").gameObject:SetActive(v.id ~= nil)
        if v.id ~= nil then
            this.InitEquipImage(v.id.TemplateId,v.gameObject)
        end
    end

    if clickEvent ~= nil then
        for i = 0,transform.childCount - 1 do
            local frame = transform:GetChild(i).gameObject
            if equipTab[i+1].id ~= nil then
                this.InitOnClickEquipEvent(equipTab[i+1].id.Id ,card,frame,i+1)
            else
                this.InitOnClickEquipEvent(nil,card,frame,i+1)
            end
        end
    end
end

function this.InitFightSoul(gameObject,card,clickEvent) --战魂
    local transform = gameObject.transform
    local path1 = "FightSoul1/FightSoul"
    local path2 = "FightSoul2/FightSoul"
    local path3 = "FightSoul3/FightSoul"
    local fightSoul1 =  transform:Find(path1).gameObject
    local fightSoul2 =  transform:Find(path2).gameObject
    local fightSoul3 =  transform:Find(path3).gameObject
    local fightSoulTab = {{id = card.FightSoul1, gameObject = fightSoul1},{id = card.FightSoul2, gameObject = fightSoul2},
                          {id = card.FightSoul3, gameObject = fightSoul3}}
    for k,v in pairs(fightSoulTab) do
        this.InitFightSoulImage(v.id,v.gameObject,card)
    end

    for i = 0,transform.childCount - 1 do
        local frame = transform:GetChild(i).gameObject
        this.InitOnClickFightSoulEvent(fightSoulTab[i+1].id ,card,frame,clickEvent,i+1)
    end
end

function this.InitJadePearl(gameObject,card) --玉珠
    local transform = gameObject.transform:Find("Base")
    local zCard = Z_Card[card.TemplateId]
    local jadePearlImg = this.SubPropConfig[zCard.SubProp]
    for i = 0,transform.childCount -1 do
        local jadePear = transform:GetChild(i).gameObject
        if i + 1 <= card.Bead then
            jadePear:SetActive(true)
            UIUtil.SetSprite(jadePear:GetComponent("Image"),AtlasConfig.JadePearl,jadePearlImg,true)
        else
            jadePear:SetActive(false)
        end
    end
end

function this.InitCardDataNew(card,gameObject)
    local cardTra = gameObject.transform:Find("CardInfo")
    local level = cardTra:Find("Level")
    local star = cardTra:Find("Star")
    this.InitLevel(level,card)
    this.InitStar(star,card)
end



function this.InitCardItemDataNew(card,gameObject,isxc, skinId)
    local zCard = Z_Character[card.Id]
    local cardTra = gameObject.transform
    local rc = cardTra:GetComponent("ReferenceCollector")

    local levelTxt 
    local nameTxt
    local star
    local atkDistance 
    local mainProp 
    local subProp
    local rare
    local avatar 
    local frame
    local abiliType 
    local lock
    local TextBg
    local dividing
    local rarity
    local hint
    if rc ~= nil then
        levelTxt = LangUtil.BindText(rc:GetObject("LevelText"),FontType.All_Number)
        nameTxt = LangUtil.BindText(rc:GetObject("NameText"),FontType.All_Number)
        star = rc:GetObject("Star").transform
        atkDistance = rc:GetObject("AtkDistance").transform
        mainProp = rc:GetObject("MainProp").transform
        subProp = rc:GetObject("SubProp").transform
        rare = rc:GetObject("Rare").transform
        avatar = rc:GetObject("Avatar"):GetComponent("Image")
        frame = rc:GetObject("Frame").transform
        abiliType = rc:GetObject("AbiliType").transform
        lock =  rc:GetObject("Lock")
        TextBg =  rc:GetObject("Text_bg")
        dividing = rc:GetObject("Dividing"):GetComponent("Image")
        rarity = rc:GetObject("Raility"):GetComponent("Image")
        hint = rc:GetObject("Hint")
    else
        levelTxt = LangUtil.BindText(cardTra:Find("LevelText"),FontType.All_Number)
        nameTxt = LangUtil.BindText(cardTra:Find("NameTextRoot/NameText"),FontType.All_Number)
        star = cardTra:Find("Star")
        atkDistance = cardTra:Find("AtkDistance")
        mainProp = cardTra:Find("MainProp")
        subProp = cardTra:Find("SubProp")
        rare = cardTra:Find("Rare")
        avatar = cardTra:Find("Avatar"):GetComponent("Image")
        frame = cardTra:Find("Frame")
        abiliType = cardTra:Find("AbiliType")
        lock =  cardTra:Find("Lock").gameObject
        TextBg = cardTra:Find("Text_bg").gameObject
        dividing = cardTra:Find("Dividing"):GetComponent("Image")
        rarity = cardTra:Find("Raility"):GetComponent("Image")
        hint = cardTra:Find("Hint")
    end

    if not IsNull(TextBg) then
        TextBg:SetActive(false)
    end
    if not IsNull(hint) then
        hint.gameObject:SetActive(false)
    end

    lock:SetActive(card.Lock == 1)
    avatar.color = Color.New(1,1,1,1)
    nameTxt.text = Z_Card[card.Id].Name
    UIUtil.ScrollText(nameTxt)

    if rc ~= nil then
        rc:GetObject("Select"):SetActive(false)
        rc:GetObject("Support"):SetActive(false)
    else
        cardTra:Find("Select").gameObject:SetActive(false)
        cardTra:Find("Support").gameObject:SetActive(false)
    end

    if not IsNull(rc and rc:GetObject("New") or cardTra:Find("New")) then
        cardTra:Find("New").gameObject:SetActive(false)
    end
   
    subProp.gameObject:SetActive(Z_Character[card.Id] ~= nil)
    rarity.gameObject:SetActive(Z_Character[card.Id] ~= nil)
    dividing.gameObject:SetActive(Z_Character[card.Id] ~= nil)
    star.gameObject:SetActive(Z_Character[card.Id] ~= nil)

     if Z_Character[card.Id] ~= nil then
         UIUtil.SetSprite(mainProp:GetComponent("Image"), AtlasConfig.Class, 
         Z_Character[card.Id].Class .. "_" .. zCard.Rarity ..".png")
         this.InitSubProp(subProp,zCard.Prop)
         this.InitRareFrame(frame,zCard.Rarity)
         this.InitLevel(levelTxt,card)
         this.NewInitStar(star:GetComponent("Image"),card.Star)
         coroutine.start(function ()
            dividing.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/"..UIPublic.RareNames[zCard.Rarity].."_Line.png")
            rarity.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCard.Rarity]..".png")
         end)
     else
         coroutine.start(function ()
            this.InitSubProp(subProp,Z_Card[card.Id].Rare)
            UIUtil.SetSprite(frame:GetComponent("Image"),AtlasConfig.RareFrame, this.RareNames[Z_Card[card.Id].Rare] .. "_Monster.png",true)
         end)
     end

    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    if skinId == nil and card.SkinId ~= nil and card.SkinId ~= 0 then
        skinId = card.SkinId
    end
    UIUtil.NewSetCardSprite(avatar,card.Id, skinId, CardPictureType.Middle,isxc)
     --Logger.Log(Time.time)
end

---@param card Card
function this.InitCardItemLittle(card, gameObject)
    ---@type ReferenceCollector
    local rc = gameObject.transform:GetComponent("ReferenceCollector")
    local frame = rc:GetObject("Frame"):GetComponent("Image")
    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local rarity = rc:GetObject("Raility"):GetComponent("Image")
    local prop = rc:GetObject("Prop"):GetComponent("Image")
    local star = rc:GetObject("Star"):GetComponent("Image")
    local levelText = LangUtil.BindText(rc:GetObject("LevelText"))
    local class = rc:GetObject("Class"):GetComponent("Image")

    local zCharacter =  Z_Character[card.Id]
    if card.Star ~= nil then
        star.gameObject:SetActive(true)
        UIPublic.NewInitStar(star, card.Star)
    else
        star.gameObject:SetActive(false)
    end

    UIUtil.SetSprite(class, AtlasConfig.Class, zCharacter.Class .. "_" .. zCharacter.Rarity ..".png")
    coroutine.start(function ()
        rarity.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCharacter.Rarity]..".png")
    end)
    this.InitRareFrame(frame, zCharacter.Rarity)
    UIUtil.NewSetCardSprite(avatar,card.Id, nil, CardPictureType.Little)
    if card.Level ~= nil then
        levelText.text = "LV." .. card.Level
    else
        levelText.text = ""
    end
    this.InitSubProp(prop, zCharacter.Prop)
end

---@param fightSoul FightSoul
---@param transform Transform @ 节点 使用一个通用的预制体 UI/Intens/UIFightSoulCardInfo
function this.InitFightSoulFace(fightSoul,transform, isHideHolder, isHideLock)
    local zFightSoul = Z_FightSoul[fightSoul.TemplateId]
    local face = transform:Find("Mask/Face"):GetComponent("Image")
    local frame = transform:Find("Frame"):GetComponent("Image")

    local sub = transform:Find("Sub"):GetComponent("Image")
    local nameTxt = transform:Find("Name")
    if IsNull(nameTxt) then
        nameTxt = LangUtil.BindText(transform:Find("NameTextRoot/Text"))
    else
        nameTxt = LangUtil.BindText(nameTxt)
    end

    local holder = transform:Find("Holder")
    if not IsNull(holder) then
        holder.gameObject:SetActive(fightSoul.isEquip and not isHideHolder)
        if not IsNull(holder:GetComponent("Image")) then
            LangUtil.GetSpriteLang(487, function(sprite) holder:GetComponent("Image").sprite = sprite end)
        end
    end
    
    local lock = transform:Find("LockRoot/Lock").gameObject
    local notLock = transform:Find("LockRoot/NotLock").gameObject
    if fightSoul.Lock == nil or isHideLock then
        lock:SetActive(false)
        notLock:SetActive(false)
    else
        lock:SetActive(fightSoul.Lock)
        notLock:SetActive(not fightSoul.Lock)
    end

    local starRoot = transform:Find("StarRoot"):GetComponent("Image")
    if fightSoul.Star ~= nil and fightSoul.Star > 0 then
        starRoot.gameObject:SetActive(true)
        UIPublic.NewInitStar(starRoot, fightSoul.Star)
    else
        starRoot.gameObject:SetActive(false)
    end
    UIPublic.NewInitLine(transform:Find("Line"):GetComponent("Image"), zFightSoul.Rare)
    nameTxt.text = zFightSoul.Name

    local class = UIPublic.GetFightSoulClass(zFightSoul.ClassLimit)
    coroutine.start(function()
        UIUtil.SetSprite(sub, AtlasConfig.Class, class .. "_" .. zFightSoul.Rare .. ".png")
        UIUtil.SetFightSoulSprite(face,fightSoul.config.Id, FightSoulPictureType.Big)
        frame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/FightSoulFrame/".. RareConfig[fightSoul.config.Rare])
    end)

end


function UIPublic.SetPainting(zCard,image,isCoroutine,scale,stage)
    if stage == nil then stage = 2 end 
    UIPublic.SetCardOriginal(zCard.Id,image,stage,1,isCoroutine,scale,true)
end

function UIPublic.SetCardSpine(root, id, skinId)
    local cardPath = Z_FigureAsset[skinId].CardPaint
    local path = "UI/SpineAnimations/".. cardPath ..".prefab"
    if root.childCount >= 1 then
        ListChildPool:GetInstance():Remove(root:GetChild(0).gameObject)
    end
    local object = GameObjectPool:GetInstance():CoGetGameObjectAsync(path)
    if root.childCount >= 1 then
        ListChildPool:GetInstance():Remove(root:GetChild(0).gameObject)
    end
    object.transform:SetParent(root)
    object.transform.localPosition = Vector3.zero
    object.transform.localScale = Vector3.one
    local sk = object.transform:GetChild(0):GetComponent("SkeletonGraphic")
    local zSkin = Z_Skin[skinId]--UIPublic.GetSkin(id, stage)
    --local zSkin = Z_Skin[id * 100 + stage]
    if not string.IsNullOrEmpty(zSkin.Hide) then
        local tab = loadtable(zSkin.Hide)
        table.walk(tab, function (k, v)
            sk.Skeleton:SetAttachment(v)
        end)
    end
end

function UIPublic.SetCardOriginal(cardId,image,skinId,kind,isCoroutine,scale,notOffset,combRoot)
    --stage --皮肤  kind --大还是小 
    local func
    local path
    --if stage == nil or stage == 0 then stage = 1 end
    --local zCardOriginalOffset = Z_CardOriginalOffset[cardId]
    local offsetInfo = Z_SkinOriginalOffset[skinId].CardOffset
    local cardPath = Z_FigureAsset[skinId].CardPaint

    path = "UI/CardPaint/"..cardPath
    -- 和谐
    local skin = table.first(Z_Skin, function (v) return v.id == skinId end)
    if skin ~= nil then
        path = "UI/CardPaint"..skin.CardPaint.."/".. cardPath
    end

    scale = scale or 1
    --if kind == 1 or zCardOriginalOffset.CombCounts[stage] == 1 then 
    image.transform.gameObject:SetActive(true)
    if combRoot then combRoot.gameObject:SetActive(false) end
    func = function()
        image.enabled = false
        image.sprite = AtlasManager:GetInstance():CoLoadImageAsync(path..".png")
        image:SetNativeSize()
        local rectTransform = image:GetComponent("RectTransform")
        local x,y = rectTransform.rect.width,rectTransform.rect.height
        rectTransform.sizeDelta = Vector2.New(x*scale,y*scale)
        if kind == 2 then
            scale = scale / 2.5
        end
        if not notOffset then
            if kind == 2 then scale = 1 end
            rectTransform:DOLocalMove(Vector2.New(offsetInfo[1]*scale,offsetInfo[2]*scale),0)
        end
        image.enabled = true
    end
    --elseif zCardOriginalOffset.CombCounts[stage] == 4 and kind == 2 then --角色原画需要拼接
    --    image.transform.gameObject:SetActive(false)
    --    combRoot.gameObject:SetActive(true)
    --    func = function()
    --        for i = 0,combRoot.childCount -1 do
    --            local img = combRoot:GetChild(i):GetComponent("Image")
    --            img.sprite = AtlasManager:GetInstance():CoLoadImageAsync(path.."_"..(i+1)..".png")
    --            img:SetNativeSize()
    --            local rectTransform = img:GetComponent("RectTransform")
    --            local x,y = rectTransform.rect.width,rectTransform.rect.height
    --            rectTransform.sizeDelta = Vector2.New(x*scale,y*scale)
    --        end
    --        scale = 1--scale/2.5
    --        local rectTransform = combRoot:GetComponent("RectTransform")
    --        if not notOffset then
    --            rectTransform:DOLocalMove(Vector2.New(offsetInfo[1]*scale,offsetInfo[2]*scale),0)
    --        end
    --    end
    --end

    if isCoroutine then
        coroutine.start(function()
            func()
        end)
    else
        func()
    end
end

function UIPublic.SetCardBgOriginal(cardId,image,stage,isCoroutine,scale)
    local path = "UI/CardBgOriginal/"..cardId.."_"..(stage % 100)..".png"
    --local zCardOriginalOffset = Z_CardOriginalOffset[cardId]
    --local offsetInfo = loadtable(zCardOriginalOffset.BgOffset)[stage]
    local func = function()
        image.sprite = AtlasManager:GetInstance():CoLoadImageAsync(path)
        image:SetNativeSize()
        --local rectTransform = image:GetComponent("RectTransform")
        --local x,y = rectTransform.rect.width,rectTransform.rect.height
        --rectTransform.sizeDelta = Vector2.New(x*scale,y*scale)
        --rectTransform:DOLocalMove(Vector2.New(offsetInfo[1]*1,offsetInfo[2]*1),0)
    end
    if isCoroutine then
        coroutine.start(function()
            func()
        end)
    else
        func()
    end
end

function UIPublic.InitCardItemShow(card,gameObject)
    local zCard = Z_Card[card.TemplateId]
    local transform = gameObject.transform
    local avatar = transform:Find("Mask/Avatar"):GetComponent("Image")
    local frame = transform:Find("Frame"):GetComponent("Image")
    local starRoot = transform:Find("Star")
    local level = transform:Find("Level"):GetComponent("Text")
    UIUtil.SetSprite(frame,AtlasConfig.RareFrame,UIPublic.RareNames[zCard.Rare].."_2.png",true)
    --for i = 0,frameRoot.childCount -1 do 
    --    local k = i+1
    --    frameRoot:GetChild(i).gameObject:SetActive(k == zCard.Rare)
    --end
    for i = 0,starRoot.childCount -1 do
        local k = i+1
        starRoot:GetChild(i).gameObject:SetActive(k <= card.Star)
    end
    level.text = "LV."..card.Level

    UIUtil.SetCardSprite(avatar,zCard.Id,card.SkinId,CardPictureType.Middle,true)
    --UIUtil.SetSprite(avatar,AtlasConfig.ListHalfBody,zCard.ListHalfBody,true)
end

--=================================角色面板UI=====================================================

function UIPublic.GetHoldSameCardForMinStar(card,minStar) --通过最小星级获取角色
    local Cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    local card_tab = {}
    for k,v in pairs(Cards) do
        if card.Id ~= v.Id and  v.Star >= minStar then
            table.insert(card_tab,v)
        end
    end
    return card_tab;
end

function UIPublic.GetLimitLv(star)
    local temNum = 0;
    if star > 5 then
        return 0;
    end

    for i = 2,star  do
        local zEvolve = Z_CardEvolve[i];
        if zEvolve.LevelLimit ~=0 then
            temNum = zEvolve.LevelLimit;
        end
    end
    return temNum;
end

local function GetSkillToStage(skillId,stage)
    local z_skill = 0
    for i = 1,#array do
        local zSkill = Z_Skill[array[i]]
        if zSkill ~= nil and zSkill.Stage == stage then
            z_skill = zSkill
        end
    end
    return z_skill
end

local function ClearSkillArea(go)
    local transform = go.transform
    for i = 0, transform.childCount-1 do
        local child = transform:GetChild(i)
        child.gameObject:SetActive(true)
        child:Find("DefaultImage").gameObject:SetActive(false)
        local imageBg = child:Find("ImageBg")
        local iconImge = imageBg:Find("Icon"):GetComponent("Image")
        iconImge.sprite = DeActiveSprite
        iconImge.material = nil
        iconImge:GetComponent("Button").enabled = false
        imageBg:Find("Icon/Lock").gameObject:SetActive(false)
        imageBg:Find("Label/Text"):GetComponent("Text").text = ""
        imageBg.gameObject:SetActive(false)
    end
end


local function InitSkillArea(gameObject, card, isMonster, info)--技能按钮
    local z_card = Z_Card[card.Id]
    local stage = 1
    if z_card.IsMonster ~= 1 then
        stage = Game.Scene.Player:GetComponent("CardComponent"):GetStageByStar(card.Star)
    end
    ClearSkillArea(gameObject)
    local transform = gameObject.transform;
    local skill_image_list = {};
    local textLang = {142, 143, 144, 140}
    for i = 0,transform.childCount-1 do
        local child = transform:GetChild(i)
        skill_image_list[i+1] = {} 
        skill_image_list[i+1].transform = child
        skill_image_list[i+1].DefaultImage = child:Find("DefaultImage").gameObject
        skill_image_list[i+1].imageBg = child:Find("ImageBg")
        skill_image_list[i+1].iconImge = child:Find("ImageBg/Icon"):GetComponent("Image")
        skill_image_list[i+1].label = child:Find("ImageBg/Label").gameObject
        skill_image_list[i+1].labelText = LangUtil.BindText(child:Find("ImageBg/Label/Text"))
    end

    local skill_id_list = {};
    table.insert(skill_id_list,card.Skills.attack)
    table.insert(skill_id_list,card.Skills.passive_skill)
    table.insert(skill_id_list,card.Skills.skill)
    table.insert(skill_id_list,card.Skills.ultimate)

    local temp_id_list = {};
    -- table.walk(skill_id_list, function (k, v)
    --     if Z_Skill[v] and  not (isMonster and Z_Skill[v].Stage[1] > stage) then
    --         table.insert(temp_id_list, {id = k, skillId = v})
    --     end
    -- end)
    for index, skillId in ipairs(skill_id_list) do
        local lock = false
        if skillId == 0 then
            lock = true
        end
        table.insert(temp_id_list, {
            id = index, 
            skillId = skillId,
            lock = lock
        })
    end
    local count = table.count(temp_id_list)
    for k, v in pairs(skill_image_list) do
        if k > count then
            if info and info.default == 1 then
                local active = v.label.activeSelf--显示占位,根据预制体里label 的可见来设置
                v.DefaultImage:SetActive(active)
                v.imageBg.gameObject:SetActive(not active)
            else
                v.imageBg.gameObject:SetActive(false)
            end
        else
            v.imageBg.gameObject:SetActive(true)
        end
    end
    
    coroutine.start(function()
        for k, v in table.pairsByKeys(temp_id_list) do
            local skillCell = skill_image_list[k]
            local z_skill = Z_Skill[v.skillId]
            if z_skill ~= nil and z_skill ~= 0  then
                if z_skill.Stage[1] > stage then
                    skillCell.iconImge.material = DeActiveMat
                    skillCell.imageBg:Find("Icon/Lock").gameObject:SetActive(true)
                end
                skillCell.labelText.text = LangUtil.GetSysLang(textLang[v.id])
                coroutine.start(function()
                    UIUtil.SetSprite(skillCell.iconImge,AtlasConfig.SkillIcon,z_skill.SkillIcon)
                    if info and info.callback and info.view then
                        UIUtil.AddBtnEvent(skillCell.iconImge, function() info.callback(info.view, z_skill, k) end)
                    else
                        local data = {}
                        data.zSkill = z_skill
                        data.isMonster = isMonster
                        data.stage = stage
                        data.card = card
                        UIUtil.AddBtnEvent(skillCell.iconImge, function() UIPublic.OnClickSkillCallBack(data) end)
                    end
                end )
            else
                skillCell.iconImge.material = DeActiveMat
                skillCell.imageBg:Find("Icon/Lock").gameObject:SetActive(true)
                skillCell.labelText.text = LangUtil.GetSysLang(textLang[v.id])
                --skillCell.transform.gameObject:SetActive(false)
            end

        end
    end)
end

function UIPublic.OnClickSkillCallBack(data)
    local strs = {LangUtil.GetSysLang(140),LangUtil.GetSysLang(141),LangUtil.GetSysLang(142),
                  LangUtil.GetSysLang(143),LangUtil.GetSysLang(144)}
    local stages = {LangUtil.GetSysLang(150),LangUtil.GetSysLang(150),LangUtil.GetSysLang(150),
                    LangUtil.GetSysLang(151),LangUtil.GetSysLang(152),}
    local stage1s = {LangUtil.GetSysLang(150),
                     LangUtil.GetSysLang(151),LangUtil.GetSysLang(152),}
    local isMonster = data.isMonster
    local zSkill = data.zSkill
    local card = data.card
    local id = tonumber(string.sub(tostring(zSkill.Id),-1))
    local str = "";
    local SkillDesc = loadtable(zSkill.SkillDesc);
    local colorLs = "</color>"
    
    local cooldownTurn = UIData.GetSkillAttr(SkillAttr.CooldownTurn, zSkill, card)

    str =""
    if Z_Card[card.TemplateId].IsMonster ~= 1 then
        str = str .." "..stages[id]..LangUtil.GetSysLang(718)
    end
    if zSkill.Id ~= Z_Card[card.TemplateId].PassiveSkill and zSkill.Id ~= Z_Card[card.TemplateId].GeneralAtk then -- if id ~= 1 and id ~= 2 then
        str = str.."  CD:".. cooldownTurn
    end
    str = str .. "\n"

    if Z_Card[card.TemplateId].IsMonster ~= 1 then
        local tempId = 0
        if id < 4 then
            tempId = 1
        elseif id < 5 then
            tempId = 2
        else
            tempId = 3
        end

        local str_Lock = LangUtil.GetSysLang(148)
        local str_DeLock = LangUtil.GetSysLang(149)

        for k,v in table.pairsByKeys(SkillDesc) do
            if card.Star >= 5 or (card.Star >= 3 and tempId == 2) or tempId == 1 then
                str = str.."<color=#FFF2AA>"..stage1s[tempId]..":</color><color=#4CEC9E>\u{00A0}("..str_Lock..")"..colorLs..v.."\n"
            else
                str = str.."<color=#FFF2AA>"..stage1s[tempId]..":</color><color=#F12447>\u{00A0}("..str_DeLock..")"..colorLs..v.."\n"
            end
            tempId = tempId + 1
        end
    else
        local count = 1
        for k,v in table.pairsByKeys(SkillDesc) do
            str = str.. "<color=#FFF2AA>".. stage1s[count]..":</color>".. v.."\n"
            count = count + 1
        end
    end

    if not isMonster then
        if id == 2 or id == 1 then
            if card.CloseDegree>= 100 then
                str =  str.."<color=#FFF2AA>"..LangUtil.GetSysLang(625).."Max:\u{00A0}</color><color=#4CEC9E>("..LangUtil.GetSysLang(148)..")</color>"..zSkill.CloseFullEfx.."\n"
            else
                str =  str.."<color=#FFF2AA>"..LangUtil.GetSysLang(625).."Max:\u{00A0}</color><color=#F12447>("..LangUtil.GetSysLang(149)..")</color>"..zSkill.CloseFullEfx.."\n"
            end
        end
    end
    
    local data = {};

    data.subTitle = strs[id]
    data.name = "<color=#FFF2AA>"..zSkill.Name.."</color>"
    data.title = LangUtil.GetSysLang(147)
    data.message = str;
    data.id = id
    data.zSkill = zSkill

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetail,data);
end

local SkillRangeTextSys = {
    [1] = 3128, -- 横排
    [2] = 3129, -- 直列
    [3] = 3130, -- 全体
    [5] = 3131, -- 单体
    [6] = 3132, -- 自身
}

local SkillTypeTextSys = {
    [1] = 3137, -- 伤害
    [2] = 3138, -- 弱化
    [3] = 3139, -- 强化
    [4] = 3140, -- 治疗
    [5] = 3141, -- 复活 
}

function UIPublic.GetSkillDescText(skillId)
    if skillId == nil or Z_Skill[skillId] == nil then
        return ""
    end
    local zSkill = Z_Skill[skillId]
    local desc = ""
    local rangeIndex = 0
    if zSkill.EnemyRange ~= 0 then
        rangeIndex = zSkill.EnemyRange
    elseif zSkill.FriendRange ~= 0 then
        rangeIndex = zSkill.FriendRange
    else
        Logger.LogError("skill no EnemyRange or FriendRange, skillId = " .. zSkill)  
    end
    if SkillRangeTextSys[rangeIndex] ~= nil then
        desc = desc .. LangUtil.GetSysLang(SkillRangeTextSys[rangeIndex])
    end
    
    if zSkill.SkillType == SkillType.Attack
        and zSkill.EnemyRange ~= 0
        then
        desc = desc .. LangUtil.GetSysLang(SkillTypeTextSys[1])
    elseif zSkill.SkillType == SkillType.Skill
        and zSkill.EnemyRange ~= 0
        then
        desc = desc .. LangUtil.GetSysLang(SkillTypeTextSys[2])
    elseif zSkill.SkillType == SkillType.Skill
        and zSkill.FriendRange ~= 0
        and zSkill.IsAddHP == 0
        and zSkill.IsReviveSkill == 0
        then
        desc = desc .. LangUtil.GetSysLang(SkillTypeTextSys[3])
    elseif zSkill.SkillType == SkillType.Skill
        and zSkill.FriendRange ~= 0
        and zSkill.IsAddHP == 1
        then
        desc = desc .. LangUtil.GetSysLang(SkillTypeTextSys[4])
    elseif zSkill.SkillType == SkillType.Skill
        and zSkill.FriendRange ~= 0
        and zSkill.IsReviveSkill == 1
        then
        desc = desc .. LangUtil.GetSysLang(SkillTypeTextSys[5])
    end
    return desc
end

function UIPublic.OnClickEquipCallBack(gameObject)
    --local equip =  gameObject:GetComponent("BindData"):Get("equip");
    --if equip == nil then
    --    return;
    --end
    --local z_equip = Z_Equip[equip.TemplateId];
    --local str = "";
    --str = str ..z_equip.Name.."\n";
    --str = str .. "星级:"..equip.Star.."\n";
    --str = str .."等级:"..equip.Level.."\n";
--
    --local prop_tab = equip:GetComponent("EquipAttrComponent"):GetAttrDescs();
    --local str1 = "";
    --for k, v in pairs(prop_tab) do
    --    str1 = str1.. v .."\n"
    --end
--
    --str = str .."属性："..str1;
    --str = str ..(z_equip.ExclusiveEfx == z_equip.Desc and {z_equip.AdditionEfx} or {z_equip.ExclusiveEfx})[1];
--
    --local data = {};
    --data.title = "装备描述";
    --data.message = str;
    --data.iconName = z_equip.EquipIcon..".png";
    --data.type = 2;
    --
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetail,data);
end


local function GetMainPropImageName(id)
    local main_prop_str;
    if id == 1 then
        main_prop_str = "物.png";   --ignoreCN
    else
        main_prop_str = "法.png";   --ignoreCN
    end
    return main_prop_str;
end

local function GetSubPropImageName(id)
    local sub_prop_str;
    if id == 1 then
        sub_prop_str = "火.png";   --ignoreCN
    elseif id == 2 then
        sub_prop_str = "水.png";   --ignoreCN
    elseif id == 3 then
        sub_prop_str = "地.png";   --ignoreCN
    elseif id == 4 then
        sub_prop_str = "风.png";   --ignoreCN
    elseif id == 5 then
        sub_prop_str = "雷.png";   --ignoreCN
    elseif id == 6 then
        sub_prop_str = "光.png";   --ignoreCN
    elseif id == 7 then
        sub_prop_str = "暗.png";   --ignoreCN
    elseif id == 8 then
        sub_prop_str = "天.png";   --ignoreCN
    end
    return sub_prop_str
end

local function GetAtkTypeImageName(id)
    local atr_str
    if id == 1 then
        atr_str = "近";   --ignoreCN
    else
        atr_str = "远";   --ignoreCN
    end
    return atr_str
end

local function GetRateImageName(id)
    local rate_str = UIPublic.RareNames[id]
    return rate_str
end

local function InitAttributeArea(gameObject,card,isCoroutine) --攻击属性
    local z_card;
    if card.TemplateId == nil then
        z_card = card;
    else
        z_card = Z_Card[card.TemplateId];
    end
    
    local transform = gameObject.transform;
    local main_atr_image = transform:Find("MainAtr"):GetComponent("Image");
    local sub_atr_image = transform:Find("SubAtr"):GetComponent("Image");

    local main_prop_str = GetMainPropImageName(z_card.MainProp);
    local sub_prop_str = GetSubPropImageName(z_card.SubProp);
    UIUtil.SetSprite(main_atr_image,AtlasConfig.Prop,main_prop_str,isCoroutine);
    UIUtil.SetSprite(sub_atr_image,AtlasConfig.Prop,sub_prop_str,isCoroutine);
    if transform:Find("AtkAtr/Text") then
        transform:Find("AtkAtr/Text"):GetComponent("Text").text = GetAtkTypeImageName(z_card.AtkType) ;
    end

    if transform:Find("Rary") then
        local rary_image = transform:Find("Rary"):GetComponent("Image");
        UIUtil.SetSprite(rary_image,AtlasConfig.Rate,GetRateImageName(z_card.Rare),isCoroutine);
    end
    
end

local function InitIcon(image,z_card,isCoroutine) --头像
    UIUtil.SetSprite(image,AtlasConfig.BodyHalf,z_card.BodyHalf,isCoroutine);
end

local function InitRaryImage(image,z_card,isCoroutine) --稀有度
    UIUtil.SetSprite(image,AtlasConfig.Rate,GetRateImageName(z_card.Rare),isCoroutine);
end

local function InitAtrImage(main_image,sub_image,z_card,isCoroutine) --攻击属性
    UIUtil.SetSprite(main_image,AtlasConfig.Prop,GetSubPropImageName(z_card.SubProp),isCoroutine);
    UIUtil.SetSprite(sub_image,AtlasConfig.Prop,GetMainPropImageName(z_card.MainProp),isCoroutine);
end


function UIPublic.InitCardItemData(self,cardData,isSelect,callback,longPressCallBack,func,isSupport,card_item,notSetImage)
    UIUtil.AddBtnSound(card_item)
    
    local bindData = UIUtil.GetButtonDataComponent(card_item);
    bindData:Add("card",cardData)
    if self ~= nil then
        bindData:Add("self",self);
    end
    
    local rc = card_item:GetComponent(typeof(CS.ReferenceCollector));
    local select_object = rc:GetObject("Select");
    local level_text = rc:GetObject("Level"):GetComponent("Text");
    local sub_atr_image = rc:GetObject("SubAtr"):GetComponent("Image");
    local main_atr_image = rc:GetObject("MainAtr"):GetComponent("Image");
    local name_text = rc:GetObject("Name"):GetComponent("Text");
    local rary_image = rc:GetObject("Rary"):GetComponent("Image");
    local star_text = rc:GetObject("Star"):GetComponent("Text");
    local icon_image = rc:GetObject("Icon"):GetComponent("Image");
    local support = rc:GetObject("Support");
    if cardData ~= nil then
        local z_card = Z_Card[cardData.TemplateId]
        level_text.text = "LV."..cardData.Level;
        name_text.text = z_card.Name;
        star_text.text = cardData.Star..LangUtil.GetSysLang(584);
        if not notSetImage then
            UIPublic.InitIcon(icon_image,z_card);
            UIPublic.InitRaryImage(rary_image,z_card);
            UIPublic.InitAtrImage(main_atr_image,sub_atr_image,z_card);
        end
    end

    select_object:SetActive(false)
    
    if not isSelect then
        ButtonListener.Get(card_item).OnClickHandler = callback;
    else
        select_object:SetActive(true)
        ButtonListener.Get(card_item).OnClickHandler = nil
    end

    if longPressCallBack then
        LongPress.New(card_item,longPressCallBack);
    end

    if func then
        func(card_item);
    end

    if isSupport then
        support:SetActive(true);
    else
        support:SetActive(false);
    end
end

local function InitCardItem(self,parent,cardData,isSelect,callback,longPressCallBack,func,isSupport)
     ListChildPool:GetInstance():GetChild("CardItem",parent,function(card_item)
         card_item:SetActive(false);
         UIPublic.InitCardItemData(self,cardData,isSelect,callback,longPressCallBack,func,isSupport,card_item)
         card_item:SetActive(true);
     end);
end


local function InitGeneralShoItem(self,zStore,callback) --通用商店的列表子节点
    
    local shopComponent = Game.Scene.Player:GetComponent("ShopComponent");
    
    local z_config;
    local icon_name;
    local atlasConfig;
    
    if zStore.GoodsType == 1 then
        z_config = Z_Item[zStore.GoodsId];
        icon_name = GetItemIcon(z_config);
        atlasConfig = AtlasConfig.Item;
    elseif zStore.GoodsType == 2 then
        z_config = Z_Equip[zStore.GoodsId];
        icon_name = z_config.EquipIcon..".png";
        atlasConfig = AtlasConfig.Equip;
    else
        z_config = Z_Card[zStore.GoodsId];
        icon_name = z_config.BodyHalf;
        atlasConfig = AtlasConfig.BodyHalf;
    end 
    
    coroutine.start(function()
        ListChildPool:GetInstance():GetChild("GeneralShopItem",self.content,function(object)
            local transform = object.transform;
            local icon = transform:Find("Icon"):GetComponent("Image");
            local name = transform:Find("Name"):GetComponent("Text");
            local desc = transform:Find("Des"):GetComponent("Text");
            local price_text = transform:Find("Price"):GetComponent("Text");
            local buy_btn = transform:Find("Button").gameObject;
            local buy_text = transform:Find("Button/Text"):GetComponent("Text");

            UIUtil.SetSprite(icon,atlasConfig,icon_name);
            name.text = z_config.Name;
            desc.text = z_config.Desc;
            price_text.text = zStore.TotalPrice .. UIUtil.currencyType[zStore.PriceType];
            buy_text.text = LangUtil.GetSysLang(223)
            buy_btn:GetComponent("Button").enabled = true;
            local bindData = UIUtil.GetButtonDataComponent(buy_btn);
            bindData:Add("zStore",zStore);
            bindData:Add("self",self);
            ButtonListener.Get(buy_btn).OnClickHandler = callback;
            UIUtil.AddBtnSound(buy_btn)
            
            if zStore.QuotaPeriod ~= nil and zStore.QuotaPeriod ~= 0 then
                local count =  zStore.QuotaNum - shopComponent:GetDetailVal(zStore.Id)
                if count == 0 then
                    buy_text.text = LangUtil.GetSysLang(2052)
                    buy_btn:GetComponent("Button").enabled = false;
                end
            end
            name.text = z_config.Name .."x"..zStore.Amount;
        end);
    end)
end



function UIPublic.InitPaintArea(gameObject,card,isCoroutine) --立绘
    local transform = gameObject.transform;
    local z_card = Z_Card[card.TemplateId];
    
    local star_text = transform:Find("StarText"):GetComponent("Text");
    local name_text = transform:Find("NameText"):GetComponent("Text");
    local icon_image = transform:Find("IconBg/Icon"):GetComponent("Image");

    star_text.text = card.Star .. LangUtil.GetSysLang(584);
    name_text.text = z_card.Name;
    UIUtil.SetSprite(icon_image,AtlasConfig.BodyHalf,z_card.BodyHalf,true);
    
end

function UIPublic.InitExpArea(gameObject,card,needTxt)
    local transform = gameObject.transform;
    local z_card_level_up 
    local rarity = Z_Character[card.Id].Rarity
    local nextLevel = card.Level+1
    if card.Level == 100 then
        nextLevel = 100
    end
    
    if rarity == Rarity.R then
        z_card_level_up = Z_CharacterLevelUpExp[nextLevel].R
    elseif rarity == Rarity.SR then
        z_card_level_up = Z_CharacterLevelUpExp[nextLevel].SR
    elseif rarity == Rarity.SSR then
        z_card_level_up = Z_CharacterLevelUpExp[nextLevel].SSR
    end

    local slider = gameObject:GetComponent("Slider");
    local need_exp_text = LangUtil.BindText(transform:Find("NeedExpBg/NeedExpText"))
    local level_text = LangUtil.BindText(transform:Find("RoleLv"), FontType.All_Number)
    local levelText = transform:Find("LevelText")
    local silderText = transform:Find("SilderText")

    if not IsNull(levelText) then
        --LangUtil.BindText(levelText, FontType.All_Number).text = "LV."..card.Level
    end
    
    if z_card_level_up ~= nil then
        local sliderValue = 0
        if card.Level == card.Star * 20 then
            sliderValue = 1
        else
            sliderValue = card.Exp/ z_card_level_up
        end
        slider.value = sliderValue
        if silderText ~= nil then
            silderText:GetComponent("Text").text = string.format("%.1f", sliderValue * 100) .. "%"
        end
    else
        slider.value = 0
        if silderText ~= nil then
            silderText.text = "0%"
        end
    end

    if card.Level == card.LevelLimit then
        need_exp_text.text ="——"
        if needTxt ~= nil then needTxt.text = "--" end
        slider.value = 1
    else
        need_exp_text.text =z_card_level_up - card.Exp
        if needTxt ~= nil then needTxt.text = z_card_level_up - card.Exp end
    end
    level_text.text =  "<size=46>"..card.Level.."</size>/".. card.Star * 20--card.LevelLimit--card.Level .. "/" .. card.LevelLimit
    
    --LEVEL_LIMIT
    local expTextRoot =  transform:Find("ExpTextRoot")
    if not IsNull(expTextRoot) then
        local txt = LangUtil.BindText(expTextRoot:GetChild(0), FontType.All_Number)
        if card.Level < card.LevelLimit then
            txt.text = card.Exp.."/"..z_card_level_up
        else
            txt.text = "Max"
        end
    end
end


function UIPublic.GetJadePearlColor(kind)
    local color;
    if kind == 1 then
        color = Color.New(1,0,0);
    elseif kind == 2 then
        color = Color.New(0,0,1);
    elseif kind == 3 then
        color = Color.New(0,0,0);
    elseif kind == 4 then
        color = Color.New(0,1,0);
    elseif kind == 5 then
        color = Color.New(1,1,0);
    elseif kind == 6 then
        color = Color.New(0.5,0,0);
    elseif kind == 7 then
        color = Color.New(0.3,0.3,0.3);
    elseif kind == 8 then
        color = Color.New(0,0,0.5);
    end
    return color;
end

function UIPublic.GetJadePearl(card)
    local jade_pear = {};

    jade_pear = {};
    local z_card = Z_Card[card.TemplateId];
    jade_pear.Kind = z_card.SubProp;
    jade_pear.Level = card.JadePearlLevel;
    local zJadePearl = table.first(Z_JadePearl,function(v)
        return v.Level ==jade_pear.Level and v.Kind == jade_pear.Kind
    end)
    if zJadePearl ~= nil then
        jade_pear.TemplateId = zJadePearl.Id;
    end

    return jade_pear;
end


function UIPublic.InitJadePearArea(gameObject,card)
    local jade_pearl_tab = {};
    for i = 0,gameObject.transform.childCount - 1 do
        local image = gameObject.transform:GetChild(i).gameObject:GetComponent("Image");
        image.color = Color.New(1,1,1);
        table.insert(jade_pearl_tab,image);
    end
    
    if card.JadePearlLevel == 0 then return end;
    
    local jade_pear = UIPublic.GetJadePearl(card);
    
    local color =  UIPublic.GetJadePearlColor(jade_pear.Kind);
    local level =  Z_JadePearl[jade_pear.TemplateId].Level;

    for i = 1,#jade_pearl_tab do
        if i <= level then
            jade_pearl_tab[i].color = color;
        end
    end

end

function UIPublic.InitRoleArea(gameObject,card,notTitle)
    local transform = gameObject.transform;
    local Hp_text = transform:Find("Hp"):GetComponent("Text");
    local Atk_text = transform:Find("Atk"):GetComponent("Text");
    local Def_text = transform:Find("Def"):GetComponent("Text");
    local Spe_text = transform:Find("Spe"):GetComponent("Text");

    if notTitle then
        Hp_text.text = math.modf(card:GetComponent("CardCharacterComponent"):MaxHp());
        Atk_text.text = math.modf(card:GetComponent("CardCharacterComponent"):Atk());
        Def_text.text = math.modf(card:GetComponent("CardCharacterComponent"):Def());
        Spe_text.text = math.modf(card:GetComponent("CardCharacterComponent"):Speed());
    else
        Hp_text.text = LangUtil.GetSysLang(171)..":"..math.modf(card:GetComponent("CardCharacterComponent"):MaxHp());
        Atk_text.text = LangUtil.GetSysLang(172)..":"..math.modf(card:GetComponent("CardCharacterComponent"):Atk());
        Def_text.text = LangUtil.GetSysLang(173)..":"..math.modf(card:GetComponent("CardCharacterComponent"):Def());
        Spe_text.text = LangUtil.GetSysLang(174)..":"..math.modf(card:GetComponent("CardCharacterComponent"):Speed());
    end
end

---@return Item | nil
function UIPublic.GetItem(id) --通过模板ID获取item
    local Items = Game.Scene.Player:GetComponent("ItemComponent").Items;
    for k,v in pairs(Items) do
        if v.TemplateId == id then
            return v;
        end
    end
    return nil;
end

function UIPublic.PlayEffect(transform)
    local tra = transform.transform
    table.csenuObject(tra,function(v)--播放特效
        local effect = v:GetComponent("ParticleSystem")
        if not IsNull(effect) then effect:Play() end
    end)
end

function UIPublic.GetNewCard(card1Info,card2Info)
    local card = {}
    if card2Info == nil then card2Info = {} end 
    card.Id = 0
    card.TemplateId = card1Info.TemplateId;
    card.Level = (card2Info.Level == nil and {card1Info.Level} or {card2Info.Level})[1]
    card.LevelLimit = (card2Info.LevelLimit == nil and {card1Info.LevelLimit} or {card2Info.LevelLimit})[1]
    card.Stage = (card2Info.Stage  == nil and {card1Info.Stage}  or {card2Info.Stage} )[1]
    card.Star = (card2Info.Star == nil and {card1Info.Star} or {card2Info.Star})[1]
    card.Exp = (card2Info.Exp == nil and {card1Info.Exp} or {card2Info.Exp})[1]
    card.CloseDegree = (card2Info.CloseDegree == nil and {card1Info.CloseDegree} or {card2Info.CloseDegree})[1]
    card.SkinId = (card2Info.SkinId == nil and {card1Info.SkinId} or {card2Info.SkinId})[1]
    card.Lock =(card2Info.Lock == nil and {card1Info.Lock} or {card2Info.Lock})[1]
    card.Hand1Equip = card1Info.Hand1Equip;
    card.Hand2Equip = card1Info.Hand2Equip;
    card.BodyEquip = card1Info.BodyEquip;
    card.HeadEquip = card1Info.HeadEquip;
    card.FootEquip = card1Info.FootEquip;
    card.AdornEquip = card1Info.AdornEquip;
    card.FightSoul1 = card1Info.FightSoul1;
    card.FightSoul2 = card1Info.FightSoul2;
    card.FightSoul3 = card1Info.FightSoul3;
    card.Support = card1Info.Support;
    card.JadePearlLevel = card1Info.JadePearlLevel;
    card.PlayedNum=card1Info.PlayedNum

    local newCard = Game.Registry:NewObject("Card",card)
    newCard:InitCardComponent()

    return newCard
end

--- 使用 cid(表中id) 获取道具数量
function UIPublic.GetItemAmount(id)
    local item = UIPublic.GetItem(tonumber(id))
    if item == nil then return 0 end
    return item.Amount
end


function UIPublic.InitEquipMsg(gameObject,equip,isCoroutine)
    local transform = gameObject.transform;
    local icon_image = transform:Find("Icon"):GetComponent("Image");
    local star_text = transform:Find("Star/Text"):GetComponent("Text");
    local prop_text = transform:Find("Prop/Text"):GetComponent("Text");
    local name_text = transform:Find("Name/Text"):GetComponent("Text");

    local z_equip = Z_Equip[equip.TemplateId];
    UIUtil.SetSprite(icon_image,AtlasConfig.Equip,z_equip.EquipIcon,isCoroutine);
    local star = (z_equip.Star ~= 0 and {z_equip.Star} or {equip.Star})[1];
    star_text.text =  star.. LangUtil.GetSysLang(584) .."/"..equip.Level;

    if equip.Id ~= nil then
        local prop_tab = equip:GetComponent("EquipAttrComponent"):GetAttrDescs();
        local str = "";
        for k, v in pairs(prop_tab) do
            str = str.. v .."\n"
        end
        prop_text.text = str;
    else
        prop_text.text = UIUtil.GetEquipTpis(z_equip)
    end
    name_text.text = z_equip.Name;

end

---@param equip Equip
function UIPublic.GetEquipHolder(equip)
    if equip == nil then return nil end
    return equip:GetCharacter()
end

--function UIPublic.InitEquipItemData(self,equip,callBack,showIntens,showLock,func,object)
--    UIUtil.AddBtnSound(object);
--    local transform = object.transform;
--    local equip_msg = transform:Find("EquipMsgPf").gameObject;
--    local des_text = transform:Find("Describle"):GetComponent("Text")
--    local holder_icon_image = transform:Find("EquiperIcon/Image"):GetComponent("Image")
--    local intents_btn = transform:Find("IntensButton").gameObject;
--    local lock_btn = transform:Find("LockButton").gameObject;
--
--    local z_equip = Z_Equip[equip.TemplateId];
--    UIPublic.InitEquipMsg(equip_msg,equip);
--    des_text.text =(z_equip.ExclusiveEfx == "" and {z_equip.AdditionEfx} or {z_equip.ExclusiveEfx})[1];
--    local holder = UIPublic.GetEquipHolder(equip);
--    if holder ~= nil then
--        local z_card = Z_Card[holder.TemplateId];
--        UIUtil.SetSprite(holder_icon_image,AtlasConfig.BodyHalf,z_card.BodyHalf);
--    else
--        UIUtil.SetSprite(holder_icon_image,nil,nil);
--    end
--
--    if showIntens then
--        intents_btn:SetActive(true);
--        --打开装备强化界面
--        UIUtil.GetButtonDataComponent(intents_btn):Add("equip",equip);
--        --ButtonListener.Get(intents_btn).OnClickHandler = 
--    else
--        intents_btn:SetActive(false);
--    end
--    --锁定解锁请求
--
--    if showLock then
--        lock_btn:SetActive(true);
--        UIUtil.GetButtonDataComponent(lock_btn):Add("equip",equip);
--        ButtonListener.Get(lock_btn).OnClickHandler = self.ctrl.SendLockRequest;
--        UIUtil.AddBtnSound(lock_btn)
--        local lock_text = lock_btn.transform:Find("Text"):GetComponent("Text");
--        lock_text.text = (equip.Lock == 0 and{"Lock"} or {"Unlock"})[1];
--    else
--        lock_btn:SetActive(false);
--    end
--
--    local bindData = UIUtil.GetButtonDataComponent(object);
--    bindData:Add("equip",equip);
--    if self ~=nil then
--        bindData:Add("self",self);
--    end
--    ButtonListener.Get(object).OnClickHandler = callBack;
--
--    if func ~= nil then func(object) end;
--end

--function UIPublic.InitEquipItem(self,parent,equip,callBack,showIntens,showLock,func)
--    ListChildPool:GetInstance():GetChild("EquipItemPf",parent,function(object)
--        object:SetActive(false);
--        UIPublic.InitEquipItemData(self,equip,callBack,showIntens,showLock,func,object)
--        object:SetActive(true);
--    end);
--end


function UIPublic.InitEquipLabel(root,zEquip) --装备标签
    for i = 0,root.childCount - 1 do
        local child = root:GetChild(i).gameObject
        if child.name ~= "Text" then
            child:SetActive((i+1) == zEquip.Kind)
        end
    end
    local kindNames = {LangUtil.GetSysLang(265),LangUtil.GetSysLang(266),LangUtil.GetSysLang(267)} 
    LangUtil.BindText(root:Find("Text")).text = kindNames[zEquip.Kind]
end

function UIPublic.InitEquipProp(root,equip)--装备属性说明
    local zEquip = Z_Equip[equip.TemplateId]
    local propTxt = root:Find("Text"):GetComponent("Text")
    local valueTxt = root:Find("Value"):GetComponent("Text")
    local propNames = {LangUtil.GetSysLang(171),LangUtil.GetSysLang(172),
                       LangUtil.GetSysLang(173),LangUtil.GetSysLang(174)}
    
    propTxt.text = propNames[zEquip.BaseAttrType[1]]
    local attr = equip:GetComponent("EquipAttrComponent"):GetAttr()
    valueTxt.text = "+"..math.modf(attr) 
end 

function UIPublic.InitEquipDesc(txt,zEquip)--装备介绍
    if zEquip.Exclusive ~= 0 then
        txt.text = zEquip.ExclusiveEfx
    else
        txt.text = zEquip.AdditionEfx
    end
end

function UIPublic.InitEquipHolder(avatar,equip,name)  --装备持有者
    local card = UIPublic.GetEquipHolder(equip)
    if name then name.text = "" end
    avatar.transform.parent.gameObject:SetActive(false)
    local HolderBG = avatar.transform.parent.parent:Find("HolderBG")
    if card ~= nil then
        local zCard = Z_Card[card.TemplateId]
        coroutine.start(function()
            UIUtil.SetCardSprite(avatar,zCard.Id,card.SkinId,CardPictureType.Little)
            -- UIUtil.SetSprite(avatar,AtlasConfig.CardLittle,zCard.IconName)
            if name then name.text = LangUtil.GetSysLang(264)..":<color=#FAEDA8>".. zCard.Name.."</color>" end
            if HolderBG ~= nil then
                HolderBG.gameObject:SetActive(false)
            end
            avatar.transform.parent.gameObject:SetActive(true)
           
        end)
    else
        avatar.transform.parent.gameObject:SetActive(false)
        if HolderBG ~= nil then
            HolderBG.gameObject:SetActive(true)
        end
    end
end

function UIPublic.InitEquipLock(root,isOpen)  --锁定解锁
    local lock0 = root:Find("0").gameObject
    local lock1 = root:Find("1").gameObject
    lock0:SetActive(not isOpen)
    lock1:SetActive(isOpen)
end


function UIPublic.InitFightSoulProp(txt,fightSoul,Count,isAdd)
    local star = 0
    if fightSoul ~= nil then
        star = fightSoul.Star
    elseif Count ~= nil then
        star = Count
    end
    
    local zPropAdd = table.first(Z_PropAdd,function(v) return v.Name == "FightSoulStarAttrAdd"  end)
    if isAdd == nil then
        txt.text = LangUtil.GetSysLang(724).."  <color=#fff2aa>+"..(zPropAdd.AttrAdd * star).."%</color>"
    else
        txt.text = "  <color=#fff2aa>+"..(zPropAdd.AttrAdd * star).."%</color>"
    end
    
    --UIUtil.ScrollText(txt)
end

function UIPublic.InitFightSoulEff(txt,zFightSoul)
    txt.text = zFightSoul.EquipEfx
end


function UIPublic.InitFightSoulHolder(avatar,fightSoul,name,isShowParent)  --装备持有者
    local IsEquipIds = Game.Scene.Player:GetComponent("FightSoulComponent"):OnEquipFightSoulId1()
    local card = table.first(IsEquipIds,function(v) return v.Id == fightSoul.Id  end)
    avatar.transform.gameObject:SetActive(false)
    if name then name.text = "" end
    if card ~= nil then
        coroutine.start(function()
            UIUtil.SetCardSprite(avatar,fightSoul.config.Id,card.Card.SkinId,CardPictureType.Little)
            if name then name.text = LangUtil.GetSysLang(264)..":<color=#FAEDA8>".. fightSoul.config.Name.."</color>" end
            avatar.transform.gameObject:SetActive(true)
        end)
    else
        avatar.transform.gameObject:SetActive(false)
    end
    if isShowParent then
        local holder = UIPublic.GetFightSoulHolder(fightSoul)
        if holder == nil then
            avatar.transform.parent.gameObject:SetActive(false)
        else
            avatar.transform.parent.gameObject:SetActive(true)
        end
    else
        --avatar.transform.parent.gameObject:SetActive(true)
        local holder = UIPublic.GetFightSoulHolder(fightSoul)
        local holderBG = avatar.transform.parent.parent:Find("HolderBG")
        if holder == nil then
            avatar.transform.parent.gameObject:SetActive(false)
            if not IsNull(holderBG) then holderBG.gameObject:SetActive(true) end
        else
            avatar.transform.parent.gameObject:SetActive(true)
            if not IsNull(holderBG) then holderBG.gameObject:SetActive(false) end
        end
    end
end


---@param fightSoul FightSoul
function UIPublic.InitVsFightSoulItem(fightSoul,transform,isRefresh)
    
    transform.localScale = Vector2.New(1,1)
    local rc = transform:GetComponent(typeof(ReferenceCollector))

    local zFightSoul = Z_FightSoul[fightSoul.TemplateId]
    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local frame = rc:GetObject("Frame"):GetComponent("Image")
    local sub = rc:GetObject("Sub"):GetComponent("Image")
    local levelText = rc:GetObject("LevelText")
    local name = rc:GetObject("Name")
    local starRoot = rc:GetObject("StarRoot"):GetComponent("Image")
    local lock = rc:GetObject("Lock")
    local notLock = rc:GetObject("NotLock")
    local select = rc:GetObject("Select").gameObject
    local noSelect = rc:GetObject("NoSelect").gameObject
    -- local lab = rc:GetObject("Lab")
    local line = rc:GetObject("Line"):GetComponent("Image")
    local new = rc:GetObject("New")
    new:SetActive(false)

    -- LangUtil.BindText(lab).text = LangUtil.GetSysLang(259) -- 战魂
    local star = fightSoul.Star
    select:SetActive(false)
    noSelect:SetActive(false)
    LangUtil.BindText(name).text = zFightSoul.Name
    if fightSoul.level ~= nil and fightSoul.maxLevel ~= nil then
        LangUtil.BindText(levelText).text = "Lv." .. fightSoul.level -- .. "/" .. fightSoul.maxLevel
    else
        LangUtil.BindText(levelText).text = ""
    end
    LangUtil.GetSpriteLang(52, function(sprite) select:GetComponent("Image").sprite = sprite end)

    local holder = rc:GetObject("Holder")
    holder:SetActive(fightSoul.isEquip)
    LangUtil.GetSpriteLang(487, function(sprite) holder:GetComponent("Image").sprite = sprite end)

    UIUtil.ScrollText(name)

    if not isRefresh then
        local class = UIPublic.GetFightSoulClass(zFightSoul.ClassLimit)
        coroutine.start(function ()
            UIUtil.SetFightSoulSprite(avatar, fightSoul.config.Id, FightSoulPictureType.Middle)
            UIUtil.SetSprite(frame, AtlasConfig.FightSoulFrame, UIPublic.RareNames[zFightSoul.Rare].."_1.png")
            UIUtil.SetSprite(sub, AtlasConfig.Class,  class .. "_" .. zFightSoul.Rare .. ".png")
            UIPublic.NewInitLine(line, fightSoul.config.Rare)
        end)
    else
        avatar:DOFade(1,0)
    end

    lock.gameObject:SetActive(fightSoul.Lock)
    notLock.gameObject:SetActive(false)

    if fightSoul.Star ~= nil and fightSoul.Star > 0 then
        starRoot.gameObject:SetActive(true)
        UIPublic.NewInitStar(starRoot, fightSoul.Star)
    else
        starRoot.gameObject:SetActive(false)
    end
end

--- 预制体名称: FightVisitItemMid
---@param fightSoul FightSoul
function UIPublic.InitVsFightSoulItemMId(fightSoul,gameObject,isRefresh, isHideHolder)
    local transform = gameObject.transform
    -- transform.localScale = Vector2.New(1,1)
    local rc = transform:GetComponent("ReferenceCollector")
    local zFightSoul = Z_FightSoul[fightSoul.TemplateId]
    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local frame = rc:GetObject("Frame"):GetComponent("Image")
    local sub = rc:GetObject("Sub"):GetComponent("Image")
    local name = rc:GetObject("Name")
    local starRoot = rc:GetObject("StarRoot").transform
    local lock = rc:GetObject("Lock")
    local notLock = rc:GetObject("NotLock")
    local select = rc:GetObject("Select").gameObject
    local noSelect = rc:GetObject("NoSelect").gameObject
    --local lab = transform:Find("Lab")
    --LangUtil.BindText(lab).text = LangUtil.GetSysLang(259)
    select:SetActive(false)
    noSelect:SetActive(false)
    -- LangUtil.BindText(name).text = zFightSoul.Name

    local holder = rc:GetObject("Holder")
    holder:SetActive(fightSoul.isEquip and not isHideHolder)
    LangUtil.GetSpriteLang(487, function(sprite) holder:GetComponent("Image").sprite = sprite end)

    if not isRefresh then
        local class = UIPublic.GetFightSoulClass(zFightSoul.ClassLimit)
        coroutine.start(function ()
            if fightSoul.level ~= nil then
                LangUtil.BindText(rc:GetObject("LevelText")).text = "LV." .. fightSoul.level
            else
                LangUtil.BindText(rc:GetObject("LevelText")).text = ""
            end
            UIUtil.SetFightSoulSprite(avatar, zFightSoul.Id, FightSoulPictureType.Little)
            UIUtil.SetSprite(frame, AtlasConfig.FightSoulFrame, UIPublic.RareNames[zFightSoul.Rare].."_2.png")
            UIUtil.SetSprite(sub, AtlasConfig.Class, class .. "_" .. zFightSoul.Rare .. ".png")
        end)
    else
        avatar:DOFade(1,0)
    end

    lock.gameObject:SetActive(fightSoul.Lock)
    notLock.gameObject:SetActive(false)

    if fightSoul.Star ~= nil and fightSoul.Star > 0 then
        starRoot.gameObject:SetActive(true)
        UIPublic.NewInitStar(starRoot:GetComponent("Image"), fightSoul.Star)
    else
        starRoot.gameObject:SetActive(false)
    end
end

function UIPublic.InitCommonLevelItem(self, data, transform)
    local rc = transform:GetComponent("ReferenceCollector")

    local backGround = rc:GetObject("BackGround"):GetComponent("Image")
    local button = rc:GetObject("Button")
    local hint = rc:GetObject("Hint")

    hint.gameObject:SetActive(data.isLocked)
    this.InitDropList(self, rc:GetObject("RewardList").transform,Z_DropPreview[data.levelInfo.DropPreview] , data)

    coroutine.start(function ()
        --LangUtil.BindText(rc:GetObject("ChallengeText")).text = data.levelInfo.Name
        LangUtil.BindText(rc:GetObject("AP")).text = data.levelInfo.Power
        LangUtil.BindText(rc:GetObject("Title")).text = data.levelInfo.LevelTitle
        LangUtil.BindText(rc:GetObject("TitleDescription")).text = data.levelInfo.Desc
    end)

    UIUtil.AddBtnEvent(button, function()
        local info ={levelId = data.id, levelTypeId = data.LevelType}
        --UIManager:GetInstance():OpenWindow(UIWindowNames.UIChallengeSectionInfo, info)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIStorySectionInfo, info)
     end)
end

function UIPublic.InitDropList(self,transform, data, levelData)
    local itemList = {}

    if levelData.LevelType == LevelType.LevelTypeMonthlyTower then
        this.pairsItem(self,data.FirstDropId, 1 ,itemList, not levelData.firstDropAvailable)
    else
        this.pairsItem(self,data.FirstDropId, 1 ,itemList, levelData.passTimes ~= 0)
    end
    
    this.pairsItem(self,data.FirstPerfectDropId, 2 ,itemList, #levelData.reached_goals == 3)
    this.pairsItem(self,data.NormalDropId, 3, itemList, false)
    this.pairsItem(self,data.ExtraDropId, 4, itemList, false)

    if #itemList == 0 then
        return
    end

    for i = #itemList + 1, transform.childCount do
        transform:GetChild(i - 1).gameObject:SetActive(false)
    end

    for index, value in ipairs(itemList) do
        local itemTransform = transform:GetChild(index - 1)
        itemTransform.gameObject:SetActive(true)
        local Avatar = itemTransform:Find("Icon"):GetComponent("Image")
        local BG = itemTransform:Find("ItemBg"):GetComponent("Image")
        
        itemTransform:Find("ClearImage").gameObject:SetActive(value.isClear)
        
        UIPublic.InitItemIconNew(Avatar, BG, value.RewardType, value.RewardId)

        UIUtil.AddBtnEvent(itemTransform, function()
            local showData ={}
            showData.tempId = value.RewardId
            showData.showType = ShowType.Item
            UIUtil.OpenThingsDetailWindow(showData)
        end)
    end
end

function UIPublic.pairsItem(self, dropList, type, itemList, isClear)
    if dropList == nil or #dropList ==0 then
        return
    end

    for _, dropId in ipairs(dropList) do
        if Z_Reward[dropId] == nil then
            print(dropId .. "在reward表中不存在")
            break
        end
        for _, value in ipairs(Z_Reward[dropId]) do
            local item = {
                RewardId = value.ObjId,
                RewardType = value.Type,
                itemType = type,
                isClear = isClear
            }
            local isExist = table.any(itemList, function(v)
                if  v.itemType == 1 then
                    return false
                elseif v.RewardId == value.RewardId and v.itemType == type then
                    return true
                else
                    return false
                end
            end)
            if not isExist then
                table.insert(itemList, item)
            end
        end
    end
end

function UIPublic.GetEquipEffectTextByEid(eid)
    ---@type Equip
    local equip = Game.Scene.Player:GetComponent("EquipComponent"):Get(eid)
    if equip == nil then
        Logger.LogError("不存在eid为" .. eid .. "的装备")
        return nil
    end
    return UIPublic.GetEquipEffectText(equip.TemplateId, equip.Level)
end

function UIPublic.GetEquipEffectText(cid, level)
    local zEquipLevelUp = Z_EquipLevelUp[cid]
    if zEquipLevelUp == nil then
        Logger.LogError("Z_EquipLevelUp表 不存在cid为" .. cid .. "的装备")
        return nil
    end

    local currentData = zEquipLevelUp[level]
    if currentData == nil then
        Logger.LogError("Z_EquipLevelUp表 不存在cid为" .. cid .. "的装备的等级为" .. level .. "的数据")
        return nil
    end

    local desc = LangUtil.GetConfLang(currentData, "Desc")
    return desc
end

---@return {id:number, count:number}[]
function UIPublic.GetEquipDecomposeItem(cid, star, level)
    local zEquip = Z_Equip[cid]
    if Z_EquipDecompose[zEquip.Part] == nil then
        Logger.LogError("Z_EquipDecompose 表中不存在部位" .. zEquip.Part .. "的数据")
        return {}
    end

    local rewardId
    for key, value in pairs(Z_EquipDecompose[zEquip.Part]) do
        if value.Star == star and value.Level == level then
            rewardId = value.Reward
            break
        end
    end
    if rewardId == nil then
        Logger.LogError("Z_EquipDecompose 表中不存在部位" .. zEquip.Part .. " 星级" .. star .." 等级" .. level .. "的数据") 
        return {}
    end

    if Z_Reward[rewardId] == nil then
        Logger.LogError("Z_Reward 表中不存在id为" .. rewardId .. "的数据")
        return {}
    end

    local items = {}
    for _, value in ipairs(Z_Reward[rewardId]) do
        if value.Type == RewardType.RewardTypeItem then
            table.insert(items,{
                id = value.ObjId,
                count = value.Count
            })
        end
    end
    return items
end

---@return {id:number, count:number}[]
---@param equips {cid:number, star:number, level:number}[] @ key可以不是连续的 用pairs处理
function UIPublic.GetEquipsDecomposeItem(equips)
    local itemMap = {}

    for index, value in pairs(equips) do
        local thsItems = UIPublic.GetEquipDecomposeItem(value.cid, value.star, value.level)
        for k, v in ipairs(thsItems) do
            if itemMap[v.id] == nil then
                itemMap[v.id] = v.count
            else
                itemMap[v.id] = itemMap[v.id] + v.count
            end
        end
    end

    local ret = {}
    for key, value in pairs(itemMap) do
        table.insert(ret, {
            id = key,
            count = value
        })
    end
    return ret
end

---@return table | number @ 传入type则返回数值, 否则返回table (key:属性枚举, value:数值)
function UIPublic.GetEquipPropertyByEid(eid, type)
    ---@type Equip
    local equip = Game.Scene.Player:GetComponent("EquipComponent"):Get(eid)
    if equip == nil then
        Logger.LogError("不存在eid为" .. eid .. "的装备")
        return {}
    end
    return UIPublic.GetEquipProperty(equip.TemplateId, equip.Level, type)
end

---@return table | number @ 传入type则返回数值, 否则返回table (key:属性枚举, value:数值)
function UIPublic.GetEquipProperty(cid, level, type)
    local zEquipLevelUp = Z_EquipLevelUp[cid]
    if zEquipLevelUp == nil then
        Logger.LogError("Z_EquipLevelUp表 不存在cid为" .. cid .. "的装备")
        return {}
    end

    local currentData = zEquipLevelUp[level]
    if currentData == nil then
        Logger.LogError("Z_EquipLevelUp表 不存在cid为" .. cid .. "的装备的等级为" .. level .. "的数据")
        return {}
    end

    local property = {}
    for key, value in pairs(Z_Property) do
        local propertyName = value.Name
        local value = currentData[propertyName]
        if value ~= "" and value ~= 0 then
            property[key] = value
        end
    end
    
    if type == nil then
        return property
    else
        return property[type]
    end
end

function UIPublic.GetFightSoulEffectText(templateId, star)
    if templateId == nil or star == nil then
        Logger.LogError("templateId 或 star 不能为空")
        return "templateId 或 star 不能为空"
    end

    local zFightSoulMerge = Z_FightSoulMerge[templateId]
    if zFightSoulMerge == nil then
        local error = "FightSoulMerge 中 不存在id为" .. templateId .. "的战魂"
        Logger.LogError(error)
        return error
    end

    if zFightSoulMerge[star] == nil then
        local error = "FightSoulMerge 中 id为" .. templateId .. "的战魂的 不存在" .. star .. "星级的数据"
        Logger.LogError(error)
        return error
    end

    return LangUtil.GetConfLang(zFightSoulMerge[star], "Desc")
end

--- key: GameObject的index, value: Property
local ShowPropertyIndex = {
    [1] = NumericType.Hp,
    [2] = NumericType.Atk,
    [3] = NumericType.Def,
    [4] = NumericType.MagicDef,
}

function UIPublic.GetFightSoulClass(classLimit)
    if classLimit == nil then
        Logger.LogError("UIPublic.GetFightSoulClass. classLimit is nil.")
        return 0
    end
    -- 当前默认只有 单职业 / 全职业. 数量>1即全职业
    local class = classLimit[1]
    if table.count(classLimit) > 1 then
        class = 0
    end
    return class
end

---@param fightSoul FightSoul
---@param transform UnityEngine.Transform
function UIPublic.InitFightSoulInfo(fightSoul, transform)
    ---@type ReferenceCollector
    local rc = transform:GetComponent("ReferenceCollector")
    LangUtil.BindText(rc:GetObject("Text1")).text = LangUtil.GetSysLang(804)
    LangUtil.BindText(rc:GetObject("Text2")).text = LangUtil.GetSysLang(167)

    local propertyRoot = rc:GetObject("PropertyRoot").transform
    for i = 0, propertyRoot.transform.childCount - 1 do
        local child = propertyRoot.transform:GetChild(i)
        local property = ShowPropertyIndex[i + 1]
        local value = fightSoul:GetProperty(property)
        child:Find("ValueText"):GetComponent("Text").text = value
        child:Find("TagText"):GetComponent("Text").text = LangUtil.GetSysLang(Z_Property[property].SysLangKey)
        UIUtil.SetSprite(child:Find("Image"):GetComponent("Image"), AtlasConfig.Property, Z_Property[property].Icon ..".png")
    end

    local class = UIPublic.GetFightSoulClass(fightSoul.config.ClassLimit)
    
    LangUtil.BindText(rc:GetObject("LevelText")).text = "LV." .. fightSoul.level .. "/" .. fightSoul.maxLevel
    LangUtil.BindText(rc:GetObject("ClassText")).text = LangUtil.GetSysLang(SysLangKeys.ClassName[class])
    
    local classImage = rc:GetObject("ClassImage"):GetComponent("Image")
    UIUtil.SetSprite(classImage, AtlasConfig.Class, class .. "_" .. fightSoul.config.Rare ..".png")

    local lock = rc:GetObject("Lock").transform
    UIUtil.AddBtnEvent(lock.gameObject,function() Game.Scene.Player:GetComponent("FightSoulComponent"):OnLock(fightSoul) end)
    UIPublic.InitEquipLock(lock,fightSoul.Lock)

    local effDesc = rc:GetObject("EffTxt"):GetComponent("Text")
    LangUtil.BindText(effDesc).text = UIPublic.GetFightSoulEffectText(fightSoul.TemplateId, fightSoul.Star)

    local starRoot = rc:GetObject("StarRoot").transform
    for i=0, starRoot.childCount-1 do
        starRoot:GetChild(i).gameObject:SetActive(i<=fightSoul.Star - 1)
    end
end

function UIPublic.GetFightSoulMaxLevelByStar(star)
    return Game.Scene.Player:GetComponent("FightSoulComponent"):GetMaxLevelByStar(star)
end

--- 传入property 返回数值. 传入nil 返回table
---@return table<number, number> | number @ key:属性枚举
function UIPublic.GetFightSoulProperty(templateId, level, property)
    local zLevelGrowth = Z_FightSoulLevelGrowth[templateId][level]
    if property ~= nil then
        return zLevelGrowth[Z_Property[property].Name]
    else
        local t = {}

        for key, value in pairs(Z_Property) do
            t[key] = zLevelGrowth[value.Name]
        end
        return t
    end
end

function UIPublic.CreateNumericalLang(root)
    root = root.transform
    for i = 0,root.childCount -1 do
        local child = root:GetChild(i)
        if child.gameObject.name ~= "BackGround" and  child.gameObject.name ~= "Image"  then
            LangUtil.BindText(child:Find("Text"))
            LangUtil.BindText(child:Find("Value"),FontType.All_Number).text=""
        end
    end
end

function UIPublic.InitButton(button,isActive,state,str, text) --state 1黄色按钮  2蓝色按钮
    local txt = text
    if IsNull(txt) and button.transform.childCount > 0 then
        local child = button.transform:GetChild(0)
        if not IsNull(child) then
            txt = child:GetComponent("Text")
        end
    end
    --local outline = txt:GetComponent("Outline")
    local img = button:GetComponent("Image")
    local btn = button:GetComponent("Button")
    if str ~= nil and not IsNull(txt) then txt.text = str end
    --if outline then
    --    if isActive ~= true then
    --        outline.effectColor = Color.New(112/255,118/255,124/255,1)
    --    elseif state == 1 then
    --        outline.effectColor = Color.New(213/255,117/255,23/255,177/255)
    --    elseif state == 2 then
    --        outline.effectColor = Color.New(32/255,120/255,209/255,128/255)
    --    elseif state == 3 then
    --
    --    end
    --end
    if not IsNull(btn) then btn.enabled = isActive end

    --if isActive then
    --    img.material = nil
    --    img.color = Color.New(1,1,1,1)
    --else
    --    img.material = DeActiveMat
    --    img.color = Color.New(1,1,1,0.5)
    --end
    table.csenu(button:GetComponentsInChildren(typeof(UE_UI.Image)),function (v)
        if isActive then
            v.material = nil
            v.color = Color.white
        else
            --v.material = DeActiveMat 暂时统一效果不加入灰化材质球 2023.12.26
            v.color = color1
        end
    end)
    table.csenu(button:GetComponentsInChildren(typeof(UE_UI.Text)),function (v)
        if isActive then
            v.color = Color.white
        else
            v.color = color1
        end
    end)
        
end

function UIPublic.InitGoState(gameObject, isActive)
    table.csenu(gameObject:GetComponentsInChildren(typeof(UE_UI.Image)),function (v)
        if isActive then
            v.material = nil
            v.color = Color.white
        else
            v.material = DeActiveMat
            v.color = color1
        end
    end)
    table.csenu(gameObject:GetComponentsInChildren(typeof(UE_UI.Text)),function (v)
        if isActive then
            v.color = Color.white
        else
            v.color = color1
        end
    end)
end

function UIPublic.GetStage(star)
    if star < 3 then
        return 1
    elseif star < 5 then
        return 2
    else
        return 3
    end
end


function UIPublic.ReFreshEquip(cardId,newEquipIdTab)
    local Equips = Game.Scene.Player:GetComponent("EquipComponent").Equips;
    local card = Game.Scene.Player:GetComponent("CardComponent").Cards[cardId];
    local equip_id_tab = {card.Hand1Equip, card.Hand2Equip, card.BodyEquip, card.HeadEquip, card.FootEquip, card.AdornEquip};

    local cardEquipComponent = card:GetComponent("CardEquipComponent");
    local card_equip_func_tab = {
        [1] = function(equip)cardEquipComponent:EquipHand1Equip(equip) end,
        [7] = function(equip)cardEquipComponent:UnEquipHand1Equip(equip) end,
        [2] = function(equip)cardEquipComponent:EquipHand2Equip(equip) end,
        [8] = function(equip)cardEquipComponent:UnEquipHand2Equip(equip) end,
        [3] = function(equip)cardEquipComponent:EquipBodyEquip(equip) end,
        [9] = function(equip)cardEquipComponent:UnEquipBodyEquip(equip) end,
        [4] = function(equip)cardEquipComponent:EquipHeadEquip(equip) end,
        [10] = function(equip)cardEquipComponent:UnEquipHeadEquip(equip) end,
        [5] = function(equip)cardEquipComponent:EquipFootEquip(equip) end,
        [11] = function(equip)cardEquipComponent:UnEquipFootEquip(equip) end,
        [6] = function(equip)cardEquipComponent:EquipAdornEquip(equip) end,
        [12] = function(equip)cardEquipComponent:UnEquipAdornEquip(equip) end
    }
    
    for k, v in pairs(equip_id_tab) do
        if v ~= 0 then
            card_equip_func_tab[k+6](Equips[v]);
        end
    end

    for k, v in pairs(newEquipIdTab) do
        if v ~= 0 then
            card_equip_func_tab[k](Equips[v]);
        end
    end
end


function UIPublic.ReFreshFightSoul(cardId,newEquipIdTab)
    local Equips = Game.Scene.Player:GetComponent("FightSoulComponent").FightSouls;
    local card = Game.Scene.Player:GetComponent("CardComponent").Cards[cardId];
    local equip_id_tab = {[1] = card.FightSoul1,[2] = card.FightSoul2,[3] = card.FightSoul3};

    local cardEquipComponent = card:GetComponent("CardFightSoulComponent");
    local card_equip_func_tab = {
        [1] = function(equip)cardEquipComponent:Equip1(equip) end,
        [4] = function(equip)cardEquipComponent:UnEquip1(equip) end,
        [2] = function(equip)cardEquipComponent:Equip2(equip) end,
        [5] = function(equip)cardEquipComponent:UnEquip2(equip) end,
        [3] = function(equip)cardEquipComponent:Equip3(equip) end,
        [6] = function(equip)cardEquipComponent:UnEquip3(equip) end
    }

    for k, v in pairs(equip_id_tab) do
        if v ~= 0 then
            card_equip_func_tab[k+3](Equips[v]);
        end
    end

    for k, v in pairs(newEquipIdTab) do
        if v ~= 0 then
            card_equip_func_tab[k](Equips[v]);
        end
    end
end

function  UIPublic.GetEquipEquipData(card,equip,OnEquip)
    print("CardInfo:"..table.dump(card))
    local send_data = {};
    local kind = Z_Equip[equip.TemplateId].Part;
    send_data.CardId = card.Id;
    local equipId;
    if OnEquip then
        equipId = equip.Id
    else
        equipId = 0;
    end

    if kind == 1 then
        send_data.Hand1Equip = equipId
        send_data.Hand2Equip = card.Hand2Equip
        send_data.BodyEquip = card.BodyEquip 
        send_data.HeadEquip = card.HeadEquip 
        send_data.FootEquip = card.FootEquip 
        send_data.AdornEquip = card.AdornEquip
    elseif kind == 2 then
        send_data.Hand1Equip = card.Hand1Equip
        send_data.Hand2Equip = equipId
        send_data.BodyEquip = card.BodyEquip
        send_data.HeadEquip = card.HeadEquip
        send_data.FootEquip = card.FootEquip
        send_data.AdornEquip = card.AdornEquip
    elseif kind == 3 then
        send_data.Hand1Equip = card.Hand1Equip
        send_data.Hand2Equip = card.Hand2Equip
        send_data.BodyEquip = equipId
        send_data.HeadEquip = card.HeadEquip
        send_data.FootEquip = card.FootEquip
        send_data.AdornEquip = card.AdornEquip
    elseif kind == 4 then
        send_data.Hand1Equip = card.Hand1Equip
        send_data.Hand2Equip = card.Hand2Equip
        send_data.BodyEquip = card.BodyEquip
        send_data.HeadEquip = equipId
        send_data.FootEquip = card.FootEquip
        send_data.AdornEquip = card.AdornEquip
    elseif kind == 5 then
        send_data.Hand1Equip = card.Hand1Equip
        send_data.Hand2Equip = card.Hand2Equip
        send_data.BodyEquip = card.BodyEquip
        send_data.HeadEquip = card.HeadEquip
        send_data.FootEquip = equipId
        send_data.AdornEquip = card.AdornEquip
    elseif kind == 6 then
        send_data.Hand1Equip = card.Hand1Equip
        send_data.Hand2Equip = card.Hand2Equip
        send_data.BodyEquip = card.BodyEquip
        send_data.HeadEquip = card.HeadEquip
        send_data.FootEquip = card.FootEquip
        send_data.AdornEquip = equipId
    end
    return send_data;
end


function  UIPublic.GetEquipFightSoulData(card,fightSoul,kind,OnEquip)
    local send_data = {};
    send_data.CardId = card.Id;
    local fightSoulId;
    if OnEquip then
        fightSoulId = fightSoul.Id
    else
        fightSoulId = 0;
    end

    if kind == 1 then
        send_data.FightSoul1 = fightSoulId;
        send_data.FightSoul2 = card.FightSoul2;
        send_data.FightSoul3 = card.FightSoul3;
    elseif kind == 2 then
        send_data.FightSoul1 = card.FightSoul1;
        send_data.FightSoul2 = fightSoulId;
        send_data.FightSoul3 = card.FightSoul3;
    elseif kind == 3 then
        send_data.FightSoul1 = card.FightSoul1;
        send_data.FightSoul2 = card.FightSoul2;
        send_data.FightSoul3 = fightSoulId;
    end
    return send_data;
end

function UIPublic.InitFightSoulMsg(self,gameObject,fight_soul,isLock,isCoroutine)
    local transform = gameObject.transform;
    local star_text = transform:Find("Star/Text"):GetComponent("Text");
    local name_text = transform:Find("Name/Text"):GetComponent("Text");
    local icon_image = transform:Find("Icon"):GetComponent("Image");
    local lock_btn ;
    if transform:Find("LockButton") ~= nil then
        lock_btn = transform:Find("LockButton").gameObject;
    end

    local z_fight_soul = Z_FightSoul[fight_soul.TemplateId];
    star_text.text = fight_soul.Star ..LangUtil.GetSysLang(584);
    name_text.text = z_fight_soul.Name;
    UIUtil.SetFightSoulSprite(icon_image,z_fight_soul.Id,FightSoulPictureType.Little,isCoroutine)
    if isLock then
        lock_btn:SetActive(true);
        lock_btn.transform:Find("Text"):GetComponent("Text").text = (fight_soul.Lock == 1 and{"Lock"}or{"Unlock"})[1];
        local send_data = {};
        send_data.FightSoulId = fight_soul.Id;
        send_data.Lock =  (fight_soul.Lock == 1 and{0}or{1})[1];
        local bindData = UIUtil.GetButtonDataComponent(lock_btn);
        bindData:Add("data",send_data);
        ButtonListener.Get(lock_btn).OnClickHandler = self.ctrl.SendLockRequest;
        UIUtil.AddBtnSound(lock_btn)
    else
        if lock_btn~= nil then
            lock_btn:SetActive(false);
        end
    end

end

function UIPublic.GetFightSoulHolder(fight_soul)
    if fight_soul == nil  then return nil end
    local Cards = Game.Scene.Player:GetComponent("CardComponent").Cards;
    for k,v in pairs(Cards) do
        if v.FightSoul1 == fight_soul.Id or v.FightSoul2 == fight_soul.Id or v.FightSoul3 == fight_soul.Id then
            return v;
        end
    end
    return nil;
end 

function UIPublic.GetFightSoulHolderById(templateId)
    local player = Game.Scene.Player
    local fightSouls = player:GetComponent("FightSoulComponent").FightSouls
    local fs = table.choose(fightSouls, function(k,v) return v.TemplateId == templateId   end)

    for k,v in pairs(fs) do
        local holder =  UIPublic.GetFightSoulHolder(v)
        if holder~= nil then
            return holder
        end
    end
    return nil

end

function UIPublic.GetFightSoulIndex(card,fight_soul)
    if card.FightSoul1 == fight_soul.Id then
        return 1;
    elseif card.FightSoul2 == fight_soul.Id then
        return 2;
    elseif card.FightSoul3 == fight_soul.Id then
        return 3;
    end
end

function  UIPublic.InitFightSoulItemData(self,fight_soul,isLock,callBack,func,object)
    UIUtil.AddBtnSound(object);
    local transform = object.transform;
    local desc_text = transform:Find("Describle"):GetComponent("Text")
    LangUtil.BindText(desc_text.transform)
    local holder_icon = transform:Find("HolderIcon/Image"):GetComponent("Image");
    local msg_prefab = transform:Find("FightSoulMsgPf").gameObject;
    UIPublic.InitFightSoulMsg(self,msg_prefab,fight_soul,isLock);
    local z_fight_soul = Z_FightSoul[fight_soul.TemplateId];
    desc_text.text = z_fight_soul.EquipEfx;
    local holder =  UIPublic.GetFightSoulHolder(fight_soul);
    holder_icon.sprite = nil;

    if callBack ~= nil then
        local bindData = UIUtil.GetButtonDataComponent(object);
        bindData:Add("self",self);
        bindData:Add("fightSoul",fight_soul);
        ButtonListener.Get(object).OnClickHandler = callBack;
    end

    if func ~= nil then
        func(object);
    end

end

function UIPublic.InitFightSoulItem(self,parent,fight_soul,isLock,callBack,func)
    ListChildPool:GetInstance():GetChild("FightSoulItemPf",parent,function(object)
        object:SetActive(false);
        UIPublic.InitFightSoulItemData(self,fight_soul,isLock,callBack,func,object)
        object:SetActive(true);
    end);
    
end

function UIPublic.CardIsDestroy(card)
    local player = Game.Scene.Player;
    if card.Lock == 1 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2052));
        return false;
    end

    if player.MainUICardId == card.Id then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2053));
        return false;
    end

    if player.BedroomCardId == card.Id then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2054));
        return false;
    end

    for k,v in pairs(Game.Scene.Player:GetComponent("TeamComponent"):GetTeams()) do
        for a,b in pairs(v.TeamDetailList) do
            if b.CardId == card.Id then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(2055));
                return false
            end
        end
    end
    return true;
end

function UIPublic.OpenChangeEquipWindow(card)
    local panel_data = {};
    panel_data.panel_id = 2;
    panel_data.cur_card = card;
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipIntens,panel_data);
end

function UIPublic.OpenChangeFightSoulWindow(card)
    local panel_data = {};
    panel_data.panel_id = 2;
    panel_data.cur_card = card;
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulIntens,panel_data);
end

local delayTime = 1.5;
local delayTime1 = 0.5;

local function FadeImage(image,time)
    if image ~= nil then
        image:DOFade(0,0);
        image:DOFade(1,time)
    end
end

function UIPublic.FadeAllChild(root,value,time)
    if value == 0 and time == 0 then
        root.gameObject:SetActive(false)
    else
        root.gameObject:SetActive(true)
    end

    
    table.csenuObject(root.transform,function(v)
        local txt = v:GetComponent("Text")
        local img = v:GetComponent("Image")
        if not IsNull(txt) then txt:DOFade(value,time)  end
        if not IsNull(img) then img:DOFade(value,time)  end
    end,true)

end


function UIPublic.SetPopWindowScale(transform,_bool,delay,ignoreName);

    if delay == nil then delay = delayTime end
   --     transform.localScale = Vector2.New(0.95,0.95);

   -- transform:DOScale(Vector2.New(1,1),delayTime);
    table.csenuObject(transform,function(v)
        if ignoreName ==nil or (not string.contains(v.gameObject.name,ignoreName)) then
            if v.gameObject.name ~= "EventBg" then
                FadeImage(v:GetComponent("Image"),delay)
                FadeImage(v:GetComponent("Text"),delay)
            end
        end
    end)
    if _bool then
        local image = transform:GetComponent("Image");
        FadeImage(image)
    end
end

function UIPublic.ActiveSetBattleSettle(transform)
    transform.localScale = Vector2.New(0.6,0.6);
    transform:DOScale(Vector2.New(1,1),0.15);
    table.csenuObject(transform,function(v)
        FadeImage(v:GetComponent("Image"),delayTime1)
        FadeImage(v:GetComponent("Text"),delayTime1)
    end)
end

function UIPublic.AddItem(ItemBean,notShowTip)
    local itemComponent = Game.Scene.Player:GetComponent("ItemComponent");
    local items = itemComponent.Items;
    if items[ItemBean.ItemId] == nil then
        itemComponent:Add(Game.Registry:NewObject("Item",ItemBean));
    else
        items[ItemBean.ItemId].Amount = items[ItemBean.ItemId].Amount + ItemBean.Amount;
    end
    if notShowTip then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(725)..Z_Item[ItemBean.TemplateId].Name.."X"..ItemBean.Amount);
    end

end

function UIPublic.GetConditionStr(tab)
    local str;
    if tab == nil then return "" end
    
    if tab.cond == 1 then
        str = LangUtil.GetSysLang(3090)--通关
    elseif tab.cond == 2 then
        str = string.gsub(LangUtil.GetSysLang(3091),"XX", tab.round)--在XX回合内通关
    elseif tab.cond == 3 then
        str = LangUtil.GetSysLang(3092)--我方无角色死亡
    elseif tab.cond == 4 then
        str = string.gsub(LangUtil.GetSysLang(3093),"XX", tab.count)--使用技能达到XX次
    elseif tab.cond == 5 then
        str = string.gsub(LangUtil.GetSysLang(3094),"XX", tab.round)--坚持XX回合
    elseif tab.cond == 6 then
        str = string.gsub(LangUtil.GetSysLang(3095),"XX", tab.count)--使用魂煌华达到XX次
    elseif tab.cond == 7 then
        str = string.gsub(LangUtil.GetSysLang(3096),"XX", tab.num)--队伍人数小/等/大于XX
        str = string.gsub(str,"ZZ", LangUtil.GetSysLang(3100 + tab.compare))
    elseif tab.cond == 8 then
        if tab.type == 1 then
            str = string.gsub(LangUtil.GetSysLang(3097),"YY", tab.num)--队伍中使用XX型角色小于YY
            str = string.gsub(str,"XX", LangUtil.GetSysLang(3084 + tab.sub))--3085 3089 支援、攻击...
            str = string.gsub(str,"ZZ", LangUtil.GetSysLang(3100 + tab.compare))
        elseif tab.type == 2 then
            str = string.gsub(LangUtil.GetSysLang(3098),"YY", tab.num)--队伍中使用XX属性角色小于YY
            str = string.gsub(str,"XX", LangUtil.GetSysLang(176 + tab.sub))--177  火、水...
            str = string.gsub(str,"ZZ", LangUtil.GetSysLang(3100 + tab.compare))
        elseif tab.type == 3 then
            str = string.gsub(LangUtil.GetSysLang(3099),"YY", tab.num)--战队中XX超越者ZZ YY名时胜利
            str = string.gsub(str,"XX", this.RareNames[tab.sub])--R.SR..
            str = string.gsub(str,"ZZ", LangUtil.GetSysLang(3100 + tab.compare))
        end
    elseif tab.cond == 9 then
        if tab.type == 1 then
            str = string.gsub(LangUtil.GetSysLang(3105),"XX", LangUtil.GetSysLang(3084 + tab.sub))--队伍中只存在XX型角色
        elseif tab.type == 2 then
            str = string.gsub(LangUtil.GetSysLang(3106),"XX", LangUtil.GetSysLang(176 + tab.sub))--队伍中使用XX属性角色
        elseif tab.type == 3 then
            str = string.gsub(LangUtil.GetSysLang(3103),"XX", this.RareNames[tab.sub])--队伍中只使用XX超越者
        end
    end

    return str;
end

function UIPublic.GetExpValue(level,exp)
    if level == maxLevel then
        return 1;
    end
    local next_level_exp = Z_PlayerLevelUp[level + 1].Exp;
    return exp/next_level_exp;
end

function this.RiskSortFunc(a,b,recordOrder)
    local card_list = Game.Scene.Player:GetComponent("CardComponent").Cards
    local cardA = {Level = 0 , Star = 0}
    local cardB = {Level = 0 , Star = 0}
    local cardA_list = table.choose(card_list,function (k,v) return v.TemplateId == a.Id end)
    local cardB_list = table.choose(card_list,function (k,v) return v.TemplateId == b.Id end)
    if table.count(cardA_list) > 0 then
        for k,v in table.pairsByKeys(cardA_list) do
            if v.Level > cardA.Level then
                cardA.Level =  v.Level
                cardA.Star = v.Star
            end
        end
    end

    if table.count(cardB_list) > 0 then
        for k,v in table.pairsByKeys(cardB_list) do
            if v.Level > cardB.Level then
                cardB.Level =  v.Level
                cardB.Star = v.Star
            end
        end
    end
    
    --local zCard_a = Z_Card[a.TemplateId]
    --local zCard_b = Z_Card[b.TemplateId]
    --local cardCharacter_a = a:GetComponent("CardCharacterComponent")
    --local cardCharacter_b = b:GetComponent("CardCharacterComponent")
    if recordOrder.kind == 1 then --稀有度
        if a.Rare ~= b.Rare then
            return a.Rare > b.Rare
        end
        if a.Id ~= b.Id  then
            return a.Id < b.Id
        end
        if cardA.Level ~= cardB.Level then
            return cardA.Level > cardB.Level
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 2 then --星级    
        if cardA.Star ~= cardB.Star then
            return cardA.Star > cardB.Star
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 3 then --能力类型
        if a.AbiliType ~= b.AbiliType then
            return a.AbiliType < b.AbiliType
        end
        if a.Rare ~= b.Rare then
            return a.Rare > b.Rare
        end
        if a.Id ~= b.Id  then
            return a.Id < b.Id
        end
        if cardA.Level ~= cardB.Level then
            return cardA.Level > cardB.Level
        end
        return a.Id < b.Id
    end
end

function this.RiskScreenFunc(cards,screenTypes)
    --稀有度
    local tb = table.chooseByIndex(cards,function(k,v) return true  end)
    if screenTypes.rare ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCharacter = Z_Character[v.Id]
            return zCharacter.Rarity == screenTypes.rare
        end)
    end

    --能力类型    
    if screenTypes.abiliType ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCard = Z_Card[v.Id]
            return zCard.AbiliType == screenTypes.abiliType
        end)
    end


    --主属性
    if screenTypes.mainProp ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCard = Z_Card[v.Id]
            return zCard.MainProp == screenTypes.mainProp
        end)
    end

    --副属性
    if screenTypes.subProp ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCard = Z_Card[v.Id]
            return zCard.SubProp == screenTypes.subProp
        end)
    end

    --攻击距离
    if screenTypes.atkType ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCard = Z_Card[v.Id]
            return zCard.AtkType == screenTypes.atkType
        end)
    end

    return tb
end

function this.SortFunc(a,b,recordOrder)
    local zCard_a = Z_Card[a.TemplateId]
    local zCard_b = Z_Card[b.TemplateId]
    local zCharacter_a = Z_Character[a.TemplateId]
    local zCharacter_b = Z_Character[b.TemplateId]
    local cardCharacter_a = a:GetComponent("CardCharacterComponent")
    local cardCharacter_b = b:GetComponent("CardCharacterComponent")
    if recordOrder.kind == 1 then --等级
        if a.Level ~= b.Level then
            return a.Level > b.Level 
        end
        -- return a.Id < b.Id 
    elseif recordOrder.kind == 2 then --稀有度
        if zCharacter_a.Rarity ~= zCharacter_b.Rarity then
            return zCharacter_a.Rarity > zCharacter_b.Rarity
        end
        -- if a.TemplateId ~= b.TemplateId  then
        --     return a.TemplateId < b.TemplateId
        -- end
        -- if a.Level ~= b.Level then
        --     return a.Level > b.Level
        -- end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 3 then --星级    
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 4 then --能力类型
        if zCard_a.AbiliType ~= zCard_b.AbiliType then
            return zCard_a.AbiliType < zCard_b.AbiliType
        end
        -- if zCharacter_a.Rarity ~= zCharacter_b.Rarity then
        --     return zCharacter_a.Rarity > zCharacter_b.Rarity
        -- end
        -- if a.TemplateId ~= b.TemplateId  then
        --     return a.TemplateId < b.TemplateId
        -- end
        -- if a.Level ~= b.Level then
        --     return a.Level > b.Level
        -- end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 5 then --入手顺序
        return a.Id < b.Id
    elseif recordOrder.kind == 6 then --亲密度
        if a.CloseDegree ~= b.CloseDegree then
            return a.CloseDegree > b.CloseDegree
        end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 7 then --Hp
        if cardCharacter_a:MaxHp() ~= cardCharacter_b:MaxHp() then
            return cardCharacter_a:MaxHp()>cardCharacter_b:MaxHp()
        end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 8 then --atk
        if  cardCharacter_a:Atk() ~= cardCharacter_b:Atk() then
            return cardCharacter_a:Atk()>cardCharacter_b:Atk()
        end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 9 then --def
        if  cardCharacter_a:Def()~=cardCharacter_b:Def() then
            return cardCharacter_a:Def()>cardCharacter_b:Def()
        end
        -- return a.Id < b.Id
    elseif recordOrder.kind == 10 then --MagicDef
        if  cardCharacter_a:MagicDef()~=cardCharacter_b:MagicDef() then
            return cardCharacter_a:MagicDef()>cardCharacter_b:MagicDef()
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 11 then --speed
        if cardCharacter_a:Speed()~=cardCharacter_b:Speed() then
            return cardCharacter_a:Speed()>cardCharacter_b:Speed()
        end
        -- return a.Id < b.Id
    end

    if zCharacter_a.Rarity ~= zCharacter_b.Rarity then
        return zCharacter_a.Rarity > zCharacter_b.Rarity
    end
    if a.Level ~= b.Level then
        return a.Level > b.Level
    end
    if a.Star ~= b.Star then
        return a.Star > b.Star
    end
    if a.TemplateId ~= b.TemplateId  then
        return a.TemplateId < b.TemplateId
    end
    return a.Id < b.Id
end

function this.SortFuncByCharacterId(a,b,recordOrder)
    local zCard_a = Z_Card[a.TemplateId]
    local zCard_b = Z_Card[b.TemplateId]
    local zCharacter_a = Z_Character[a.TemplateId]
    local zCharacter_b = Z_Character[b.TemplateId]
    local property_a = Z_CharacterGrowth[a.TemplateId][1]
    local property_b = Z_CharacterGrowth[b.TemplateId][1]
    if recordOrder.kind == 1 then --等级
        if a.Level ~= b.Level then
            return a.Level > b.Level 
        end
        return a.Id < b.Id 
    elseif recordOrder.kind == 2 then --稀有度
        if zCharacter_a.Rarity ~= zCharacter_b.Rarity then
            return zCharacter_a.Rarity > zCharacter_b.Rarity
        end
        if a.TemplateId ~= b.TemplateId  then
            return a.TemplateId < b.TemplateId
        end
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 3 then --星级    
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 4 then --能力类型
        if zCard_a.AbiliType ~= zCard_b.AbiliType then
            return zCard_a.AbiliType < zCard_b.AbiliType
        end
        if zCharacter_a.Rarity ~= zCharacter_b.Rarity then
            return zCharacter_a.Rarity > zCharacter_b.Rarity
        end
        if a.TemplateId ~= b.TemplateId  then
            return a.TemplateId < b.TemplateId
        end
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 5 then --入手顺序
        return a.Id < b.Id
    elseif recordOrder.kind == 6 then --亲密度
        if a.CloseDegree ~= b.CloseDegree then
            return a.CloseDegree > b.CloseDegree
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 7 then --Hp
        if property_a.Hp ~= property_b.Hp then
            return property_a.Hp > property_b.Hp
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 8 then --atk
        if  property_a.Atk ~= property_b.Atk then
            return property_a.Atk>property_b.Atk
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 9 then --def
        if  property_a.Def ~= property_b.Def then
            return property_a.Def > property_b.Def
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 10 then --speed
        if property_a.Speed ~= property_b.Speed then
            return property_a.Speed > property_b.Speed
        end
        return a.Id < b.Id
    end
end

function this.GetDefaultScreenTypes()
    return {
        rare = {},
        class = {},
        prop = {},
    }
end

--- 角色筛选
function this.ScreenFunc(cards,screenTypes)
    -- 稀有度
    local tb = table.chooseByIndex(cards,function(k,v) return true  end)
    if table.count(screenTypes.rare) ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v ) 
            local zCharacter = Z_Character[v.TemplateId]
            return table.contains(screenTypes.rare, zCharacter.Rarity)
        end)
    end

    -- 职业    
    if table.count(screenTypes.class) ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCharacter = Z_Character[v.TemplateId]
            return table.contains(screenTypes.class, zCharacter.Class)
        end)
    end

    -- 属性
    if table.count(screenTypes.prop) ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v )
            local zCharacter = Z_Character[v.TemplateId]
            return table.contains(screenTypes.prop, zCharacter.Prop)
        end)
    end

    return tb
end


---@param a Equip
---@param b Equip
function this.EquipSortFunc(a,b,recordOrder)
    local zEquip_a = Z_Equip[a.TemplateId]
    local zEquip_b = Z_Equip[b.TemplateId]
    local level1 = a.Level
    local level2 = b.Level

    if recordOrder.kind == 1 then --装备类型
        if  zEquip_a.Part ~= zEquip_b.Part then
            return zEquip_a.Part < zEquip_b.Part
        end
        if a.TemplateId ~= b.TemplateId then
            return a.TemplateId < b.TemplateId
        end
        if level1 ~= level2  then
            return level1 > level2
        end
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 2 then --装备等级
        if level1 ~= level2  then
            return level1 > level2
        end
        if  zEquip_a.Part ~= zEquip_b.Part then
            return zEquip_a.Part < zEquip_b.Part
        end
        if a.TemplateId ~= b.TemplateId then
            return a.TemplateId < b.TemplateId
        end
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 3 then --装备星级
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        if  zEquip_a.Part ~= zEquip_b.Part then
            return zEquip_a.Part < zEquip_b.Part
        end
        if a.TemplateId ~= b.TemplateId then
            return a.TemplateId < b.TemplateId
        end
        if level1 ~= level2  then
            return level1 > level2
        end
        return a.Id < b.Id
    elseif recordOrder.kind == 4 then --入手顺序
        return a.Id < b.Id
    end
end

function this.EquipScreenFunc(list,screenTypes)
    local tb = table.chooseByIndex(list,function(k,v) return true  end)

    if screenTypes.star ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            local zEquip = Z_Equip[v.TemplateId]
            local star 
            if zEquip.Exclusive == 0 then
                star = zEquip.Star
            else
                star = v.Star
            end
            return star == screenTypes.star
        end)
    end

    if screenTypes.Part ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            local zEquip = Z_Equip[v.TemplateId]
            return zEquip.Part == screenTypes.Part
        end)
    end

    if screenTypes.exclusive ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            local zEquip = Z_Equip[v.TemplateId]
            if screenTypes.exclusive == 1 and zEquip.Exclusive == 0 or
                    screenTypes.exclusive == 2 and zEquip.Exclusive ~= 0 then
                return true
            else
                return false
            end
        end)
    end

    if screenTypes.isEquip ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            if screenTypes.isEquip == 1 then
                return UIPublic.GetEquipHolder(v) ~= nil
            else
                return UIPublic.GetEquipHolder(v) == nil
            end
        end)
    end
    return tb
end

-- kind 1: 稀有度, 2: 星级, 3: 入手顺序(id大小)
-- lockFirst nil : 不考虑.
--          true : 优先显示锁定的. kind=1, 稀有度显示时, 在同id的最前面. kind=2 星级显示时, 在全部的最前面
--          fakse: 最后显示锁定的. kind=1, 稀有度显示时, 在同id的最后面. kind=2 星级显示时, 在全部的最后面
---@param a FightSoul
---@param b FightSoul
function this.FightSoulSortFunc(a,b,recordOrder)
    local zFightSoul_a = a.config
    local zFightSoul_b = b.config
    local id1 = a.Id
    local id2 = b.Id
    if recordOrder.firstChooseFuns ~= nil then
        if recordOrder.firstChooseFuns(a, b) ~= nil then
            return recordOrder.firstChooseFuns(a, b)
        end
    end
    --print("recordOrder.kind:"..recordOrder.kind)
    if recordOrder.kind == 1 then
        if zFightSoul_a.Rare ~= zFightSoul_b.Rare then
            return zFightSoul_a.Rare > zFightSoul_b.Rare
        end
        if a.TemplateId ~= b.TemplateId then
            return a.TemplateId < b.TemplateId
        end
        -- 同名战魂
        if recordOrder.lockFirst ~= nil then
            if recordOrder.lockFirst then
                if a.Lock ~= b.Lock then
                    return a.Lock
                end
            else
                if a.Lock ~= b.Lock then
                    return b.Lock
                end
            end
        end
        -- 同名战魂, 锁定状态相同/不关心锁定状态
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        return id1 < id2
    elseif recordOrder.kind == 2 then
        -- 锁定状态优先
        if recordOrder.lockFirst ~= nil then
            if recordOrder.lockFirst then
                if a.Lock ~= b.Lock then
                    return a.Lock
                end
            else
                if a.Lock ~= b.Lock then
                    return b.Lock
                end
            end
        end
        if a.Star ~= b.Star then
            return a.Star > b.Star
        end
        return id1 < id2
    elseif recordOrder.kind == 3 then
        return id1 < id2
    --elseif recordOrder.kind == 4 then
    --    if a.TemplateId == b.TemplateId then
    --        return a.Star > b.Star
    --    end
    --    return a.TemplateId < b.TemplateId
    else
        return id1 < id2
    end
end

function this.FightSoulScreenFunc(list,screenTypes)
    local tb = table.chooseByIndex(list,function(k,v) return true  end)

    -- 0 所有职业, 1-6对应职业
    if screenTypes.abiliType ~= nil and screenTypes.abiliType ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            local class = UIPublic.GetFightSoulClass(Z_FightSoul[v.TemplateId].ClassLimit)
            if screenTypes.abiliType == 7 then
                return class == 0
            else
                return class == screenTypes.abiliType
            end
        end)
    end

    if screenTypes.star ~= nil and screenTypes.star ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            return v.Star == screenTypes.star
        end)
    end
    

    if screenTypes.rare ~= nil and screenTypes.rare ~= 0 then
        tb = table.chooseByIndex(tb,function(k,v)
            local zFightSoul = Z_FightSoul[v.TemplateId]
            return zFightSoul.Rare == screenTypes.rare
        end)
    end
    

    -- 0 不管装备, 1 已装备, 2 未装备
    if screenTypes.isEquip ~= nil and screenTypes.isEquip ~= FightSoulScreenType.isEquip.None then
        tb = table.chooseByIndex(tb,function(k,v)
            if screenTypes.isEquip == FightSoulScreenType.isEquip.Equip or screenTypes.isEquip == true then
                return v.isEquip == true
            else
                return not v.isEquip
            end
        end)
    end

    --- 0 不管升级, 1 已经升级, 2 未升级
    if screenTypes.isLevelUp ~= nil and screenTypes.isLevelUp ~= FightSoulScreenType.isLevelUp.None then
        tb = table.chooseByIndex(tb,function(k,v)
            if screenTypes.isLevelUp == FightSoulScreenType.isLevelUp.LevelUp then
                return v.level > 1 or v.exp > 0
            else
                return v.level == 1 and v.exp == 0
            end
        end)
    end
    return tb
end

---@param equip Equip
function this.InitEquipItemNew(transform,equip,showNameBg,hideHolder)
    ---@type ReferenceCollector
    local rc = transform:GetComponent("ReferenceCollector")

    local zEquip = Z_Equip[equip.TemplateId]
    local starBg = rc:GetObject("StarBg"):GetComponent("Image")
    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local nameBG = rc:GetObject("NameBg").gameObject
    local name = LangUtil.BindText(rc:GetObject("NameText"))
    local lock = rc:GetObject("Lock")
    local lock0 = rc:GetObject("Lock0")
    local lock1 = rc:GetObject("Lock1")
    local level = transform:Find("Bg/IconRoot/Level"):GetComponent("Text")
    local new = rc:GetObject("New")
    new:SetActive(false)

    LangUtil.BindText(level.transform,FontType.All_Number)
    if equip.Level ~= nil then
        level.text = "LV."..equip.Level
    else
        level.text = ""
    end

    local select = transform:Find("Bg/Select").gameObject
    local select1 = transform:Find("Bg/Select1").gameObject
    select:SetActive(false)
    select1:SetActive(false)
    lock:SetActive(true)
    if equip.Lock ~= nil then
        lock0:SetActive(not equip.Lock)
        lock1:SetActive(equip.Lock)
    else
        lock0:SetActive(false)
        lock1:SetActive(false)
    end
    
    if showNameBg ~= nil then
        nameBG:SetActive(showNameBg)
    else
        nameBG:SetActive(false)
    end
    name.text = zEquip.Name
    UIUtil.ScrollText(name)
    
    -- for i = 0,kindRoot.childCount - 1 do
    --     local child = kindRoot:GetChild(i).gameObject
    --     child:SetActive((i+1) == zEquip.Kind)
    -- end
    local holderRoot = rc:GetObject("HolderRoot")
    local holderImage = rc:GetObject("HolderImage"):GetComponent("Image")
    if not hideHolder then
        ---@type Card
        local holder = equip:GetCharacter()
        holderRoot:SetActive(holder ~= nil)
        if holder ~= nil then
            UIUtil.SetCardSprite(holderImage,holder.TemplateId,holder.Stage,CardPictureType.Little,true)
        end
    else
        holderRoot:SetActive(false)
    end

    UIPublic.InitEquipBg(zEquip,starBg)
    UIUtil.SetSprite(avatar,AtlasConfig.Equip,zEquip.EquipIcon)

    local starRoot = rc:GetObject("StarRoot").transform
    for i = 0,starRoot.childCount - 1 do
        local child = starRoot:GetChild(i).gameObject
        child:SetActive((i+1)<= zEquip.Star)
    end
end

function this.InitFightSoulItemDataNew(transform,fightSoul)
    local starRoot = transform:Find("IconRoot/StarRoot")
    local holderAvatar = transform:Find("Holder/Avatar"):GetComponent("Image")
    
    for i = 0,starRoot.childCount - 1 do
        local child = starRoot:GetChild(i).gameObject
        child:SetActive((i+1)<= fightSoul.Star)
    end
    local holder = UIPublic.GetFightSoulHolder(fightSoul)
    if holder ~= nil then
        holderAvatar.gameObject:SetActive(true)
        UIUtil.SetCardSprite(holderAvatar,holder.TemplateId,holder.SkinId,CardPictureType.Little,true)
    else
        holderAvatar.gameObject:SetActive(false)
    end
end

function this.InitEquipBg(zEquip,image,isCoroutine)
    local iconName
    if zEquip.Exclusive ~= 0 then
        iconName = "0.png"
    else
        iconName = zEquip.Star..".png"
    end
    
    UIUtil.SetSprite(image,AtlasConfig.EquipBg,iconName,isCoroutine)
end


function this.CreateNewCard(cardInfo)
    local card = {}
    card.Id = 0
    card.TemplateId = cardInfo.TemplateId;
    card.Level = cardInfo.Level;
    card.LevelLimit = cardInfo.LevelLimit;
    card.Stage = cardInfo.Stage;
    card.Star = cardInfo.Star;
    card.Exp = cardInfo.Exp;
    card.CloseDegree = cardInfo.CloseDegree;
    card.SkinId = cardInfo.SkinId;
    card.Lock = cardInfo.Lock;
    card.Hand1Equip = cardInfo.Hand1Equip;
    card.Hand2Equip = cardInfo.Hand2Equip;
    card.BodyEquip = cardInfo.BodyEquip;
    card.HeadEquip = cardInfo.HeadEquip;
    card.FootEquip = cardInfo.FootEquip;
    card.AdornEquip = cardInfo.AdornEquip;
    card.FightSoul1 = cardInfo.FightSoul1;
    card.FightSoul2 = cardInfo.FightSoul2;
    card.FightSoul3 = cardInfo.FightSoul3;
    card.Support = cardInfo.Support;
    card.JadePearlLevel = cardInfo.JadePearlLevel or 0;
    card.PlayedNum= cardInfo.PlayedNum

    local result = Game.Registry:NewObject("Card",card)
    result:InitCardComponent()

    return result
 end

function UIPublic.CreateNewEquip(equip)
    local equipInfo = {}
    equipInfo.Id = 0
    equipInfo.TemplateId = equip.TemplateId;
    equipInfo.Level = equip.Level;
    equipInfo.Star = equip.Star;
    equipInfo.Lock = equip.Lock;
    equipInfo.BaseAttr = equip.BaseAttr;
    local newEquip = Game.Registry:NewObject("Equip",equip)
    newEquip:AddComponent("EquipAttrComponent")
    return newEquip
end

---@param go UnityEngine.GameObject
---@param cid number @ 道具id
function UIPublic.InitItemPrefab(go, cid)
    
end

---@class RewardItemData
---@field rewardId number @ 优先读取
---@field itemPrefab UnityEngine.GameObject @ 优先读取prefab, 没有的话再去找单独的image
---@field icon UnityEngine.UI.Image @ 图标image
---@field iconBg UnityEngine.UI.Image @ 背景image
---@field frame UnityEngine.UI.Image @ 边框image
---@field countText UnityEngine.UI.Text @ 数量text
---@field type number @rewardType
---@field id number @ 物品id
---@field count number @ 数量
---@field isShowThingsDetail boolean @ 点击是否显示详情
---@field isShowCount boolean @ 是否显示的数量
---@field isBag boolean @ 是否背包内( 点击显示详情时有用 )
---@field nameText UnityEngine.UI.Text @ 名字text, 如果有的话显示name
--- 可以只传rewardId, itemPrefab, isShowThingsDetail, isShowCount, isBag
--- 2023 新版 通过rewardType 和 id 初始化奖励图标
---@param data RewardItemData
function UIPublic.InitRewardItem(data)
    local type
    local id
    local count
    local icon
    local iconBg
    local countText
    local isShowThingsDetail
    local isBag
    local frame
    local clickTarget

    if data.rewardId ~= nil then
        local reward = Z_Reward[data.rewardId][1]
        if reward ~= nil then
            data.type = reward.Type
            data.id = reward.ObjId
            data.count = reward.Count
        end
    end
    type = type or data.type
    id = id or data.id
    count = count or data.count

    if data.itemPrefab ~= nil then
        clickTarget = data.itemPrefab
        local rc = data.itemPrefab:GetComponent("ReferenceCollector")

        if rc:GetObject("Icon") ~= nil then
            icon = rc:GetObject("Icon"):GetComponent("Image")
        end
        if rc:GetObject("ItemBg") ~= nil then
            iconBg = rc:GetObject("ItemBg"):GetComponent("Image")
        end
        if rc:GetObject("Frame") ~= nil then
            frame = rc:GetObject("Frame"):GetComponent("Image")
        end
        countText = LangUtil.BindText(rc:GetObject("Num"))
    end
    icon = icon or data.icon
    iconBg = iconBg or data.iconBg
    frame = frame or data.frame
    countText = countText or data.countText
    clickTarget = clickTarget or icon
    
    isBag = isBag or data.isBag
    isShowThingsDetail = data.isShowThingsDetail

    local showData = {}
    showData.tempId = id
    showData.showType = nil
    showData.count = count

    if countText ~= nil then
        if data.isShowCount then
            countText.text = count
        else
            countText.text = ""
        end
    end

    if not IsNull(frame) then
        frame.gameObject:SetActive(false)
    end

    if type == RewardType.RewardTypeItem then
        local zItem = Z_Item[id]
        if zItem == nil then
            Logger.LogError("zItem is nil, id = "..id)
        end

        UIUtil.SetSprite(icon, AtlasConfig.Item, GetItemIcon(zItem))
        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, zItem.IconBg .. ".png")
        end

        if data.nameText ~= nil then
            data.nameText.text = zItem.Name
        end
        showData.showType = ShowType.Item

    elseif type == RewardType.RewardTypeCharacter then
        local skins = table.chooseByIndex(Z_Skin, function(k,v)
            return v.CharacterId == id and v.SortId == 1
        end)
        if skins[1] ~= nil then
            UIUtil.NewSetCardSprite(icon,id, skins[1].Id, CardPictureType.Little)
        else
            UIUtil.SetSprite(icon, nil, nil)
        end
    
        if not IsNull(frame) then
            frame.gameObject:SetActive(true)
            UIUtil.SetSprite(frame, AtlasConfig.ItemBg, "icon_com_chaoyuezhe_frame_" .. Z_Character[id].Rarity .. ".png")
        end
        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, "default")
        end

        if data.nameText ~= nil then
            data.nameText.text = Z_Card[id].Name
        end
        showData.showType = ShowType.Card

    elseif type == RewardType.RewardTypeExp then
        UIUtil.SetSprite(icon, nil, nil)
        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, nil, nil)
        end
        if data.nameText ~= nil then
            data.nameText.text = "Exp"
        end
    elseif type == RewardType.RewardTypeHeadPortrait then
        UIUtil.SetPlayerIcon(icon, id)

        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, nil, nil)
        end
        if data.nameText ~= nil then
            data.nameText.text = ""
        end
    elseif type == RewardType.RewardTypeHeadPortraitBorder then
        UIUtil.SetSprite(icon, nil, nil)
        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, "default")
        end
        if data.nameText ~= nil then
            data.nameText.text = ""
        end
        showData.showType = ShowType.CardSkin
    elseif type == RewardType.RewardTypeCharacterSkin then
        local zSkin = Z_Skin[id]
        UIUtil.NewSetCardSprite(icon, zSkin.CharacterId, id, CardPictureType.Little)
    
        -- if not IsNull(frame) then
        --     frame.gameObject:SetActive(true)
        --     UIUtil.SetSprite(frame, AtlasConfig.ItemBg, "DefaultSkinFrame")
        -- end

        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, "default")
        end
    
        if data.nameText ~= nil then
            data.nameText.text = zSkin.Name
        end
        showData.showType = ShowType.CardSkin
    elseif type == RewardType.RewardTypeMonthlyCard then
        local zMonthlyCard = Z_MonthlyCard[id]
        local iconStr = zMonthlyCard.Icon
        UIUtil.SetSpriteByPath(icon, "UI/ItemIcon/Special/".. iconStr ..".png")

        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, "3.png")
        end
        if data.nameText ~= nil then
            data.nameText.text = zMonthlyCard.Name
        end
    elseif type == RewardType.RewardTypeFightSoul then
        UIUtil.SetFightSoulSprite(icon, id, FightSoulPictureType.Little)

        -- 不需要背景图( 头像图自带 )
        if not IsNull(frame) then
            frame.gameObject:SetActive(true)
            UIUtil.SetSprite(frame, AtlasConfig.ItemBg, "icon_com_zhanhun_frame_" .. Z_FightSoul[id].Rare .. ".png")
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, "default")
        end
        if data.nameText ~= nil then
            data.nameText.text = Z_FightSoul[id].Name
        end
        showData.showType = ShowType.FightSoul
    elseif type == RewardType.RewardTypeEquipment then
        local zEquip = Z_Equip[id]
        UIUtil.SetSprite(icon,AtlasConfig.Equip, zEquip.EquipIcon)

        if not IsNull(iconBg) then
            UIPublic.InitEquipBg(zEquip,iconBg)
        end
        showData.showType = ShowType.Equip
        if data.nameText ~= nil then
            data.nameText.text = zEquip.Name
        end
    elseif type == RewardType.RewardTypePassProgress or type == RewardType.RewardTypePassProgressWithAddition then
        coroutine.start(function()
            icon:DOFade(0, 0)
            icon.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/BattlePass/icon_EXP.png")
            icon:DOFade(1, 0)
        end)
        if not IsNull(iconBg) then
            UIUtil.SetSprite(iconBg, AtlasConfig.ItemBg, 5 .. ".png")
        end

        if data.nameText ~= nil then
            data.nameText.text = ""
        end
        showData.showType = nil
    end


    if showData.showType ~= nil and isShowThingsDetail then
        UIUtil.AddBtnEvent(clickTarget, function()
            UIUtil.OpenThingsDetailWindow(showData, isBag)
        end)
    else
        UIUtil.AddBtnEvent(clickTarget, function()
            return
        end)
    end
end

---@param id number @ cid
function UIPublic.InitItemIconNew(icon, iconBg, type, id, count, isShowThingsDetail, isBag, frame)

    UIPublic.InitRewardItem(
        {
            icon = icon,
            iconBg = iconBg,
            type = type,
            id = id,
            count = count,
            isShowThingsDetail = isShowThingsDetail,
            isBag = isBag,
            frame = frame,
        }
    )
end

function UIPublic.InitItemIcon(icon, IconBg, Kind, Id, data)
    if not data then data = {} end
    Logger.LogError("gh: 这个接口应该换新的... GetRewardDataNew 和 InitItemIconNew")
    if Kind == GoodsKind.Item then --1 物品
        local zItem = Z_Item[Id]
        if string.IsNullOrEmpty(data.spriteName) then
            data.spriteName = GetItemIcon(zItem)
        end
        UIUtil.SetSprite(icon, AtlasConfig.Item, data.spriteName, true)
        if not IsNull(IconBg) then
            UIUtil.SetSprite(IconBg, AtlasConfig.ItemBg, zItem.IconBg .. ".png", true)
        end
    elseif Kind == GoodsKind.Card then--2 角色
        UIUtil.SetCardSprite(icon, Id, data.iconId, CardPictureType.Little, true)
        if not IsNull(IconBg) then
            UIUtil.SetSprite(IconBg, AtlasConfig.EquipBg, "def.png", true)
        end
    elseif Kind == GoodsKind.FightSoul then--3 战魂
        local zFightSoul = Z_FightSoul[Id]
        UIUtil.SetFightSoulSprite(icon, zFightSoul.Id, FightSoulPictureType.Little, true)
        if not IsNull(IconBg) then
            UIUtil.SetSprite(IconBg, AtlasConfig.EquipBg, "def.png", true)
        end
    elseif Kind == GoodsKind.FreeStarStone then--4无偿星石
        icon.sprite = nil
    elseif Kind == GoodsKind.GoldCoin then--5金钱
        icon.sprite = nil
    elseif Kind == GoodsKind.MagicCrystal then--6魔晶
        icon.sprite = nil
    elseif Kind == GoodsKind.Equip then--装备
        local zEquip = Z_Equip[Id]
        UIUtil.SetSprite(icon, AtlasConfig.Equip, zEquip.EquipIcon, true)
        if not IsNull(IconBg) then
            UIPublic.InitEquipBg(zEquip, IconBg, true)
        end
    elseif Kind == GoodsKind.StarSand then--8星沙
        icon.sprite = nil
    elseif Kind == GoodsKind.EmperorStarPoint then--9星皇点
        icon.sprite = nil
    elseif Kind == GoodsKind.DemonPoint then--10 活动碎片 幽魂碎片
        if not Id then Id = 1001 end
        if Z_ActivityStory[Id] then
            icon.sprite = nil
            if not IsNull(IconBg) then
                UIUtil.SetSprite(IconBg, AtlasConfig.ItemBg, Z_ActivityStory[Id].IconBg .. ".png", true)
            end
        end
    elseif Kind == GoodsKind.PaidStarStone then--11有偿星石
        icon.sprite = nil
    elseif Kind == GoodsKind.CardSkin then--12角色皮肤
        UIUtil.SetCardSprite(icon, Id, data.iconId, CardPictureType.Little, true)
        if not IsNull(IconBg) then
            UIUtil.SetSprite(IconBg, AtlasConfig.EquipBg, "def.png", true)
        end
    elseif Kind == GoodsKind.SkinDefault then--皮肤剪影
        UIUtil.SetCardSprite(icon, Id, data.iconId, CardPictureType.SkinDefault, true)
    elseif Kind == GoodsKind.Faith then--信条
        UIUtil.SetSprite(icon, AtlasConfig.Faith, Id..".png",true);
        if not IsNull(IconBg) then
            UIUtil.SetSprite(IconBg, AtlasConfig.EquipBg, "def.png", true)
        end
    end
end

local function GetCurrencyKind(Id)
    local Kind = GoodsKind.GoldCoin
    if Id == 2 then
        Kind = GoodsKind.PaidStarStone
    elseif Id == 3 then
        Kind = GoodsKind.FreeStarStone
    elseif Id == 4 then
        Kind = GoodsKind.StarSand
    elseif Id == 5 then
        Kind = GoodsKind.MagicCrystal
    elseif Id == 6 then
        Kind = GoodsKind.EmperorStarPoint
    elseif Id == 7 then
        Kind = GoodsKind.DemonPoint
    end
    return Kind
end

local function GetCurrencyId(Kind, Id)
    if not Id or Id == 0 then--对应 Z_Currency的id
        if Kind == GoodsKind.FreeStarStone then--4无偿星石
            Id = 3
        elseif Kind == GoodsKind.MagicCrystal then--6魔晶
            Id = 5
        elseif Kind == GoodsKind.StarSand then--8星沙
            Id = 4
        elseif Kind == GoodsKind.EmperorStarPoint then--9星皇点
            Id = 6
        elseif Kind == 10 then--10幽魂碎片
            Id = 7
        else--if Kind == GoodsKind.GoldCoin then--5金钱
            Id = 1
        end
    end
    return Id
end

---@class RewardData
---@field id number
---@field type number @ rewardType
---@field count number
---@field hasCount number @ 自身持有数量
---@field name string
---@field desc string
---@field config table

---@return RewardData
function UIPublic.GetRewardDataNew(type, id, count)
    ---@type RewardData
    local data = {
        type = type,
        id = id,
        count = count
    }

    if type == RewardType.RewardTypeItem then
        local zItem = Z_Item[id]
        data.config = zItem
        data.typeName = LangUtil.GetSysLang(87)
        data.name = zItem.Name
        data.desc = zItem.Desc
        data.hasCount = UIPublic.GetItemAmount(id)
    elseif type == RewardType.RewardTypeCharacter then
        local zCard = Z_Card[id]
        data.typeName = LangUtil.GetSysLang(90)
        data.name = zCard.Name
        data.desc = zCard.Name
        data.hasCount = Game.Scene.Player:GetComponent("CardComponent"):Get(id) ~= nil and 1 or 0
    elseif type == RewardType.RewardTypeExp then
        data.typeName = "exp"
        data.name = "exp"
        data.desc = "exp"
        data.hasCount = Game.Scene.Player.Exp
    elseif type == RewardType.RewardTypeHeadPortrait then
        data.typeName = LangUtil.GetSysLang(435)
        data.name = id .. "HeadPortrait"
        data.desc = id .. "HeadPortrait"
        data.hasCount = 0
    elseif type == RewardType.RewardTypeHeadPortraitBorder then
        data.typeName = "HeadPortraitBorder"
        data.name = id .. "HeadPortraitBorder"
        data.desc = id .. "HeadPortraitBorder"
        data.hasCount = 0
    elseif type == RewardType.RewardTypeCharacterSkin then
        data.typeName = "Skin"
        data.name = Z_Skin[id].Name
        data.desc = Z_Skin[id].Desc
        data.hasCount = 0
    elseif type == RewardType.RewardTypeMonthlyCard then
        local zMonthlyCard = Z_MonthlyCard[id]
        data.typeName = "MonthlyCard"
        data.name = zMonthlyCard.Name
        data.desc = zMonthlyCard.Desc
        data.hasCount = 0
    elseif type == RewardType.RewardTypeFightSoul then
        local zFightSoul = Z_FightSoul[id]
        data.typeName = LangUtil.GetSysLang(259)
        data.name = zFightSoul.Name
        data.desc = zFightSoul.Name
        data.hasCount = table.count(Game.Scene.Player:GetComponent("FightSoulComponent"):GetSameFightSoulList(id))
    elseif type == RewardType.RewardTypeEquipment then
        local zEquip = Z_Equip[id]
        data.typeName = LangUtil.GetSysLang(253)
        data.name = zEquip.Name
        data.desc = zEquip.Desc
        data.hasCount = table.count(Game.Scene.Player:GetComponent("EquipComponent"):GetSameEquipList(id))
    end

    return data
end

function UIPublic.GetRewardData(Kind, Id)
    local data = {}
    data.kind = Kind
    data.id = Id
    if data.kind == GoodsKind.Item then  --1 物品
        local zItem = Z_Item[data.id]
        data.typeName = LangUtil.GetSysLang(87)
        data.desc = zItem.Desc
        data.name = zItem.Name
    elseif data.kind == GoodsKind.Card then --2 角色
        local zCard = Z_Card[data.id]
        data.typeName = LangUtil.GetSysLang(90)
        data.desc = zCard.Title
        data.name = zCard.Name
    elseif data.kind == GoodsKind.FightSoul then --3 战魂
        local zFightSoul = Z_FightSoul[data.id]
        data.typeName = LangUtil.GetSysLang(259)
        data.desc = zFightSoul.EquipEfx
        data.name = zFightSoul.Name
    elseif data.kind == GoodsKind.GoldCoin  or data.kind == GoodsKind.FreeStarStone or data.kind == GoodsKind.MagicCrystal or data.kind == GoodsKind.StarSand
            or data.kind == GoodsKind.EmperorStarPoint  or data.kind == 10 then
        --5 金钱 4星石 6魔晶 8星沙 9星皇点 10幽魂碎片
        data.id = GetCurrencyId(data.kind, data.id)
        local zCurrency = Z_Currency[data.id]
        data.typeName = zCurrency.Name
        data.desc = zCurrency.Desc
        data.name = zCurrency.Name
    elseif data.kind == GoodsKind.Equip then --7 装备
        local zEquip = Z_Equip[data.id]
        data.typeName = LangUtil.GetSysLang(253)
        data.desc = (string.IsNullOrEmpty(zEquip.ExclusiveEfx) and {zEquip.AdditionEfx} or {zEquip.ExclusiveEfx})[1]
        data.name = zEquip.Name
    end
    return data
end

function UIPublic.OpenMoreItemUIByRewardId(rewardId)
    local rewards = Z_Reward[rewardId]
    UIPublic.OpenMoreItemUI(rewards)
end

function UIPublic.OpenMoreItemUI(rewards)
    if table.count(rewards) == 0 then
        return
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIMoreItem, {
        rewards = rewards
    })
end

---@param rewardDetails protocol.RewardDetail[]
function UIPublic.OpenRewardUIByRewardDateils(rewardDetails)
    local rewardResults = {}
    for index, value in ipairs(rewardDetails) do
        -- 每个 RewardDetail
        for k, v in ipairs(value.reward_results) do
            -- 每个 RewardResult
            table.insert(rewardResults, v)
        end
    end
    UIPublic.OpenRewardUI(rewardResults)
end

---@param rewardResults protocol.RewardResult[] @ 参数直接使用server发过来的 repeated RewardResult
function UIPublic.OpenRewardUI(rewardResults, showRewardTypes, titleSysKey, closeCallBack, hideRewardTypes)
    if rewardResults == nil then
        rewardResults = {}
    end
    ---@type UIRewardParam
    local info = {}
    info.rewards = {}
    info.titleKey = titleSysKey
    info.closeCallBack = closeCallBack
    local hasData = false
    local rewards = {}
    if showRewardTypes == nil or table.count(showRewardTypes) == 0 then
        for key, value in pairs(rewardResults) do
            table.insert(rewards, {
                RewardType = value.type,
                templateId = value.id,
                num = value.count,
            })
        end
    else
        for key, value in pairs(rewardResults) do
           if table.contains(showRewardTypes, value.type) then
                table.insert(rewards, {
                    RewardType = value.type,
                    templateId = value.id,
                    num = value.count,
                })
           end
        end
    end

    if hideRewardTypes ~= nil and table.count(hideRewardTypes) > 0 then
       for key, value in pairs(rewards) do
        if not table.contains(hideRewardTypes, value.RewardType) then
             table.insert(info.rewards, {
                 RewardType = value.RewardType,
                 templateId = value.templateId,
                 num = value.num,
             })
        end
     end
    else
        info.rewards = rewards
    end


    if table.count(info.rewards) > 0 then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIReward, info)
    end
end

function UIPublic.OpenRewardThingsDetail(type, id)
    local showData = {}
    if type == RewardType.RewardTypeItem then
        showData.showType = ShowType.Item
        showData.tempId = id
    elseif type == RewardType.RewardTypeCharacter then
        showData.showType = 1
        showData.showType = ShowType.Card
        showData.tempId = id
    elseif type == RewardType.RewardTypeExp then
    elseif type == RewardType.RewardTypeHeadPortrait then
    elseif type == RewardType.RewardTypeHeadPortraitBorder then
    elseif type == RewardType.RewardTypeCharacterSkin then
    elseif type == RewardType.RewardTypeMonthlyCard then
    elseif type == RewardType.RewardTypeFightSoul then
        showData.showType = ShowType.FightSoul
        showData.tempId = id
    elseif type == RewardType.RewardTypeEquipment then
        showData.showType = ShowType.Equip
        showData.tempId = id
    end

    if table.count(showData) > 0 then
        UIUtil.OpenThingsDetailWindow(showData)
    end
end

function UIPublic.OpenThingsDetail(Kind, Id)
    local showData = {}

    if Kind == GoodsKind.Item then--1 物品
        showData.showType = 3
        showData.tempId = Id
    elseif Kind == GoodsKind.Card then--2角色
        showData.showType = 1
        showData.tempId = Id
    elseif Kind == GoodsKind.FightSoul then--3战魂
        showData.showType = 5
        showData.tempId = Id
    elseif Kind == GoodsKind.FreeStarStone then--4无偿星石
        showData.showType = 6
        showData.Id = 3
    elseif Kind == GoodsKind.GoldCoin then --5金钱
        showData.showType = 6
        showData.Id = 1
    elseif Kind == GoodsKind.MagicCrystal then--6魔晶
        showData.showType = 6
        showData.Id = 5
    elseif Kind == GoodsKind.Equip then --7装备
        showData.showType = 2
        showData.tempId = Id
    elseif Kind == GoodsKind.StarSand then--8星沙
        showData.showType = 6
        showData.Id = 4
    elseif Kind == GoodsKind.EmperorStarPoint then--9星皇点
        showData.showType = 6
        showData.Id = 6
    elseif Kind == GoodsKind.DemonPoint then--活动碎片
        showData.showType = 6
        showData.Id = 7
        showData.tempId = Id
    elseif Kind == GoodsKind.PaidStarStone then
        showData.showType = 6
        showData.Id = 2
    elseif Kind == GoodsKind.CardSkin then
        showData.showType = 8
        showData.tempId = Id
    elseif Kind == GoodsKind.Faith then--信条
        showData.showType = 7
        showData.tempId = Id
    end
    
    if table.count(showData) > 0 then
        UIUtil.OpenThingsDetailWindow(showData)
    end
end

function UIPublic.IsItemLimit(Kind, addNum, Data)
    local player = Game.Scene.Player
    
    if Kind == GoodsKind.Item then--1 物品上限
        if Z_Item[Data.GoodsId] ~= nil and Z_Item[Data.GoodsId].OwnMaxNum ~= 0  then
            local MaxNum = 0
            if Data.GoodsId== 3015 then
                MaxNum =  player.CardMax + addNum * 10
            elseif Data.GoodsId== 3016 then
                MaxNum =  player.EquipMax + addNum * 10
            elseif Data.GoodsId== 3025 then
                MaxNum =  player.FightSoulsMax + addNum * 10
            end
            if MaxNum > Z_Item[Data.GoodsId].OwnMaxNum then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(2056))--扩张已达上限
                return true
            end
        end
    elseif Kind == GoodsKind.Card then --2 角色上限
        local cardNum = table.count( player:GetComponent("CardComponent").Cards)
        local CardMax = player.CardMax
        if cardNum + addNum > CardMax then
            local tipData = {}
            tipData.title = LangUtil.GetSysLang(9)--"提示"
            tipData.type = 6
            if cardNum >= CardMax then
                tipData.message = LangUtil.GetSysLang(544)--"超过超越者持有数上限"
            else
                tipData.message = LangUtil.GetSysLang(848)--"使用物品数不能超过超越者持有数上限"
            end
            tipData.Item1Text = LangUtil.GetSysLang(411)--"超越者所持数"
            tipData.Item1Value = cardNum .. "/" .. CardMax

            tipData.But1Text = LangUtil.GetSysLang(556)--"超越者分解"
            tipData.But1 = function() UIManager:GetInstance():OpenWindow(UIWindowNames.UICardIntens,{cur_panel_id = 7}) end
            if not (Data and Data.hideBtn3) then
                tipData.But3Text = LangUtil.GetSysLang(555)--"扩张"
                tipData.But3 = function() UIManager:GetInstance():OpenWindow(UIWindowNames.UIGeneralShop) end
            end
            UIUtil.ToolTipFirstPlus(tipData)
            return true
        end
    elseif Kind == GoodsKind.FightSoul then --3 战魂
        
    elseif Kind == GoodsKind.Equip then --7装备上限
        local Num = table.count(player:GetComponent("EquipComponent").Equips)
        local Max = player.EquipMax
        if Num + addNum > Max then
            local tipData = {}
            tipData.title = LangUtil.GetSysLang(9)--"提示"
            tipData.type = 6
            if Num >= Max then
                tipData.message = LangUtil.GetSysLang(851)--"装备持有数已超过上限"
            else
                tipData.message = LangUtil.GetSysLang(849)--"使用物品数不能超过装备持有数上限"
            end
            tipData.Item1Text = LangUtil.GetSysLang(850)--"装备持有数"
            tipData.Item1Value = Num
            
            tipData.But1Text = LangUtil.GetSysLang(242)--"装备分解"
            tipData.But1 = function() UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipIntens,{panel_id = 4}) end
            if not (Data and Data.hideBtn3) then
                tipData.But3Text = LangUtil.GetSysLang(555)--"扩张"
                tipData.But3 = function() UIManager:GetInstance():OpenWindow(UIWindowNames.UIGeneralShop) end
            end
            UIUtil.ToolTipFirstPlus(tipData)
            return true
        end
    end

    return false
end


local vec_offset =  Vector2.New(20,25)
function UIPublic.SetPanelPosition(tagetTra, contentTra, pos, type, offset)
    if not offset then offset = vec_offset end
    if not type then type = 1 end

    tagetTra.position = contentTra.position
    local vec = tagetTra.anchoredPosition
    local clampRight = vec.x + contentTra.sizeDelta.x / 2 - tagetTra.sizeDelta.x
    local clampBottom = vec.y - contentTra.sizeDelta.y / 2 + tagetTra.sizeDelta.y
    
    tagetTra.position = pos
    if  tagetTra.anchoredPosition.x > clampRight then
        if type == 2 then
            tagetTra.anchoredPosition = Vector3.New(clampRight - offset.x - tagetTra.anchoredPosition.x % 17,  tagetTra.anchoredPosition.y, 0)
        else
            tagetTra.anchoredPosition = tagetTra.anchoredPosition - Vector3.New(tagetTra.sizeDelta.x + offset.x, 0, 0)
        end
    else
        tagetTra.anchoredPosition = tagetTra.anchoredPosition + Vector3.New( offset.x, 0, 0)
    end
    if tagetTra.anchoredPosition.y < clampBottom then
        if type == 2 then
            tagetTra.anchoredPosition = Vector3.New( tagetTra.anchoredPosition.x, clampBottom + offset.y + tagetTra.anchoredPosition.y % 17, 0)
        else
            tagetTra.anchoredPosition = tagetTra.anchoredPosition + Vector3.New(0, tagetTra.sizeDelta.y + offset.y, 0)
        end
    else
        tagetTra.anchoredPosition = tagetTra.anchoredPosition - Vector3.New( 0, offset.y, 0)
    end
end

function UIPublic.SetWindowTip(tipsPanel, tipsBtn, tipsBgBtn)
    local Tips = tipsPanel:Find("Tips").gameObject
    Tips:SetActive(false)
    tipsBgBtn:SetActive(false)
    -- 不知道是什么 先屏蔽掉吧
    -- UIUtil.AddBtnEvent(tipsBtn, function(go)
    --     local localActive = Tips.activeInHierarchy
    --     tipsBgBtn:SetActive(not localActive)
    --     Tips:SetActive(not localActive)
    -- end)
    UIUtil.AddBtnEvent(tipsBgBtn,function(go)
        Tips:SetActive(false)
        tipsBgBtn:SetActive(false)
    end)
end

function UIPublic.GetTimeStr(startTime, endTime)
    local str = TimeUtil.Date("%Y.%m.%d ~ ", startTime)
    if TimeUtil.Date("%Y", endTime) == TimeUtil.Date("%Y", startTime) then
        str = str .. TimeUtil.Date("%m.%d", endTime)
    else
        str = str .. TimeUtil.Date("%Y.%m.%d", endTime)
    end
    return str
end

function UIPublic.InitHint(content,hint)
   coroutine.start(function()
       coroutine.waitforframes(2)
       hint:SetActive(content.childCount == 0)
   end)
end

local function LaunchAtk(data)
    -- data.LevelType = LevelType.LevelTypeGuide
    -- data.CurLevelId = 1001
    coroutine.start(function()
        --coroutine.waitforseconds(0.3)
        local ac = Game.Scene:GetComponent("AgainstComponent")
        local levelType = data.LevelType
        local levelId = data.CurLevelId
        local levelParams = {}
        
        if data.LevelType == LevelType.LevelTypeArena then
            levelParams[1] = data.index
            levelParams[2] = data.isAuto
        elseif data.LevelType == LevelType.LevelTypeBossraid then
            levelParams[1] = data.bossraidId
            levelParams[2] = data.isSimulate
        end

        if levelType == nil then
            ac:SetCurLevel(data)
            Game.Scene.SceneComponent:SwitchScene(SceneConfig.BattleScene)
        else
            local req = {
                level_type = levelType,
                level_id = levelId,
                team_id = UIData.GetCurTeam().Id,
                level_params = levelParams
            }

            if data.support_unit_select ~= nil then
                req.support_unit_select = {}
                req.support_unit_select.role_id = data.support_unit_select.role_id
                req.support_unit_select.character_id = data.support_unit_select.character_id
            end


            local rsp, errorCode = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
                    PROTOCOL.BattleStartReq, req)
            if errorCode ~= 0 then
                return
            end
            ac:SetCurLevel(data)
            ac:SetBattleInfo(rsp)            
            Game.Scene.SceneComponent:SwitchScene(SceneConfig.BattleScene)
       end
    end)
end

local function LaunchStory(data)
    -- Game.Scene:GetComponent("AgainstComponent").StorySkip = data.Skip
    if data.Skip then
        LaunchAtk(data)
    else
        -- Game.Scene:GetComponent("AgainstComponent").CurLevelId = data.CurLevelId
        local zStorySection = Z_StorySection[data.CurLevelId]
        Game.Scene:GetComponent("DialogComponent"):OpenDialog(zStorySection.ChapterId, zStorySection.StoryId, StoryMode.BattleBefore, function() LaunchAtk(data) end, true)
    end
end

local function LaunchGameEventStory(data)
    -- Game.Scene:GetComponent("AgainstComponent").StorySkip = data.Skip
    if data.Skip then
        LaunchAtk(data)
    else
        local zGameEventsLevel = Z_GameEventsLevel[data.CurLevelId]
        Game.Scene:GetComponent("DialogComponent"):OpenDialog(zGameEventsLevel.ChapterId, zGameEventsLevel.StoryId, StoryMode.BattleBefore, function() LaunchAtk(data) end, true)
    end
end

function UIPublic.LaunchAtk(data, extraParam)
    if extraParam ~= nil then
        for key, value in pairs(extraParam) do
            data[key] = value
        end
    end

    if data.LevelType == LevelType.LevelTypeStory then
        LaunchStory(data)
    elseif data.LevelType == LevelType.LevelTypeGameEvent then
        LaunchGameEventStory(data)
    else
        LaunchAtk(data)
    end
end

function UIPublic.SetRewardInfoNew(rewardType, rewardId, avatar, bgImage, isShowThingsDetail)
    local showData = {}
    showData.tempId = rewardId

    if rewardType == RewardType.RewardTypeItem then
        local zItem = Z_Item[rewardId]
        UIUtil.SetSprite(avatar, AtlasConfig.Item, GetItemIcon(zItem))
        UIUtil.SetSprite(bgImage,AtlasConfig.ItemBg, zItem.IconBg .. ".png")
        showData.showType = ShowType.Item

    elseif rewardType == RewardType.RewardTypeEquipment then
        UIUtil.SetSprite(avatar,AtlasConfig.Equip,Z_Equip[rewardId].EquipIcon)
        UIPublic.InitEquipBg(Z_Equip[rewardId], bgImage)
        showData.showType = ShowType.Equip

    elseif rewardType == RewardType.RewardTypeFightSoul then
        UIUtil.SetFightSoulSprite(avatar, rewardId, FightSoulPictureType.Little)
        showData.showType = ShowType.FightSoul

    elseif rewardType == RewardType.RewardTypeCharacter then
        UIUtil.SetCardSprite(avatar, rewardId, nil, CardPictureType.Little,true)
        showData.showType = ShowType.Card

    else
        if rewardType ~= nil then
            Logger.LogError("UiPublic.SetRewardInfoNew 该类型还未做处理. rewardType:" .. rewardType)
        else
            Logger.LogError("UiPublic.SetRewardInfoNew rewardType 不能为nil")
        end
        return
    end

    if isShowThingsDetail then
        UIUtil.AddBtnEvent(avatar.gameObject,function() 
            UIUtil.OpenThingsDetailWindow(showData)
        end)
    end
end

function UIPublic.CheckIsFriend(roleId)
    return Game.Scene.Player:GetComponent("FriendComponent"):CheckIsFriend(roleId)
end

--- 打开玩家详情(非本人)
---@param societyRole SocietyRole
function UIPublic.OpenRoleInfo(societyRole)
   UIManager:GetInstance():OpenWindow(UIWindowNames.UIRoleInfo, {role = societyRole})
end

--- 设置职业图标 主要用于左侧列表, 多个地方复用, 所以做了接口
---@param class number @ 职业
---@param isHighlight boolean @ 是否是高亮图片
function UIPublic.SetClassSprite(image, class, isHighlight)
    if isHighlight then
        UIUtil.SetSprite(image, AtlasConfig.Class, "tabLight_" .. class ..".png")
    else
        UIUtil.SetSprite(image, AtlasConfig.Class, "tab_" .. class ..".png")
    end
end

--- 获取图鉴id对应的属性加成 ( 属性 - 百分比 )
function UIPublic.GetPropertyByEncyclopediaId(id)
    local zEncyclopedia = Z_Encyclopedia[id]
    local property = {}
    if zEncyclopedia == nil then
        Logger.LogError("Z_Encyclopedia 表中不存在图鉴id:" .. id)
        return property
    end

    for key, value in pairs(Z_Property) do
        local propertyName = value.Name .. "Enhance"
        local value = zEncyclopedia[propertyName]
        if value ~= nil and value ~= 0 then
            property[key] = value -- 填表是 万分之x
        end
    end

    return property
end

--- 获取当前图鉴属性总加成 
---@return table<number,number> @ key: 对应属性 type, value: 对应属性加成百分比
function UIPublic.GetEncyclopediaPropertyScale()
    return Game.Scene.Player:GetComponent("RecordComponent"):GetProperty()
end

--- 获取单个图鉴属性加成 (不管有没有解锁)
--- 0 表示刚获取时, 其他数值表示对应阶段
---@param recordType number @ 图鉴类型
---@param id number @ cid
---@return table<number, table<number, number>> @ key: 对应阶段 (0 表示刚获取时, 其他数值表示对应阶段) value: 到达该阶段时的所有属性( 属性id - 属性比例 )
function UIPublic.GetEncyclopediaSingleProperty(recordType, id)
    local ret = {}
    ret[0] = {}
    local encyclopediaIds = {}

    if recordType == RecordType.Character then
        local zCharacter = Z_Character[id]
        local zCharacterConstellation = Z_CharacterConstellation[id]

        if zCharacter == nil or zCharacterConstellation == nil then
            Logger.LogError("Z_Character 或 Z_CharacterConstellation 表中不存在角色id:" .. id)
            return ret
        end

        local stages = {0}
        encyclopediaIds[0] = zCharacter.Encyclopedia
        local existingIds = {
            [zCharacter.Encyclopedia] = true
        }
        for stage, value in pairs(zCharacterConstellation) do
            if existingIds[value.Encyclopedia] == nil then
                encyclopediaIds[stage] = value.Encyclopedia
                existingIds[value.Encyclopedia] = true
            end
            table.insert(stages, stage)
        end

        for index, stage in ipairs(stages) do
            local lastStageProperty = {}
            if index ~= 1 then
                lastStageProperty = ret[stages[index - 1]]
            end

            local encyclopediaId = encyclopediaIds[stage]
            if encyclopediaId ~= nil then
                local currentProperty = UIPublic.GetPropertyByEncyclopediaId(encyclopediaId)
                ret[stage] = currentProperty

                -- 当前阶段属性加成 == 当前图鉴id对应属性 + 前一阶段的属性
                for property, scale in pairs(lastStageProperty) do
                    if ret[stage][property] == nil then
                        ret[stage][property] = scale
                    else
                        ret[stage][property] = ret[stage][property] + scale
                    end
                end

            else
                ret[stage] = lastStageProperty -- 当前阶段没有数据加成, 所以直接用前一个阶段的数据
            end
        end     
    else
        ---@type RecordComponent
        local recordComponent = Game.Scene.Player:GetComponent("RecordComponent")
        local records = recordComponent.recordIdList[recordType][id]
        local encyclopediaId = records[1] -- 目前其他type 都只有获得状态, 所以不关心其他阶段
        local currentProperty = UIPublic.GetPropertyByEncyclopediaId(encyclopediaId)
        ret[0] = currentProperty
    end
    return ret
end

function UIPublic.InitEncyclopedia(transform, id, recordType)
    local cardComponent = Game.Scene.Player:GetComponent("CardComponent")
    local card = cardComponent:Get(id)
    local constellation = 0
    if card ~= nil then
        constellation = card.Constellation
    end
    for i = 1, transform.childCount do
       local collectionInfo = transform:GetChild(i - 1)
       local mask = collectionInfo:Find("Mask")
       local GetImage = collectionInfo:Find("GetImage")

       mask.gameObject:SetActive(constellation < (i - 1) * 2)
       GetImage.gameObject:SetActive(constellation >= (i - 1) * 2)
       this.InitEncyclopediaDetail(collectionInfo, id, recordType, (i - 1) * 2)
    end
end

function UIPublic.InitEncyclopediaDetail(transform, id, recordType, constellation)
    if constellation == nil then constellation = 0 end

    local propertyList = this.GetEncyclopediaSingleProperty(recordType, id)[constellation]
    local stageText = transform:Find("StageText")
    local propertyImage = transform:Find("PropertyImage"):GetComponent("Image")
    local value = transform:Find("Value")
    
    if not IsNull(stageText) then
        if constellation > 0 then
            LangUtil.BindText(stageText).text = LangUtil.GetSysLang(2075) .. constellation -- 目前只显示 星命x
        else
            LangUtil.BindText(stageText).text = LangUtil.GetSysLang(725)
        end
    end

    local propertyType, propertyValue
    for key, value in pairs(propertyList) do
        propertyType = key
        propertyValue = value
        break
    end

    if table.count(propertyList) == 0 then
        Logger.LogError("UIPublic.InitEncyclopediaDetail propertyList 为空, ".. "recordType" .. recordType .. "id" .. id .. "constellation" .. constellation)
        return
    end

    if table.count(propertyList) > 1 then
        -- 多属性加成
        UIUtil.SetSprite(propertyImage, AtlasConfig.Property, "icon_all_buff.png")
    else
        -- 单一属性
        UIUtil.SetSprite(propertyImage, AtlasConfig.Property, Z_Property[propertyType].Icon .."_buff.png")
    end
    propertyImage:SetNativeSize()
    LangUtil.BindText(value).text = "+" .. propertyValue / 100 .. "%"
end

function UIPublic.UnlockCGEncyclopedia(levelId)
    local zCgs = table.choose(Z_CG, function(k, v) return v.Unlock == levelId end)
    ---@type RecordComponent
    local recordComponent = Game.Scene.Player:GetComponent("RecordComponent")
    for _, zCg in pairs(zCgs) do
        local encyclopedia = zCg.Encyclopedia
        if not recordComponent:CheckIsOn(RecordType.CG, zCg.Id) then
            PublicRequest.SendRequest(
                PROTOCOL.EncyclopediaUnlockReq,
                {
                    ids = {encyclopedia},
                },
                nil
            )
        end
    end
end

function UIPublic.UnlockBgmEncylopedia()

end

--- 预制体ReturnButton
function UIPublic.SetBackButtonText(image, spriteLangNumber)
    LangUtil.GetSpriteLang(spriteLangNumber, function(sprite) 
        image.sprite = sprite 
        image:SetNativeSize()
    end)
    -- coroutine.start(function()
    --     coroutine.waitforframes(4)
    --     image:SetNativeSize()
    -- end)
end

function UIPublic.SetBackButton(root, uiName, spriteLangNumber, backCallBack, homeCallBack)
    if IsNull(root) then
        Logger.LogError("UIPublic.SetBackButton root is nil")
    end
    ---@type ReferenceCollector
    local rc = root:GetComponent("ReferenceCollector")
    local back = rc:GetObject("Back")
    if uiName ~= nil then
        UIUtil.AddBtnEventNoBug(back.gameObject, function()
            UIManager:GetInstance():CloseWindow(uiName)
            if backCallBack ~= nil then
                backCallBack()
            end
        end, "Back")
    end

    local home = rc:GetObject("Home")
    UIUtil.AddBtnEventNoBug(home.gameObject, function()
        UIManager:GetInstance():CloseWindow(uiName)
        UIManager:GetInstance():CloseAllWindows()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHome)
        if homeCallBack ~= nil then
            homeCallBack()
        end
    end)

    local textImage = rc:GetObject("TextImage"):GetComponent("Image")
    if spriteLangNumber ~= nil then
        LangUtil.GetSpriteLang(spriteLangNumber, function(sprite) 
            textImage.sprite = sprite 
            textImage:SetNativeSize()
        end)
    end

    return back, home, textImage
end

function UIPublic.SetSkillIcon(transform, skillId)
    UIUtil.SetSprite(transform:Find("Mask"):Find("Icon"):GetComponent("Image"),
    AtlasConfig.SkillIcon,Z_Skill[skillId].SkillIcon)
    transform:Find("Name"):GetComponent("Text").text = Z_Skill[skillId].Name
end

function UIPublic.SetJaderPanel(transform, card)
    local descriptionList = {}
    local jaderCount = card.Bead
    for i = 0,transform.childCount - 1 do
        descriptionList[i+1] = transform:GetChild(i)
    end

    for beadLevel, v in table.pairsByKeys(descriptionList) do
        local activatedGameObject = v:Find("Activated")
        local inactivatedGameObject = v:Find("Inactivated")
        local toBeActivatedGameObject = v:Find("ToBeActivated")
        if beadLevel <= jaderCount or card.Bead == 10 then 
            activatedGameObject.gameObject:SetActive(true)
            inactivatedGameObject.gameObject:SetActive(false)
            toBeActivatedGameObject.gameObject:SetActive(false)
        elseif beadLevel == jaderCount + 1 then
            activatedGameObject.gameObject:SetActive(false)
            inactivatedGameObject.gameObject:SetActive(false)
            toBeActivatedGameObject.gameObject:SetActive(true)
        else
            activatedGameObject.gameObject:SetActive(false)
            inactivatedGameObject.gameObject:SetActive(true)
            toBeActivatedGameObject.gameObject:SetActive(false)
        end
    end
end

function UIPublic.SetConstellationLightPanel(transform, card)
    local descriptionList = {}
    local constellationCount = card.Constellation

    for i = 0,transform.childCount - 1 do
        descriptionList[i+1] = transform:GetChild(i)
    end

    for constellationLevel, v in table.pairsByKeys(descriptionList) do
        local activatedGameObject = v:Find("Activated")
        local inactivatedGameObject = v:Find("Inactivated")
        local toBeActivatedGameObject = v:Find("ToBeActivated")
        if constellationLevel <= constellationCount or card.Constellation == 6 then 
            activatedGameObject.gameObject:SetActive(true)
            inactivatedGameObject.gameObject:SetActive(false)
            toBeActivatedGameObject.gameObject:SetActive(false)
        elseif constellationLevel == constellationCount + 1 then
            activatedGameObject.gameObject:SetActive(false)
            inactivatedGameObject.gameObject:SetActive(false)
            toBeActivatedGameObject.gameObject:SetActive(true)
        else
            activatedGameObject.gameObject:SetActive(false)
            inactivatedGameObject.gameObject:SetActive(true)
            toBeActivatedGameObject.gameObject:SetActive(false)
        end
    end
end

function UIPublic.CheckExpUseGold(exp, currentGold)
    if math.ceil(exp/ levelUpRate) > currentGold  then
        return true
    end
    return false
end

function UIPublic.UseMaxExpBooks(currentExp, targetExp, BookTable)
    local bigBookExp = BookTable.bigBookExp
    local mediumBookExp = BookTable.mediumBookExp
    local smallBookExp = BookTable.smallBookExp
    local bigBookCount = BookTable.bigBookCount
    local mediumBookCount = BookTable.mediumBookCount
    local smallBookCount =  BookTable.smallBookCount

    local booksUsed = {big = 0, medium = 0, small = 0}
    local totalExp = currentExp
    local actualExpIncrease = 0

    local currentGold = UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1])
    --math.ceil(exp_num/ tonumber(Z_Misc["CHARACTER_LEVEL_UP_RATE"].Value[1])) 

    -- 尝试使用大经验书
    for i = 1, bigBookCount do
        if totalExp + bigBookExp <= targetExp then
            if this.CheckExpUseGold(actualExpIncrease + bigBookExp, currentGold)  then
                break
            end
            totalExp = totalExp + bigBookExp
            booksUsed.big = booksUsed.big + 1
            actualExpIncrease = actualExpIncrease + bigBookExp
        else
            break
        end
    end

    -- 尝试使用中经验书
    for i = 1, mediumBookCount do
        if totalExp + mediumBookExp <= targetExp then
            if this.CheckExpUseGold(actualExpIncrease + mediumBookExp, currentGold)  then
                break
            end
            totalExp = totalExp + mediumBookExp
            booksUsed.medium = booksUsed.medium + 1
            actualExpIncrease = actualExpIncrease + mediumBookExp
        else
            break
        end
    end

    -- 尝试使用小经验书
    for i = 1, smallBookCount do
        if totalExp + smallBookExp <= targetExp then
            if this.CheckExpUseGold(actualExpIncrease + smallBookExp, currentGold)  then
                break
            end
            totalExp = totalExp + smallBookExp
            booksUsed.small = booksUsed.small + 1
            actualExpIncrease = actualExpIncrease + smallBookExp
        else
            break
        end
    end

    if targetExp >= totalExp then
        if booksUsed.small < smallBookCount and smallBookCount ~= 0 then
            if not this.CheckExpUseGold(actualExpIncrease + smallBookExp, currentGold)  then
                totalExp = totalExp + smallBookExp
                booksUsed.small = booksUsed.small + 1
                actualExpIncrease = actualExpIncrease + smallBookExp
            end
        elseif booksUsed.medium < mediumBookCount and mediumBookCount ~= 0 then
            if not this.CheckExpUseGold(actualExpIncrease + mediumBookExp, currentGold)  then
                totalExp = totalExp + mediumBookExp
                booksUsed.medium = booksUsed.medium + 1
                actualExpIncrease = actualExpIncrease + mediumBookExp
                for i = 1, smallBookCount do
                    if totalExp - smallBookExp > targetExp then
                        totalExp = totalExp - smallBookExp
                        booksUsed.small = booksUsed.small - 1
                        actualExpIncrease = actualExpIncrease - smallBookExp
                    end
                end
            end
        elseif booksUsed.big < bigBookCount and bigBookCount ~= 0 then
            if not this.CheckExpUseGold(actualExpIncrease + bigBookExp, currentGold)  then
                totalExp = totalExp + bigBookExp
                booksUsed.big = booksUsed.big + 1
                actualExpIncrease = actualExpIncrease + bigBookExp
                for i = 1, mediumBookCount do
                    if totalExp - mediumBookExp > targetExp then
                        totalExp = totalExp - mediumBookExp
                        booksUsed.medium = booksUsed.medium - 1
                        actualExpIncrease = actualExpIncrease - mediumBookExp
                    end
                end
                for i = 1, smallBookCount do
                    if totalExp - smallBookExp > targetExp then
                        totalExp = totalExp - smallBookExp
                        booksUsed.small = booksUsed.small - 1
                        actualExpIncrease = actualExpIncrease - smallBookExp
                    end
                end
            end
        end
    end

    -- 如果总经验仍然达不到目标，使用剩下的经验书
    -- if totalExp < targetExp then
    --     local remainingExp = targetExp - totalExp
    --     booksUsed.big = bigBookCount
    --     booksUsed.medium = mediumBookCount
    --     booksUsed.small = smallBookCount
    --     actualExpIncrease = remainingExp
    -- end

    if actualExpIncrease > (targetExp - currentExp) then
        actualExpIncrease = targetExp - currentExp
    end

    return booksUsed, actualExpIncrease
end

function UIPublic.InitDescription(transform, descriptionInfoList, activitedCount, needCount, titelList)
    local title = transform:Find("Middle/Title")
    if needCount == 6 then
        title = "星命·強化一覽"
    elseif needCount == 10 then
        title = "玉珠·強化一覽"
    end

    local descriptionList = transform:Find("Middle/DescriptionList/ScrollView/Viewport/Content")

    for i, _ in table.pairsByKeys(descriptionList) do
        local value = descriptionList:GetChild(i)
        value.gameObject:SetActive(i < needCount)
        if i < needCount then
            value.transform:Find("LockImage").gameObject:SetActive(i >= activitedCount)
            local descriptionText = value.transform:Find("DescriptionText"):GetComponent("Text")
            local layText = value.transform:Find("Text"):GetComponent("Text")

            local color = (i >= activitedCount and {"<color=#747474>"} or {"<color=#000000>"})[1]
            descriptionText.text  = color .. descriptionInfoList[i + 1].Description .. "</color>"
            layText.text = color .. titelList[i + 1] .. "</color>"
        end
    end
end

function UIPublic.JumpLevel(jumpType, levelType, levelId)
    if jumpType == LevelJumpType.DetailView then
        if levelType == LevelType.LevelTypeStory then
            local levelInfo = Z_StorySection[levelId]
            if levelInfo ~= nil then
                ClientData:GetInstance():SetStoryRecord(levelInfo.ChapterId, levelId, levelInfo.Difficulty)
                UIManager:GetInstance():OpenWindow(UIWindowNames.UILaunchAtk, {
                    mode = 2,
                    isOpenDetail = true,
                    openId = levelId,
                    chapterId = levelInfo.ChapterId,
                })
            end
        elseif levelType == LevelType.LevelTypeSevenStar then
            local levelInfo = Z_SevenStar[levelId]
            UIManager:GetInstance():OpenWindow(UIWindowNames.UISevenStar, {
                type = levelInfo.TypeId,
                openDetail = true,
                openId = levelId
            })

        elseif levelType == LevelType.LevelTypeMonthlyTower then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeMonthlyTower,
                isOpenDetail = true,
                openId = levelId
            })
        elseif levelType == LevelType.LevelTypeTower then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeTower,
                isOpenDetail = true,
                openId = levelId
            })
        elseif levelType == LevelType.LevelTypeChallenge then
            local levelInfo = Z_Challenge[levelId]
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeChallenge,
                challengeType = levelInfo.TypeId,
                isOpenDetail = true,
                openId = levelId
            })
        end
    elseif jumpType == LevelJumpType.Preview then
        if levelType == LevelType.LevelTypeStory then
            local levelInfo = Z_StorySection[levelId]
            if levelInfo ~= nil then
                ClientData:GetInstance():SetStoryRecord(levelInfo.ChapterId, levelId, levelInfo.Difficulty)
                UIManager:GetInstance():OpenWindow(UIWindowNames.UILaunchAtk, {
                    mode = 2,
                    chapterId = levelInfo.ChapterId,
                })
            end
        elseif levelType == LevelType.LevelTypeSevenStar then
            local levelInfo = Z_SevenStar[levelId]
            if levelInfo ~= nil then
                local sevenStarComponent = Game.Scene.Player:GetComponent("SevenStarComponent")
                sevenStarComponent.selectType = levelInfo.TypeId
                sevenStarComponent.selectDay = levelInfo.Day
                UIManager:GetInstance():OpenWindow(UIWindowNames.UISevenStar, 3)
            end
        elseif levelType == LevelType.LevelTypeMonthlyTower then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeMonthlyTower
            })
        elseif levelType == LevelType.LevelTypeTower then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeTower
            })
        elseif levelType == LevelType.LevelTypeChallenge then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICommonLevel, {
                levelType = LevelType.LevelTypeChallenge,
                challengeType = levelId
            })
        end
    end
end


function UIPublic.CheckJumpLevel(jumpType, levelType, levelId)
    local isUnlock = false
    local uiName = ""
    local data = {}
    if jumpType == LevelJumpType.DetailView then
        if levelType == LevelType.LevelTypeStory then
            local uiOpen = true -- UIPublic.CheckUIOpen(uiName, data)
            if uiOpen then
                local storyComponent =  Game.Scene.Player:GetComponent("StoryComponent")
                local levelInfo = Z_StorySection[levelId]
                if levelInfo.UnlockCondition == nil then
                    isUnlock = true
                else
                    local unlockLevelInfo = Z_StorySection[levelInfo.UnlockCondition]
                    if storyComponent.StoryChapters[LevelType.LevelTypeStory] ~= nil then
                        if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId] ~= nil then
                            if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId].StoryLevelScoreInfoList[unlockLevelInfo.Id] ~= nil then
                                if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId].StoryLevelScoreInfoList[unlockLevelInfo.Id].pass_times > 0 then
                                    isUnlock = true
                                end
                            end
                        end
                    end
                end
            end        
        elseif levelType == LevelType.LevelTypeSevenStar then
            local uiOpen = UIPublic.CheckUIOpen("UIChallenge")
            if uiOpen then
                local sevenStarComponent = Game.Scene.Player:GetComponent("SevenStarComponent")
                local levelInfo = Z_SevenStar[levelId]
                isUnlock = sevenStarComponent.Days[levelInfo.TypeId][levelInfo.Day][levelInfo.Diff].IsUnlock
            end
        elseif levelType == LevelType.LevelTypeMonthlyTower then
            local uiOpen = UIPublic.CheckUIOpen("UILordMode")
            if uiOpen then
                local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
                for _, value in ipairs(commonLevelComponent.CommonLevels[levelType]) do
                    if value.id == levelId then
                        isUnlock = not value.isLocked
                    end
                end
            end
        elseif levelType == LevelType.LevelTypeTower then
            local uiOpen = UIPublic.CheckUIOpen("UILordMode")
            if uiOpen then
                local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
                for _, value in ipairs(commonLevelComponent.CommonLevels[levelType]) do
                    if value.id == levelId then
                        isUnlock = not value.isLocked
                    end
                end
            end
        elseif levelType == LevelType.LevelTypeChallenge then
            local zChallenge = Z_Challenge[levelId]
            local uiOpen
            if zChallenge.TypeId == ChallengeType.Dragon then
                uiOpen = UIPublic.CheckUIOpen("UICommonLevel", {challengeType=1, levelType=6}) -- 深渊
            else
                uiOpen = UIPublic.CheckUIOpen("UIChallenge2") -- 双子
            end
            if uiOpen then
                local day = 1
                if TimeUtil.GetServerTimeSplitData().wday == 1 then
                    day = 7
                else
                    day = TimeUtil.GetServerTimeSplitData().wday - 1
                end
                local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
                local levelInfo = Z_Challenge[levelId]
                for _, dayValue in ipairs(levelInfo.OpenDate) do
                    if dayValue == day then
                        for _, value in ipairs(commonLevelComponent.CommonLevels[levelType][levelInfo.TypeId]) do
                            if value.id == levelId then
                                isUnlock = not value.isLocked
                            end
                        end
                    elseif dayValue == 0 then
                        isUnlock = true
                    end
                end
            end
        end
    elseif jumpType == LevelJumpType.Preview then
        if levelType == LevelType.LevelTypeStory then
            local uiOpen = true
            if uiOpen then
                local storyComponent =  Game.Scene.Player:GetComponent("StoryComponent")
                local levelInfo = Z_StorySection[levelId]
                if levelInfo.UnlockCondition == 0 then
                    isUnlock = true
                else
                    local unlockLevelInfo = Z_StorySection[levelInfo.UnlockCondition]
                    if storyComponent.StoryChapters[LevelType.LevelTypeStory] ~= nil then
                        if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId] ~= nil then
                            if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId].StoryLevelScoreInfoList[unlockLevelInfo.Id] ~= nil then
                                if storyComponent.StoryChapters[LevelType.LevelTypeStory].CompletedSections[unlockLevelInfo.ChapterId].StoryLevelScoreInfoList[unlockLevelInfo.Id].pass_times > 0 then
                                    isUnlock = true
                                end
                            end
                        end
                    end
                end
            end
        elseif levelType == LevelType.LevelTypeSevenStar then
            isUnlock = UIPublic.CheckUIOpen("UIChallenge")
        elseif levelType == LevelType.LevelTypeMonthlyTower then
            isUnlock = UIPublic.CheckUIOpen("UILordMode")
        elseif levelType == LevelType.LevelTypeTower then
            isUnlock = UIPublic.CheckUIOpen("UILordMode")
        elseif levelType == LevelType.LevelTypeChallenge then
            local uiOpen
            if levelId == ChallengeType.Dragon then
                uiOpen = UIPublic.CheckUIOpen("UICommonLevel", {challengeType=1, levelType=6}) -- 深渊
            else
                uiOpen = UIPublic.CheckUIOpen("UIChallenge2") -- 双子
            end
            if uiOpen then
                if levelId == 1 then
                    local day = 1
                    if TimeUtil.GetServerTimeSplitData().wday == 1 then
                        day = 7
                    else
                        day = TimeUtil.GetServerTimeSplitData().wday - 1
                    end
                    local levelInfo = Z_Challenge[levelId]
                    for _, dayValue in ipairs(levelInfo.OpenDate) do
                        if dayValue == day then
                            isUnlock = true
                        elseif dayValue == 0 then
                            isUnlock = not true
                        end
                    end
                else
                    isUnlock = true
                end
            end
        end
    end
    return isUnlock
end

local function loadFunc(func_str, data)
    local func_chunk, err = load(func_str, "loadFunc", "t", {})
    if not func_chunk then
        error("Error loading function: " .. err)
    end
    
    -- 执行加载的函数并传入 data 参数
    local result = func_chunk()(data)
    return result
end

function UIPublic.CheckUIOpen(uiName, data)
    if not CS.Game.Instance.settings.checkUIOpen then
        return true, ""
    end

    local zUIPanelConfig = Z_UIPanelConfig[uiName]
    if zUIPanelConfig == nil then
        return true, ""
    end

    local zUIPanelConfigData = nil
    for index, value in ipairs(zUIPanelConfig) do
        if value.ArgFunc ~= "" and value.ArgFunc ~= nil then
            local result = loadFunc(value.ArgFunc, data)
            if result then
                zUIPanelConfigData = value
                break
            end
        else
            zUIPanelConfigData = value
            break
        end
    end
    if zUIPanelConfigData == nil then
        --- 没有对应ui
        return true, ""
    end

    local lv, level
    if zUIPanelConfigData.LockLevel == 0 or zUIPanelConfigData.LockLevel == nil then
        lv = true
    else
        lv = Game.Scene.Player.Level >= zUIPanelConfigData.LockLevel
    end

    if zUIPanelConfigData.LevelType == 0 or zUIPanelConfigData.LevelType == nil then
        level = true
    else
        local levelInfo = UIPublic.GetLevelPassTimes(zUIPanelConfigData.LevelType, zUIPanelConfigData.LevelId)
        if levelInfo == nil then
            level = false
        else
            level = levelInfo.pass_times > 0
        end
    end

    if lv and level then
        return true, ""
    end

    if not lv and level then
        local error = string.gsub(LangUtil.GetSysLang(1357), "XX", zUIPanelConfigData.LockLevel)
        return false, error
    end

    local levelExcels = {
        [LevelType.LevelTypeStory] = Z_StorySection,
        [LevelType.LevelTypeChallenge] = Z_Challenge,
        [LevelType.LevelTypeSevenStar] = Z_SevenStar,
        [LevelType.LevelTypeTower] = Z_LordTower,
        [LevelType.LevelTypeMonthlyTower] = Z_MonthlyTowerLevel,
    }

    local levelExcel = levelExcels[zUIPanelConfigData.LevelType]
    if levelExcel == nil then
        Logger.LogError("UiPublic.CheckUIOpen levelType is error. levelType:" .. zUIPanelConfigData.LevelType)
        return true, ""
    end

    local levelInfo = levelExcel[zUIPanelConfigData.LevelId]
    if levelInfo == nil then
        Logger.LogError("UiPublic.CheckUIOpen levelId is error. levelType:"  .. zUIPanelConfigData.LevelType .. ", levelId:" .. zUIPanelConfigData.LevelId)
        return true, ""
    end

    local levelName = levelInfo.Name
    if lv then
        if zUIPanelConfigData.LevelType == LevelType.LevelTypeStory then
            local error = string.gsub(LangUtil.GetSysLang(1360), "XX", levelInfo.ChapterId)
            error = string.gsub(error, "YY", levelInfo.LevelTitle)
            error = string.gsub(error, "ZZ", levelName)
            return false, error
        else
            local error = string.gsub(LangUtil.GetSysLang(1358), "XX", levelName)
            return false, error
        end
    end

    if not lv then
        local error = string.gsub(LangUtil.GetSysLang(1359), "XX", zUIPanelConfigData.LockLevel)
        return false, string.gsub(error, "YY", levelName)
    end
end

---@param gameObject UnityEngine.GameObject @ 对应传入gameObject既可
function UIPublic.SetHelpButton(gameObject, uiName, index)
    if index == nil then index = 1 end

    if uiName == nil or Z_UIPanelConfig[uiName] == nil or Z_UIPanelConfig[uiName][index] == nil then
        gameObject:SetActive(false)
        return
    end

    gameObject:SetActive(true)
    UIUtil.AddBtnEventNoBug(gameObject, function()
        local zUIPanelConfig = Z_UIPanelConfig[uiName][index]
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIHelpText, {
            text = LangUtil.GetConfLang(zUIPanelConfig, "Help")
        })
    end)
end

function UIPublic.GetLevelPassTimes(levelType, levelId)
    local levelServerInfo
    if levelType == LevelType.LevelTypeStory then
        zStorySection = Z_StorySection[levelId]
        local storyComponent = Game.Scene.Player:GetComponent("StoryComponent")
        if storyComponent.StoryChapters[levelType] ~= nil then
            if storyComponent.StoryChapters[levelType].CompletedSections[tonumber(zStorySection.ChapterId)] ~= nil then
                if storyComponent.StoryChapters[levelType].CompletedSections[tonumber(zStorySection.ChapterId)].StoryLevelScoreInfoList[zStorySection.Id] ~= nil then
                    levelServerInfo = storyComponent.StoryChapters[levelType].CompletedSections[tonumber(zStorySection.ChapterId)].StoryLevelScoreInfoList[zStorySection.Id]
                end
            end
        end
    elseif levelType == LevelType.LevelTypeChallenge then -- 获取挑战关卡服务器数据
        zStorySection = Z_Challenge[levelId]
        local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")
        levelServerInfo = commonLevelComponent.CommonLevels[LevelType.LevelTypeChallenge][zStorySection.TypeId][zStorySection.Id]

        for _, levelInfo in ipairs(commonLevelComponent.CommonLevels[LevelType.LevelTypeChallenge][zStorySection.TypeId]) do
            if levelInfo.id == zStorySection.Id then
                levelServerInfo = levelInfo
            end
        end

    elseif levelType == LevelType.LevelTypeSevenStar then -- 获取七星关卡服务器数据
        zStorySection = Z_SevenStar[levelId]
        local sevenStarComponent = Game.Scene.Player:GetComponent("SevenStarComponent")
        levelServerInfo = sevenStarComponent.Days[zStorySection.ChapterId][zStorySection.Day][zStorySection.Diff]

    elseif levelType == LevelType.LevelTypeTower then -- 获取永久塔服务器数据
        zStorySection = Z_LordTower[levelId]
        local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")

        for _, levelInfo in ipairs(commonLevelComponent.CommonLevels[LevelType.LevelTypeTower]) do
            if levelInfo.id == zStorySection.Id then
                levelServerInfo = levelInfo
            end
        end
    elseif levelType == LevelType.LevelTypeMonthlyTower then -- 获取月塔服务器数据
        zStorySection = Z_MonthlyTowerLevel[levelId]
        local commonLevelComponent = Game.Scene.Player:GetComponent("CommonLevelComponent")

        for _, levelInfo in ipairs(commonLevelComponent.CommonLevels[LevelType.LevelTypeMonthlyTower]) do
            if levelInfo.id == zStorySection.Id then
                levelServerInfo = levelInfo
            end
        end
    end

    return levelServerInfo
end

function UIPublic.GetCurrentTopUp()
    local starLightRebateComponent = Game.Scene.Player:GetComponent("StarLightRebateComponent")

    local AllTopUpValue = 0

    for i = 1, 7 do
        local itemInfo = Z_StarLightStoneShop[i]
        AllTopUpValue = AllTopUpValue + itemInfo.Price * starLightRebateComponent:GetPurchaseCount(itemInfo.Id)
    end

    return AllTopUpValue
end

function UIPublic.CheckCondition(conditionId)
    local conditionInfo = Z_Condition[conditionId]
    if conditionInfo == nil then
        print( conditionId .. "不存在请在Z_Condition中检查")
        return true
    end

    local result = true

    for _, value in ipairs(conditionInfo) do
        if value.Type == ShopCondition.PlayerLevel then
            if Game.Scene.Player.Level < tonumber(value.Params[1])  then
                result = false
            end
        elseif value.Type == ShopCondition.BuyGoods then
            local alreadyBuyTimes = 0
            if Game.Scene.Player:GetComponent("ShopComponent").PurchasesDetailList[tonumber(value.Params[1])][tonumber(value.Params[2])] ~= nil then
                alreadyBuyTimes = Game.Scene.Player:GetComponent("ShopComponent").PurchasesDetailList[tonumber(value.Params[1])][tonumber(value.Params[2])].buy_times
            end
            if alreadyBuyTimes < tonumber(value.Params[3]) then
                result = false
            end
        elseif value.Type == ShopCondition.BuyPaymentGoods then
            local alreadyBuyTimes = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(tonumber(value.Params[1]))
            if alreadyBuyTimes < tonumber(value.Params[2]) then
                result = false
            end
        end
    end

    return result
end

local FREE_RECRUIT_ITEM_IDs = Z_Misc.FREE_RECRUIT_ITEM_ID.Value

function UIPublic.isFreeRecruitItemId(templateId)
    for index, id in ipairs(FREE_RECRUIT_ITEM_IDs) do
        if templateId == tonumber(id) then
            return true
        end
    end
    return false
end

function UIPublic.InitSkillChild(transform, skillId, skillType, card, isCanClick)
    local zSkill = Z_Skill[skillId]
    local iconImg = transform:Find("ImageBg/Icon"):GetComponent("Image")
    local lock = transform:Find("ImageBg/Icon/Lock")

    lock.gameObject:SetActive(false)
    if zSkill ~= nil then
        UIUtil.SetSprite(iconImg, AtlasConfig.SkillIcon, zSkill.SkillIcon)

        local data = {
            title = "技能详情",
            subTitle = zSkill.Name,
            message = zSkill.SkillDesc,
            id = zSkill.Id,
            cd = zSkill.CooldownTurn,
            character = card,
            params = zSkill.Params,
            skillType = skillType
        }

        UIUtil.AddBtnEvent(iconImg,function(go)
            if isCanClick then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetail,data)
            end
        end)
    else
        lock.gameObject:SetActive(true)
        --iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Image/Public/touming.png")
        coroutine.start(function ()
            iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/SkillIcon/PassiveSkill.png")
        end)
        -- iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/SkillIcon/PassiveSkill.png")
        UIUtil.AddBtnEvent(iconImg,function(go) 
            if isCanClick then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(149))
            end
        end)
    end
end


function UIPublic.GetMonthCardLastDay(id)
    ---@type MonthCardComponent
    local MonthCardComponent = Game.Scene.Player:GetComponent("MonthCardComponent")
    local monthCard = MonthCardComponent:GetMonthCard(id)
    if monthCard == nil then
        return 0
    else
        return TimeUtil.ConvertTimeForm(monthCard:GetLastTime()).day
    end
end

--- addCount 写1, 用来判断获取是否会超上限. 0/nil 智能判断当前有没有超上限.
function UIPublic.CheckOutOfLimit(rewardType, addCount)
    local isOutOfLimit = false
    if addCount == nil then addCount = 0 end
    Logger.Log("UIPublic.CheckOutOfLimit rewardType:" .. rewardType)
    if rewardType == RewardType.RewardTypeFightSoul then
        ---@type FightSoulComponent
        local FightSoulComponent = Game.Scene.Player:GetComponent("FightSoulComponent")
        local fightSoulCount = table.count(FightSoulComponent:GetFightSoulList())
        local maxFightSoulCount = FightSoulComponent:GetBagCapacity()
        isOutOfLimit = fightSoulCount + addCount > maxFightSoulCount
    elseif rewardType == RewardType.RewardTypeEquipment then
        ---@type EquipComponent
        local EquipComponent = Game.Scene.Player:GetComponent("EquipComponent")
        local equipCount = table.count(EquipComponent:GetEquipList())
        local maxEquipCount = EquipComponent:GetBagCapacity()
        isOutOfLimit = equipCount + addCount > maxEquipCount
    else
        Logger.LogError("UIPublic.CheckOutOfLimit rewardType is error. rewardType:" .. rewardType)
    end

    return isOutOfLimit
end

function UIPublic.OpenBattlePassUI(BattlePassId)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIBattlePass)
end

function UIPublic.GiftPackageIsShow(packageInfo)
    local currentTime = TimeUtil.GetServerTime()
    if packageInfo.OnSaleStartTime ~= "" then
        if currentTime < TimeUtil.ParseDateTime(packageInfo.OnSaleStartTime) then
            return false
        end
    end

    if packageInfo.OnSaleEndTime ~= "" then
        if currentTime > TimeUtil.ParseDateTime(packageInfo.OnSaleEndTime) then
            return false
        end
    end

    if packageInfo.VisibleStartTime ~= "" then
        if currentTime < TimeUtil.ParseDateTime(packageInfo.VisibleStartTime) then
            return false
        end
    end

    if packageInfo.VisibleEndTime ~= "" then
        if currentTime > TimeUtil.ParseDateTime(packageInfo.VisibleEndTime) then
            return false
        end
    end

    if packageInfo.VisibleCondition ~= "" then
        if not UIPublic.CheckStoreCondition(packageInfo.VisibleCondition) then
            return false
        end
    end

    if packageInfo.OnSaleStartCondition ~= "" then
        if not UIPublic.CheckStoreCondition(packageInfo.OnSaleStartCondition) then
            return false
        end
    end

    return true
end



function UIPublic.CheckStoreCondition(conditionId)
    local conditionInfo = Z_Condition[conditionId]
    if conditionInfo == nil then
        print( conditionId .. "不存在请在Z_Condition中检查")
        return true
    end

    local result = true

    ---@type ShopComponent
    local shopComponent = Game.Scene.Player:GetComponent("ShopComponent")

    for _, value in ipairs(conditionInfo) do
        if value.Type == ShopCondition.PlayerLevel then
            if Game.Scene.Player.Level < tonumber(value.Params[1])  then
                result = false
            end
        elseif value.Type == ShopCondition.BuyGoods then
            local alreadyBuyTimes = 0
            if shopComponent.PurchasesDetailList[tonumber(value.Params[1])][tonumber(value.Params[2])] ~= nil then
                alreadyBuyTimes = shopComponent.PurchasesDetailList[tonumber(value.Params[1])][tonumber(value.Params[2])].buy_times
            end
            if alreadyBuyTimes < tonumber(value.Params[3]) then
                result = false
            end
        elseif value.Type == ShopCondition.BuyPaymentGoods then
            local alreadyBuyTimes = Game.Scene.Player:GetComponent("StarLightRebateComponent"):GetPurchaseCount(tonumber(value.Params[1]))
            if alreadyBuyTimes < tonumber(value.Params[2]) then
                result = false
            end
        elseif value.Type == ShopCondition.ItemCount then
            local itemAmount = UIPublic.GetItemAmount(tonumber(value.Params[1]))
            if itemAmount < tonumber(value.Params[2]) then
                result = false
            end
        end
    end

    return result
end

UIPublic.DelayTime = 0.05;
UIPublic.DelayTime1 = 0.5;
UIPublic.FungusTransitionTime = 1;
UIPublic.FungusTransitionTime1 = 2;

UIPublic.GetCurrencyKind = GetCurrencyKind
UIPublic.InitGeneralShoItem = InitGeneralShoItem
UIPublic.GetSubPropImageName = GetSubPropImageName
UIPublic.InitIcon = InitIcon;
UIPublic.InitRaryImage = InitRaryImage;
UIPublic.InitAtrImage = InitAtrImage;
UIPublic.InitCardItem = InitCardItem
UIPublic.InitAttributeArea = InitAttributeArea
UIPublic.InitSkillArea = InitSkillArea

return UIPublic