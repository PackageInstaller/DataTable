---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by daiyi.
--- DateTime: 2019/3/21 15:59
---

local UISsLoginView = BaseClass("UISsLoginView", UIBaseView)
local base = UIBaseView
local serverItemName = "ServerItem"
local AreaItemName = "AreaItem"

local activeColor = Color.New(1,1,1)
local deActiveColor = Color.New(106/255,122/255,156/255)

local rc

local function InitState(root,stateInfo)
    local state
    if stateInfo == "Maintain" then
        state = 2
    elseif stateInfo == "Free" then
        state = 0
    elseif stateInfo == "Full"  then
        state = 1
    elseif  stateInfo == "Normal" then
        state = 3
    end
    for i = 0,root.childCount - 1 do
        root:GetChild(i).gameObject:SetActive(i == state)
    end
end

local function SetItemColor(list,gameObject)
    for k ,v in pairs(list) do
        local transform = v.transform
        LangUtil.BindText(transform:Find("Text")).color = deActiveColor
        transform:Find("Acitve").gameObject:SetActive(false)
    end
    local transform = gameObject.transform
    LangUtil.BindText(transform:Find("Text")).color = activeColor
    transform:Find("Acitve").gameObject:SetActive(true)
end

local function OnServerItemBtn(go) --点击服务器列表
    local bindData = go:GetComponent("BindData");
    local self = bindData:Get("self");
    local serverId = bindData:Get("serverId");
    self.tempServerId = serverId;
    self.effect:SetActive(true)
    if self.tempServerId == nil then
        self.serverPanel:SetActive(false);
        return
    end
    ClientData:GetInstance():SetLoginServerID(self.tempServerId);
end

local function InitServerContent(go) --初始化服务器列表
    local bindData = go:GetComponent("BindData");
    local self = bindData:Get("self");
    SetItemColor(self.areaObjTab,go)
    local serverList;
    self.serverObjTab = {};
    serverList = bindData:Get("serverList");
    ListChildPool:GetInstance():ClearContent(self.serverContent);
    
    Logger.Log(table.dump(serverList))
    
    coroutine.start(function()
        for k,v in table.pairsByKeys(serverList) do
            ListChildPool:GetInstance():GetChild(serverItemName,self.serverContent,function(object)
                self.serverObjTab[v.ServerId] = object;
                local transform = object.transform;
                LangUtil.BindText(transform:Find("Text")).text = v.Name
                local stateRoot = transform:Find("State")
                transform:Find("Head").gameObject:SetActive(table.any(self.accountList, function (val) return val.ServerId == v.ServerId end))
                InitState(stateRoot,v.StateInfo)
                local bindData1 = UIUtil.GetButtonDataComponent(object);
                bindData1:Add("self",self);
                bindData1:Add("serverId",v.ServerId);
                ButtonListener.Get(object).OnClickHandler = OnServerItemBtn;
            end)
        end
    end)
end

local function CreateAreaItem(self,data,dataName,name,index)
    ListChildPool:GetInstance():GetChild(AreaItemName, self.areaContent, function(object)
        self.areaObjTab[index] = object;
        LangUtil.BindText(object.transform:Find("Text")).text = name;
        local bindData = UIUtil.GetButtonDataComponent(object);
        bindData:Add("self",self);
        bindData:Add(dataName,data);
        ButtonListener.Get(object).OnClickHandler = InitServerContent
    end)
end

local function InitAreaContent(self) --初始化区列表
    ListChildPool:GetInstance():ClearContent(self.areaContent);
    self.areaObjTab = {};
    coroutine.start(function()
        local dataName = "serverList"
        local data1 = {};
        local areaName1 = LangUtil.GetSysLang(842); -- 推荐
        local zServer = {}
        table.walk(Z_Server, function (k, v)
            if v.ServerId ~= nil then
                zServer[v.Listorder] = v
            end
        end)
        table.walk(zServer, function (k, v)
            if v.Recommended == 1 then
                table.insert(data1, v);
            end
        end)
        CreateAreaItem(self,data1,dataName,areaName1,1);
        
        local data2 = {};
        local areaName2 = LangUtil.GetSysLang(843); -- 玩家
        for k,v in table.pairsByKeys(self.accountList) do
            local serverData = table.first(Z_Server,function(a) return a.ServerId == v.ServerId end);
            if serverData ~= nil then
                table.insert(data2, serverData);
            end
        end
        CreateAreaItem(self,data2,dataName,areaName2,2);

        local data3 = {};
        local areaName3 = LangUtil.GetSysLang(844); -- 一览
        table.walk(zServer, function (k, v)
            table.insert(data3, v);
        end)
        CreateAreaItem(self,data3,dataName,areaName3,3);
        
        -- 选择默认区和服务器
        local defaultObj;
        if self.server_id ~= nil and self.server_id ~= 0 then
            defaultObj = self.areaObjTab[2]
        else
            defaultObj = self.areaObjTab[1]
        end
        InitServerContent(defaultObj);
    end)
end

local function latecanbein(sss)
    sss.state = 2;
    coroutine.start(function()
        coroutine.waitforseconds(8)
        sss.state = 1;
    end)
end

-- 推荐或默认服务器
local function RefreshGameEnterPanel(self)
    local str = ""
    local state = 0
    local func = function() -- 推荐服务器
        local order = 999999 
        table.walk(Z_Server, function (k, v)
            if v.Recommended == 1 then
                local serverInfo = table.first(self.g2CLoginData.ServerInfoList,function(a) return a.ServerId == v.ServerId end);
                if serverInfo ~= nil and v.Listorder < order then
                    order = v.Listorder
                    str = v.Name
                    state = serverInfo.StateInfo
                    self.server_id = v.ServerId
                    ClientData:GetInstance():SetLoginServerID(self.server_id)
                end
            end
        end)
    end
    if self.server_id ~= nil and self.server_id ~= 0 then -- 上一次登录的服务器
        local serverInfo = table.first(self.g2CLoginData.ServerInfoList,function(a) return a.ServerId == self.server_id end);
        local zServer = table.first(Z_Server, function(a) return a.ServerId == self.server_id end)
        if serverInfo ~= nil and zServer ~= nil then
            str = zServer.Name
            state = serverInfo.StateInfo
        else
            func()
        end
    else
        func()
    end
    -- 保证有默认服务器
    if string.IsNullOrEmpty(str) then
        local serverInfo = table.first(self.g2CLoginData.ServerInfoList,function(a) return true end);
        if serverInfo ~= nil then
            local zServer = table.first(Z_Server, function(a) return a.ServerId == serverInfo.ServerId end)
            str = zServer.Name
            state = serverInfo.StateInfo
            self.server_id = serverInfo.ServerId
            ClientData:GetInstance():SetLoginServerID(self.server_id)
        end
    end
    self.serverName.text = str
    if state == 0 then
        self.stateRoot.gameObject:SetActive(false)
    else
        self.stateRoot.gameObject:SetActive(true)
        InitState(self.stateRoot,state)
    end
end

local function OnServersStateChanged(self)
    GameObject.Find("Reporter"):GetComponent("Reporter").enabled = Authority:GetReportAuth()
    self.uidText.text = "UID:"..ClientData:GetInstance().uid
    self.g2CLoginData = self.model.g2CLoginData
    self.recommendList = self.model.recommendList
    self.accountList = self.model.accountList
    RefreshGameEnterPanel(self)
end

local function OpenGameEnterPanel(self)
    self.pressPanel:SetActive(false)
    self.enterGamePanel:SetActive(true)
    OnServersStateChanged(self)
end

local function FadeImage(self,v)
    if v ~= nil then
        local fade = 1;
        v:DOFade(0,0)
        v:DOFade(fade,2)
    end
end

local function DoAnimation(self)
    coroutine.start(function()
        self.ui_Area.gameObject:SetActive(false);
        coroutine.waitforseconds(1);
        table.csenuObject(self.ui_Area,function(v)
            if v.gameObject.name ~= "ServerPanel" then
                FadeImage(self,v:GetComponent("Image"))
                FadeImage(self,v:GetComponent("Text"))
            end
        end)
        coroutine.waitforframes(1);
        self.ui_Area.gameObject:SetActive(true);
    end)
end

function UISsLoginView.OnInfoBtnClick(self)
    UIUtil.ToolTipFourth(LangUtil.GetSysLang(579))
end

function UISsLoginView.OnSetBtnClick(self)
    UIUtil.ToolTipFourth(LangUtil.GetSysLang(579))
end

function UISsLoginView.OnLoginBtn(self)
    local name = self.account_input.text
    local password = self.password_input.text
    self.ctrl:OldLogin(name, password)
end

function UISsLoginView.OnRegisterBtn(self)
    local name = self.account_input.text
    local password = self.password_input.text
    self.ctrl:Register(name, password)
end

function UISsLoginView.OldBack(self)
    self.enterGamePanel:SetActive(false);
    --self.loginPanel:SetActive(true);
end

function UISsLoginView.Back(self)
    self.enterGamePanel:SetActive(false);
    --self.loginPanel:SetActive(false);
    self.pressPanel:SetActive(true);
end

function UISsLoginView.OffLine(self)
    self:Back();
    self:OnLoginBtnClick();
end

function UISsLoginView.OnEnterGameBtn(self) --进入游戏
    if self.toggle.isOn == false then 
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2046)) 
        return 
    end
    if self.state == 2 then
        return;
    end
    latecanbein(self)
    if self.server_id ~= nil and self.server_id ~= 0 then
        local serverInfo = table.first(self.g2CLoginData.ServerInfoList,function(a) return a.ServerId == self.server_id end)
        if serverInfo ~= nil then
            if serverInfo.StateInfo == "Maintain" then
                UIUtil.ToolTipFourth(LangUtil.GetSysLang(1000)) --"该服务器正在维护中,请尝试其他服务器");
                self.state = 1;
                return;
            end
            self.ctrl:EnterGame(serverInfo, function ()
                Logger.Log("-----------------登陆成功-----------------")
                self.state = 1;
                -- 登录进去了   =>    去除排队等待的状态
                if self.isWaitingLogin > 0 then
                    Game.Scene:GetComponent("SessionComponent"):DeActiveLoad(LoadMode.Cat, "SsLoginView")
                    self.isWaitingLogin = 0
                end
            end, function(errorCode)
                self.state = 1;
                -- 不是继续排队   =>   去除排队等待的状态
                if errorCode ~= ErrorCode.ERR_WaitLogin then
                    if self.isWaitingLogin > 0 then
                        Game.Scene:GetComponent("SessionComponent"):DeActiveLoad(LoadMode.Cat, "SsLoginView")
                        self.isWaitingLogin = 0
                    end
                end
                if errorCode == ErrorCode.ERR_ResLower then
                    UIUtil.ToolTipSeven(LangUtil.GetSysLang(11), LangUtil.GetServerError(errorCode), function() CS.UnityEngine.Application.Quit() end)
                elseif errorCode == ErrorCode.ERR_OnLine then
                    Logger.LogError("OnLine==============")
                elseif errorCode == ErrorCode.ERR_WaitLogin then
                    self.isWaitingLogin = self.isWaitingLogin + 1
                    -- 首次排队  打开排队界面
                    if self.isWaitingLogin == 1 then
                        Game.Scene:GetComponent("SessionComponent"):ActiveLoad(LangUtil.GetSysLang(3122), LoadMode.Cat, "SsLoginView")
                    end
                    -- 排队次数多了就不继续排队了
                    if self.isWaitingLogin >= 5 then
                        Game.Scene:GetComponent("SessionComponent"):DeActiveLoad(LoadMode.Cat, "SsLoginView")
                        self.isWaitingLogin = 0
                        return
                    end
                    coroutine.start(function () 
                        coroutine.waitforseconds(2)
                        self.ctrl.enterVoice = false
                        self:OnEnterGameBtn()
                    end)
                else
                    UIUtil.ToolTipSeven(LangUtil.GetSysLang(9), LangUtil.GetServerError(errorCode), function() self:Back() end)
                end
            end)
        end
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1002)) --("请重新选择服务器");
        self.state = 1
    end
end

function UISsLoginView.OpenServerPanel(self)--打开服务器选择界面
    self.serverPanel:SetActive(true)
    self.effect:SetActive(false)
    InitAreaContent(self)
end

function UISsLoginView.OnLoginBtnClick(self)
    self.pressPanel:SetActive(false);
    local commonLogin = function(self)
        local client_data = ClientData:GetInstance()
        self.ctrl:Login(client_data.uid, client_data.password, "", function ()
            self.pressPanel:SetActive(false)
        end, function (errorCode)
            if errorCode == ErrorCode.ERR_PasswordError then
                UIUtil.ToolTipFirst({
                    title = LangUtil.GetSysLang(9),
                    message = LangUtil.GetSysLang(4028),
                    callBack = function()
                        client_data:SetAccountInfo()
                        self.pressPanel:SetActive(true)
                    end,
                    cancelCallBack = function() self.pressPanel:SetActive(true) end,
                    hideCloseBtn = true,
                })
            elseif errorCode == ErrorCode.ERR_AccountAlreadyRegister or
                    errorCode == ErrorCode.ERR_LoginError or
                    errorCode == ErrorCode.ERR_PasswordError or
                    errorCode == ErrorCode.ERR_AccountError or
                    errorCode == ErrorCode.ERR_IPError then
                UIUtil.ToolTipFirst({
                    title = LangUtil.GetSysLang(9),
                    message = LangUtil.GetServerError(ErrorCode.ERR_PasswordError),
                    callBack = function()
                        client_data:SetAccountInfo()
                        self.pressPanel:SetActive(true)
                    end,
                    cancelCallBack = function() self.pressPanel:SetActive(true) end,
                    hideCloseBtn = true,
                })
            elseif errorCode == ErrorCode.ERR_ClientError then
                UIUtil.ToolTipFirst({
                    title = LangUtil.GetSysLang(9),
                    message = LangUtil.GetServerError(ErrorCode.ERR_ClientError),
                    callBack = function()
                        client_data:SetAccountInfo()
                        self.pressPanel:SetActive(true)
                    end,
                    cancelCallBack = function() self.pressPanel:SetActive(true) end,
                    hideCloseBtn = true,
                })
            else
            self.pressPanel:SetActive(true);
            end
        end)
    end

    local chooseLang = function()
        -- 没有uid，首次登录
        local client_data = ClientData:GetInstance()
        if client_data.uid == nil or string.IsNullOrEmpty(tostring(client_data.uid)) then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UILoginStatute)
            return true
        end
        return false
    end

    -- local chooseLang = function() --test
    --     UIManager:GetInstance():OpenWindow(UIWindowNames.UILoginStatute)
    --     return true
    -- end

    -- local chooseLang = function()
    --     -- 没有uid，首次登录
    --     local client_data = ClientData:GetInstance()
    --     if client_data.uid == nil or string.IsNullOrEmpty(tostring(client_data.uid)) then
    --         -- if ChannelManager:GetInstance():IsMultiLang() then
    --         --     UIManager:GetInstance():OpenWindow(UIWindowNames.UILoginSetLang)--设置语言
    --         -- else
    --         --     UIManager:GetInstance():OpenWindow(UIWindowNames.UILoginStatute)
    --         -- end
    --         return true
    --     end
    --     return false
    -- end

    -- 1.判断是否需要选择需要  同意规约
    local choose = chooseLang()

    -- 2.不同的登录方式选择
    if not choose then
        if UNITY_EDITOR or not ChannelManager:GetInstance():IsSdk() then
            commonLogin(self)
        else
            ChannelManager:GetInstance():Login()
        end
    end
end

local function OnLoginSuccess(self, uid, password, username)
    self.ctrl:Login(uid, password, username, function ()
        self.pressPanel:SetActive(false)
    end, function (errorCode)
        Logger.LogError("OnQooLoginSuccess: ErrorCode: "..errorCode)
        self:Back()
    end)
end

local function OnLoginFail(self)
    self:Back()
end

local function OnCreate(self)
    base.OnCreate(self)
    
    rc = self.rc
    self.ui_Area = rc:GetObject("UIArea").transform;
    self.logo = rc:GetObject("Logo").transform;
    self.toggle = rc:GetObject("Toggle"):GetComponent("Toggle")
    self.account_input = rc:GetObject("AccountInputField"):GetComponent(typeof(UE_UI.InputField))
    self.password_input = rc:GetObject("PasswordInputField"):GetComponent(typeof(UE_UI.InputField))
    self.stateRoot = rc:GetObject("State").transform
    self.effect = rc:GetObject("Lizi")
    self.selectServerBtn = rc:GetObject("SelectServerButton").gameObject;
    self.enterGameBtn = rc:GetObject("EnterGameButton").gameObject;
    self.serverContent = rc:GetObject("AreaContent").gameObject;
    self.areaContent = rc:GetObject("Content").gameObject;
    self.serverPanel = rc:GetObject("ServerPanel").gameObject;
    self.pressPanel = rc:GetObject("PressPanel").gameObject;
    self.enterGamePanel = rc:GetObject("SelectServer").gameObject;
    self.serverPanel:SetActive(false);
    self.enterGamePanel:SetActive(false);
    self.ui_Area.gameObject:SetActive(false);
    self.pressPanel:SetActive(false);

    self.googleBtn = rc:GetObject("GoogleBtn")
    self.twitterBtn = rc:GetObject("TwitterBtn")
    self.appleBtn = rc:GetObject("AppleBtn")
    self.codeBtn = rc:GetObject("CodeBtn")

    self.twitterBtn:GetComponent("Button").interactable = false
    self.appleBtn:GetComponent("Button").interactable = false
    self.googleBtn:GetComponent("Button").interactable = false
    self.codeBtn:GetComponent("Button").interactable = false
    self.twitterBtn:SetActive(false)
    self.appleBtn:SetActive(false)
    self.googleBtn:SetActive(false)
    self.codeBtn:SetActive(false)
    
    if UNITY_EDITOR or not ChannelManager:GetInstance():IsSdk() then
        -- self.codeBtn:GetComponent("Button").interactable = true
        -- self.codeBtn:SetActive(true)
        -- UIUtil.AddBtnEvent(self.codeBtn, function ()
        --     UIManager:GetInstance():OpenWindow(UIWindowNames.UILoginGenerateCode)
        -- end)
    end
    
    -- 开发和测试用
    self.channelDrop = rc:GetObject("ChannelDropDown")
    self.channelName = rc:GetObject("Channel")
    self.sdkToggle = rc:GetObject("SdkToggle")
    local chNameTxt = self.channelName:GetComponent("Text")
    if CS.GameChannel.ChannelManager.instance.packageName == ChannelType.Test then
        if not UNITY_EDITOR then
            -- 是否是sdk登录
            self.sdkToggle:SetActive(true)
            local tgl = self.sdkToggle:GetComponent("Toggle")
            tgl.isOn = ClientData:GetInstance().testSdk == "TestSdk"
            EventTriggerListener.Get(tgl.transform:Find("Label").gameObject).onLuaClick = function(v)
                tgl.isOn = not tgl.isOn
                ClientData:GetInstance():SetTestSdk(tgl.isOn)
            end

            -- 切换渠道用
            local cacheChannel = ClientData:GetInstance().cacheChannel
            if string.IsNullOrEmpty(cacheChannel) then
                cacheChannel = ChannelType.Test
            end
            self.channelName:SetActive(true)
            chNameTxt.text = "Develop Channel:"..cacheChannel
            self.channelDrop:SetActive(true)
            local drop = self.channelDrop:GetComponent(typeof(CS.TMPro.TMP_Dropdown))
            drop.options:Clear()
            drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('Test'))
            drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('HKQoo'))
            --drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('JA'))
            drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('Asia'))
            --drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('TestHKQoo'))
            --drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('TestJA'))
            --drop.options:Add(CS.TMPro.TMP_Dropdown.OptionData('TestAsia'))
            local index = -1
            local selectIndex = -1
            table.csenu(drop.options, function (v)
                index = index + 1
                if v.text == cacheChannel then
                    selectIndex = index
                end
            end)
            if selectIndex == -1 then
                Logger.LogError("cannot find channel:"..cacheChannel)
            else
                drop.value = selectIndex
                local func = function(self, val)
                    chNameTxt.text = "Develop Channel:"..drop.options[val].text
                    if cacheChannel ~= drop.options[val].text then
                        chNameTxt.text = "**需要重启**"..cacheChannel.."=>"..drop.options[val].text
                    end
                    ClientData:GetInstance():SetChannel(drop.options[val].text)
                end
                drop.onValueChanged:AddListener(Bind(self, func))
            end
        end
    else
        self.channelName:SetActive(false)
        self.channelDrop:SetActive(false)
        self.sdkToggle:SetActive(false)
        if UNITY_EDITOR then
            self.channelName:SetActive(true)
            chNameTxt.text = "OnLine Channel:"..CS.GameChannel.ChannelManager.instance.packageName
        end
    end
    
    UIUtil.AddBtnEvent(rc:GetObject("InfoButton"), function() self:OnInfoBtnClick() end)
    UIUtil.AddBtnEvent(rc:GetObject("SetButton"), function() self:OnSetBtnClick() end)
    UIUtil.AddBtnEvent(rc:GetObject("LoginButton"), function() self:OnLoginBtn() end)
    UIUtil.AddBtnEvent(rc:GetObject("RegisterButton"), function() self:OnRegisterBtn() end)
    UIUtil.AddBtnEvent(self.enterGameBtn, function()
        self.ctrl.enterVoice = true
        self:OnEnterGameBtn() 
    end, "Enter")
    
    UIUtil.AddBtnEvent(self.selectServerBtn, function() self:OpenServerPanel() end)
    UIUtil.AddBtnEvent(rc:GetObject("Close"),function()
        self.serverPanel:SetActive(false)
        self.effect:SetActive(true)
    end)
    EventTriggerListener.Get(self.pressPanel).onLuaClick = function () self:OnLoginBtnClick() end
    --Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"Login")
    DoAnimation(self)
end

function UISsLoginView.OnLangCreate(self)
    LangUtil.BindText(self.toggle.transform:Find("Label")).text = LangUtil.GetSysLang(476)
    LangUtil.BindText(self.account_input.transform:Find("Caption")).text = LangUtil.GetSysLang(474)
    LangUtil.BindText(self.password_input.transform:Find("Caption")).text = LangUtil.GetSysLang(475)
    LangUtil.BindText(self.account_input.transform:Find("Placeholder")).text = LangUtil.GetSysLang(486)
    LangUtil.BindText(self.password_input.transform:Find("Placeholder"))
    LangUtil.BindText(self.account_input.transform:Find("Text"))
    LangUtil.BindText(self.password_input.transform:Find("Text"))
    LangUtil.BindText(rc:GetObject("RegisterButton").transform:Find("Text")).text = LangUtil.GetSysLang(472)
    LangUtil.BindText(rc:GetObject("LoginButton").transform:Find("Text")).text = LangUtil.GetSysLang(473)
    self.appVersionText = LangUtil.BindText(rc:GetObject("Version"))
    self.resVersionText = LangUtil.BindText(rc:GetObject("ResVersion"), FontType.JA_Number)
    LangUtil.BindText(self.stateRoot.transform:Find("1/Text")).text = LangUtil.GetSysLang(481)
    LangUtil.BindText(self.stateRoot.transform:Find("2/Text")).text = LangUtil.GetSysLang(480)
    LangUtil.BindText(self.stateRoot.transform:Find("3/Text")).text = LangUtil.GetSysLang(482)
    LangUtil.BindText(self.stateRoot.transform:Find("4/Text")).text = LangUtil.GetSysLang(814)
    LangUtil.BindText( rc:GetObject("StateText")).text = LangUtil.GetSysLang(479)
    LangUtil.BindText(self.enterGameBtn.transform:Find("Text")).text = LangUtil.GetSysLang(477)
    --LangUtil.BindText(self.backButton.transform:Find("Text")).text = LangUtil.GetSysLang(485)
    LangUtil.BindText(rc:GetObject("TopText")).text = LangUtil.GetSysLang(483)
    LangUtil.BindText(rc:GetObject("ServerState").transform:Find("1/Text")).text = LangUtil.GetSysLang(480)
    LangUtil.BindText(rc:GetObject("ServerState").transform:Find("2/Text")).text = LangUtil.GetSysLang(841)
    LangUtil.BindText(rc:GetObject("ServerState").transform:Find("3/Text")).text = LangUtil.GetSysLang(481)
    LangUtil.BindText(rc:GetObject("ServerState").transform:Find("4/Text")).text = LangUtil.GetSysLang(482)
    self.serverName = LangUtil.BindText(rc:GetObject("ServerNameText"))
    LangUtil.BindText(rc:GetObject("BotTxt")).text = LangUtil.GetSysLang(4001)
    LangUtil.BindText(self.pressPanel.transform:Find("Root/Text")).text = LangUtil.GetSysLang(4002)
    self.uidText = LangUtil.BindText(rc:GetObject("UIDText"))
end

local function OnLangTypeChg(self)
    self:OnLangCreate()
    if self.server_id ~= nil and self.server_id ~= 0 then
        local zServer = table.first(Z_Server, function(a) return a.ServerId == self.server_id end)
        if zServer ~= nil then
            self.serverName.text = zServer.Name
        end
    end
end

local function OnEnable(self)
    base.OnEnable(self)
    self.isWaitingLogin = 0
    self:OnRefresh()
end

local function OnRefresh(self)
    self.state = 1
    self.serverGate = nil
    self.server_id = self.model.server_id
    
    local cd = ClientData:GetInstance()
    Logger.Log("--版本："..cd.app_version.."  --资源版本："..cd.res_version)
    self.resVersionText.text = "VER "..cd.res_version

    self.pressPanel:SetActive(true);
    self:OnLoginBtnClick();
    
    if CS.UnityEngine.Application.platform ~= CS.UnityEngine.RuntimePlatform.IPhonePlayer then -- 安卓平台
        UIManager:GetInstance():AddCancelWindows(UIWindowNames.UIStarLightStoneShop, 2)
        UIManager:GetInstance():AddCancelWindows(UIWindowNames.UIMonthCardShop, 2)
    end
end

-- 没同意规约
function UISsLoginView.OnStatuteDisable(self)
    local client_data = ClientData:GetInstance()
    if client_data.uid == nil or string.IsNullOrEmpty(tostring(client_data.uid)) then
        self.pressPanel:SetActive(true);
    end
end

local function OnSelectSvrChg(self)
    self.server_id = self.model.server_id;
    self.serverPanel:SetActive(false);
    RefreshGameEnterPanel(self);
end

local function OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_LOGIN_ACCOUNT_SERVER_SUCCEED,OpenGameEnterPanel);
    self:AddUIListener(UIMessageNames.ON_SERVERS_STATE_CHANGED,OnServersStateChanged);
    self:AddUIListener(UIMessageNames.UILOGIN_ON_SELECTED_SVR_CHG,OnSelectSvrChg)
    self:AddUIListener(UIMessageNames.ON_LANG_TYPE_CHG, OnLangTypeChg)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_LOGIN_ACCOUNT_SERVER_SUCCEED);
    self:RemoveUIListener(UIMessageNames.ON_SERVERS_STATE_CHANGED);
    self:RemoveUIListener(UIMessageNames.UILOGIN_ON_SELECTED_SVR_CHG)
    self:RemoveUIListener(UIMessageNames.ON_LANG_TYPE_CHG)
end

local function OnDestroy(self)
    self.account_input = nil;
    self.password_input = nil;
    base.OnDestroy(self);
end

UISsLoginView.OnCreate = OnCreate;
UISsLoginView.OnEnable = OnEnable;
UISsLoginView.OnRefresh = OnRefresh;
UISsLoginView.OnAddListener = OnAddListener;
UISsLoginView.OnRemoveListener = OnRemoveListener;
UISsLoginView.OnDestroy = OnDestroy;
UISsLoginView.OnLoginSuccess = OnLoginSuccess;  
UISsLoginView.OnLoginFail = OnLoginFail;

return UISsLoginView;