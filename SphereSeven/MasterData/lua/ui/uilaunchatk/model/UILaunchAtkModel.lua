---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/3 13:59
---

local UILaunchAtkModel = BaseClass("UILaunchAtkModel",UIBaseModel)
local base = UIBaseModel;
local this  = UILaunchAtkModel



local function GetMaxSectionId(chapter_id)
    --local num = 0;
    local tab = {};
    for k,v in table.pairsByKeys(Z_StorySection) do
       if v.ChapterId == chapter_id then
          table.insert(tab,v.Id);
       end
    end
    table.sort(tab,function(a,b) return a<b  end)
    return tab[#tab];
end

local function GetMinSectionId(chapter_id)
    local tab = {};
    for k,v in table.pairsByKeys(Z_StorySection) do
        if v.ChapterId == chapter_id and v.LevelId ~= 0 then
            table.insert(tab,v.Id);
        end
    end
    table.sort(tab,function(a,b) return a<b  end)
    return tab[1];
end

local function OnCreate(self)
    self.cur_completed_sectionId = nil;
    self.completed_sectionId_1 = nil;
    self.completed_sectionId_2 = nil;
    self.completed_sectionId_3 = nil;
    self.completed_sectionId_4 = nil;
    self.chapter_section_data = nil;
    self.diffculty = 1;
    self.map = {};
    self.condition1 = false;
    self.condition2 = false;
    self.condition3 = false;
    self.select_data = nil;
    self.maxSection = 138
end

local function OnEnable(self,data)
    if data ~= nil then
        self.mode = data.mode
        self.chapterId = tonumber(data.typeName)
        if self.chapterId == nil then
            self.chapterId = data.chapterId
        end
        self.isOpenDetail =data.isOpenDetail
        self.openId = data.openId
    else
        self.mode = nil
        self.chapterId = nil
    end
    
    if self.chapterId and table.any(Z_StoryChapter, function(v) return v.ChapterId == self.chapterId end) then
        ClientData:GetInstance():SetCurChapterId(self.chapterId)
    end
    self.chapterId = ClientData:GetInstance().CurChapterId
    local zChapter = Z_StoryChapter[self.chapterId]
    if zChapter == nil or zChapter.IsMainLevel == 1 then
        self.levelExcel = Z_StorySection
        self.levelType = LevelType.LevelTypeStory
    else
        self.levelExcel = Z_GameEventsLevel
        self.levelType = LevelType.LevelTypeGameEvent
    end
    
    base.OnEnable(self);
    self:OnRefresh();
end

function this.GetCurSectionData(self)
    local clientData = ClientData:GetInstance()
    local diffId = clientData.CurLevelDifficulty
    local sectionData = {}

    if "completed_sectionId_"..diffId ~= 0 then
        for k,v in table.pairsByKeys(Z_StorySection) do
            if k <= self["completed_sectionId_"..diffId] + 1 then
                table.insert(sectionData,v)
            end
        end
    end
    
    if diffId == 1 then
        if table.count(sectionData) == 0 then table.insert(sectionData,Z_StorySection[101]) end
    elseif diffId == 2  then
        if self.completed_sectionId_1 == self.maxSection and table.count(sectionData) == 0 then table.insert(sectionData,Z_StorySection[101]) end
    elseif diffId == 3 then
        if self.completed_sectionId_2 == self.maxSection and table.count(sectionData) == 0 then table.insert(sectionData,Z_StorySection[101]) end
    elseif diffId == 4 then
        if self.completed_sectionId_3 == self.maxSection and table.count(sectionData) == 0 then table.insert(sectionData,Z_StorySection[101]) end
    end
    return sectionData
end


local function OnChapterSectionChg(self) --章节信息发生改变
    self:OnRefresh();
    self:UIBroadcast(UIMessageNames.UILAUNCHATK_ON_STORY_MAIN_CHG);
end

local function GetBeforeSection(SectionId)
    local count = 1;
    while(true) do
        if Z_StorySection[SectionId - count] == nil then
            return 0;
        else
            if Z_StorySection[SectionId - count].LevelId == 0 then
                count = count + 1;
            else
                return SectionId - count;
            end
        end
    end
end

local function IsMeetDiffcutyCondition(self,dif,cur_sectionId)
    local dif_1 = self.completed_sectionId_1;
    local dif_2 = self.completed_sectionId_2;
    local dif_3 = self.completed_sectionId_3;
    local dif_4 = self.completed_sectionId_4;
    local cur_chapter_section = Z_StorySection[cur_sectionId];

    if cur_chapter_section == nil then
        return false;
    end

    if dif == 1 then
        return true;
    elseif dif == 2 then
        if cur_chapter_section.ChapterId == 1 then --如果是第一章的第一节 需要判断此章的难度1是否推完
            if dif_1 >= GetMaxSectionId(cur_chapter_section.ChapterId) then
                if cur_chapter_section.Id <= GetMinSectionId(cur_chapter_section.ChapterId) then 
                    return true;
                else
                    if dif_2 >= (cur_chapter_section.Id -1) then
                        return true;
                    end
                end
                return false
            end
            return false
        else
            if cur_chapter_section.Id == GetMinSectionId(cur_chapter_section.ChapterId) then --第一关
                if dif_2 >= GetMaxSectionId(cur_chapter_section.ChapterId - 1) then --前一章难度二打完
                    return true;
                end
                return false;
            else  --不是第一关
                if dif_2 >= GetBeforeSection(cur_chapter_section.Id) then --判断前一关难度二是否打完
                    return true;
                end
                return false;
            end
        end
    elseif dif == 3 then
        if cur_chapter_section.ChapterId == 1 then --如果是第一章的第一节 需要判断此章的难度1是否推完
            if dif_2 >= GetMaxSectionId(cur_chapter_section.ChapterId) then
                if cur_chapter_section.Id <= GetMinSectionId(cur_chapter_section.ChapterId) then
                    return true;
                else
                    if dif_3 >= (cur_chapter_section.Id -1) then
                        return true;
                    end
                end
                return false
            end
            return false
        else
            if cur_chapter_section.Id == GetMinSectionId(cur_chapter_section.ChapterId) then
                if dif_3 >= GetMaxSectionId(cur_chapter_section.ChapterId - 1) then
                    return true;
                end
                return false;
            else
                if dif_3 >= GetBeforeSection(cur_chapter_section.Id) then
                    return true;
                end
                return false;
            end
        end
    elseif dif == 4 then
        if cur_chapter_section.ChapterId == 1 then --如果是第一章的第一节 需要判断此章的难度1是否推完
            if dif_3 >= GetMaxSectionId(cur_chapter_section.ChapterId) then
                if cur_chapter_section.Id <= GetMinSectionId(cur_chapter_section.ChapterId) then
                    return true;
                else
                    if dif_4 >= (cur_chapter_section.Id -1) then
                        return true;
                    end
                end
                return false
            end
            return false
        else
            if cur_chapter_section.Id == GetMinSectionId(cur_chapter_section.ChapterId) then
                if dif_4 >= GetMaxSectionId(cur_chapter_section.ChapterId - 1) then
                    return true;
                end
                return false;
            else
                if dif_4 >= GetBeforeSection(cur_chapter_section.Id) then
                    return true;
                end
                return false;
            end
        end
    end
end

local function GetSelectData(self,sectionId)
    local data_tab = {};
    data_tab[1] = IsMeetDiffcutyCondition(self,1,sectionId);
    data_tab[2] = IsMeetDiffcutyCondition(self,2,sectionId);
    data_tab[3] = IsMeetDiffcutyCondition(self,3,sectionId);
    return data_tab;
end

local function OnRefresh(self)
    local storyComponent = Game.Scene.Player:GetComponent("StoryComponent");
    local chapterId = ClientData:GetInstance().CurChapterId
    local completed_sections = storyComponent:GetCompletedSection(chapterId, self.levelType)
    self.completed_sectionId_1 = completed_sections[1]
    self.completed_sectionId_2 = completed_sections[2]
    self.completed_sectionId_3 = completed_sections[3]
    self.completed_sectionId_4 = completed_sections[4]
end


local function OnSectionChg(self)
    self.cur_completed_sectionId = UIData.cur_section_id;
    local diff = ClientData:GetInstance().SectionDifficulty;
    local id;
    for i = diff,1,-1 do
        if IsMeetDiffcutyCondition(self,i) then
            id = i;
            break
        end
    end
    self:UIBroadcast(UIMessageNames.UILAUNCHATK_ON_STORY_DIFFCULTY_CHG,id)
end


local function OnReadyClose(self)
    self:UIBroadcast(UIMessageNames.LAUNCHATK_BLUR)
end

local function OnLaunchOpen(self)
    self:UIBroadcast(UIMessageNames.ON_LAUNCH_OPEN)
end

local function OnAddListener(self)
    base.OnAddListener(self);
    self:AddDataListener(DataMessageNames.LAUNCHATK_BLUR,OnReadyClose)
    self:AddDataListener(DataMessageNames.ON_MAIN_STORY_CHG,OnChapterSectionChg);
   -- self:AddDataListener(DataMessageNames.ON_STORY_DIFFCULTY_CHG,OnDiffCultyChg);
    self:AddDataListener(DataMessageNames.ON_STORY_SECTION_CHG,OnSectionChg)
    self:AddDataListener(DataMessageNames.ON_LAUNCH_OPEN,OnLaunchOpen)
end

local function OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveDataListener(DataMessageNames.LAUNCHATK_BLUR)
    self:RemoveDataListener(DataMessageNames.ON_MAIN_STORY_CHG);
   -- self:RemoveDataListener(DataMessageNames.ON_STORY_DIFFCULTY_CHG);
    self:RemoveDataListener(DataMessageNames.ON_STORY_SECTION_CHG)
    self:RemoveDataListener(DataMessageNames.ON_LAUNCH_OPEN)
end

local function OnDisable(self)
    base.OnDisable(self);
    self.completed_sectionId_1 = nil;
    self.completed_sectionId_2 = nil;
    self.completed_sectionId_3 = nil;
    self.completed_sectionId_4 = nil;
    self.chapter_section_data = nil;
end

local function OnDestroy(self)
    base.OnDestroy(self);
end

UILaunchAtkModel.GetSelectData = GetSelectData
UILaunchAtkModel.OnCreate = OnCreate
UILaunchAtkModel.OnEnable = OnEnable
UILaunchAtkModel.OnRefresh = OnRefresh
UILaunchAtkModel.OnAddListener = OnAddListener
UILaunchAtkModel.OnRemoveListener = OnRemoveListener
UILaunchAtkModel.OnDisable = OnDisable
UILaunchAtkModel.OnDestroy = OnDestroy

return UILaunchAtkModel