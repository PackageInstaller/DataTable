---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2020/4/7 15:20
---
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UILaunchAtkView = BaseClass("UILaunchAtkView",UIBaseView);
local base = UIBaseView
local this = UILaunchAtkView

local rootPfbName = "StorySectionRootItem"

local color1 = "<color=#DBEDF9>"
local color2 = "<color=#B9D5E7>"

local size1 = "<size=48>"
local size2 = "<size=39>"

local isBusing = false

local LevelExcel = {
    Z_StorySection,
    Z_GameEventsLevel,
}

local chapterId = 1
local chapterList = {}

local function IsCompleteCondition(self,levelId)
    local diff = self.clientData.CurLevelDifficulty
    local curLevelId = levelId or self.clientData["CurLevelId_"..diff]
    local StoryLevelScores = Game.Scene.Player:GetComponent("StoryComponent"):GetLevelScores(self.clientData.CurChapterId)
    if StoryLevelScores[curLevelId] == nil then return {} end
    local levelStory = StoryLevelScores[curLevelId]
    return {levelStory.IsReachRewardCond1,levelStory.IsReachRewardCond2, levelStory.IsReachRewardCond3}
end

--============================弹窗===========================================

local function OnClickSection(self,id)
    if id == nil then
        return
    end
    if self.model.levelExcel[id] == nil then
        Logger.LogError("Z_StorySection or Z_GameEventsLevel no id:" .. id)
        return
    end
    
    if self.model.mode == 1 then  --图鉴模式 
        local zStorySection = self.model.levelExcel[id]
        Game.Scene:GetComponent("DialogComponent"):OpenDialogOnly(zStorySection.ChapterId, zStorySection.StoryId,function()
            Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"HandBook")
        end)
    else
        local storyInfo = self.clientData:GetStoryRecord(self.clientData.CurChapterId)
        local diff = storyInfo.Difficulty
        self.clientData:SetStoryRecord(storyInfo.ChapterId,id,diff)
        if self.model.levelExcel[id].LevelId == 0 then
            local data = {}
            data.StoryScript = self.model.levelExcel[id].StoryScript
            data.Id = id
            data.StoryId = self.model.levelExcel[id].StoryId
            self.ctrl:PlaySectionStory(data,diff);
            return
        end

        self.againstComponent.CurLevelId = self.model.levelExcel[id].LevelId
        self.againstComponent.SectionId =  id
        --local battleData = {}
        --battleData.LevelType = LevelType.LevelTypeStory
        --battleData.CurLevelId = id
        --battleData.CurLevelDifficulty = diff
        --self.againstComponent:SetCurLevel(battleData)
        local info ={levelId = id, levelTypeId = self.model.levelType}

        coroutine.start(function()
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIStorySectionInfo, info)
        end)
    end
end

function this.AutoClickSection(self, id)
    OnClickSection(self, id)
end

local function ActivePageView(self,_bool)
    self.pageView = self.scrollView:GetComponent("PageView")
    if not IsNull(self.pageView) then
        CS.UnityEngine.GameObject.Destroy(self.pageView)
    end
    if _bool then
        self.pageView = self.scrollView:AddComponent(typeof(CS.PageView))
        self.pageView.sensitivity = 1
    end
end

local function InitPageButton(self)
    self.pageCtrl.gameObject:SetActive(self.maxPageNum ~= 0)
    if self.maxPageNum == 0 then 
        return 
    end
    self.leftBtn:SetActive(true)
    self.rightBtn:SetActive(true)

    if self.pageNum == self.maxPageNum then
        self.rightBtn:SetActive(false)
    elseif self.pageNum == 0 then
        self.leftBtn:SetActive(false)
    end
end

local function SetLabels(self)
    if self.maxPageNum == 0 then return end
    for k,v in table.pairsByKeys(self.labels) do
        local _bool = (k == self.pageNum + 1)
        v.transform:Find("Active").gameObject:SetActive(_bool)
        v.transform:Find("DeActive").gameObject:SetActive(not _bool)
    end
    self.pageCount.text = self.pageNum + 1
end


local function SetPageIndex(self)
    self.isPaging = true
    local sections = table.choose(self.model.levelExcel,function(k,v)return v.ChapterId == self.clientData.CurChapterId  end)
    table.sort(sections,function(a,b) return a.Id < b.Id  end)
    local sectionIds = {}
    for key, value in pairs(sections) do
        table.insert(sectionIds, value.Id)
    end
    table.sort(sectionIds)
    local firstScetionId = sectionIds[(self.pageNum) * 5 + 1]
    local minId = table.first(sections).Id
    local bgId = self.pageNum % 4 + 1 --+ minId
    self.bg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/LaunchAtkBg/"..sections[firstScetionId].Bg ..".jpg")
    self.scrollView:GetComponent("ScrollRect").horizontal = true
    coroutine.waitforframes(1)
    InitPageButton(self)
    SetLabels(self)
    self.pageView:pageTo(self.pageNum)
    coroutine.start(function ()
        coroutine.waitforframes(2)
        self.scrollView:GetComponent("ScrollRect").horizontal = false
        self.isPaging = false
    end)
end

local function OnClickLeft(self)
    if self.isPaging then
        return
    end
    self.pageNum = self.pageNum - 1
    coroutine.start(function ()
        SetPageIndex(self)
    end)
end

local function OnClickRight(self)
    if self.isPaging then
        return
    end
    self.pageNum = self.pageNum + 1
    coroutine.start(function ()
        SetPageIndex(self)
    end)
end



local function InitLabels(self)
    for k,v in table.pairsByKeys(self.labels) do
        v.gameObject:SetActive(self.maxPageNum + 1 >= k)
    end
end


local function InitSectionItem(self,sectionId,transform,isActive)
    local panel = transform:Find("Panel"):GetComponent("Image")
    local panelActive = transform:Find("Panel/Active"):GetComponent("Image")
    local title = transform:Find("Panel/TitleText"):GetComponent("Text")--LangUtil.BindText(transform:Find("Panel/TitleText"))
    local subTitle = LangUtil.BindText(transform:Find("Panel/SubTitleText"))
    local star = transform:Find("Panel/Star").transform
    LangUtil.BindText(transform:Find("Panel/IsStory/Text")).text = LangUtil.GetSysLang(124)
    local isStory = transform:Find("Panel/IsStory").gameObject
    local iconFrame = transform:Find("Icon/Frame"):GetComponent("Image")
    local icon =  transform:Find("Icon/Mask/Value"):GetComponent("Image")
    local lock = transform:Find("Icon/Lock").gameObject
    local zStorySection = self.model.levelExcel[sectionId]
    if zStorySection == nil then
        return
    end

    isStory:SetActive(zStorySection.LevelId == 0)
    star.gameObject:SetActive(zStorySection.LevelId ~= 0)

    if self.model.mode == 1 then -- 图鉴模式
        isStory:SetActive(false)
        star.gameObject:SetActive(false)
    end

    UIUtil.SetCardSprite(icon,zStorySection.IconId,zStorySection.IconStage, CardPictureType.Little,true)

    title.text = isActive and zStorySection.Name or "？？？"
    subTitle.text = zStorySection.LevelTitle
    local completes = IsCompleteCondition(self,sectionId)
    if isActive  then
        transform:GetComponent("Button").enabled = true
        UIUtil.AddBtnEventNoBug(transform.gameObject,function()
            local bindData = transform.gameObject:GetComponent("BindData")
            sectionId = bindData:Get("sectionId")
            local active = bindData:Get("active")
            if not active then
                return
            end
            OnClickSection(self, sectionId)
        end)
        lock:SetActive(false)
        panelActive.gameObject:SetActive(true)
        --title.color = Color.New(1,1,1,1);
        panel.material = nil
        iconFrame.material = nil
        icon.material = nil
        local count = table.count(completes)

        for i = 0,star.childCount - 1 do
            local child = star:GetChild(i):GetComponent("Image")
            if count > i then
                child.material = nil
            else
                child.material = DeActiveMat
            end
        end
    else
        lock:SetActive(true)
        transform:GetComponent("Button").enabled = true
        UIUtil.AddBtnEventNoBug(transform.gameObject, function() 
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(914))--"上一关卡通关后解锁"
        end)
        panelActive.gameObject:SetActive(false)
        --title.color = Color.New(157/255,158/255,158/255,1);
        panel.material = DeActiveMat
        iconFrame.material = DeActiveMat
        icon.material = DeActiveMat
        for i = 0,star.childCount - 1 do
            local child = star:GetChild(i):GetComponent("Image")
            child.material = DeActiveMat
        end
    end
end

local function InitContent(self)
    self.roots = {}
    self:Clear()
    ActivePageView(self,false)

    local storyInfo = self.clientData:GetStoryRecord(self.clientData.CurChapterId)
    -- 图鉴模式和剧情模式
    local diff = self.model.mode == 1 and 1 or storyInfo.Difficulty

    local storyComponent = self.player:GetComponent("StoryComponent")
    local chapterId = self.clientData.CurChapterId
    local completeIds = storyComponent:GetCompletedSection(chapterId, self.model.levelType)

    local lastSectionId = 0

    for _, levelInfo in pairs(self.model.levelExcel) do
        if levelInfo.ChapterId == chapterId and levelInfo.Difficulty == 1 then
            if lastSectionId < levelInfo.Id then
                lastSectionId = levelInfo.Id
            end
        end
    end

    if diff ~= 1 then --老号登录难度显示BUG相关逻辑
        if completeIds[1] ~= lastSectionId then
            if completeIds[diff] == 0 then
                diff = 1
                self.clientData:SetStoryRecord(self.clientData.CurChapterId,nil,1)
            end
        end
    end

    local completeId = completeIds[diff]
    local sections = {}
    if self.model.mode == 1 then -- 图鉴模式
        sections = table.choose(self.model.levelExcel,function(k, v) return v.ChapterId == chapterId and not string.IsNullOrEmpty(v.StoryId) and v.Difficulty == diff end)
    else
        sections = table.choose(self.model.levelExcel,function(k, v) return v.ChapterId == chapterId and v.Difficulty == diff end)
    end
    table.sort(sections,function(a, b) return a.Id < b.Id  end)
    -- local minId = table.first(sections).Id
    -- for k, v in pairs(sections) do
    --     if v.Id <= minId then minId = v.Id end
    -- end

    local minId = 1--table.first(sections).Id
    -- 每页最大显示数量
    local maxShow = 5
    -- 没有该章节记录
    if completeId == 0 then completeId = minId - 1 end
    -- 解锁个数
    local itemCount = 0
    local curIndex = 0
    for index, value in ipairs(chapterList[diff]) do
        if value.ChapterId == chapterId then
            curIndex = curIndex + 1
            if value.Id == completeId then
                itemCount = curIndex
            end
        end
    end
    --completeId - minId + 1
    -- 图鉴模式去掉无剧情关卡
    if self.model.mode == 1 then -- 图鉴模式
        local unStory = table.choose(self.model.levelExcel, function(k, v) return v.ChapterId == chapterId and string.IsNullOrEmpty(v.StoryId) and v.Id <= completeId end)
        itemCount = itemCount - table.count(unStory)
    end
    -- 父节点个数
    local rootCount = math.floor(itemCount / maxShow) + 1
    -- 最大页数限制
    local maxPage = math.ceil(table.count(sections) / maxShow)
    if rootCount > maxPage then rootCount = maxPage end
    self.maxPageNum = rootCount - 1
    -- 当前关卡解锁 下一关卡开放
    local showCount = itemCount + 1
    
    self.pageCtrl.gameObject:SetActive(false)

    local sectionIds = {}
    for key, value in pairs(sections) do
        table.insert(sectionIds, value.Id)
    end
    table.sort(sectionIds)

    --self.content.gameObject:SetActive(false)
    coroutine.start(function()
        -- 创建父节点
        for i = 1, rootCount do  
            ListChildPool:GetInstance():GetChild(rootPfbName,self.content,function(gameObject)
                local root = gameObject.transform
                self.roots[i] = root
            end)
        end
        -- 创建解锁和未解锁的话
        local unStoryNum = 0 -- 图鉴模式，无剧情关卡数量
        for i = 1, rootCount * maxShow do
            local count = math.ceil(i / maxShow)
            local index = (i - 1) % maxShow
            local parent = self.roots[count]
            local gameObject = parent:GetChild(index).gameObject
            if i > table.count(sections) then
                gameObject:SetActive(false)
            else
                if sectionIds[minId - 1 + i] ~= nil then
                    local sectionId = sectionIds[minId - 1 + i]
                    if self.model.mode == 1 then -- 图鉴模式，遇到无剧情关卡跳过
                        sectionId = sectionId + unStoryNum
                        if string.IsNullOrEmpty(self.model.levelExcel[sectionId].StoryId) then
                            unStoryNum = unStoryNum + 1
                            sectionId = sectionId + unStoryNum
                        end
                    end
                    gameObject:SetActive(true)
                    local bindData1 = UIUtil.GetButtonDataComponent(gameObject)
                    bindData1:Add("sectionId", sectionId)
                    bindData1:Add("active", i <= showCount)
                    if self.model.mode == 1 then
                        InitSectionItem(self, sectionId, gameObject.transform, i <= showCount - 1)
                    else
                        InitSectionItem(self, sectionId, gameObject.transform, i <= showCount)
                    end
                    if sectionId == self.sectionId then
                        self.pageNum = self.model.mode == 1 and 0 or count - 1
                    end
                else
                    gameObject:SetActive(false)
                end
            end
        end
        self.scrollView:GetComponent("ScrollRect").horizontal = true
        ActivePageView(self,true)
        self.scrollView:GetComponent("ScrollRect").horizontal = false
        InitLabels(self)
        InitPageButton(self)
        SetLabels(self)
        SetPageIndex(self)
    end)
end

local function GetChapterDiff(self,chapterId)
    local diff = 1

    local storyComponent = self.player:GetComponent("StoryComponent")

    if storyComponent.StoryChapters[self.model.levelType] == nil then
        return diff
    end

    if storyComponent.StoryChapters[self.model.levelType].CompletedSections[chapterId] == nil then
        return diff
    end

    local passLevelList = storyComponent.StoryChapters[self.model.levelType].CompletedSections[chapterId].StoryLevelScoreInfoList
    local alreadyPassList = {}
    for _, value in pairs(passLevelList) do
        alreadyPassList[value.id] = value
    end

    for _, levelInfo in pairs(self.model.levelExcel) do
        local unlockInfo = alreadyPassList[levelInfo.UnlockCondition]
        if unlockInfo ~= nil then
            if levelInfo.Difficulty > diff then
                diff = levelInfo.Difficulty
            end
        end
    end

    return diff
end


local function OnDiffButton(self,id)
    self.clientData:SetStoryRecord(self.clientData.CurChapterId,nil,id)
    self:OnRefresh()
end

local function InitDiffCtrl(self)
    local maxDiff =  GetChapterDiff(self, self.clientData.CurChapterId)
    local diff = self.clientData:GetStoryRecord(self.clientData.CurChapterId).Difficulty
    for k,v in table.pairsByKeys(self.diffList) do
        local transform = v.transform
        if maxDiff >= k then
            transform:GetComponent("Button").enabled = true
            transform:Find("Lock").gameObject:SetActive(false)
        else
            transform:GetComponent("Button").enabled = false
            transform:Find("Lock").gameObject:SetActive(true)
        end
        transform:Find("Active").gameObject:SetActive(k == diff)
    end


    local diffCount = 0
    for i = 0, 3 do
        local isOn = false
        for index, value in ipairs(chapterList[i + 1]) do
            if value.ChapterId == self.clientData.CurChapterId then
                isOn = true
                diffCount = diffCount + 1
                break
            end
        end
        self.diffCtrl:Find("Select"):GetChild(i).gameObject:SetActive(isOn)
    end

    if self.model.mode == 1 then  --图鉴模式
        self.diffCtrl.gameObject:SetActive(false)
    else
        self.diffCtrl.gameObject:SetActive(diffCount > 1)
    end

end

function this.InitChapterList()
    for i = 1, 4 do --初始化章节列表 难度
        local curDiffLevelList = {}
        for index, excel in pairs(LevelExcel) do
            for _, levelInfo in pairs(excel) do
                if levelInfo.Difficulty == i then
                    table.insert(curDiffLevelList, levelInfo)
                end
            end
        end
        table.sort(curDiffLevelList, function(a, b) return a.Id < b.Id end)
        chapterList[i] = curDiffLevelList
    end
end

function this.OnLangCreate(self)
    local root =  self.langRc:GetObject("Select").transform
    for i = 0, root.childCount-1 do
        LangUtil.GetSpriteLang(112+(i*2),function(sprite)
            root:GetChild(i):GetComponent("Image").sprite = sprite
        end)
        LangUtil.GetSpriteLang(113+(i*2),function(sprite)
            root:GetChild(i):GetChild(0):GetComponent("Image").sprite = sprite
        end)
    end

    local pageCtrl = self.langRc:GetObject("PageCtrl").transform
    local a = self.langRc:GetObject("CurDiffTextRoot").transform
    LangUtil.BindText(self.langRc:GetObject("CurDiffTextRoot").transform:Find("Text")).text= LangUtil.GetSysLang(121)
    LangUtil.BindText(pageCtrl:Find("LeftBtn/Text")).text= LangUtil.GetSysLang(122)
    LangUtil.BindText(pageCtrl:Find("RightBtn/Text")).text= LangUtil.GetSysLang(123)

    self.pageCount = LangUtil.BindText(pageCtrl:Find("Text"))
    --self.title = LangUtil.BindText(self.langRc:GetObject("Title").transform:Find("Text"))
    --LangUtil.BindText(self.rc:GetObject("ReturnButton").transform:Find("Text")).text = LangUtil.GetSysLang(99)
end


function this.OnCreate(self)
    base.OnCreate(self)
    self.bg = self.rc:GetObject("Bg"):GetComponent("Image")
    self.backBtn = self.rc:GetObject("ReturnButton")
    local homeBtn = self.rc:GetObject("HomeButton")
    self.content = self.rc:GetObject("Content")
    self.scrollView = self.rc:GetObject("Scroll View")
    self.pageCtrl = self.rc:GetObject("PageCtrl").transform
    self.leftBtn = self.pageCtrl:Find("LeftBtn").gameObject
    self.rightBtn = self.pageCtrl:Find("RightBtn").gameObject
    local diffCtrl = self.rc:GetObject("DiffCtrl").transform
    self.diffCtrl = diffCtrl
    local selectRoot = diffCtrl:Find("Select")
    self.diffList = {}
    for i = 0,selectRoot.childCount - 1 do
        local btn = selectRoot:GetChild(i).gameObject
        self.diffList[i+1] = btn
        UIUtil.AddBtnEvent(btn,function()OnDiffButton(self,i+1)  end)
    end
    
    self.isPaging = false
    self.pageNum = 0
    self.maxPageNum = 0

    local labelRoot = self.pageCtrl:Find("LabelList")
    self.labels = {}
    for i = 0,labelRoot.childCount - 1 do
        self.labels[i+1] = labelRoot:GetChild(i).gameObject
    end

    UIUtil.AddBtnEvent(self.leftBtn,function ()OnClickLeft(self) end)
    UIUtil.AddBtnEvent(self.rightBtn,function ()OnClickRight(self) end)
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UILaunchAtk
    )
    UIUtil.AddBtnEvent(homeBtn,function()
        UIManager:GetInstance():CloseWindowByStackExcept(UIWindowNames.UIHome)
    end, "Back")

    this.InitChapterList()
end

function this.OnEnable(self)
    base.OnEnable(self)

        -- 背景得先加载了   不然穿帮了
        local sections = table.choose(self.model.levelExcel,function(k,v)return v.ChapterId == self.model.chapterId  end)
        table.sort(sections,function(a,b) return a.Id < b.Id  end)
        local minId = table.first(sections).Id
        self.bg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/LaunchAtkBg/"..self.model.levelExcel[minId].Bg..".jpg")
    
    isBusing = false
    self:OnRefresh()
end

function this.OnRefresh(self)
    self.pageNum = 0
    self.maxPageNum = 0
    self.clientData = ClientData:GetInstance()

    self.player = Game.Scene.Player
    self.againstComponent = Game.Scene:GetComponent("AgainstComponent")
    local zStoryChapter = table.first(Z_StoryChapter, function (v) return v.ChapterId == self.clientData.CurChapterId end) 
    --self.title.text =  size1..color1.. zStoryChapter.Name.."</color></size>  "..size2..color2..zStoryChapter.Title.."</color></size>"
    UIPublic.SetBackButtonText(self.backBtn.transform:Find("TextImage"):GetComponent("Image"), zStoryChapter.TitleImageKey)
    
    local storyInfo = self.clientData:GetStoryRecord(self.clientData.CurChapterId)
    self.sectionId = storyInfo.SectionId[storyInfo.Difficulty]
    InitContent(self)
    InitDiffCtrl(self)
    if self.model.isOpenDetail then
        OnClickSection(self, self.model.openId)
        self.model.isOpenDetail = false
        self.model.openId = nil
    end
end

function this.Clear(self)
    ListChildPool:GetInstance():ClearContent(self.content)
    self.roots = {}
end

local function OnStoryChg(self)
    self:Clear()
    self:OnRefresh()
end

--新手引导
local function ON_Guide_Click(self,cid,num,isrun,minStep)
    if cid==5 and isrun then
        if num==5 and minStep==1 then
            OnClickSection(self,101)
        end
        --if num==6then
        --    --OnClickSection(self,101)
        --    local zStorySection = self.model.levelExcel[101]
        --    Game.Scene:GetComponent("DialogComponent"):OpenDialog(zStorySection.ChapterId, zStorySection.StoryId, StoryMode.BattleBefore, function()
        --        self.ctrl:SendCustoms(101, 1)
        --    end, false)
        --end
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.UILAUNCHATK_ON_STORY_MAIN_CHG,OnStoryChg);
    self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.UILAUNCHATK_ON_STORY_MAIN_CHG);
    self:RemoveUIListener(UIMessageNames.ON_Guide_Click);
end

function this.OnViewTop(self)
    base.OnViewTop(self)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
end

function this.OnDisable(self)
    base.OnDisable(self)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
    self:Clear()
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;

