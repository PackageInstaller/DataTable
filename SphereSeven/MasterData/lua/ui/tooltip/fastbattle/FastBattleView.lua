---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/12 17:40
---
local FastBattleView = BaseClass("FastBattleView",UIBaseView)
local base = UIBaseView
local this = FastBattleView

ModeChoose = {
    Fast = 1,
    Customize = 2,
}
local currentMode = ModeChoose.Fast

local function CreateUnit(id, posId, card)
    if id == 0 then
        return nil
    end
    local unit = {
        ["fight_soul"] = {
            ["id"] = 0,
            ["merge_level"] = 0,
            ["level"] = 0,
        },
        ["skin"] = 0,
        ["equipments"] = {
        },
        ["character_id"] = 0,
        ["star"] = 1,
        ["skills"] = {
            ["ultimate"] = 0,
            ["skill"] = 0,
            ["attack"] = 0,
            ["passive_skill"] = 0,
        },
        ["level"] = 1,
        ["formation_postion"] = posId,
        ["intimacy"] = 0,
        ["constellation"] = 0,
        ["bead"] = 0,
    }
    unit.character_id = id
    if card == nil then
        unit["skin"] = id * 100 + 1
        unit["skills"]["passive_skill"] = id * 10 + 4
        unit["skills"]["ultimate"] = id * 10 + 3
        unit["skills"]["skill"] = id * 10 + 2
        unit["skills"]["attack"] = id * 10 + 1
    else
        unit["skin"] = card.Skin
        unit["skills"]["ultimate"] = card.Skills.ultimate
        unit["skills"]["skill"] = card.Skills.skill
        unit["skills"]["attack"] = card.Skills.attack
        unit["skills"]["passive_skill"] = card.Skills.passive_skill
        unit["level"] = card.Level
        unit["star"] = card.Star
        unit["intimacy"] = card.Intimacy
        unit["constellation"] = card.Constellation
        unit["bead"] = card.Bead

        local cardEquipComponent = card:GetComponent("CardEquipComponent")
        local equips = {
            [EquipmentSlot.EquipmentSlotMainHand] = cardEquipComponent.Hand1Equip, 
            [EquipmentSlot.EquipmentSlotSecondaryWeapon] = cardEquipComponent.Hand2Equip, 
            [EquipmentSlot.EquipmentSlotBody] = cardEquipComponent.BodyEquip, 
            [EquipmentSlot.EquipmentSlotHead] = cardEquipComponent.HeadEquip, 
            [EquipmentSlot.EquipmentSlotFoot] = cardEquipComponent.FootEquip, 
            [EquipmentSlot.EquipmentSlotAccessory] = cardEquipComponent.AdornEquip, 
        }

        for slot, equipment in pairs(equips) do
            if equipment ~= nil then
                table.insert(unit.equipments, 
                {
                    id = equipment.TemplateId,
                    level = equipment.Level,
                    slot = slot,
                })
            end
            
        end
    end
    return unit
end

local function LaunchCustomizeBattle(characterIdList, enemyIdList)
    LevelType.LevelTypeTest = 999
    local againstComponent = Game.Scene:GetComponent("AgainstComponent")
    againstComponent.LevelType = LevelType.LevelTypeTest

    local units = {}
    for i, characterId in ipairs(characterIdList) do
        if characterId ~= 0 then
            local card = Game.Scene.Player:GetComponent("CardComponent"):Get(characterId)
            local unit = CreateUnit(characterId, i, card)
            table.insert(units, unit)
        end
    end

    againstComponent.PlayerFormation = {}
    againstComponent.PlayerFormation.units = units
    againstComponent.TestBattleData = {}
    againstComponent.TestBattleData.BattleLevel = {
        Id = 99999999,
        Batch1 = 99999999,
        Batch2 = 0,
        Batch3 = 0,
        Bgm = "1",
    }

    Z_MonsterBatch[99999999] = {
        Id = 99999999,
        Monster1 = enemyIdList[1],
        Monster2 = enemyIdList[2],
        Monster3 = enemyIdList[3],
        Monster4 = enemyIdList[4],
        Monster5 = enemyIdList[5],
        Monster6 = enemyIdList[6],
    }
    Game.Scene.SceneComponent:SwitchScene(SceneConfig.BattleScene)
end

local function LaunchFastBattle(battleLevelId, formationId)
    LevelType.LevelTypeTest = 999
    local againstComponent = Game.Scene:GetComponent("AgainstComponent")
    againstComponent.LevelType = LevelType.LevelTypeTest

    local team = Game.Scene.Player:GetComponent("TeamComponent"):Get(formationId)
    local units = {}
    local unitList = {}
    for i, characterId in ipairs(team.cardIds) do
        if characterId ~= 0 then
            local card = Game.Scene.Player:GetComponent("CardComponent"):Get(characterId)
            local unit = CreateUnit(characterId, i, card)
            table.insert(units, unit)
            unitList[i] = unit
        end
    end
    for i, fightSoulId in ipairs(team.fightSoulIds) do
        if fightSoulId ~= 0 then
            local fightSoul = Game.Scene.Player:GetComponent("FightSoulComponent"):Get(fightSoulId)
            local unit = unitList[i]
            unit.fight_soul.id = fightSoul.TemplateId
            unit.fight_soul.level = fightSoul.level
            unit.fight_soul.merge_level = fightSoul.Star
        end
    end

    againstComponent.PlayerFormation = {}
    againstComponent.PlayerFormation.units = units
    againstComponent.TestBattleData = {}
    againstComponent.TestBattleData.BattleLevel = Z_BattleLevel[battleLevelId]

    Game.Scene.SceneComponent:SwitchScene(SceneConfig.BattleScene)
end

local function OnClickConfirmButton(self)
    self.ctrl.CloseSelf()
    if currentMode == ModeChoose.Customize then
        local enemyIdList = {}
        local characterIdList = {}

        for i = 1, 6 do
            local item = self.Enemy.transform:GetChild(i - 1)
            if item ~= nil then
                local enemyIdField = item:GetComponent("InputField")
                local enemyId = 0
                if enemyIdField.text ~= "" then
                    enemyId = tonumber(enemyIdField.text)
                end                
                table.insert(enemyIdList, enemyId)
            end
        end

        for i = 1, 6 do
            local item = self.Player.transform:GetChild(i - 1)
            if item ~= nil then
                local chatacterIdField = item:GetComponent("InputField")
                local characterId = 0
                if chatacterIdField.text ~= "" then
                    characterId = tonumber(chatacterIdField.text)
                end
                table.insert(characterIdList, characterId)
            end
        end

        LaunchCustomizeBattle(characterIdList, enemyIdList)
    elseif currentMode == ModeChoose.Fast then
        local battleLevelId = self.battleIdList[self.BattleLevelIdDropdown:GetComponent(typeof(CS.TMPro.TMP_Dropdown)).value + 1]
        local formationId = self.FormationDropdown:GetComponent(typeof(CS.TMPro.TMP_Dropdown)).value + 1
        LaunchFastBattle(battleLevelId, formationId)
    end
end

local function OnClickCancelButton(self)
    self.ctrl.CloseSelf()
end

function this.InitBattleLevel(self)
    self.battleIdList = {}
    for _, value in pairs(Z_BattleLevel) do
        table.insert(self.battleIdList, value.Id)
    end

    table.sort(self.battleIdList, function(a, b)
        return a < b
    end)

    local dropdown = self.BattleLevelIdDropdown:GetComponent(typeof(CS.TMPro.TMP_Dropdown))
    dropdown.options:Clear()
    for i, battleId in ipairs(self.battleIdList) do
        local option = CS.TMPro.TMP_Dropdown.OptionData()
        option.text = battleId
        dropdown.options:Add(option)
    end

    local dropdown = self.FormationDropdown:GetComponent(typeof(CS.TMPro.TMP_Dropdown))
    for i = 1, 8 do
        local option = CS.TMPro.TMP_Dropdown.OptionData()
        option.text = i
        dropdown.options:Add(option)
    end
end

function this.OnCreate(self)
    base.OnCreate(self)
    self.ConfirmButton = self.rc:GetObject("ConfirmButton")
    self.CancelButton = self.rc:GetObject("CancelButton")
    self.Player = self.rc:GetObject("Player")
    self.Enemy = self.rc:GetObject("Enemy")
    self.CustomizeStart = self.rc:GetObject("CustomizeStart")
    self.FastStart = self.rc:GetObject("FastStart")
    self.FastStartButton = self.rc:GetObject("FastStartButton")
    self.CustomizeStartButton = self.rc:GetObject("CustomizeStartButton")
    self.BattleLevelIdDropdown = self.rc:GetObject("BattleLevelIdDropdown")
    self.FormationDropdown = self.rc:GetObject("FormationDropdown")
    self.DefaultPlayer = self.rc:GetObject("DefaultPlayer")
    self.DefaultEnemy = self.rc:GetObject("DefaultEnemy")

    UIUtil.AddBtnEvent(self.CancelButton,function() OnClickCancelButton(self) end)
    UIUtil.AddBtnEvent(self.ConfirmButton,function()OnClickConfirmButton(self) end)

    UIUtil.AddBtnEvent(self.FastStartButton,function()
        self.FastStart:SetActive(true)
        self.CustomizeStart:SetActive(false)
        self.FastStartButton.transform:Find("Active").gameObject:SetActive(true)
        self.CustomizeStartButton.transform:Find("Active").gameObject:SetActive(false)
        currentMode = ModeChoose.Fast
    end)

    UIUtil.AddBtnEvent(self.CustomizeStartButton,function()
        self.FastStart:SetActive(false)
        self.CustomizeStart:SetActive(true)
        self.FastStartButton.transform:Find("Active").gameObject:SetActive(false)
        self.CustomizeStartButton.transform:Find("Active").gameObject:SetActive(true)
        currentMode = ModeChoose.Customize
    end)
    this.InitBattleLevel(self)

    UIUtil.AddBtnEvent(self.DefaultEnemy,function()
        local item = self.Enemy.transform:GetChild(1)
        local enemyIdField = item:GetComponent("InputField")
        enemyIdField.text = "1101"
    end)

    UIUtil.AddBtnEvent(self.DefaultPlayer,function()
        local item = self.Player.transform:GetChild(1)
        local chatacterIdField = item:GetComponent("InputField")
        chatacterIdField.text = "1001"
    end)
end

function this.OnLangCreate(self)

end

function this.OnEnable(self)
    base.OnEnable(self)
    --this.InitBattleLevel(self)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

