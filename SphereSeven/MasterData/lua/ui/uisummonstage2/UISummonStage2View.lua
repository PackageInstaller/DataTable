---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UISummonStage2View
---@field model UISummonStage2Model
---@field resultList {reward:protocol.Reward, rewardResult:protocol.RewardResult[], isNew:boolean}[]
local UISummonStage2View = BaseClass("UISummonStage2View",UIBaseView);
local base = UIBaseView
local this = UISummonStage2View


local cardPfbName = "CardItemNew_SummonStage2"
local fightSoulPfbName = "FightVisitItem_SummonStage2"
local effectNames = {"CardWhite","CardPurple","CardOrange","CardGold"}

---@param result {reward:protocol.Reward, rewardResult:protocol.RewardResult[], isNew:boolean}
local function InitCardItem(self,result,transform)
    --transform.gameObject:SetActive(false)
    -- local light= transform:Find("light"):GetComponent("Image")
    local cardInfo = transform:Find("CardInfo").gameObject
    -- local isRoom = transform:Find("CardInfo/other/IsRoom").gameObject
    -- local isHome = transform:Find("CardInfo/other/IsHome").gameObject
    -- local isSupport = transform:Find("CardInfo/other/IsSupport").gameObject
    local new = cardInfo.transform:Find("New").gameObject
    -- cardInfo:SetActive(true)
    -- isRoom:SetActive(false)
    -- isHome:SetActive(false)
    -- isSupport:SetActive(false)
    
    UIPublic.InitCardItemDataNew(Game.Registry:NewObject("Card",
    {
        id = result.reward.id,
        level = 1,
        exp = 0,
        intimacy = 0,
        bead = 0,
        constellation = 0,
        star = 1,
        skin = nil,
        skills = {},
        id = result.reward.id,
    }
    ), cardInfo)
    new:SetActive(result.isNew)

    local rc = cardInfo.transform:GetComponent("ReferenceCollector")
    local levelTxt = rc:GetObject("LevelText")
    levelTxt:SetActive(false)
    -- transform.gameObject:SetActive(true)

    UIUtil.AddBtnEventNoBug(transform, function()
        local showData ={}
        showData.tempId = result.reward.id
        showData.showType = ShowType.Card
        UIUtil.OpenThingsDetailWindow(showData)
    end)
end

---@param result {reward:protocol.Reward, rewardResult:protocol.RewardResult[], isNew:boolean}
local function InitFightSoulItem(self,result,transform)
    --transform.gameObject:SetActive(false)
    --local light= transform:Find("light"):GetComponent("Image")
    local cardInfo = transform:Find("CardInfo").transform
    local new = cardInfo:Find("New").gameObject
    UIPublic.InitVsFightSoulItem(Game.Registry:NewObject("FightSoul",
    {
        uid = nil,
        exp = 0,
        level = 1,
        isLocked = false,
        mergeLevel = 1,
        cid = result.reward.id,
    }
    ),transform)
    new:SetActive(result.isNew)
    local rc = transform:GetComponent(typeof(ReferenceCollector))
    local levelText = rc:GetObject("LevelText")
    LangUtil.BindText(levelText).text = LangUtil.GetSysLang(259)
    UIUtil.AddBtnEventNoBug(transform, function()
        local showData ={}
        showData.tempId = result.reward.id
        showData.showType = ShowType.FightSoul
        UIUtil.OpenThingsDetailWindow(showData)
    end)
end

---@param self UISummonStage2View
local function InitContent(self)
    
    coroutine.start(function()
        for k,v in ipairs(self.resultList) do
        -- for k,v in table.pairsByKeys(self.resultList) do
            self.initTime = Time.time
            local parent = k <= 6 and self.content1 or self.content2
            if table.count(self.resultList)==1 then
                parent = self.content3
            end
            local pfbName = v.reward.type == RewardType.RewardTypeFightSoul and fightSoulPfbName or cardPfbName
            ListChildPool:GetInstance():GetChild(pfbName,parent,function(gameObject)
                local cardInfo = gameObject.transform:Find("CardInfo").gameObject
                cardInfo:SetActive(false)
                local light =  gameObject.transform:Find("light")
                local rare = 0
                if v.reward.type == RewardType.RewardTypeCharacter then
                    local zCard = Z_Card[v.reward.id]
                    rare = zCard.Rare
                else
                    local zFightSoul = Z_FightSoul[v.reward.id]
                    rare = zFightSoul.Rare
                end
                ListChildPool:GetInstance():ClearContent(light)
                ListChildPool:GetInstance():GetChild(effectNames[rare],light,function()
                    if v.reward.type == RewardType.RewardTypeCharacter then
                        InitCardItem(self,v,gameObject.transform)
                        gameObject.transform.localScale = Vector2.New(0.9,0.9);
                    else
                        InitFightSoulItem(self,v,gameObject.transform)
                        gameObject.transform.localScale = Vector2.New(0.9,0.9);
                    end
                    coroutine.waitforseconds(0.1)
                    cardInfo:SetActive(true)
                end)
            end)
        end

        local rewardResults = {}
        local hasRewardResults = false
        for key, value in pairs(self.resultList) do
            for index, value in ipairs(value.rewardResult) do
                if value.type == RewardType.RewardTypeItem then
                    hasRewardResults = true
                    table.insert(rewardResults, value)
                end
            end
        end
        if self.model ~= nil and self.model.otherRewards ~= nil then
            for index, value in ipairs(self.model.otherRewards) do
                table.insert(rewardResults, 1, value)
                hasRewardResults = true
            end
        end
        if hasRewardResults then
            UIPublic.OpenRewardUI(rewardResults)
        end

        local guide=Game.Scene:GetComponent("GuideComponent")
        local GuideComplete,GuideStep, GuideRun =guide:GetCurrentData()
        if GuideRun and GuideComplete == 1 and GuideStep==4  then
            guide:NextGuide(4)
        end
    end)
end

local function OnSummon(self) --点击召唤11次
    coroutine.start(function()
        UIManager:GetInstance():DestroyWindowNoRecycle(UIWindowNames.UISummonStage2)
        UIManager:GetInstance():CloseWindow(UIWindowNames.UISummonStage1)
	    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
        coroutine.waitforframes(2)
        DataManager:GetInstance():Broadcast(DataMessageNames.ON_READY_TO_RECRUIT)
    end)
end

local function OnBack(self)
    UIManager:GetInstance():DestroyWindowNoRecycle(UIWindowNames.UISummonStage2)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UISummonStage1)
	UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

---@param RecruitResultList protocol.RewardDetail[]
local function GetResultList(self, RecruitResultList, poolId)
    local resultList = {}

    local recrultIds = {}

    ---@type RecruitPool
    local poolData = Game.Scene.Player:GetComponent("RecruitComponent"):GetPool(poolId)

    if RecruitResultList == nil then RecruitResultList = {} end
    for index, value in ipairs(RecruitResultList) do
        local isNew = false

        local rewards = value.reward_results
        if poolData.config.CardPoolType == RecruitPoolType.RecruitPoolRookie then
            rewards = value.rewards
        end

        for k, v in ipairs(rewards) do
            if v.type == RewardType.RewardTypeCharacter then
                if not Game.Scene.Player:GetComponent("RecordComponent"):CheckIsOnOld(RecordType.Character, v.id) then
                    if recrultIds[RewardType.RewardTypeCharacter] == nil then
                        recrultIds[RewardType.RewardTypeCharacter] = {}
                    end

                    if not table.contains(recrultIds[RewardType.RewardTypeCharacter], v.id) then
                        isNew = true
                        table.insert(recrultIds[RewardType.RewardTypeCharacter], v.id)
                        break
                    end
                end
            elseif v.type == RewardType.RewardTypeFightSoul then
                if not Game.Scene.Player:GetComponent("RecordComponent"):CheckIsOnOld(RecordType.FightSoul, v.id) then
                    if recrultIds[RewardType.RewardTypeFightSoul] == nil then
                        recrultIds[RewardType.RewardTypeFightSoul] = {}
                    end

                    if not table.contains(recrultIds[RewardType.RewardTypeFightSoul], v.id) then
                        isNew = true
                        table.insert(recrultIds[RewardType.RewardTypeFightSoul], v.id)
                        break
                    end
                end
            end
        end

        table.insert(resultList, {
            reward = value.rewards[1], -- 只有一个 所以这里只处理一个
            rewardResult = value.reward_results or {},
            isNew = isNew
        })
        -- Logger.Log("新手卡池" .. value.rewards[1].type .. " " .. value.rewards[1].id .. ", isNew:" .. tostring(isNew) )
    end
    Game.Scene.Player:GetComponent("RecordComponent"):ClearOldRecord()
    return resultList
end

function this:OnCreate()
    base.OnCreate(self)
    self.content1 = self.rc:GetObject("Content1").transform
    self.content2 = self.rc:GetObject("Content2").transform
    self.content3 = self.rc:GetObject("Content3").transform
    self.cardHoldNum = self.rc:GetObject("CardHoldNum").transform:Find("Value"):GetComponent("Text")
    self.fightSoulHoldNum = self.rc:GetObject("FightSoulHoldNum").transform:Find("Value"):GetComponent("Text")
    self.cardHoldNum.text=""
    self.fightSoulHoldNum.text=""
    
    self.backBtn = self.rc:GetObject("BackButton")
    self.returnButton = self.rc:GetObject("ReturnButton")
    self.summonBtn = self.rc:GetObject("SummonButton")
    self.confirmButton = self.rc:GetObject("ConfirmButton")
    self.retryButton = self.rc:GetObject("RetryButton")
    
    UIUtil.AddBtnEvent(self.summonBtn,function() OnSummon(self) end)
    
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UISummonStage2,
        nil,
        function()
            OnBack(self)
        end,
        function()
            OnBack(self)
        end    
    )
    UIUtil.AddBtnEvent(self.backBtn,function() 
       OnBack(self)
    end,"Back")
    UIUtil.AddBtnEvent(self.returnButton,function() 
        OnBack(self)
    end,"Back")
    UIUtil.AddBtnEvent(self.retryButton,function() 
        local poolId = self.model.poolId
        local briefItem = self.model.briefItem
        local otherRewards = self.model.otherRewards
        PublicRequest.SendRequest(
            PROTOCOL.RecruitReq,
            {
                id = poolId,
                brief_item = briefItem
            },
            function(response, error)
                if error == 0 then
                    -- 复用 UISummonCtrl 抽卡回包逻辑
                    local resultList = GetResultList(self, response.reward_details, poolId)
                    OnBack(self)
                    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage1, {resultList = resultList, poolId = poolId, isConfirm = false, briefItem = briefItem, otherRewards=otherRewards})
                end
            end
        )
        OnBack(self)
    end,"Back")
    UIUtil.AddBtnEvent(self.confirmButton,function() 
        local poolId = self.model.poolId
        -- local uid = self.recruitTenItemData.id,
        -- local count = self.recruitTenItemData.count,

        ---@type ToolTipFirstData
        local tipData = {}
        tipData.message = LangUtil.GetSysLang(1372)
        tipData.callBack = function()
            PublicRequest.SendRequest(PROTOCOL.RecruitRookiePoolConfirmReq,
            {
                id = poolId,
            },
            function(response)
                if response ~= nil and response.reward_details ~= nil then
                    local resultList = GetResultList(self, response.reward_details, poolId)

                    local rewardResults = {}
                    local hasRewardResults = false
                    for key, value in pairs(resultList) do
                        for index, value in ipairs(value.rewardResult) do
                            if value.type == RewardType.RewardTypeItem then
                                hasRewardResults = true
                                table.insert(rewardResults, value)
                            end
                        end
                    end
                    for index, value in ipairs(response.other_rewards) do
                        table.insert(rewardResults, 1, value)
                    end
                    if hasRewardResults then
                        UIPublic.OpenRewardUI(rewardResults)
                    end
                    self.returnButton.gameObject:SetActive(true)
                    --- self.returnButton x 坐标设置为0
                    self.returnButton.transform.localPosition = Vector3.New(0, self.returnButton.transform.localPosition.y, self.returnButton.transform.localPosition.z)
                    self.summonBtn:SetActive(false)
                    self.RookieButtonRoot:SetActive(false)
                end
            end)
        end
        UIUtil.ToolTipFirst(tipData)
    end,"Back")

    self.RookieButtonRoot = self.rc:GetObject("RookieButtonRoot")
    self.NormalButtonRoot = self.rc:GetObject("NormalButtonRoot")
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.cardHoldNum,"Number")   -- ignoreLang
    LangUtil.BindText(self.fightSoulHoldNum,"Number") -- ignoreLang
    
    -- 新手卡池
    LangUtil.GetSpriteLang(538, function(Sprite) self.retryButton.transform:Find("Text"):GetComponent("Image").sprite = Sprite  end)
    LangUtil.GetSpriteLang(540, function(Sprite)  self.confirmButton.transform:Find("Text"):GetComponent("Image").sprite = Sprite  end)
    -- 正常卡池
    LangUtil.GetSpriteLang(539, function(Sprite) self.summonBtn.transform:Find("Text"):GetComponent("Image").sprite = Sprite  end)
    LangUtil.GetSpriteLang(540, function(Sprite)  self.returnButton.transform:Find("Text"):GetComponent("Image").sprite = Sprite  end)

    LangUtil.BindText(self.rc:GetObject("CardHoldNum").transform:Find("Text"))
    LangUtil.BindText(self.rc:GetObject("FightSoulHoldNum").transform:Find("Text"))

    local uiSummon = UIManager:GetInstance():GetWindow(UIWindowNames.UISummon)
    local summonMode, summonNum
    if uiSummon and uiSummon.View then
        summonMode = uiSummon.View.SummonMode
        summonNum = uiSummon.View.SummonNum
    end

end

function this.OnEnable(self)
    base.OnEnable(self)
    self.cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    self.fightSouls = Game.Scene.Player:GetComponent("FightSoulComponent").FightSouls
    
    self:OnRefresh();
end 

function this:OnRefresh()
    self.resultList = self.model.recruitList
    ---@type RecruitPool
    local poolData = Game.Scene.Player:GetComponent("RecruitComponent"):GetPool(self.model.poolId)
    if poolData ~= nil and poolData.config.CardPoolType == RecruitPoolType.RecruitPoolRookie then
        -- 新手卡池
        if not self.model.isConfirm then
            self.summonBtn:SetActive(false)
            self.RookieButtonRoot:SetActive(true)
            self.returnButton.gameObject:SetActive(false)
        else
            self.returnButton.gameObject:SetActive(true)
            --- self.returnButton x 坐标设置为0
            self.returnButton.transform.localPosition = Vector3.New(0, self.returnButton.transform.localPosition.y, self.returnButton.transform.localPosition.z)
            self.summonBtn:SetActive(false)
            self.RookieButtonRoot:SetActive(false)
        end
    else
        -- 普通卡池
        self.summonBtn:SetActive(true)
        self.RookieButtonRoot:SetActive(false)
        self.returnButton.gameObject:SetActive(true)
        self.returnButton.transform.localPosition = Vector3.New(-190, self.returnButton.transform.localPosition.y, self.returnButton.transform.localPosition.z)

    end

    self.cardHoldNum.text = table.count(self.cards)
    self.fightSoulHoldNum.text = table.count(self.fightSouls).."/"..Game.Scene.Player:GetComponent("FightSoulComponent"):GetBagCapacity()
    --新手引导
    local guide=Game.Scene:GetComponent("GuideComponent")
    local GuideComplete,GuideStep, GuideRun =guide:GetCurrentData()
    if GuideRun and GuideComplete == 1 and (GuideStep==4 or GuideStep==12) then
        local uiGuide = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide)
        uiGuide.View.mask_bc.transform.parent.gameObject:SetActive(true)
    end
    InitContent(self)
end

--新手引导
local function ON_Guide_Click(self, cid, num, isrun, minStep)
    if cid == 1 and isrun then
        if num == 13 and minStep == 3 then
            UIManager:GetInstance():CloseWindow(UIWindowNames.UIReward)
        end
        if num == 14 and minStep == 5 then
            OnBack(self)
        end
        if num == 8 then
            OnBack(self)
        end
    end
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_Guide_Click)
end

function this.OnDisable(self)
    base.OnDisable(self);
    Game.Scene:GetComponent("SoundComponent"):Stop()
    Game.Scene:GetComponent("SoundComponent"):MainStop()
    ListChildPool:GetInstance():ClearContent(self.content1)
    ListChildPool:GetInstance():ClearContent(self.content2)
    ListChildPool:GetInstance():ClearContent(self.content3)
end

UISummonStage2View.OnBack=OnBack

return this

