---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UIGameEventLevelTaskView : UIBaseView
---@field model UIGameEventLevelTaskModel
---@field ctrl UIGameEventLevelTaskCtrl
local UIGameEventLevelTaskView = BaseClass("UIGameEventLevelTaskView",UIBaseView)
local base = UIBaseView
local this = UIGameEventLevelTaskView
local pfbName = "TaskItem_GameEventLevel"

local taskCardId={3001,3002,3003,3004,3005,3023,3024,3025,3030,3031}
local taskEquipId={3032,3033}
local TaskKind = {"Daily", "Weekly", "Common", "Competition", "Service", "Activity"}

local GOLD_ID = tonumber(Z_Misc["GOLD_ID"].Value[1])


local function SetButton(transform,Id)
    for i = 0 ,transform.childCount - 1 do
        local child = transform:GetChild(i).gameObject
        child:SetActive(Id == i+1)
    end
end


function this:InitItemData(arg)
    ---@type Task
    local task = arg.data
    local object = arg.go
    local transform = object.transform
    ---@type ReferenceCollector
    local rc = transform:GetComponent("ReferenceCollector")

    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local itemBg = rc:GetObject("ItemBg"):GetComponent("Image")
    local itemRoot = rc:GetObject("ItemRoot")
    local imageRoot = rc:GetObject("ImageRoot").transform
    local sliderRoot = rc:GetObject("SliderRoot").transform
    local des_Text = LangUtil.BindText(rc:GetObject("DesText")) 
    local button = rc:GetObject("Buttons").gameObject
    local itemNum = LangUtil.BindText(rc:GetObject("NumTxt"),FontType.All_Number)
    local hint = rc:GetObject("Hint").gameObject
    hint:SetActive(false)

    button.gameObject:SetActive(true)
   
    des_Text.text = task.config.Desc
    if task.Count > task.target then
        task.Count = task.target
    end

    for i = 0, imageRoot.childCount-1 do
        local child = imageRoot:GetChild(i).gameObject
        child:SetActive(i == self.model.imageIndex)
    end

    for i = 0, sliderRoot.childCount-1 do
        local child = sliderRoot:GetChild(i)
        child.gameObject:SetActive(i == self.model.imageIndex)

        local slider = child:GetComponent("Slider")
        local progress_Text = LangUtil.BindText(child:Find("ProgressText").gameObject,FontType.All_Number)
        progress_Text.text = task.Count.."/".. task.target
        slider.value = task.Count / task.target
    end

    if task.status == TaskStatus.TaskStatusReceived then --任务完成 领取完成
        button.gameObject:SetActive(true)
        button:GetComponent("Button").enabled = false
        -- LangUtil.GetSpriteLang(543, function(sprite) button.transform:GetChild(3):GetComponent("Image").sprite = sprite end)
        SetButton(button.transform,4)
    elseif task.status == TaskStatus.TaskStatusCompleted then --任务完成  未领取
        button.gameObject:SetActive(true)
        button:GetComponent("Button").enabled = true
        LangUtil.BindText(button.transform:Find("Lq/Text")).text= LangUtil.GetSysLang(310)
        UIUtil.AddBtnEvent(button,function(go) 
            ---@param response protocol.TaskSubmitResp
            PublicRequest.SendRequest(
                PROTOCOL.TaskSubmitReq,
                {
                    type = task.type,
                    task_id = task.Id,
                },
                function(response, error)
                    UIPublic.OpenRewardUI(response.reward_result)
                end
            )
            button:GetComponent("Button").enabled = false  
        end)
        SetButton(button.transform,1)
    else --未完成  未领取
        button:GetComponent("Button").enabled = true
        LangUtil.BindText(button.transform:Find("Jx/Text")).text= LangUtil.GetSysLang(309)
        LangUtil.BindText(button.transform:Find("Tz/Text")).text= LangUtil.GetSysLang(309)

        local zLevelJump = Z_LevelJump[task.config.LevelJump[1]]
        if zLevelJump == nil or zLevelJump[1] == nil then
            SetButton(button.transform, nil)
        else
            local isUnlock = UIPublic.CheckJumpLevel(zLevelJump[1].JumpType, zLevelJump[1].Arg1, zLevelJump[1].Arg2)
            local mask = button.transform:Find("Jx/Mask").gameObject
            mask:SetActive(not isUnlock)
            SetButton(button.transform,2)
            UIUtil.AddBtnEventNoBug(button, function()
                if isUnlock then
                    UIPublic.JumpLevel(zLevelJump[1].JumpType, zLevelJump[1].Arg1, zLevelJump[1].Arg2)
                end
            end)
        end
        
        -- if task.Count > 0 then
            
        -- else
        --     SetButton(button.transform,3)
        -- end
    end
    
    local rewards = Z_Reward[task.config.RewardId]
    local id, count, type

    local goldCount, goldType
    if rewards ~= nil then
        for _, value in ipairs(rewards) do
            if value.ObjId ~= GOLD_ID then
                id = value.ObjId
                count = value.Count
                type = value.Type
                break
            else
                goldCount = value.Count
                goldType = value.Type
            end
        end
    end

    if id == nil then
        id = GOLD_ID
        count = goldCount
        type = goldType
    end

    if id == nil then
        itemRoot:SetActive(false)
    else
        itemRoot:SetActive(true)
        UIPublic.InitItemIconNew(avatar, itemBg, type, id, count, true, false)
        itemNum.text = count
    end



    -- local rewardInfo = {}
    -- rewardInfo.TemplateId = zTask.RewardId
    -- rewardInfo.RewardTypeInfo = RewordTypeList[zTask.RewardType]
    -- rewardInfo.Num = zTask.RewardNum
    -- UIUtil.SetRewardInfo(rewardInfo, avatar, {numText = reward_Text}, true)
    -- UIUtil.SetSprite(itemBg,AtlasConfig.ItemBg, Z_Item[zTask.RewardId].IconBg .. ".png")

    -- UIUtil.ScrollText(des_Text, nil, 100)
end

function this:PlayAnim()
    self.face:CoPlay(self.model.UILandladyId)
end

function this:OnCreate()
    base.OnCreate(self)
    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    ---@type HintNode
    self.taskHint = hintComponent.Task
    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(4)

    self.scrollView = self.rc:GetObject("ScrollView")
    self.holdNum = self.rc:GetObject("HoldNum")
    self.timeNum = self.rc:GetObject("TimeNum")
    
    self.all_Btn = self.rc:GetObject("GetAllButton")
    
    self.left = self.rc:GetObject("Left").transform
    self.right = self.rc:GetObject("Right").transform
    local eventArea = self.rc:GetObject("EventArea")
    --EventTriggerListener.Get(eventArea).onLuaClick = function() self.ctrl:CloseSelf() end
    local tra = eventArea.transform
    for i = 0,tra.childCount -1 do
        EventTriggerListener.Get(tra:GetChild(i).gameObject).onLuaClick = function()  end
    end
    UIUtil.AddBtnEvent(self.all_Btn,function(go)
        PublicRequest.SendRequest(
            PROTOCOL.TaskSubmitByGroupReq,
            {
                type = TaskType.TaskTypeGameEvent,
                groups = {
                    self.model.module.config.ModuleParams[1]
                }
            },
            function(response, error)
                UIPublic.OpenRewardUI(response.reward_result)
            end
        )
    end)
    UIPublic.SetBackButton(self.rc:GetObject("BackButton"), UIWindowNames.UIGameEventLevelTask, 547)
    self.face = UILandlady.New(self.rc:GetObject("Paint"), 1011, self.rc:GetObject("Lines"))

    self.ScrollbarValue = 0

    self.scroll:Clear()
    self.scroll:ScrollInit({}, self.scrollView, pfbName, function (arg)
        self:InitItemData(arg)
    end) 
    self.imageRoot = self.rc:GetObject("ImageRoot").transform
    self.bottomImageRoot = self.rc:GetObject("BottomImageRoot").transform
end

function this:OnLangCreate()
    LangUtil.BindText(self.holdNum.transform:Find("Text")).text = LangUtil.GetSysLang(1241)
    self.holdTxt = LangUtil.BindText(self.holdNum.transform:Find("Value"), FontType.All_Number)
    LangUtil.BindText(self.all_Btn.transform:Find("Text")).text = LangUtil.GetSysLang(311)
    self.timeText = LangUtil.BindText(self.timeNum.transform:Find("TimeText"))
end

function this:OnEnable()
    base.OnEnable(self)
    self:PlayAnim()
    self:OnRefresh()
end

function this:OnRefresh()
    for i = 0, self.bottomImageRoot.childCount-1 do
        local child = self.bottomImageRoot:GetChild(i).gameObject
        child:SetActive(i == self.model.imageIndex)
    end
    for i = 0, self.imageRoot.childCount-1 do
        local child = self.imageRoot:GetChild(i).gameObject
        child:SetActive(i == self.model.imageIndex)
    end

    local lastTimeText = ""
    local time1 = TimeUtil.ConvertTimeForm(self.model.module.endTime - TimeUtil.GetServerTime())
    if time1.day > 0 then
        lastTimeText = lastTimeText .. time1.day .. LangUtil.GetSysLang(2006) -- 天
    end
    if time1.hour > 0 then
        lastTimeText = lastTimeText .. time1.hour .. LangUtil.GetSysLang(2007) -- 小时
    end
    if time1.day == 0 then
        lastTimeText = lastTimeText .. time1.minute .. LangUtil.GetSysLang(1478) -- 分
    end
    self.timeText.text = LangUtil.GetSysLang(1422) .. lastTimeText
    
    self.scroll:RefreshData(self.model.tasks)
    local taskOver = table.choose(self.model.tasks,function(k,v) return v.status == TaskStatus.TaskStatusCompleted end) --完成未领取
    local taskOver1 = table.choose(self.model.tasks,function(k,v) return v.status == TaskStatus.TaskStatusReceived end) --完成已领取
    local Num = table.count(taskOver) + table.count(taskOver1)

    self.holdTxt.text = Num.."/".. table.count(self.model.tasks)
end

function this:FreshContent()
end

function this:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_TASK_UPDATE,self.OnRefresh)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_REFRESH_TASK)
end

function this:OnViewTop()
    base.OnViewTop(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this:OnDisViewTop()
    base.OnDisViewTop(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this:OnDisable()
    base.OnDisable(self)
    Game.Scene:GetComponent("SoundComponent"):MainStop()
    self.face:Disable()
end

function this:OnDestroy()
    base.OnDestroy(self)
    self.scroll:Dispose()
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    -- UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)   
    -- self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
    -- self.comTopView:InitComTop(self, self:GetName())
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    -- UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

return this

