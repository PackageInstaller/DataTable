---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UIInformView = BaseClass("UIInformView",UIBaseView);
local base = UIBaseView
local this = UIInformView
local color1 = Color.New(105 / 255, 121 / 255, 157/255)
local pfbName = "InformBtn"
local announcementUrl = "http://192.168.31.125:8380/notice/query"
local currentType = 1

local function CheckLocalFile(self, file)
    local isHas = ResourcesManager:GetInstance():CheckLocalFileExsits(file) --检测本地 是否存在图片
    local Ishasboll = true
    if isHas then
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--有 图直接加载")
        --ResourcesManager:GetInstance():LoadLocalSprite(file)--本地加载图片
        return coroutine.yieldbreak(Ishasboll)
    else
        self.count = 0
        self.timeUpdate=function(self)
            self:TextRefresh(self.DownloadText)
        end
        self.timer = TimerManager:GetInstance():GetTimer(0.2, self.timeUpdate , self)
        -- 启动定时器
        self.timer:Start()
        print("??????????????????????????????????????????????????????????????????--没图 ，需要下载")
        self.Download.gameObject:SetActive(true)
        local IsDown = ResourcesManager:GetInstance():DownloadAssetFileAsync(self.url, file)--异步下载文件
        if IsDown == false then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(1001))
        end
        self.Download.gameObject:SetActive(false)
        self.timer:Stop()
        return coroutine.yieldbreak(IsDown)
    end
end

local function OnBtn(self,id)
    -- local affiche = self.affiches[id]
    -- coroutine.start(function()
    --     local informList = ClientData:GetInstance():GetInformState()
    --     if not table.any(informList,function(f) return f == affiche.Id end) then
    --         self.InformHint:AddCount(-1)
    --         self.HintList[id]:SetActive(false)
    --         ClientData:GetInstance():SetInformState(affiche.Id)
    --     end
    -- end)
    
    for k,v in pairs(self.btnList) do
        local transform = v.transform
        transform:Find("Acltive").gameObject:SetActive( k == id)
        v.gameObject:GetComponent("Button").enabled  = (not (k == id))
        if k == id then
            self.TitleTextList[k].color = Color.white
            self.DescTextList[k].color = Color.white
        else
            self.TitleTextList[k].color = color1
            self.DescTextList[k].color = color1
        end
    end
    self.ContentText.text = self.InfoList[id].text
    self.Subtitle.text = self.InfoList[id].text_title
    coroutine.start(function()
        self.bannerImage.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Inform/" .. self.InfoList[id].img ..".jpg")
    end)
    
    -- affiche.Content = string.gsub(affiche.Content, "\\n", "\n")
    -- self.Content.transform:DOLocalMoveY(0, 0)
    -- self.Content.gameObject:SetActive(true)
    -- for i, v in pairs(LangUtil.LangTypeList) do
    --     if LangUtil.GetLangType() == v then
    --         self.ContentText.text = (string.IsNullOrEmpty(string.split(affiche.Content,"|")[i]) and  {affiche.Content} or {string.split(affiche.Content,"|")[i]} )[1]
    --         self.Subtitle.text = (string.IsNullOrEmpty(string.split(affiche.Subtitle,"|")[i]) and  {affiche.Subtitle} or {string.split(affiche.Subtitle,"|")[i]} )[1]
    --     end
    -- end
    
    -- if affiche.Type ~= nil then--Z_Inform
    --     self.TimeText.text = affiche.Date
    -- else
    --     local tData =  TimeUtil.FormatUnixTime2Date(affiche.Date)
    --     self.TimeText.text = string.format("%d/%d/%d  %02d:%02d",tData.year, tData.month, tData.day, tData.hour, tData.minute)
    --     coroutine.start(function()
    --         local ImgUrlList = string.split(affiche.ImgUrl,"|")
    --         local path1
    --         for i, v in pairs(LangUtil.LangTypeList) do
    --             if LangUtil.GetLangType() == v then
    --                 path1 = ImgUrlList[i]
    --             end
    --         end
    --         if string.IsNullOrEmpty(path1) then
    --              ResourcesManager:GetInstance():LoadAsync("UI/Inform/gg_banner01.png",typeof(Texture2D),function (a)
    --                  self.bannerImage.texture = a
    --             end)
    --         else
    --             local ban = string.split(path1,"/")
    --             ResourcesManager:GetInstance():LoadAsync("UI/Inform/"..ban[2],typeof(Texture2D),function (a)
    --                 if a~=nil then
    --                     self.bannerImage.texture = a
    --                 else
    --                     local IsDown = coroutine.yieldstart(CheckLocalFile,nil, self, path1)
    --                     if IsDown then
    --                         local tex = ResourcesManager:GetInstance():LoadLocalTexture(path1)--AtlasManager:GetInstance():CoLoadImageAsync(path1)
    --                         self.bannerImage.texture = tex
    --                     else
    --                         ResourcesManager:GetInstance():LoadAsync("UI/Inform/gg_banner01.png",typeof(Texture2D),function (a)
    --                             self.bannerImage.texture = a
    --                         end)
    --                     end 
    --                 end
                    
    --             end)
              
                
    --         end
           
    --     end)
    --end

end

local function InitBtnCtrl(self)
    ListChildPool:GetInstance():ClearContent(self.btnRoot)
    self.btnList = {}
    self.TitleTextList = {}
    self.DescTextList = {}
    self.HintList = {}
    self.InfoList = {}
    local informList = ClientData:GetInstance():GetInformState()

    local currentList = {}

    for _, value in pairs(self.announcementData) do
        if  tonumber(value.type) == currentType then
            table.insert(currentList, value)
        end
    end

    for k, v in pairs(currentList) do
        ListChildPool:GetInstance():GetChild(pfbName, self.btnRoot, function (object)
            self.TitleTextList[k] = object.transform:Find("TitleTextRoot"):GetChild(0):GetComponent("Text")
            self.DescTextList[k] = object.transform:Find("DescTextRoot"):GetChild(0):GetComponent("Text")
            self.HintList[k] = object.transform:Find("Hint").gameObject
            self.btnList[k] = object
            self.InfoList[k] = v
            
            for i, h in pairs(LangUtil.LangTypeList) do
                if LangUtil.GetLangType() == h then
                    LangUtil.BindText(self.TitleTextList[k]).text = (string.IsNullOrEmpty(string.split(v.notice_title,"|")[i]) and  {v.notice_title} or {string.split(v.notice_title,"|")[i]} )[1] 
                    LangUtil.BindText(self.DescTextList[k]).text = (string.IsNullOrEmpty( string.split(v.text_title,"|")[i]) and  {v.text_title} or { string.split(v.text_title,"|")[i]} )[1] 
                end
            end
           
            UIUtil.ScrollText(self.DescTextList[k])
            UIUtil.AddBtnEvent(object, function() OnBtn(self, k, v) end)
        end)
    end
end

function this.OnLangCreate(self)
   LangUtil.BindText(self.langRc:GetObject("TitleTextRoot")).text = LangUtil.GetSysLang(95)
   self.ContentText = LangUtil.BindText(self.langRc:GetObject("ContentText"))
   self.TimeText = LangUtil.BindText(self.langRc:GetObject("TimeText"))
   self.Subtitle = LangUtil.BindText(self.langRc:GetObject("Subtitle")) 
   self.DownloadText = LangUtil.BindText(self.rc:GetObject("DownloadText"))
end

function this.TextRefresh(self,text)
    self.count = self.count+1
    local count = self.count%3
    if count == 1 then
        text.text = LangUtil.GetSysLang(535) .. "."
    elseif count == 2 then
        text.text = LangUtil.GetSysLang(535) .. ".."
    elseif count == 0 then
        text.text = LangUtil.GetSysLang(535) .. "..."
    end
end

function this.OnCreate(self)
    base.OnCreate(self)
    local close = self.rc:GetObject("Close")
    self.btnRoot = self.rc:GetObject("BtnCtrl").transform
    self.hint = self.rc:GetObject("Hint")
    self.Content = self.rc:GetObject("Content")
    self.bannerImage = self.rc:GetObject("bannerImage"):GetComponent("Image")
    self.url = ChannelManager:GetInstance():GetCGAddress()  --下载地址
    self.Download = self.rc:GetObject("Download")

    self.ActivityButton = self.rc:GetObject("ActivityButton")
    self.GameButton = self.rc:GetObject("GameButton")

    local eventBg = self.rc:GetObject("EventBg")
    EventTriggerListener.Get(eventBg).onLuaClick = function() UIManager:GetInstance():CloseWindow(UIWindowNames.UIInform) end
    self.Download.gameObject:SetActive(false)
    UIUtil.AddBtnEvent(close,function() UIManager:GetInstance():CloseWindow(UIWindowNames.UIInform)  end)


    UIUtil.AddBtnEvent(self.ActivityButton,function()
        currentType = 1
        self.ActivityButton.transform:Find("Active").gameObject:SetActive(true)
        self.GameButton.transform:Find("Active").gameObject:SetActive(false)
        self.ActivityButton.transform:Find("False").gameObject:SetActive(false)
        self.GameButton.transform:Find("False").gameObject:SetActive(true)
        InitBtnCtrl(self)
        OnBtn(self,1)
    end)

    UIUtil.AddBtnEvent(self.GameButton,function()
        currentType = 2
        self.ActivityButton.transform:Find("Active").gameObject:SetActive(false)
        self.GameButton.transform:Find("Active").gameObject:SetActive(true)
        self.ActivityButton.transform:Find("False").gameObject:SetActive(true)
        self.GameButton.transform:Find("False").gameObject:SetActive(false)
        InitBtnCtrl(self)
        OnBtn(self,1)
    end)
    self.postBoxComponent = Game.Scene.Player:GetComponent("PostBoxComponent")
    self.announcementData = self.postBoxComponent.announcementData
end

function this.OnEnable(self)
    base.OnEnable(self)
    self:OnRefresh()
    OnBtn(self,1)
end

local function Init(self)
    InitBtnCtrl(self)
    -- if table.count(self.affiches) > 0 then
    --     self.hint:SetActive(false) 
    --     local index = 1
    --     if self.model.data and self.model.data.typeName then--打开特定公告
    --         for k, v in pairs(self.affiches) do
    --             if self.model.data.typeName == v.Title then
    --                 index = k
    --                 break;
    --             end
    --         end
    --     end
    --     --OnBtn(self,index)
    -- else
    --     self.hint:SetActive(true)
    -- end
end 

function this.OnRefresh(self)
    Init(self)
    -- self.btnRoot.transform:DOLocalMoveY(0, 0)
    -- if table.count(Z_Inform) > 0 then
    --     self.affiches = Z_Inform
    --     Init(self)
    -- else
    --     self.InformHint = Game.Scene:GetComponent("HintComponent").Inform
    --     local afficheComponent = Game.Scene.Player:GetComponent("AfficheComponent")
    --     coroutine.start(function()
    --         self.gameObject:SetActive(false)
    --         coroutine.yieldstart(afficheComponent.CoLoadData,nil,afficheComponent)
    --         self.affiches = afficheComponent.Affiches
    --         Init(self)
    --         self.gameObject:SetActive(true)
    --     end)
    -- end
end

local function OnAfficheInfoChg(self)
    Init(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_AFFICHE_INFO_CHG, OnAfficheInfoChg)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_AFFICHE_INFO_CHG)
end

function this.OnDisable(self)
    base.OnDisable(self)
    --self.bannerImage.texture = DeActiveTexture
    --self.Content.gameObject:SetActive(false)
    ListChildPool:GetInstance():ClearContent(self.btnRoot)
    self.Download.gameObject:SetActive(false)
    self.btnList = nil
    self.TitleTextList = nil
    self.DescTextList = nil
    self.HintList = nil
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this;

