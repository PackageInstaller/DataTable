---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UICardLvUpView = BaseClass("UICardLvUpView",UIBaseView);
local base = UIBaseView
local this = UICardLvUpView




local function InitCardFace(self)
    
    local card = self.card 
    local zCard = Z_Card[card.TemplateId]
    local star = card.Star 
    local transform = self.cardFace.transform
    local frame = transform:GetComponent("SpriteRenderer")
    local cardImg = transform:Find("mask/Card"):GetComponent("SpriteRenderer")
    local mainProp = transform:Find("MainProp"):GetComponent("SpriteRenderer")
    local subProp = transform:Find("SubProp"):GetComponent("SpriteRenderer")
    local cardFrom = transform:Find("CardFrom"):GetComponent("SpriteRenderer")
    local starRoot = transform:Find("StarRoot")
    local cardType = transform:Find("CardType"):GetComponent("SpriteRenderer")
    local cardAtkType = transform:Find("AtkDistance"):GetComponent("SpriteRenderer")
    
    for i = 0,starRoot.childCount - 1 do
        local child = starRoot:GetChild(i).gameObject
        child:SetActive(i+1<= star)
    end

    local skinId = (card.SkinId == 0 and {1} or {card.SkinId})[1]

    local framePath = "UI/RareFrame/"..UIPublic.RareConfig[zCard.Rare]
    local cardImgPath = "UI/CardBig/"..zCard.Id.."_"..skinId..".png"

    -- 和谐
    local skin = table.first(Z_Skin, function (v) return v.BelongCard == zCard.Id and v.Stage == skinId end)
    if skin ~= nil then
        cardImgPath = "UI/CardBig"..skin.CardBig.."/"..zCard.Id.."_"..skinId..".png"
    end
    
    local mainPropPath = "UI/Atlas/MainProp/"..UIPublic.MainPropConfig[zCard.MainProp]
    local subPropPath = "UI/Atlas/Prop/"..UIPublic.SubPropConfig[zCard.SubProp]
    local cardFromPath = "UI/Atlas/CardFrom/"..zCard.Sphere..".png"
    local cardTypePath = "UI/Atlas/CardType/"..UIPublic.AbiliTypeConfig[zCard.AbiliType]
    local cardAtkTypePath = "UI/Atlas/Battle/"..(zCard.AtkType == 1 and {"近战图标.png"} or {"远程图标.png"} )[1] --ignoreCN
    
    frame.sprite = AtlasManager:GetInstance():CoLoadImageAsync(framePath)
    cardImg .sprite = AtlasManager:GetInstance():CoLoadImageAsync(cardImgPath)
    mainProp.sprite = AtlasManager:GetInstance():CoLoadImageAsync(mainPropPath)
    subProp .sprite = AtlasManager:GetInstance():CoLoadImageAsync(subPropPath)
    cardFrom.sprite = AtlasManager:GetInstance():CoLoadImageAsync(cardFromPath)
    cardType.sprite = AtlasManager:GetInstance():CoLoadImageAsync(cardTypePath)
    cardAtkType.sprite = AtlasManager:GetInstance():CoLoadImageAsync(cardAtkTypePath)
    
end

local function OnSkip(self)
    local nextCard = UIPublic.GetNewCard(self.card,{Level = self.model.info.level})
    UIManager:GetInstance():CloseWindow(UIWindowNames.UISkipHint)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UICardLvUp)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardLvUpStage1,{card = self.card,nextCard = nextCard})
    --coroutine.start(function()
    --    coroutine.waitforseconds(0.5)
    --    UIManager:GetInstance():CloseWindow(UIWindowNames.UICardLvUp)
    --end)
end

function this.OnCreate(self)
    base.OnCreate(self);
    self.eventBg = self.rc:GetObject("EventBg")
    self.effect = self.rc:GetObject("Effect")
    self.cardFace = self.rc:GetObject("CardFace")
    self.mask = self.rc:GetObject("Mask")
    self.audio = self.gameObject:GetComponent("AudioSource")
    self.nameText = self.rc:GetObject("NameText")
    local cardEffect = self.rc:GetObject("Card1")
    local cardEffectImg = self.rc:GetObject("CardEffectImage"):GetComponent("RawImage")
    cardEffect.transform:GetComponent("Renderer").material.mainTexture =cardEffectImg.texture
end

function this.OnEnable(self)
    base.OnEnable(self);
    local Guide = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide)
    if Guide ~= nil  then
        local View = Guide.View
        View.mask_ho.gameObject:SetActive(false)
    end
    self:OnRefresh();
end



function this.OnRefresh(self)
    self.nameText.gameObject:SetActive(false)
    local info = self.model.info
    self.card = info.card
    local zCard = Z_Card[self.card.TemplateId]
    self.audio.volume = ClientData:GetInstance():GetVolume("SoundVolume")
    self.mask:SetActive(true)
    InitCardFace(self)
    self.mask:SetActive(false)
    self.audio:Play()
    coroutine.waitforseconds(0.6)
    LangUtil.BindText(self.nameText).text = zCard.Name
    self.nameText.gameObject:SetActive(true)
    UIPublic.PlayEffect(self.effect.transform)
    coroutine.waitforseconds(3.5)
    --self.transform:DOShakePosition(0.6,40,80,90);
    UIUtil.OpenSkipHint(function() OnSkip(self) end)
    if info.callback ~= nil then
        info.callback()
    end
    
end

local function ON_ITEM_DATA_UPDATE(self)
    --refreshLList
end



function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.UI_SKIP_HINT,ON_ITEM_DATA_UPDATE)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.UI_SKIP_HINT)
end

function this.OnDisable(self)
    base.OnDisable(self);
    self.audio:Stop()
    
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;

