---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/15 13:43
---

local UICardIntensCtrl = BaseClass("UICardIntensCtrl",UIBaseCtrl);
local this = UICardIntensCtrl;


function this.CloseSelf(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UICardIntens);
    if self.model.parent ~= nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICardList);
    end
end

function this.OpenShowPropWindow(self,data) --打开显示物品窗口
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIShowProp,data);
end

function this.OpenShowCardWindow(data)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIShowCard,data);
end

function this.OpenSkinWindow(self,card)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UISkin,card);
end

function this.OpenChangeEquipWindow(self,card)
    UIPublic.OpenChangeEquipWindow(card)
end

function this.OpenChangeFightSoulWindow(self,card)
    UIPublic.OpenChangeFightSoulWindow(card)
end

function this.SendLockRequest(self,card) --锁定解锁请求
    local send_data = {};
    local lock = (card.Lock == 1 and {2} or {1})[1]
    send_data.CardId = card.Id;
    send_data.Lock = lock

    coroutine.start(function()
        local g2cCardLock = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardLock, send_data);

        if g2cCardLock.Error == ErrorCode.ERR_Success then
            card.Lock = lock;
            local info = {cardInfoChgType = CardInfoChgType.Lock,
                          cardId = card.Id
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
            local str = (card.Lock == 1 and {LangUtil.GetSysLang(2022)} or {LangUtil.GetSysLang(2023)})[1];
            UIUtil.ToolTipFourth(str);
        end
    end)
end

function this.SendSetMainRequest(self,view) --设置主界面请求
    local card = view.cur_card

    coroutine.start(function()
        local g2cSetAsMainUICard = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_SetAsMainUICard, {CardId = card.Id});
        if g2cSetAsMainUICard.Error == ErrorCode.ERR_Success then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(721))
            Game.Scene.Player.MainUICardId = card.Id;
            ClientData:GetInstance():SetMainUiId(card.TemplateId)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_UI_CARD_CHG);
            local info = {cardInfoChgType = CardInfoChgType.Home,
                          cardId = card.Id
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
        end
    end)
end

function this.SendSetRoomRequest(self,view) --设置寝宫请求
    local card = view.cur_card
    if Game.Scene.Player.BedroomCardId == card.Id then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(721))
        return;
    end

    if card.CloseDegree ~= 999 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1085));--"未与此角色结婚"
        return;
    end

    coroutine.start(function()
        local g2cSetAsMainUICard = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_SetAsBedroomCard, {CardId = card.Id});

        if g2cSetAsMainUICard.Error == ErrorCode.ERR_Success then
            
            Game.Scene.Player.BedroomCardId = card.Id;
            Game.Scene.Player:GetComponent("RoomComponent"):UpdateRoomCard();
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            local info = {cardInfoChgType = CardInfoChgType.Room,
                          cardId = card.Id
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(721))
        end
    end)
end

function this.SendSetSupportRequest(self,view) --设置支援角色请求
    local card = view.cur_card

    coroutine.start(function()
        local g2cSetAsMainUICard = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_AdiSet, {CardId = card.Id});

        if g2cSetAsMainUICard.Error == ErrorCode.ERR_Success then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(721))
            Game.Scene.Player.AidId = card.Id;
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            local info = {cardInfoChgType = CardInfoChgType.Support,
                          cardId = card.Id
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
        end
    end)
end



function this.SendLevelUpRequest(self,data) --等级提升请求
    local player = Game.Scene.Player;

    coroutine.start(function()
        local g2cCardLevelUp = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardLevelUp, data);

        if g2cCardLevelUp.Error == ErrorCode.ERR_Success then
            
            player.GoldCoin = player.GoldCoin - data.ExpendGoldCoin;
            for k, v in pairs(data.ExpendMaterialList) do
                UIUtil.RemoveItem(v.MaterialId,v.Amount);
            end
            
            
            local card = player:GetComponent("CardComponent").Cards[data.CardId];
            local level = card.Level
            local func = function()
                card.Exp = data.Exp;
                card:GetComponent("CardCharacterComponent"):LevelUp(data.Level);
                local info = {cardInfoChgType = CardInfoChgType.Level,
                              cardId = card.Id
                }

                --Game.Scene:GetComponent("GuideComponent"):JumpGuide(30) -- 新手引导收到返回后执行下一步，避免网阔卡顿照成穿帮
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            end
            if card.Level < data.Level then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UICardLvUp,{card =card,level = level ,callback = func })
            end
            --card.Exp = data.Exp;
            --card:GetComponent("CardCharacterComponent"):LevelUp(data.Level);
            --local info = {cardInfoChgType = CardInfoChgType.Level,
            --              cardId = card.Id
            --}
            --
            ----Game.Scene:GetComponent("GuideComponent"):JumpGuide(30) -- 新手引导收到返回后执行下一步，避免网阔卡顿照成穿帮
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);

            TaskData.AddModeTaskNum({type = 1012})
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardLevelUp.Error))
        end
    end)
end

local JadePealTempId = 1;

function this.SendJadePearlRequest(self,data) --玉珠强化请求
    local player = Game.Scene.Player;

    coroutine.start(function()
        local g2cJadePearlActivate = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_JadePearlActivate, data);

        if g2cJadePearlActivate.Error == ErrorCode.ERR_Success then
            
            local card = player:GetComponent("CardComponent").Cards[data.CardId];
            --如果当前角色玉珠已经是全部激活直接退出
            if  card.JadePearlLevel==10 then return end
            local level = card.JadePearlLevel--原来的玉珠等级
            card.JadePearlLevel = data.JadePearlLevel

            local subProp = Z_Card[card.TemplateId].SubProp
            local zJadePear = table.first(Z_JadePearl,function(v) return v.Level == card.JadePearlLevel and v.Kind == subProp  end)
            card:GetComponent("CardJadePearlComponent"):LevelActivate(zJadePear.Id)
            
            
            player.GoldCoin = player.GoldCoin - data.ExpendGoldCoin;
            for k, v in pairs(data.ExpendMaterialList) do
                UIUtil.RemoveItem(v.MaterialId,v.Amount);
            end

            local info = {cardInfoChgType = CardInfoChgType.JadePearl,
                          cardId = card.Id
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);

            --玉珠第5层
            if card.JadePearlLevel >= 5 then--and level < 5完成一次
                if card.TemplateId == 1001 then
                    TaskData.AddModeTaskNum({Id = 7005})
                elseif card.TemplateId == 1002 then
                    TaskData.AddModeTaskNum({Id = 7010})
                end
            end
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cJadePearlActivate.Error))  
        end
    end)
end


function this.SendEvolveRequest(self,data)--升星
    local player = Game.Scene.Player;
    local cardComponent = player:GetComponent("CardComponent");

    coroutine.start(function()
        local g2cCardEvolve = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardEvolve, data);

        if g2cCardEvolve.Error == ErrorCode.ERR_Success then
            
            player.GoldCoin = player.GoldCoin - data.ExpendGoldCoin;
            local Cards = player:GetComponent("CardComponent").Cards;
            --消耗物品和角色
            for k,v in pairs(data.ExpendMaterialList) do
                if v.Type == 0 then
                    UIUtil.RemoveItem(v.MaterialId,v.Amount);
                elseif v.Type == 1 then
                    cardComponent:Remove(v.MaterialId);
                end
            end
            local card = Cards[data.CardId];
            card.Star = data.Star;
            card.Stage = data.Stage;

            --角色3星
            if card.Star >= 3 then--card.Star == 3
                if card.TemplateId == 1001 then
                    TaskData.AddModeTaskNum({Id = 7001})
                elseif card.TemplateId == 1002 then
                    TaskData.AddModeTaskNum({Id = 7006})
                end
            end
            
            local reqData
            if card.Star == 3 then
                reqData = {SkinId = 2,CardId = card.Id}
            elseif card.Star == 5 then
                reqData = {SkinId = 3,CardId = card.Id}
            else
                
            end

            local func = function()
                local limitLev = Z_CardEvolve[data.Star].LevelBreak;
                if limitLev ~= 0 then card.LevelLimit = limitLev;end
                card:GetComponent("CardCharacterComponent"):StarUp(data.Star,data.Stage);
                local info = {cardInfoChgType = CardInfoChgType.Star,
                              cardId = card.Id
                }
                local info1 = {cardInfoChgType = CardInfoChgType.Level,
                               cardId = card.Id
                }
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info1)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_UI_CARD_CHG);
            end
            
            
            if reqData ~= nil then

                local g2cSkinModify = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                        OuterOpcode.Name2Code.ETModel_C2M_SkinModify, reqData);

                if g2cSkinModify.Error == ErrorCode.ERR_Success then
                    
                    card.SkinId = reqData.SkinId;
                    local funcSkin = function()
                        func()
                        local infoSkin = {
                            cardId = card.Id,
                            cardInfoChgType = CardInfoChgType.Skin
                        }
                        DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG, infoSkin)
                    end
                    --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                    --DataManager:GetInstance():Broadcast(DataMessageNames.ON_SKIN_INFO_CHG,info);
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardEvolve,{card = card ,callback = funcSkin})
                else
                    UIManager:GetInstance():OpenWindow(UIWindowNames.UICardEvolve,{card = card,callback = func})
                end
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UICardEvolve,{card = card,callback = func})
            end


            --local limitLev = Z_CardEvolve[data.Star].LevelBreak;
            --if limitLev ~= 0 then card.LevelLimit = limitLev;end
            --card:GetComponent("CardCharacterComponent"):StarUp(data.Star,data.Stage);
            --local info = {cardInfoChgType = CardInfoChgType.Star,
            --              cardId = card.Id
            --}
            --local info1 = {cardInfoChgType = CardInfoChgType.Level,
            --               cardId = card.Id
            --}
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info1)
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            --DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_UI_CARD_CHG);
            --Game.Scene:GetComponent("GuideComponent"):AutoGuide()
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardEvolve.Error))
        end
    end)
end


function this.SendLimitBreakRequest(self,data)--突破
    local player = Game.Scene.Player;
    local cardComponent = player:GetComponent("CardComponent");

    coroutine.start(function()
        local g2cCardLevelLimitBreak = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardLevelLimitBreak, data);

        if g2cCardLevelLimitBreak.Error == ErrorCode.ERR_Success then

            player.GoldCoin = player.GoldCoin - data.ExpendGoldCoin;
            for k,v in pairs(data.ExpendMaterialList) do
                if v.Type == 0 then
                    UIUtil.RemoveItem(v.MaterialId,v.Amount);
                elseif v.Type == 1 then
                    cardComponent:Remove(v.MaterialId);
                end
            end
            for k,v in pairs(data.ExpendMaterialList2) do
                if v.Type == 0 then
                    UIUtil.RemoveItem(v.MaterialId,v.Amount);
                elseif v.Type == 1 then
                    cardComponent:Remove(v.MaterialId);
                end
            end
            local card = player:GetComponent("CardComponent").Cards[data.CardId];
            card.LevelLimit = data.LevelLimit;
            local func = function()
                local info = {cardInfoChgType = CardInfoChgType.Level,
                              cardId = card.Id
                }
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UICardLimit,{card = card,callback = func})
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardLevelLimitBreak.Error))
        end
    end)
end

function this.SendCloseDegreeRequest(self, data, uiDrawing)--亲密度
    local player = Game.Scene.Player;
    local card =  player:GetComponent("CardComponent").Cards[data.CardId]
    local oriCloseDegree = card.CloseDegree
    --如果当前角色亲密度已经是100直接退出
    if  card.CloseDegree>=100 then return end
    local addNum = data.CloseDegree
    data.CloseDegree = card.CloseDegree + data.CloseDegree
    if data.CloseDegree > 100 then data.CloseDegree = 100 end;

    coroutine.start(function()
        local g2cCardCloseDegreeUp = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardCloseDegreeUp, data);
        if g2cCardCloseDegreeUp.Error == ErrorCode.ERR_Success then
            for k,v in pairs(data.ExpendMaterialList) do
                UIUtil.RemoveItem(v.MaterialId,v.Amount);
            end
            local playId = 0
            if card.CloseDegree < 25 then
                if data.CloseDegree >= 25 and data.CloseDegree <50 then
                    playId = 1
                elseif data.CloseDegree >=50 and data.CloseDegree <75 then
                    playId = 2
                elseif data.CloseDegree >=75 and data.CloseDegree <100 then
                    playId = 3
                elseif data.CloseDegree >= 100 then
                    playId = 4
                end
            elseif card.CloseDegree >= 25 and  card.CloseDegree < 50 then
                if data.CloseDegree >=50 and data.CloseDegree <75 then
                    playId = 2
                elseif data.CloseDegree >=75 and data.CloseDegree <100 then
                    playId = 3
                elseif data.CloseDegree >= 100 then
                    playId = 4
                end
            elseif card.CloseDegree >= 50 and  card.CloseDegree < 75 then
                if data.CloseDegree >=75 and data.CloseDegree <100 then
                    playId = 3
                elseif data.CloseDegree >= 100 then
                    playId = 4
                end
            elseif card.CloseDegree >= 75 and  card.CloseDegree < 100 then
                if data.CloseDegree >= 100 then
                    playId = 5
                end
            end
            local lastCloseDegree = card.CloseDegree
            card.CloseDegree = data.CloseDegree
            local func = function()
                local info = {cardInfoChgType = CardInfoChgType.CloseDegree,
                              closeDegree = card.CloseDegree,
                              oriCloseDegree = oriCloseDegree,
                              cardId = card.Id}
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
            end
            
            if playId ~= 5 then
                if playId ~= 0 then
                    uiDrawing:CoPlayForceWithoutCallback(SoundType.Degree, playId)
                else
                    if addNum < 5 then
                        uiDrawing:CoPlay(SoundType.Gift)
                    else
                        uiDrawing:CoPlay(SoundType.GoodGift)
                    end
                end
                func()
            else
                UIManager:GetInstance():OpenWindow(UIWindowNames.UICardFriendlyMax,{card = card, callback = func})
                uiDrawing:ResetMusicAndFace()
            end

            card:GetComponent("CardCharacterComponent"):CloseDegreeUp(oriCloseDegree)

            if card.CloseDegree == 100 then
                TaskData.AddModeTaskNum({Id = 5037})
                --角色亲密度100
                if card.TemplateId == 1001 then
                    TaskData.AddModeTaskNum({Id = 7003})
                elseif card.TemplateId == 1002 then
                    TaskData.AddModeTaskNum({Id = 7008})
                end
            end

        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardCloseDegreeUp.Error))
        end
    end)
end

function this.SendMarriedRequest(self,data)--结婚
    local player = Game.Scene.Player;
    local card =  player:GetComponent("CardComponent").Cards[data.CardId]

    coroutine.start(function()
        local g2cCardCloseDegreeUp = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardCloseDegreeUp, data)

        if g2cCardCloseDegreeUp.Error == ErrorCode.ERR_Success then
            for k,v in pairs(data.ExpendMaterialList) do
                UIUtil.RemoveItem(v.MaterialId,v.Amount);
            end
            card.CloseDegree = data.CloseDegree
            local info = {
                cardInfoChgType = CardInfoChgType.CloseDegree,
                cardId = card.Id
            }

            -- 解锁皮肤
            local skinBeans = g2cCardCloseDegreeUp.SkinBeans;
            local infos = nil
            local previousSkinId = card.SkinId
            if skinBeans ~= nil and table.count(skinBeans) > 0 then
                local skinInfo = skinBeans[1]
                Game.Scene.Player:GetComponent("SkinComponent"):Add(Game.Registry:NewObject("Skin",skinInfo))
                Game.Scene.Player:GetComponent("CardComponent"):InitZCardsSkins()
                UIManager:GetInstance():Broadcast(DataMessageNames.ON_SKIN_INFO_CHG,{skinId = skinInfo.TemplateId});
                infos = {}
                table.insert(infos,{rewardType = RewardType.CardSkin, templateId = skinInfo.TemplateId, num = 1})

                -- 修改皮肤
                local zSkin = table.first(Z_Skin, function (v) return skinInfo.TemplateId == v.Id end)
                local skinData = {}
                skinData.CardId = card.Id;
                skinData.SkinId = zSkin.Stage;
                local g2cSkinModify = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                        OuterOpcode.Name2Code.ETModel_C2M_SkinModify, skinData);
                if g2cSkinModify.Error == ErrorCode.ERR_Success then
                    local card = Game.Scene.Player:GetComponent("CardComponent").Cards[skinData.CardId];
                    card.SkinId = skinData.SkinId;
                    local tab = {
                        cardId = skinData.CardId,
                        cardInfoChgType = CardInfoChgType.Skin
                    }
                    DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG, tab)
                end
            end
            local func = function()
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG)
            end
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIGetMarried,{card = card, marryInfo = infos, previousSkinId = previousSkinId, callback = func})
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardCloseDegreeUp.Error))
        end
    end)
end

function this.SendResolveRequest(self,data)
    local player = Game.Scene.Player;
    local cardComponent = player:GetComponent("CardComponent");

    coroutine.start(function()
        local g2cCardDecompose = coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_CardDecompose, data);

        if g2cCardDecompose.Error == ErrorCode.ERR_Success then

            player.GoldCoin = player.GoldCoin + data.AcquireGoldCoin;
            player.StarSand = player.StarSand + data.AcquireStarSand;
            for k,v in pairs(data.CardId) do
                cardComponent:Remove(v);
            end
            --分解任务
            TaskData.AddModeTaskNum({type = 1013},table.count(data.CardId))
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,
                    {
                        cardInfoChgType = CardInfoChgType.Remove
                    }
            )
            local infos = {{rewardType = RewardType.Gold,TemplateId = 1,num = data.AcquireGoldCoin},
                           {rewardType = RewardType.StarSand,TemplateId = 4,num = data.AcquireStarSand}}
            local info = {rewards = infos,title = LangUtil.GetSysLang(3115)}
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIReward,info)
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cCardDecompose.Error))
        end
        
    end)
end


function this.SendConstelLevelRequest(self, data)--星命
    local player = Game.Scene.Player;
    local cardComponent = player:GetComponent("CardComponent");

    coroutine.start(function()
        local g2cData= coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
                OuterOpcode.Name2Code.ETModel_C2M_ConstelLevelActivate, data);
        if g2cData.Error == ErrorCode.ERR_Success then
            player.GoldCoin = player.GoldCoin - data.ExpendGoldCoin;
            for _,v in pairs(data.ExpendMaterialList) do
                cardComponent:Remove(v.MaterialId);
            end
            
            local card = player:GetComponent("CardComponent").Cards[data.CardId];
            card:GetComponent("CardConstelComponent"):LevelActivate(data.ConstelLevel)
            
            local zExpend = Z_CardConstelExpend[data.ConstelLevel]
            UIUtil.RemoveItem(UIPublic.GetItem(zExpend.ItemId).Id, zExpend.ItemNum[Z_Card[card.TemplateId].Rare]);

            local info = {cardInfoChgType = CardInfoChgType.Constel,
                          cardId = card.Id,
                          type = 10
            }
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG, info)
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG);
            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG);
        else
            UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cData.Error))
        end
    end)
end

function this.SendChangeEquipRequest(self, data)
    -- coroutine.start(function()
    --     local g2cData= coroutine.yieldstart(Game.Scene.Session.CoCall, nil,  Game.Scene.Session,
    --             PROTOCOL.CharacterPackEquipReq, data)
    -- end)
    PublicRequest.SendRequest(PROTOCOL.CharacterPackEquipReq,data)
end


return this