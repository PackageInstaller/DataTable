---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/15 13:43
---
local VisitLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.VisitLogic"
local LevelUpLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.LevelUpLogic"
local JadePearlLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.JadePearlLogic"
local FriendlyLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.FriendlyLogic"
local EvolveLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.EvolveLogic"
--local LimitBreakLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.LimitBreakLogic"
--local ResolveLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.ResolveLogic"
local SkinLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.SkinChangeLogic"
local ConstellationLogic = require "UI.UIIntens.UICardIntens.CardIntensLogic.ConstellationLogic"


local UICardIntensView = BaseClass("UICardIntensView", UIBaseView)
local base = UIBaseView
local this = UICardIntensView

local currnetName 


local PanelType = { VisitLogic, LevelUpLogic, EvolveLogic, JadePearlLogic, ConstellationLogic, FriendlyLogic, SkinLogic}
--local PanelType = { VisitLogic, LevelUpLogic, EvolveLogic, JadePearlLogic, ConstellationLogic, LimitBreakLogic, FriendlyLogic, ResolveLogic, SkinLogic}

local nameType = { "Visit", "LevelUp", "Evolve", "JadePearl", "Constellation", "Friendly", "Skin"}
--local nameType = { "Visit", "LevelUp", "Evolve", "JadePearl", "Constellation", "LimitBreak", "Friendly", "Resolve", "Skin"}
CardInfoChgType = 
{
    Other = 0,
    Level = 1,
    Star = 2,
    JadePearl = 3,
    CloseDegree = 4,
    Skin = 5,
    Equip = 6,
    FightSoul = 7,
    Lock = 8,
    Add = 9,
    Remove = 10,
    Support = 11,
    Home = 12,
    Room = 13,
    Constel = 14,
}

ShowCardType = {
    Card = 1,
    Paint = 2
}

function this.OnClickCardButton(self,card)  --点击角色
    self.fr_init = false
    self.ev_init = false
    self.jp_init = false
    self.lv_init = false
    self.lm_init = false
   -- self.rs_init = false
    self.sk_init = false
    self.vs_init = false
    
    self.cur_card = card
    self:OnRefresh()
end

function this.OpenCardList(self)
   
end

function this.OpenPanel(self, id) --打开界面
    if not self.panel_tab[id] then
        id = 1
    end
    self.panel_id = id

    local name = self.panel_tab[id].panelName
    currnetName = name
    if name ~= "Resolve" then
        if self.cur_card == nil then
            self.ctrl:CloseSelf()
            return
        end
    end

    if name ~= "Skin" then
        FriendlyLogic.Close(self)
    end

    UIPublic.InitButton(self.ChangeShowCardType, name ~= "Friendly")
    if name == "Friendly" then
        self.showCardType = ShowCardType.Card
        this.ChangeShowCardType(self)
        self.cardPaintInfo.gameObject:SetActive(false)
    else
        self.cardPaintInfo.gameObject:SetActive(true)
    end

    if name == "Skin" then
        self.paint:SetActive(false)
        self.cardInfo:SetActive(false)
        self.preCharacterButton.gameObject:SetActive(false)
        self.NextCharacterButton.gameObject:SetActive(false)
    else
        self.paint:SetActive(self.showCardType == ShowCardType.Paint)
        self.cardInfo:SetActive(self.showCardType == ShowCardType.Card)
        self.preCharacterButton.gameObject:SetActive(self.model.index ~= 1)
        self.NextCharacterButton.gameObject:SetActive(self.model.index ~= #self.model.characterList)
    end

    for k,v in pairs(self.panel_tab) do
        v.panelObj:SetActive(k == id)
        if v.btn then
            v.btnActive:SetActive(k == id)
            v.btn:GetComponent("Button").enabled = (not (k == id))
        end
    end
    if PanelType[id].Init then
        PanelType[id].Init(self, self.cur_card)
    end
end

function this.OpenPanelByName(self, name)
    for _, v in pairs(self.panel_tab) do
        if v.panelName == name then
            self:OpenPanel(v.type)
            break
        end
    end
end

function this.OpenResolve(self, _bool) -- 分解界面
    self.resolve_panel:SetActive(_bool)
    if _bool then
        --ResolveLogic.Init(self)
    end
end

function this.InitCardPaintInfo(self)
    if self.cur_card == nil then return end
    local card = self.cur_card
    local zCard = Z_Character[card.Id]
    local root = self.cardPaintInfo.transform
    local transform = root

    local star = transform:Find("Star"):GetComponent("Image")
    local rareLine = transform:Find("RareLine"):GetComponent("Image")
    local propImage = transform:Find("PropImage"):GetComponent("Image")
    local classImage = transform:Find("ClassImage"):GetComponent("Image")
    local rareIamge = transform:Find("RareIamge"):GetComponent("Image")
    local cardName = transform:Find("CardName"):GetComponent("Text")

    UIPublic.NewInitStar(star, card.Star)
    UIPublic.InitSubProp(propImage, zCard.Prop)
    UIUtil.SetSprite(classImage, AtlasConfig.Class, 
    zCard.Class .. "_" .. zCard.Rarity ..".png")
    coroutine.start(function()
        rareLine.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/"..UIPublic.RareNames[zCard.Rarity].."_Line_message.png")
        rareIamge.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCard.Rarity]..".png")
    end)
    cardName.text = Z_Card[card.Id].Name
end

function this.InitCardInfo(self,cardInfoChgType)
    if self.cur_card == nil then return end
    local card = self.cur_card
    local zCard = Z_Character[card.Id]
    local root = self.cardInfo.transform
    local cardFace = root:Find("CardFace")
    local transform = root
    local cardFaceValue  = root:Find("CardFace/CardFaceValue")
    
    local star = transform:Find("Star")
    local mainProp = transform:Find("MainProp")
    local subProp = transform:Find("SubProp")
    local rareFrame = transform:Find("RareFrame"):GetComponent("Image")
    local dividingLine = transform:Find("DividingLine"):GetComponent("Image")
    local raility = transform:Find("Raility"):GetComponent("Image")
    -- --
    -- local isRoom = transform:Find("Other/IsRoom").gameObject
    -- local isHome = transform:Find("Other/IsHome").gameObject
    -- local isSupport = transform:Find("Other/IsSupport").gameObject

    -- UIUtil.AddBtnEvent(self.preCharacterButton, function(go) 
    --     self.model:PreCard()
    --     self.cur_card = self.model.cur_card
    --     self:OnRefresh()
    -- end)

    -- UIUtil.AddBtnEvent(self.NextCharacterButton, function(go) 
    --     self.model:NextCard()
    --     self.cur_card = self.model.cur_card
    --     self:OnRefresh()
    -- end)

    self.preCharacterButton.gameObject:SetActive(self.model.index ~= 1)
    self.NextCharacterButton.gameObject:SetActive(self.model.index ~= #self.model.characterList)

    self.friendlyNumberText.text = card.Intimacy

    if cardInfoChgType == CardInfoChgType.Level then

    elseif cardInfoChgType == CardInfoChgType.Star then
        --UIPublic.InitStar(star,card) 
        UIPublic.NewInitStar(star:GetComponent("Image"),card.Star)
    elseif cardInfoChgType == CardInfoChgType.JadePearl then

    elseif cardInfoChgType == CardInfoChgType.Room then
        --isRoom:SetActive(self.player.BedroomCardId == card.Id)
    elseif cardInfoChgType == CardInfoChgType.Home then
        --isHome:SetActive(self.player.MainUICardId == card.Id)
    elseif cardInfoChgType == CardInfoChgType.Support then
        --isSupport:SetActive(self.player.AidId == card.Id)
    elseif cardInfoChgType == CardInfoChgType.FightSoul then

    elseif cardInfoChgType == CardInfoChgType.Equip then

    elseif cardInfoChgType == CardInfoChgType.Skin then
        --UIUtil.SetCardSprite(cardFaceValue:GetComponent("Image"),zCard.Id,card.SkinId,CardPictureType.Big,true)
        UIUtil.NewSetCardSprite(cardFaceValue:GetComponent("Image"),zCard.Id, card.SkinId,CardPictureType.Big)
    elseif cardInfoChgType == CardInfoChgType.CloseDegree then

    elseif cardInfoChgType == CardInfoChgType.Lock then
        
    elseif cardInfoChgType == CardInfoChgType.Other then
        
    elseif cardInfoChgType == nil then
        --isRoom:SetActive(self.player.BedroomCardId == card.Id)
        --isHome:SetActive(self.player.MainUICardId == card.Id)
        --isSupport:SetActive(self.player.AidId == card.Id)
        -- self.cardFace_NameTxt.text = Z_Card[card.Id].Name
        -- UIPublic.NewInitStar(star:GetComponent("Image"),card.Star) --星级
        -- UIPublic.InitSubProp(subProp,zCard.Prop) --副属性
        -- UIUtil.SetSprite(mainProp:GetComponent("Image"), AtlasConfig.Class, 
        -- Z_Character[card.Id].Class .. "_" .. zCard.Rarity ..".png")
        -- coroutine.start(function()
        --     cardFace:GetComponent("Image").sprite = CardBigMask
        --     rareFrame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/RareFrame/"..UIPublic.RareNames[zCard.Rarity]..".png")
        --     dividingLine.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/"..UIPublic.RareNames[zCard.Rarity].."_Line.png")
        --     raility.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCard.Rarity]..".png")
        --     UIUtil.NewSetCardSprite(cardFaceValue:GetComponent("Image"),zCard.Id, self.cur_card.SkinId,CardPictureType.Big)
        --     root.gameObject:SetActive(true)
        -- end)
    end

    self.cardFace_NameTxt.text = Z_Card[card.Id].Name
    UIPublic.NewInitStar(star:GetComponent("Image"),card.Star) --星级
    UIPublic.InitSubProp(subProp,zCard.Prop) --副属性
    UIUtil.SetSprite(mainProp:GetComponent("Image"), AtlasConfig.Class, 
    Z_Character[card.Id].Class .. "_" .. zCard.Rarity ..".png")
    coroutine.start(function()
        cardFace:GetComponent("Image").sprite = CardBigMask
        rareFrame.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/RareFrame/"..UIPublic.RareNames[zCard.Rarity]..".png")
        dividingLine.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/CardInfo/"..UIPublic.RareNames[zCard.Rarity].."_Line.png")
        raility.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Common/Raility/"..UIPublic.RareNames[zCard.Rarity]..".png")
        UIUtil.NewSetCardSprite(cardFaceValue:GetComponent("Image"),zCard.Id, self.cur_card.SkinId,CardPictureType.Big)
        if self.panel_tab[self.panel_id].panelName ~= "Skin" then
            root.gameObject:SetActive(true)
        end

        if currnetName == "Skin" then
            self.preCharacterButton.gameObject:SetActive(false)
            self.NextCharacterButton.gameObject:SetActive(false)
            self.paint:SetActive(false)
            self.cardInfo:SetActive(false)
        else
            self.paint:SetActive(self.showCardType == ShowCardType.Paint)
            self.cardInfo:SetActive(self.showCardType == ShowCardType.Card)

            self.uiDrawing:changeType(ShowGirlShowType.Original)
            self.uiDrawing:CoPlayImageOnly( self.cur_card.Id, self.cur_card.SkinId)

            local zSkin = Z_Skin[self.cur_card.SkinId]

            if self.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
               self.uiDrawing:ChangeMode(self.cur_card.Id, self.cur_card.SkinId)
            end
        end
    end)
end


local function OnBack(self)
    --if self.panel_id == 8 then
    --    self:OpenPanel(1)
    --else
        self.ctrl:CloseSelf()
    --end
end


function this.OnLangCreate(self)
    self.cardFace_NameTxt = LangUtil.BindText(self.langRc:GetObject("NameTextRoot").transform:Find("Text"))
   
    local btnLang = { 5, 7, 9, 11, 288, 15 } --, 13, 17
    for i, v in ipairs(btnLang) do
        local panel = self.panel_tab[i]
        LangUtil.GetSpriteLang(v, function(sprite) panel.btn:GetComponent("Image").sprite = sprite end)
        LangUtil.GetSpriteLang(v + 1, function(sprite) panel.btnActive:GetComponent("Image").sprite = sprite end)
    end
    for _, v in pairs(self.panel_tab) do
        if PanelType[v.type].OnLangCreate then
            PanelType[v.type].OnLangCreate(self, v.panelObj)
        end
    end
end


function this.OnCreate(self)
    base.OnCreate(self)
    ---@type HintComponent
    self.hintComponent = Game.Scene:GetComponent("HintComponent")

    self.sortType = 1
    self.orderType = 1
    self.panel_tab = {}
    self.showCardType = ShowCardType.Paint

    self.back_btn = self.rc:GetObject("ReturnButton")
    self.cardInfo =  self.rc:GetObject("Card")
    self.cardOp = self.rc:GetObject("CardOp")
    self.cardPaintInfo = self.rc:GetObject("CardPaintInfo")
    self.rootCanvas = self.rc:GetObject("Left"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.DescriptionDetailPanel = self.rc:GetObject("DescriptionDetailPanel"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.skinCanvas = self.rc:GetObject("SkinRight"):GetComponent(typeof(CS.UnityEngine.Canvas))
    self.friendlyNumberText = self.rc:GetObject("FriendlyNumberText"):GetComponent("Text")
    self.ChangeShowCardType = self.rc:GetObject("ChangeShowCardType")

    self.preCharacterButton = self.rc:GetObject("PreCharacterButton")
    self.NextCharacterButton = self.rc:GetObject("NextCharacterButton")
    --self.lock = self.cardOp.transform:Find("Lock").gameObject
    self.paintRoot = self.rc:GetObject("PicRoot").transform
    self.homeCard = self.rc:GetObject("HomeCard"):GetComponent("Image")
    self.spinePic = self.rc:GetObject("SpinePic")
    self.paint = self.rc:GetObject("Paint")
    
    UIUtil.AddBtnEvent(self.cardOp.transform:Find("HandBook"), function() 
        this.OpenPanel(self, 1) 
        UIManager:GetInstance():OpenWindow(UIWindowNames.UICardHandBookDetail, 
        {
            id = self.cur_card.TemplateId,
            isOnCidList = self.model.isOnCidList
        }
    ) end)
    UIUtil.AddBtnEvent(self.cardOp.transform:Find("Skin"), function() self:OpenPanelByName("Skin") end)
    UIUtil.AddBtnEvent(self.ChangeShowCardType, function() this.ChangeShowCardType(self) end)
    --UIUtil.AddBtnEvent(self.cardOp.transform:Find("Skin"), function() self:OpenPanel(SkinLogic) end)
    --
    --UIUtil.AddBtnEvent(self.lock,function()self.ctrl:SendLockRequest(self.cur_card)  end)
    UIPublic.SetBackButton(
        self.back_btn,
        UIWindowNames.UICardIntens,
        428,
        function()
            if self.model.parent ~= nil then
                UIManager:GetInstance():OpenWindow(UIWindowNames.UICardList)
            end
        end
    )

    self.lines = self.rc:GetObject("Lines")

    self.uiDrawing = UIDrawing.New(self.paintRoot, self.homeCard, self.spinePic, SoundType.Main, UIWindowNames.UIHome, self.lines)

    self.btnCtrl = self.rc:GetObject("ButtonCtrl").transform

    for i, v in ipairs(nameType) do
        local panel = {}
        panel.type = i
        panel.panelObj = self.rc:GetObject(v .. "Panel")
        panel.panelObj:SetActive(false)
        panel.panelName = v
        if i <= self.btnCtrl.childCount then
            panel.btn = self.btnCtrl:GetChild(i - 1).gameObject
            panel.btnActive = panel.btn.transform:Find("Active").gameObject
            UIUtil.AddBtnEvent(panel.btn, function(go) self:OpenPanel(panel.type) end)
        end
        
        if v == "Visit" then 
            self.visit_panel = panel.panelObj
            panel.func = VisitLogic.Init
        elseif v == "LevelUp" then 
            self.level_up_panel = panel.panelObj
            panel.func = LevelUpLogic.Init
        elseif v == "Evolve" then 
            self.evolve_panel = panel.panelObj
            panel.func = EvolveLogic.Init
        elseif v == "JadePearl" then 
            self.jade_pear_panel = panel.panelObj
            panel.func = JadePearlLogic.Init
        --elseif v == "LimitBreak" then self.limit_break_panel = panel.panelObj
        elseif v == "Friendly" then 
            self.friendly_panel = panel.panelObj
            panel.func = FriendlyLogic.Init
        --elseif v == "Resolve" then self.resolve_panel = panel.panelObj
        elseif v == "Constellation" then 
            self.constellation_panel = panel.panelObj
            panel.func = ConstellationLogic.Init
        -- elseif v == "Constellation" and not ChannelManager:GetInstance():IsChannel(ChannelType.Test) then
        --     panel.btn:SetActive(false)
        --     panel.func = ConstellationLogic.Init
        end
        self.panel_tab[panel.type] = panel
    end
    
    for _, v in pairs(self.panel_tab) do
        if PanelType[v.type].OnCreate then
            PanelType[v.type].OnCreate(self, v.panelObj)
        end
    end

    UIUtil.AddBtnEvent(self.preCharacterButton, function(go) 
        self.model:PreCard()
        self.cur_card = self.model.cur_card
        self:OnRefresh()
    end)

    UIUtil.AddBtnEvent(self.NextCharacterButton, function(go) 
        self.model:NextCard()
        self.cur_card = self.model.cur_card
        self:OnRefresh()
    end)


    --新手引导
    local guide=Game.Scene:GetComponent("GuideComponent")
    local GuideComplete,GuideStep, GuideRun =guide:GetCurrentData()
    if GuideRun and GuideComplete == 2 and GuideStep==7 then
        local uiGuide = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide)
        uiGuide.View.mask_bc.transform.parent.gameObject:SetActive(true)
        guide:CurGuide(9)
    end
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.btnCtrl.gameObject:SetActive(false)
    self.isOpen = true
    self.cur_card = self.model.cur_card
    self.panel_id = self.model.cur_panel_id
    self:OnRefresh()
    self.btnCtrl.gameObject:SetActive(true)
    self.uiDrawing:changeType(ShowGirlShowType.Original)
end

function this.OnRefresh(self)
    self.panel_id = self.panel_id or 1
    
    
    self.cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    self.player = Game.Scene.Player
    self.hintComponent.Card:GetChild("Cards"):GetChild(self.cur_card.Id):Click()

    self:OpenPanel(self.panel_id)
    self:InitCardInfo()
    self:InitCardPaintInfo()
    
end

local function OnCardInfoChg(self,info)
    self.cards = self.player:GetComponent("CardComponent").Cards
    if self.cur_card ~=nil and self.cards[self.cur_card.Id] == nil then
        self.cur_card = nil
    end
    

    for _, v in pairs(self.panel_tab) do
        if PanelType[v.type].OnCardInfoChg then
            PanelType[v.type].OnCardInfoChg(self, info)
        end
    end

    self:InitCardInfo(info.cardInfoChgType)
end

local function OnSkinInfoChg(self,info)
    SkinLogic.OnSkinInfoChg(self,info)
end

function this.ChangeShowCardType(self)
    if self.panel_id == 7 then
        return
    end

    if self.showCardType == ShowCardType.Paint then
        self.showCardType = ShowCardType.Card
    else
        self.showCardType = ShowCardType.Paint
    end
    self.paint:SetActive(self.showCardType == ShowCardType.Paint)
    self.cardInfo:SetActive(self.showCardType == ShowCardType.Card)
end

--新手引导
local function ON_Guide_Click(self,cid,num,isrun,minStep)
    local Guide = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide).View
        if cid==2 and isrun then
            if num==18 and minStep == 1 then
                self:OpenPanelByName("LevelUp")
            elseif num==21 and minStep == 3 then
                LevelUpLogic.OnClickChgBtn(self,3)
            elseif num==22 and minStep == 1 then
                LevelUpLogic.OnMaxBtn(self)
            elseif num==23 and minStep == 1then
                Guide:hideFinger()
                Guide:Hide()
                Guide:hideTxtAll()
                --Guide.mask_ho.gameObject:SetActive(false)
                LevelUpLogic.SendLvUpRequest(self)
            elseif num==24 then
                LevelUpLogic.OnClickChgBtn(self,2)
            elseif num==25 then
                LevelUpLogic.OnMaxBtn(self)
            elseif num==26 then
                LevelUpLogic.SendLvUpRequest(self)
            elseif num==27 then
                LevelUpLogic.OnClickChgBtn(self,3)
            elseif num==28 then
                LevelUpLogic.OnMaxBtn(self)
            elseif num==29 then
                LevelUpLogic.SendLvUpRequest(self)
            elseif num==30 and minStep == 2 then
                self:OpenPanelByName("Evolve")
            elseif num==33 and minStep == 1 then
                Guide:hideFinger()
                Guide:Hide()
                Guide:hideTxtAll()
                --Guide.mask_ho.gameObject:SetActive(false)
                EvolveLogic.OnClickEvolveButton(self)
            elseif num==34 and minStep == 2 then
                Guide:hideFinger()
                Guide:Hide()
                Guide:hideTxtAll()
                --Guide.mask_ho.gameObject:SetActive(false)
                EvolveLogic.OnClickEvolveButton(self)
            elseif num==38 and minStep == 1 then
                self:OpenPanelByName("JadePearl")
            elseif num==41 and minStep == 1 then
                Guide:hideFinger()
                Guide:Hide()
                Guide:hideTxtAll()
                JadePearlLogic.OnClickActiveButton(self)
            -- elseif num==43 and minStep == 1 then
            --     self:OpenPanelByName("LimitBreak")
            elseif num==47 and minStep == 1 then
                self:OpenPanelByName("Friendly")
            -- elseif num==52 and minStep == 2 then
            --     self:OpenPanelByName("Resolve")
            elseif num==56 and minStep == 1 then
                OnBack(self)
            end
        end
end

local function characterPackUpdatePush(self)
    self.cards = self.model.cards
    self.cur_card = self.model.cur_card
    for _, panel in pairs(self.panel_tab) do
        if panel.panelObj.activeSelf == true then
            if panel.func ~= nil then
                panel.func(self, self.cur_card)
            end
        end
    end
end

-- 左边界面挡住皮肤模型，配合调Z轴距离
function this.OnViewTop(self)
    base.OnViewTop(self)
    self.rootCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.rootCanvas.sortingLayerName = SortingLayerNames.UI
    self.skinCanvas.sortingOrder = self.canvas.unity_canvas.sortingOrder + 1
    self.skinCanvas.sortingLayerName = SortingLayerNames.UI
    self.DescriptionDetailPanel.sortingOrder = self.canvas.unity_canvas.sortingOrder + 2
    self.DescriptionDetailPanel.sortingLayerName = SortingLayerNames.UI
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
    self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
    self.comTopView:InitComTop(self, self:GetName())

end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
    
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_CARD_INFO_CHG,OnCardInfoChg)
    self:AddUIListener(UIMessageNames.ON_SKIN_INFO_CHG,OnSkinInfoChg)
    self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
    self:AddUIListener(UIMessageNames.ON_CHARACTER_UPDATE_PUSH,characterPackUpdatePush)
    self:AddUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE, this.OnRefresh)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_CARD_INFO_CHG) 
    self:RemoveUIListener(UIMessageNames.ON_SKIN_INFO_CHG)
    self:RemoveUIListener(UIMessageNames.ON_Guide_Click)
    self:RemoveUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE)
end

function this.OnDisable(self)
    base.OnDisable(self)
    self.fr_init = false
    self.ev_init = false
    self.jp_init = false
    self.lv_init = false
    self.lm_init = false
    self.rs_init = false
    self.sk_init = false
    self.vs_init = false
    for _, v in pairs(self.panel_tab) do
        if PanelType[v.type].OnDisable then
            PanelType[v.type].OnDisable(self)
        end
    end
    
    local root = self.cardInfo.transform
    local cardFace = root:Find("CardFace/CardFaceValue")
    root:Find("CardFace"):GetComponent("Image").sprite = DeActiveSprite
    cardFace:GetComponent("Image").sprite = DeActiveSprite
    root:Find("RareFrame"):GetComponent("Image").sprite = DeActiveSprite
    self.cardInfo.gameObject:SetActive(false)
    self.uiDrawing:Disable()
end

function this.OnDestroy(self)
    base.OnDestroy(self)
    self.scroll:Dispose()
end


return this