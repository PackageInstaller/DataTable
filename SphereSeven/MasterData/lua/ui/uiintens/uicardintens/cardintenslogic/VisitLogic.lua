---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:49
---

local VisitLogic = {}
local this = VisitLogic
local attrDesc = {"Hp","Atk","Def","MagicDef","Speed","Acc","Evasion","EAcc","ERist","CriHurt","CriDamage"}
--体力，攻击力，物理防御，魔法防御，速度，命中，回避，效果命中，效果抗性，暴击，暴击伤害

local function OnClickFightSoulEvent(self,card,fightSoul,index)
    if fightSoul ~= nil then
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulChangeState1,
                {card = self.cur_card,index = index,state = 2,fightSoul = fightSoul})
    else
        UIPublic.OpenChangeFightSoulWindow(card)
    end
end

function this.Init(self)
    local card = self.cur_card
    if self.vs_init == false then
        self.vs_init = true
    end

    self.cur_card:UpdateCarddata()

    this.InitExpandDesc(self)
    this.InitSkillArea(self)
    UIPublic.InitEquip(self.vs_equip,card,function(v,equip,part) OnClickEquipEvent(self,v,equip,part)  end)
    UIPublic.InitExpArea(self.vs_expBar,card)
    UIPublic.InitNumerical(self.vs_numerical,card)
    UIPublic.SetJaderPanel(self.jadePanel, card)
    UIPublic.SetConstellationLightPanel(self.constellationLightPanel, card)
end

function this.InitSkillArea(self)
    local skillIdList = {
        self.cur_card.Skills.attack,
        self.cur_card.Skills.skill,
        self.cur_card.Skills.ultimate,
        self.cur_card.Skills.passive_skill
    }
    for i = 0,self.vs_skill.transform.childCount - 1 do
        local skillChild = self.vs_skill.transform:GetChild(i)
        UIPublic.InitSkillChild(skillChild.transform, skillIdList[i+1], i + 1, self.cur_card, true)
    end
end

function this.InitSkillChild(self, transform, skillId, skillType)
    local zSkill = Z_Skill[skillId]
    local iconImg = transform:Find("ImageBg/Icon"):GetComponent("Image")
    local lock = transform:Find("ImageBg/Icon/Lock")

    lock.gameObject:SetActive(false)
    if zSkill ~= nil then
        UIUtil.SetSprite(iconImg, AtlasConfig.SkillIcon, zSkill.SkillIcon)
        local params = {}
        for index, value in ipairs(zSkill.Params) do
            table.insert(params, value)
        end

        local data = {
            title = "技能详情",
            subTitle = zSkill.Name,
            message = zSkill.SkillDesc,
            id = zSkill.Id,
            cd = zSkill.CooldownTurn,
            character = self.cur_card,
            params = params,
            skillType = skillType
        }

        UIUtil.AddBtnEventNoBug(iconImg,function(go)
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIDetail,data)
        end)
    else
        lock.gameObject:SetActive(true)
        --iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/Image/Public/touming.png")
        coroutine.start(function ()
            iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/SkillIcon/PassiveSkill.png")
        end)
        -- iconImg.sprite = AtlasManager:GetInstance():CoLoadImageAsync("UI/SkillIcon/PassiveSkill.png")
        UIUtil.AddBtnEventNoBug(iconImg,function(go) 
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(149))
        end)
    end
end

function this.OnLangCreate(self,panel)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")

    langRc:GetObject("Hp"):GetComponent("Text").text = LangUtil.GetSysLang(1220)
    langRc:GetObject("Atk"):GetComponent("Text").text = LangUtil.GetSysLang(1221)
    langRc:GetObject("Def"):GetComponent("Text").text = LangUtil.GetSysLang(1222)
    langRc:GetObject("MagicDef"):GetComponent("Text").text = LangUtil.GetSysLang(1223)
    langRc:GetObject("Speed"):GetComponent("Text").text = LangUtil.GetSysLang(1224)
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.vs_init = false
    self.vs_set_room_btn = rc:GetObject("SetRoomButton")
    self.vs_setSupport_btn = rc:GetObject("SetSupportButton")
    self.vs_set_main_btn = rc:GetObject("SetMainButton")
    self.vs_equip = rc:GetObject("Equip")
    self.vs_fightSoul = rc:GetObject("FightSoul")
    self.vs_expBar = rc:GetObject("ExpBar")
    self.vs_numerical = rc:GetObject("Numerical")
    self.vs_skill = rc:GetObject("SKill")
    self.vs_RoleLv = rc:GetObject("RoleLv")

    self.jadePanel = rc:GetObject("JadePanel").transform
    self.constellationLightPanel = rc:GetObject("ConstellationLightPanel").transform

    self.expandBtn = rc:GetObject("ExpandBtn")
    self.expandInfo =rc:GetObject("ExpandInfo")
    self.descContent = rc:GetObject("DescContent").transform
    self.expandBtnEndabled = false

    UIUtil.AddBtnEventNoBug(self.expandBtn, function(go)
        self.expandBtnEndabled = not self.expandBtnEndabled
        self.expandInfo:SetActive(self.expandBtnEndabled)
        this.InitExpandDesc(self)
    end)
end

function this.OnCardInfoChg(self,info)
    if self.vs_init then
        local card = self.cur_card
        if info.cardInfoChgType == CardInfoChgType.Level then
            UIPublic.InitNumerical(self.vs_numerical,card)
            UIPublic.InitExpArea(self.vs_expBar,card)
        elseif info.cardInfoChgType == CardInfoChgType.Star then
            UIPublic.InitNumerical(self.vs_numerical,card)
            this.InitSkillArea(self)
            --UIPublic.InitSkillArea (self.vs_skill,card)
        elseif info.cardInfoChgType == CardInfoChgType.JadePearl then
            UIPublic.SetJaderPanel(self.jadePanel, card)
            UIPublic.InitNumerical(self.vs_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.FightSoul then
            UIPublic.InitNumerical(self.vs_numerical,card)
            UIPublic.InitFightSoul(self.vs_fightSoul,card, 
                    function(v,fightSoul,index) 
                        OnClickFightSoulEvent(self,v,fightSoul,index)
                    end )
        elseif info.cardInfoChgType == CardInfoChgType.Equip then
            UIPublic.InitNumerical(self.vs_numerical,card)
            UIPublic.InitEquip(self.vs_equip,card,function(v,equip,part)
                OnClickEquipEvent(self,v,equip,part)  
            end)
        elseif info.cardInfoChgType == CardInfoChgType.Skin then

        elseif info.cardInfoChgType == CardInfoChgType.CloseDegree then
            UIPublic.InitNumerical(self.vs_numerical,card)
            UIPublic.InitButton(self.vs_set_room_btn,card.CloseDegree == 999)
        elseif info.cardInfoChgType == CardInfoChgType.Lock then
            
        end
        -- self.expandInfo:SetActive(self.expandBtnEndabled)
        -- this.InitExpandDesc(self)
    end
end

function this.OnDisable(self)
    self.expandBtnEndabled = false
    if self.vs_init then

    end
end

function this.InitExpandDesc(self)
    for index, value in ipairs(attrDesc) do
        local transform = self.descContent:GetChild(index - 1).transform
        this.InitExtraAttr(self, transform, value)
    end
    
    self.expandInfo:SetActive(self.expandBtnEndabled)
end

function this.InitExtraAttr(self, transform, value)
    local descText = transform:Find("Layout/DescText"):GetComponent("Text")
    local finalNumberText = transform:Find("Layout/FinalNumberText"):GetComponent("Text")
    local numbertext = transform:Find("Layout/NumberText")

    local numeric_component = self.cur_card:GetComponent("NumericComponent")

    if value == "Hp" then
        descText.text = LangUtil.GetSysLang(1220)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.MaxHp))
        numbertext:GetComponent("Text").text = math.floor(numeric_component:Get(NumericType.MaxHp) - numeric_component:Get(NumericType.MaxHpBase) + 0.5)  
    elseif value == "Atk" then
        descText.text = LangUtil.GetSysLang(1221)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Atk))
        numbertext:GetComponent("Text").text = math.floor(numeric_component:Get(NumericType.Atk) - numeric_component:Get(NumericType.AtkBase) + 0.5)
    elseif value == "Def" then
        descText.text = LangUtil.GetSysLang(1222)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Def))
        numbertext:GetComponent("Text").text = math.floor(numeric_component:Get(NumericType.Def) - numeric_component:Get(NumericType.DefBase) + 0.5)
    elseif value == "MagicDef" then
        descText.text = LangUtil.GetSysLang(1223)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.MagicDef))
        numbertext:GetComponent("Text").text = math.floor(numeric_component:Get(NumericType.MagicDef) - numeric_component:Get(NumericType.MagicDefBase) + 0.5)
    elseif value == "Speed" then
        descText.text = LangUtil.GetSysLang(1224)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Speed))
        numbertext:GetComponent("Text").text = math.floor(numeric_component:Get(NumericType.Speed) - numeric_component:Get(NumericType.SpeedBase) + 0.5)
    elseif value == "Acc" then
        descText.text = LangUtil.GetSysLang(1225)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Acc)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.Acc) - numeric_component:Get(NumericType.AccBase) .. "%"
    elseif value == "Evasion" then
        descText.text = LangUtil.GetSysLang(1226)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Pry)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.Pry) - numeric_component:Get(NumericType.PryBase) .. "%"
    elseif value == "EAcc" then
        descText.text = LangUtil.GetSysLang(1227)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.EAcc)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.EAcc) - numeric_component:Get(NumericType.EAccBase) .. "%"
    elseif value == "ERist" then
        descText.text = LangUtil.GetSysLang(1228)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.ERist)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.ERist) - numeric_component:Get(NumericType.ERistBase) .. "%"
    elseif value == "CriHurt" then
        descText.text = LangUtil.GetSysLang(1229)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.Cri)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.Cri) - numeric_component:Get(NumericType.CriBase) .. "%"
    elseif value == "CriDamage" then
        descText.text = LangUtil.GetSysLang(1230)
        finalNumberText.text = math.modf(numeric_component:Get(NumericType.CriDamage)) .. "%"
        numbertext:GetComponent("Text").text = numeric_component:Get(NumericType.CriDamage) - numeric_component:Get(NumericType.CriDamageBase) .. "%"
    end
end

return this