---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:50
---

local EvolveLogic = {}
local this = EvolveLogic
local maxStar = 5
local romaList = {"I","II","III","IV","V","VI"}
local isSkip = false
local enhanceType = "EnhanceAttack"

function this.OnClickEvolveButton(self)
    local currentStar = self.cur_card.Star

    if currentStar == 5 then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2015))--等级达到上限
        return
    end

    if UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1]) < self.NeedGoldCount then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1033))--"金币不足"
        return
    end

    if not self.isItemEnough then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1053))--"材料不足"
        return
    end

    local sendTable = {}
    sendTable.id = self.cur_card.TemplateId

    coroutine.start(function()
        PublicRequest.SendRequest(
            PROTOCOL.CharacterPackEvolutionReq,sendTable,
            function(response, error)
                if error == 0 then
                    Game.Scene:GetComponent("SoundComponent"):Stop()
                    Game.Scene:GetComponent("SoundComponent"):PlayEvolutionSound(self.cur_card)
                    if not isSkip then
                        UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
                        local func = function()
                            local info = {cardInfoChgType = CardInfoChgType.Star,
                                          cardId = self.cur_card.TemplateId,
                                          originalStar = currentStar,
                            }
                            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG,info)
                            DataManager:GetInstance():Broadcast(DataMessageNames.ON_ITEM_INFO_CHG)
                            DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG)
                            DataManager:GetInstance():Broadcast(DataMessageNames.ON_MAIN_UI_CARD_CHG)
                        end
                
                        UIManager:GetInstance():OpenWindow(UIWindowNames.UICardEvolve,{
                            card = self.cur_card,
                            originalStar = currentStar,
                            callback = func})
                    end
                end
            end)
    end)
end

---------===============================================================================

local function InitTop(self)
    local currentStar = self.cur_card.Star
    local transform = self.ev_top.transform
    local updateSkill = transform:Find("UpdateSkill")
    local originalSKill = transform:Find("OriginalSKill")
    local newSkillUnlockImage = transform:Find("NewSkillUnlock")

    local toBeUnlockSkill = Z_CharacterEvolution[self.cur_card.TemplateId][currentStar + 1]
    local unLockSkillId
    local updateSkillValue = {}

    if currentStar == maxStar then -- 满星
        newSkillUnlockImage.gameObject:SetActive(false)
        originalSKill.gameObject:SetActive(false)
        updateSkill.gameObject:SetActive(false)
        return
    end
    updateSkill.gameObject:SetActive(true)

    enhanceType = ""
    if #toBeUnlockSkill.EnhanceAttack ~= 0 then
        updateSkillValue.EnhanceAttack = toBeUnlockSkill.EnhanceAttack
        enhanceType = "EnhanceAttack"
        unLockSkillId = Z_CharacterEvolution[self.cur_card.TemplateId][1].Attack
    elseif #toBeUnlockSkill.EnhanceSkill ~= 0 then
        updateSkillValue.EnhanceSkill = toBeUnlockSkill.EnhanceSkill
        enhanceType = "EnhanceSkill"
        unLockSkillId = Z_CharacterEvolution[self.cur_card.TemplateId][1].Skill
    elseif #toBeUnlockSkill.EnhanceUltimate ~= 0 then
        updateSkillValue.EnhanceUltimate = toBeUnlockSkill.EnhanceUltimate
        enhanceType = "EnhanceUltimate"
        unLockSkillId = Z_CharacterEvolution[self.cur_card.TemplateId][1].Ultimate
    elseif #toBeUnlockSkill.EnhancePassiveSkill ~= 0 then
        updateSkillValue.EnhancePassiveSkill = toBeUnlockSkill.EnhancePassiveSkill
        enhanceType = "EnhancePassiveSkill"
        unLockSkillId = Z_CharacterEvolution[self.cur_card.TemplateId][2].PassiveSkill
    end

    if enhanceType == "" then
        if toBeUnlockSkill.PassiveSkill ~= 0 then
            unLockSkillId = toBeUnlockSkill.PassiveSkill
            enhanceType = "EnhancePassiveSkill"
        elseif toBeUnlockSkill.Attack ~= 0 then
            unLockSkillId = toBeUnlockSkill.Attack
            enhanceType = "EnhanceAttack"
        elseif toBeUnlockSkill.Skill ~= 0 then
            unLockSkillId = toBeUnlockSkill.Skill
            enhanceType = "EnhanceSkill"
        elseif toBeUnlockSkill.Ultimate ~= 0 then
            unLockSkillId = toBeUnlockSkill.Ultimate
            enhanceType = "EnhanceUltimate"
        end
        newSkillUnlockImage.gameObject:SetActive(true)
        originalSKill.gameObject:SetActive(false)
        this.InitSkillDescription (self, updateSkill, unLockSkillId, {})
    else
        newSkillUnlockImage.gameObject:SetActive(false)
        originalSKill.gameObject:SetActive(true)
        this.InitSkillDescription (self, originalSKill, unLockSkillId, {})
        this.InitSkillDescription (self, updateSkill, unLockSkillId, updateSkillValue)
    end
end

local function InitNeedItem(self)
    if self.cur_card.Star == maxStar then
        return
    end
    local transform = self.ev_bot.transform
    local matterRoot = transform:Find("MatterRoot/MatterList")
    local currentStar = self.cur_card.Star
    local cost = Z_CharacterEvolution[self.cur_card.TemplateId][currentStar].Cost
    local needItemList = nil
    needItemList = Z_Cost[cost]

    for i = 0, 3 do
        local child = matterRoot:GetChild(i)
        child.gameObject:SetActive(false)
    end

    local goldInfo = {}
    self.isItemEnough = true
    local isItemEnough = true

    if needItemList ~= nil then
        for i = 0, #needItemList - 1 do
            local itemId = needItemList[i + 1].ItemId
            if itemId == tonumber(Z_Misc["GOLD_ID"].Value[1]) then
                goldInfo = needItemList[i + 1]
            else
                local child = matterRoot:GetChild(i)
                child.gameObject:SetActive(true)
                local image = child:Find("Avatar"):GetComponent("Image")
                local bg = child:Find("Frame"):GetComponent("Image")
                local itemText = child:Find("NameTxt"):GetComponent("Text")
                local needMatterText = child:Find("NeedTxt"):GetComponent("Text")
                UIPublic.InitItemIconNew(image, bg, RewardType.RewardTypeItem, itemId)
                itemText.text = Z_Item[itemId].Name
                local color = (UIPublic.GetItemAmount(itemId) >= needItemList[i + 1].Count and {"<color=#FFFFFF>"} or {"<color=#FF6243>"})[1]
                needMatterText.text = color .. UIPublic.GetItemAmount(itemId) .. "</color>/" .. needItemList[i + 1].Count
                if UIPublic.GetItemAmount(itemId) < needItemList[i + 1].Count then
                    isItemEnough = false
                    self.isItemEnough = false
                end
                
                UIUtil.AddBtnEventNoBug(bg,function(go)
                    local showData = {}
                    showData.showType = ShowType.Item
                    showData.tempId = itemId
                    UIUtil.OpenThingsDetailWindow(showData, true)
                end)
            end
        end
    end

    local holdNum = UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1])
    if self.cur_card.Star == 5 or goldInfo.Count == nil then
        self.NeedGoldTxt.text = 0
    else
        local color = (holdNum >= goldInfo.Count and {"<color=#FFFFFF>"} or {"<color=#FF6243>"})[1]
        self.NeedGoldTxt.text = color .. goldInfo.Count .. "</color>"
    end
    self.NeedGoldCount = goldInfo.Count
    if holdNum < goldInfo.Count then
        isItemEnough = false
        self.isItemEnough = false
    end

    UIPublic.InitButton(self.ev_btn, isItemEnough)
end

function this.InitSkillDescription(self,transform,skillId, updateValue)
    if Z_Skill[skillId] == nil then
        return
    end

    local skillDescritpion = transform:Find("SkillDescriptionText")
    local skillName = transform:Find("SkillText")
    local cooldownTurn = transform:Find("CDText")
    local skillIcon = transform:Find("SkillItem/ImageBg/Icon")
    local skillLabel = transform:Find("SkillItem/ImageBg/Label/Text")
    local CDObj = transform:Find("CDObj").gameObject
    UIUtil.SetSprite(skillIcon:GetComponent("Image"),AtlasConfig.SkillIcon,Z_Skill[skillId].SkillIcon)

    local skill = Z_Skill[skillId]
    skillName:GetComponent("Text").text = skill.Name
    skillLabel:GetComponent("Text").text = skill.Name
    cooldownTurn:GetComponent("Text").text = skill.CooldownTurn
    if skill.CooldownTurn == 0 then
        CDObj.gameObject:SetActive(false)
        cooldownTurn:GetComponent("Text").text = ""
    else
        CDObj.gameObject:SetActive(true)
    end
    

    local skillDesc = skill.SkillDesc
    local evo_params = Z_Skill[skillId].Params
    local beadInfo = Z_CharacterBead[self.cur_card.TemplateId]
    local constellationInfo = Z_CharacterConstellation[self.cur_card.TemplateId]
    local evoInfo = Z_CharacterEvolution[self.cur_card.TemplateId]
    local skillNumber = {}

    for index, value in ipairs(evo_params) do
        skillNumber[index] = value
    end

    for i = 0, self.cur_card.Bead do
        if beadInfo[i] ~= nil then
            for index, value in ipairs(beadInfo[i][enhanceType]) do
                skillNumber[index] = value + skillNumber[index]
            end
        end
    end

    for i = 0, self.cur_card.Constellation do
        if constellationInfo[i] ~= nil then
            for index, value in ipairs(constellationInfo[i][enhanceType]) do
                skillNumber[index] = value + skillNumber[index]
            end
        end
    end

    for i = 0, self.cur_card.Star do
        if evoInfo[i] ~= nil then
            for index, value in ipairs(evoInfo[i][enhanceType]) do
                skillNumber[index] = value + skillNumber[index]
            end
        end
    end

    if table.count(updateValue) ~= 0 then
        for index, value in ipairs(updateValue[enhanceType]) do
            skillNumber[index] = value + skillNumber[index]
        end
    end

    for index, value in ipairs(skillNumber) do
        skillDesc = string.gsub(skillDesc, "XX" .. index, value)
    end

    skillDescritpion:GetComponent("Text").text = string.sub(skillDesc, 2, -2) -- skillDesc
end

local function InitEvolvePanel(self,card)
    self.cur_card = card
    InitNeedItem(self)
    this.InitStarInfo(self)
    InitTop(self)

    UIPublic.InitButton(self.ev_btn, self.cur_card.Star ~= tonumber(Z_Misc["CHARACTER_STAR_LIMIT"].Value[1]))
    self.evoMaxStatus:SetActive(self.cur_card.Star == tonumber(Z_Misc["CHARACTER_STAR_LIMIT"].Value[1]))
    self.matterRoot:SetActive(self.cur_card.Star ~= tonumber(Z_Misc["CHARACTER_STAR_LIMIT"].Value[1]))
end

function this.Init(self,card)
    InitEvolvePanel(self,card)
end

local function InitStarRoot(transform,star)
    for i = 0,transform.childCount -1 do
        local active = transform:GetChild(i).gameObject
        active:SetActive(star >= i + 1)
    end
end

function this.InitStarInfo(self)
    InitStarRoot(self.ev_starRoot.transform,self.cur_card.Star)
    if self.cur_card.Star == maxStar then
        self.ev_nextStarRoot.gameObject:SetActive(false)
        self.ev_max:SetActive(true)
        self.ev_arrow:SetActive(false)
        self.ev_levelText:GetComponent("Text").text = self.cur_card.Star * 20
        self.ev_nextLevelText:GetComponent("Text").text = (self.cur_card.Star) * 20
    else
        self.ev_arrow:SetActive(true)
        self.ev_nextStarRoot.gameObject:SetActive(true)
        self.ev_max:SetActive(false)
        InitStarRoot(self.ev_nextStarRoot.transform,self.cur_card.Star + 1)
        self.ev_levelText:GetComponent("Text").text = self.cur_card.Star * 20
        self.ev_nextLevelText:GetComponent("Text").text = (self.cur_card.Star + 1) * 20
    end
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    LangUtil.BindText(langRc:GetObject("StarNameText")).text = LangUtil.GetSysLang(167)
    LangUtil.BindText(langRc:GetObject("Title1Text")).text = LangUtil.GetSysLang(206)
    --LangUtil.BindText(langRc:GetObject("Title2Text")).text = LangUtil.GetSysLang(207)

    LangUtil.BindText(langRc:GetObject("Max"),FontType.All_Number)
    --LangUtil.BindText(langRc:GetObject("NeedGoldNameText")).text = LangUtil.GetSysLang(125)
    self.NeedGoldTxt = LangUtil.BindText(langRc:GetObject("NeedGoldTxt"),FontType.All_Number)
    --LangUtil.BindText(langRc:GetObject("IntensButtonText")).text = LangUtil.GetSysLang(208)
    LangUtil.BindText(langRc:GetObject("StarNameText")).text = LangUtil.GetSysLang(167)
    LangUtil.BindText(langRc:GetObject("Level"),FontType.All_Number)

    local matterRoot = langRc:GetObject("MatterList").transform

    for i =0,matterRoot.childCount - 1 do
        local child = matterRoot:GetChild(i)
        local nameTxt = child:Find("NameTxt")
        local needTxt = child:Find("NeedTxt")
    end
    
    langRc:GetObject("MaxText"):GetComponent("Text").text = LangUtil.GetSysLang(2132)

    --UIPublic.CreateNumericalLang(langRc:GetObject("Numerical"))
end

function this.OnCreate(self,panel)
    self.clientData = ClientData:GetInstance()

    local rc = panel:GetComponent("ReferenceCollector")
    self.ev_init = false
    self.ev_top = rc:GetObject("Top")
    self.ev_bot = rc:GetObject("Bot")
    self.ev_btn = rc:GetObject("EvolveButton")
    self.ev_starRoot = rc:GetObject("StarRoot")
    self.ev_nextStarRoot = rc:GetObject("NextStarRoot")
    self.ev_max = rc:GetObject("Max")
    self.ev_arrow = rc:GetObject("Arrow")

    self.ev_levelText = rc:GetObject("LevelText")
    self.ev_nextLevelText = rc:GetObject("NextLevelText")

    self.evoMaxStatus = rc:GetObject("EvoMaxStatus")
    self.matterRoot = rc:GetObject("MatterRoot")
    self.ev_skipTick = rc:GetObject("Tick")
    self.ev_skipButton = rc:GetObject("SkipButton")

    isSkip = self.clientData.isSkipEvo == 1
    self.ev_skipTick.gameObject:SetActive(self.clientData.isSkipEvo == 1)

    UIUtil.AddBtnEvent(self.ev_btn,function() EvolveLogic.OnClickEvolveButton(self) end)
    UIUtil.AddBtnEvent(self.ev_skipButton,function()
        isSkip = not isSkip
        if isSkip then
            self.clientData.isSkipEvo = 1
            PlayerPrefs.SetInt("IsSkipEvo", 1)
        else
            self.clientData.isSkipEvo = 0
            PlayerPrefs.SetInt("IsSkipEvo", 0)
        end
        self.ev_skipTick.gameObject:SetActive(isSkip)
    end)
end

function this.OnCardInfoChg(self,info)
    local card = self.cur_card
    InitEvolvePanel(self,card)
end

function this.OnDisable(self)

end

return this