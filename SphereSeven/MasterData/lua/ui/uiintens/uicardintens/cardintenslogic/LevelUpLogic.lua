---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/8/30 14:49
---角色等级强化

local LevelUpLogic = {}
local this = LevelUpLogic
local ExpItemCount = {
    0,0,0
}

local LevelUpExpItemList = {
    20001,20002,20003
}

local level_up_intens_btn_path = "IntensifyButton"
local level_up_reduce_btn_path = "ReduceButton"
local level_up_add_btn_path = "AddButton"
local level_up_max_btn_path = "MaxButton"
local level_up_exp_area_path = "ExpBar"
local level_up_exp_text_path = "GetExpText"
local level_up_gold_text_path = "GlodNumText"
local level_up_matter_num_text_path = "ShowNumText"

function this.SendLvUpRequest(self) --计算最终的等级和剩余经验
    local data = self.lv_data
    local card = self.cur_card
    if data == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(567))--"物品数量不足"
        return
    end

    if card.Level == card.LevelLimit then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2017))
        return
    end
    if data.need_gold == 0 or data.need_gold ==nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2018))
        return
    end
    
    if UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1]) < data.need_gold then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1033))--"金币不足"
        return
    end
 
    local items = {}
    for i = 1,3 do
        if ExpItemCount[i] > 0 then
            local item = {}
            item.uid = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(LevelUpExpItemList[i]).Id
            item.count = ExpItemCount[i]
            table.insert(items,item)
        end
    end

    local sendTable = {}
    sendTable.id = card.Id
    sendTable.items = items

    coroutine.start(function()
        -- local request = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
        -- PROTOCOL.CharacterPackLevelUpReq, sendTable)
        PublicRequest.SendRequest(
            PROTOCOL.CharacterPackLevelUpReq,
            sendTable,
            function(info, errorCode)
                if errorCode == 0 then
                    Game.Scene:GetComponent("SoundComponent"):Stop()
                    Game.Scene:GetComponent("SoundComponent"):PlayIntensifySound(self.cur_card)
                end
            end
        )
    end)
end

local function SetLvUpMatterNum(self) --设置花费的
    local num = self.lv_data.matter_num

    local exp_num = 0
    for index, count in ipairs(ExpItemCount) do
        exp_num = exp_num + count * Z_Item[LevelUpExpItemList[index]].UseParams[1]
    end

    local gold_num =math.ceil(exp_num/ tonumber(Z_Misc["CHARACTER_LEVEL_UP_RATE"].Value[1])) 
    local color = (UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1]) >= gold_num and {"<color=#FFFFFF>"} or {"<color=#FF6243>"})[1]
    
    self.lv_exp_text.text = "+" .. exp_num
    self.lv_gold_text.text = color .. gold_num.."</color>"

    
    self.lv_data.need_gold = gold_num --花费金钱

    self.lv_data.exp_num = exp_num --获得经验
    self.lv_matter_num_text.text  = num--花费物品数
    if exp_num > 0 then
        self.lv_exp_text.gameObject:SetActive(true)
    else
        self.lv_exp_text.gameObject:SetActive(false)
    end
    coroutine.start(function()
        self.lv_matter_num_text.transform:DOScale(2,0.1)
        coroutine.waitforseconds(0.1)
        self.lv_matter_num_text.transform:DOScale(1,0.1)
    end)
end


local function InitLvUpMatterArea(self) --素材区域
    local k = 1
    for a, b in pairs( {20001,20002,20003}) do
        if self.lv_templateId == b then
            k = a
        end
    end
    SetLvUpMatterNum(self)
    for a,b in pairs(self.lv_chg_tab) do
        b.transform:Find("Active").gameObject:SetActive(a == k)
    end
    self.lv_chg_tab[1].transform:Find("HoldText"):GetComponent("Text").text = UIPublic.GetItemAmount(20001)
    UIPublic.InitButton(self.lv_chg_tab[1],UIPublic.GetItemAmount(20001) ~= 0)
    self.lv_chg_tab[2].transform:Find("HoldText"):GetComponent("Text").text = UIPublic.GetItemAmount(20002)
    UIPublic.InitButton(self.lv_chg_tab[2],UIPublic.GetItemAmount(20002) ~= 0)
    self.lv_chg_tab[3].transform:Find("HoldText"):GetComponent("Text").text = UIPublic.GetItemAmount(20003)
    UIPublic.InitButton(self.lv_chg_tab[3],UIPublic.GetItemAmount(20003) ~= 0)
end


local function CountFullLevelExp(self) --计算升到满级需要的经验
    local max_level = self.cur_card.Star * 20
    local level = self.cur_card.Level
    local expCount = 0
    local rarity = Z_Character[self.cur_card.TemplateId].Rarity

    for i = level,max_level-1 do
        local z_level_up = 0 --= Z_CharacterLevelUpExp[i + 1]
        if rarity == Rarity.R then
            z_level_up = Z_CharacterLevelUpExp[i].R
        elseif rarity == Rarity.SR then
            z_level_up = Z_CharacterLevelUpExp[i].SR
        elseif rarity == Rarity.SSR then
            z_level_up = Z_CharacterLevelUpExp[i].SSR
        end

        expCount = expCount + z_level_up --.LevelUpExp
    end
    return expCount
end

local function CheckLvFull(self) --检测增加的经验是否使等级达到上限
    local total_exp = self.cur_card.Exp + self.lv_data.exp_num
    local expCount = CountFullLevelExp(self)
    if total_exp >= expCount then
        return true
    else
        return false
    end
end

local function FreshExpArea(self)   --刷新经验区域

    local data = self.lv_data
    local final_level = 0
    local surplus_exp = 0
    local level = self.cur_card.Level
    local max_level = self.cur_card.Star * 20
    local exp = self.cur_card.Exp
    local need_exp = 0
    local final_exp = exp + data.exp_num
    local rarity = Z_Character[self.cur_card.TemplateId].Rarity

    for i = level,max_level do
        local z_level_up
        if rarity == Rarity.R then
            z_level_up = Z_CharacterLevelUpExp[i].R
        elseif rarity == Rarity.SR then
            z_level_up = Z_CharacterLevelUpExp[i].SR
        elseif rarity == Rarity.SSR then
            z_level_up = Z_CharacterLevelUpExp[i].SSR
        end
        final_level = i
        if z_level_up == nil then surplus_exp = 0 break end
        need_exp = z_level_up

        if i < max_level and need_exp > final_exp then
            surplus_exp = final_exp
            break
        else
            if i == max_level then
                surplus_exp = 0
            end
            final_exp = final_exp - z_level_up
        end
    end

    local card = {}
    card.Level = final_level
    card.Exp = final_exp
    card.LevelLimit = max_level
    card.Id = self.cur_card.Id
    card.Star = self.cur_card.Star
    
    UIPublic.InitExpArea(self.lv_exp_area,card,self.lv_nextNeedTxt)

    this.InitNextNumerical(self,final_level)
    this.InitLevelInfo(self,final_level)

    for i = 1,self.lv_chg_ctr.childCount do
        local btn = self.lv_chg_ctr:GetChild(i - 1).gameObject
        local active = btn.transform:Find("Active")
        local reduceButton = btn.transform:Find("ReduceButton")
        active.gameObject:SetActive(ExpItemCount[i] ~= 0)
        reduceButton.gameObject:SetActive(ExpItemCount[i] ~= 0)
    end

    if ExpItemCount[1] == 0 and ExpItemCount[2] == 0 and ExpItemCount[3] == 0 then
        UIPublic.InitButton(self.lv_intens_btn,false)
    else
        UIPublic.InitButton(self.lv_intens_btn,true)
    end
end

function this.OnAddBtn(self) --增加
    local data = self.lv_data

    if self.level_item == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(567))--"物品数量不足"
        return
    end

    if CheckLvFull(self) then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2019))
        return
    end
    local z_levelUpExpend = Z_Item[self.level_item.TemplateId].UseParams[1] 
    --table.first(Z_CardLevelUpExpend,function(v) return v.ItemId == self.level_item.TemplateId  end)
    --if (data.matter_num + 1) * z_levelUpExpend.GoldCoinPer > Game.Scene.Player.GoldCoin then
    if z_levelUpExpend * data.matter_num / 5 > UIPublic.GetItemAmount(Z_Misc["GOLD_ID"].Value[1]) then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1033))--"金币不足"
        return
    end

    if data.matter_num < self.level_item.Amount then
        data.matter_num = data.matter_num + 1
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
        return
    end

    SetLvUpMatterNum(self)
    FreshExpArea(self)
end

function this.OnReduceBtn(self) --减少
    local data = self.lv_data

    if self.level_item == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(567))--"物品数量不足"
        return 
    end

    if data.matter_num <= self.level_item.Amount and data.matter_num > 0 then
        data.matter_num = data.matter_num - 1
    else
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2021))
        return
    end
    SetLvUpMatterNum(self)
    FreshExpArea(self)
end

function this.OnMaxBtn(self) --最大化
    local BookTable = {
        bigBookExp = Z_Item[LevelUpExpItemList[3]].UseParams[1],
        mediumBookExp = Z_Item[LevelUpExpItemList[2]].UseParams[1],
        smallBookExp = Z_Item[LevelUpExpItemList[1]].UseParams[1],
        bigBookCount = UIPublic.GetItemAmount(LevelUpExpItemList[3]),
        mediumBookCount = UIPublic.GetItemAmount(LevelUpExpItemList[2]),
        smallBookCount =  UIPublic.GetItemAmount(LevelUpExpItemList[1])
    }

    local booksUsed, actualExpIncrease = UIPublic.UseMaxExpBooks(self.cur_card.Exp, CountFullLevelExp(self), BookTable)

    ExpItemCount[1] = booksUsed.small
    ExpItemCount[2] = booksUsed.medium
    ExpItemCount[3] = booksUsed.big

    for i = 1,self.lv_chg_ctr.childCount do
        local btn = self.lv_chg_ctr:GetChild(i - 1).gameObject
        local currentAmount = btn.transform:Find("CurrentAmount"):GetComponent("Text")
        currentAmount.text = ExpItemCount[i]
    end

    SetLvUpMatterNum(self)
    FreshExpArea(self)
end

local function OnChangeMatterCallBack(self,item) --选中物品回调
    self.lv_data = {}
    self.lv_data.matter_num = 0
    self.level_item = item
    InitLvUpMatterArea(self)
end

function this.OnClickChangeMatter(self)
    self.ctrl:OpenShowPropWindow({Type = 1,callBack = function(v,item) OnChangeMatterCallBack (self,item)end ,self = self })
end

function this.InitLevelInfo(self,nextLevel)
    local nextTxt2 = LangUtil.BindText(self.lv_nextLvTxt.transform:GetChild(0))
    if nextLevel == nil then nextLevel = self.cur_card.Level end
    self.lv_curLvTxt.text = self.cur_card.Level--"<size=46>LV."..self.cur_card.Level.."</size>/"..self.cur_card.LevelLimit
    self.lv_nextLvTxt.text = nextLevel
    nextTxt2.text = "/"..self.cur_card.LevelLimit
end

function this.InitNextNumerical(self,nextLevel)
    local transform = self.lv_nextNumerical.transform
    local hp = transform:Find("HP").transform
    local atk = transform:Find("ATK").transform
    local speed = transform:Find("SPEED").transform
    local def = transform:Find("DEF").transform
    local magicDef = transform:Find("MAGICDEF").transform
    
    if nextLevel == nil then nextLevel = self.cur_card.Level end
    local addLv = self.cur_card.Level - nextLevel
    local numData = UIPublic.GetNumerical(self.cur_card)
    
    local hpTxt1 = hp:Find("AddText"):GetComponent("Text")
    local hpTxt2 = hp:Find("FinalText"):GetComponent("Text")

    local atkTxt1 = atk:Find("AddText"):GetComponent("Text")
    local atkTxt2 = atk:Find("FinalText"):GetComponent("Text")

    local speedTxt1 = speed:Find("AddText"):GetComponent("Text")
    local speedTxt2 = speed:Find("FinalText"):GetComponent("Text")

    local defTxt1 = def:Find("AddText"):GetComponent("Text")
    local defTxt2 = def:Find("FinalText"):GetComponent("Text")

    local magicDefTxt1 = magicDef:Find("AddText"):GetComponent("Text")
    local magicDefTxt2 = magicDef:Find("FinalText"):GetComponent("Text")
    
    if addLv == 0 then
        hpTxt1.text = ""
        atkTxt1.text = ""
        speedTxt1.text = ""
        defTxt1.text = ""
        magicDefTxt1.text = ""
        hpTxt2.text = math.modf(numData.hp)
        atkTxt2.text = math.modf(numData.atk)
        speedTxt2.text = math.modf(numData.speed)
        defTxt2.text = math.modf(numData.def)
        magicDefTxt2.text = math.modf(numData.magicDef)
    else        
        local newNumData = UIPublic.GetNumerical(self.cur_card , nextLevel)
        
        hpTxt1.text =  "+"..(math.modf(newNumData.hp) - math.modf(numData.hp))
        atkTxt1.text = "+"..(math.modf(newNumData.atk) - math.modf(numData.atk))
        speedTxt1.text = "+"..(math.modf(newNumData.speed) - math.modf(numData.speed))
        defTxt1.text = "+".. (math.modf(newNumData.def) - math.modf(numData.def))
        magicDefTxt1.text = "+".. (math.modf(newNumData.magicDef) - math.modf(numData.magicDef))

        hpTxt2.text = math.modf(newNumData.hp)
        atkTxt2.text = math.modf(newNumData.atk)
        speedTxt2.text = math.modf(newNumData.speed)
        defTxt2.text = math.modf(newNumData.def)
        magicDefTxt2.text = math.modf(newNumData.magicDef)
    end
end

function this.InitLevelUpPanel(self,card)
    self.lv_data = {}
    if self.level_item == nil then
        this.OnClickChgBtn(self,1)
    end

    self.lv_data.matter_num = 0
    UIPublic.InitExpArea(self.lv_exp_area,card,self.lv_nextNeedTxt) --经验区域
    InitLvUpMatterArea(self) --素材区域

    if card.Level == card.LevelLimit then
        UIPublic.InitButton(self.lv_intens_btn,false,1,"Max")
    else
        UIPublic.InitButton(self.lv_intens_btn,true,1,LangUtil.GetSysLang(84))
    end

    this.InitNextNumerical(self)
    this.InitLevelInfo(self)

    ExpItemCount[1] = 0
    ExpItemCount[2] = 0
    ExpItemCount[3] = 0

    for i = 1,self.lv_chg_ctr.childCount do
        local btn = self.lv_chg_ctr:GetChild(i - 1).gameObject
        local currentAmount = btn.transform:Find("CurrentAmount"):GetComponent("Text")
        currentAmount.text = ExpItemCount[i]
    end

    SetLvUpMatterNum(self)
    FreshExpArea(self)
    UIPublic.InitNumerical(self.lv_numerical,card)

    self.levelUpMaxStatus.gameObject:SetActive(card.Level == tonumber(Z_Misc["CHARACTER_LEVEL_LIMIT"].Value[1]))
    self.chgItemCtrl.gameObject:SetActive(card.Level ~= tonumber(Z_Misc["CHARACTER_LEVEL_LIMIT"].Value[1]))
end

function this.OnClickChgBtn(self,id)
    local templateIds = {20001,20002,20003}
    self.lv_templateId = templateIds[id]
    local item = UIPublic.GetItem(self.lv_templateId)

    self.lv_data = {}
    self.lv_data.matter_num = 0
    self.level_item = item
    InitLvUpMatterArea(self)
    FreshExpArea(self)
end

function this.onClickExpItemButton(self,id, AmountText, isAdd)
    local templateIds = {20001,20002,20003}
    self.lv_templateId = templateIds[id]

    local item = UIPublic.GetItem(self.lv_templateId)

    if item == nil then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
        return
    end

    if isAdd then
        if ExpItemCount[id] >= item.Amount then
            ExpItemCount[id] = item.Amount
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
            return
        end

        if CheckLvFull(self) then
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2019))
            return
        end
        ExpItemCount[id] = ExpItemCount[id] + 1
    else
        if ExpItemCount[id] >= 1 then
            ExpItemCount[id] = ExpItemCount[id] - 1
        else
            ExpItemCount[id] = 0
            UIUtil.ToolTipFourth(LangUtil.GetSysLang(2020))
            return
        end
    end
    
    AmountText.text = ExpItemCount[id]

    SetLvUpMatterNum(self)
    FreshExpArea(self)
end

function this.Init(self,card)
    if self.lv_init == false then
        UIPublic.InitNumerical(self.lv_numerical,card)
        self.lv_init = true
        self.level_item = nil
    else
        
        
    end
    this.InitLevelUpPanel(self,card)
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    local itemRoot = langRc:GetObject("ChgItemCtrl").transform

    local id = 20001
    for i = 0,itemRoot.childCount - 1 do
        local nameTextRoot = itemRoot:GetChild(i):Find("NameTextRoot/Text")
        local holdTextRoot = itemRoot:GetChild(i):Find("HoldText")
        --LangUtil.BindText(nameTextRoot).text =Z_Item[id + i].Name
        nameTextRoot:GetComponent("Text").text =Z_Item[id + i].Name
        --LangUtil.BindText(holdTextRoot)
    end

    self.lv_matter_num_text = LangUtil.BindText(langRc:GetObject("ShowNumTextRoot").transform:Find("Text"),FontType.All_Number)
    LangUtil.BindText(langRc:GetObject("UseGoldTextRoot").transform:Find("Text")).text = LangUtil.GetSysLang(125)
    self.lv_gold_text = LangUtil.BindText(langRc:GetObject("NeedGoldTextRoot").transform:Find("Text"),FontType.All_Number)
    
    self.lv_exp_text = LangUtil.BindText(langRc:GetObject("GetExpTextRoot").transform:Find("Text"),FontType.All_Number)
    self.lv_nextNeedTxt = LangUtil.BindText(langRc:GetObject("NeedExpTextRoot").transform:Find("Text"),FontType.All_Number)
    
    self.lv_nextLvTxt = LangUtil.BindText(langRc:GetObject("NextLevelText1"), FontType.All_Number)
    self.lv_curLvTxt = LangUtil.BindText(langRc:GetObject("CurLevelText"), FontType.All_Number)
    LangUtil.BindText(self.lv_exp_area.transform:Find("ExpName"))

    local nextNumerical = langRc:GetObject("NextNumerical").transform

    for i = 0,nextNumerical.childCount -1  do
        local root = nextNumerical:GetChild(i)
        local addTxt = root:Find("AddText")
        local finalTxt = root:Find("FinalText")
        LangUtil.BindText(addTxt,FontType.All_Number)
        LangUtil.BindText(finalTxt,FontType.All_Number)
    end
    
    coroutine.waitforframes(2)
    
    self.lv_exp_text.transform:GetChild(0):GetComponent("Text").text = "+"
    self.lv_nextNeedTxt.transform:GetChild(0):GetComponent("Text").text = LangUtil.GetSysLang(200)
    self.lv_exp_text.gameObject:SetActive(false)
    self.lv_nextNeedTxt.gameObject:SetActive(false)

    langRc:GetObject("MaxText"):GetComponent("Text").text = LangUtil.GetSysLang(2129)

    langRc:GetObject("Hp"):GetComponent("Text").text = LangUtil.GetSysLang(1220)
    langRc:GetObject("Atk"):GetComponent("Text").text = LangUtil.GetSysLang(1221)
    langRc:GetObject("Def"):GetComponent("Text").text = LangUtil.GetSysLang(1222)
    langRc:GetObject("MagicDef"):GetComponent("Text").text = LangUtil.GetSysLang(1223)
    langRc:GetObject("Speed"):GetComponent("Text").text = LangUtil.GetSysLang(1224)
end


function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    self.lv_init = false
    self.lv_data = nil
    self.lv_leveInfo = rc:GetObject("LeveInfo")
    self.lv_nextNumerical = rc:GetObject("NextNumerical")
    self.lv_intens_btn = rc:GetObject(level_up_intens_btn_path)
    self.lv_reduce_btn = rc:GetObject(level_up_reduce_btn_path)
    self.lv_add_btn = rc:GetObject(level_up_add_btn_path)
    self.lv_max_btn = rc:GetObject(level_up_max_btn_path)
    self.lv_exp_area = rc:GetObject(level_up_exp_area_path)
    self.lv_chg_ctr = rc:GetObject("ChgItemCtrl").transform
    self.lv_numerical = rc:GetObject("Numerical")
    self.levelUpMaxStatus = rc:GetObject("LevelUpMaxStatus")
    self.chgItemCtrl = rc:GetObject("ChgItemCtrl")

    self.lv_chg_tab = {}
    local id = 20000
    for i = 0,self.lv_chg_ctr.childCount -1 do
        local btn = self.lv_chg_ctr:GetChild(i).gameObject
        local avatar = btn.transform:Find("Image"):GetComponent("Image")
        local reduceButton = btn.transform:Find("ReduceButton").gameObject
        local bg = btn.transform:Find("Bg"):GetComponent("Image")
        local zItem = Z_Item[id + i + 1]
        UIUtil.SetSprite(avatar,AtlasConfig.Item,GetItemIcon(zItem),true)
        UIUtil.SetSprite(bg,AtlasConfig.ItemBg,zItem.IconBg..".png",true)
        self.lv_chg_tab[i+1] = btn
        --UIUtil.AddBtnEvent(btn,function(go)LevelUpLogic.OnClickChgBtn(self,i+1)  end)
        UIUtil.AddBtnEvent(btn,function(go)
            LevelUpLogic.onClickExpItemButton(self, i+1, btn.transform:Find("CurrentAmount"):GetComponent("Text"), true)
        end)

        UIUtil.AddBtnEvent(reduceButton,function(go)
            LevelUpLogic.onClickExpItemButton(self, i+1, btn.transform:Find("CurrentAmount"):GetComponent("Text"), false)
        end)
    end

    UIUtil.AddBtnEvent(self.lv_intens_btn,function(v) this.SendLvUpRequest(self) end)
    UIUtil.AddBtnEvent(self.lv_reduce_btn,function(v) this.OnReduceBtn(self)end)
    UIUtil.AddBtnEvent(self.lv_add_btn,function(v) this.OnAddBtn(self)end)
    UIUtil.AddBtnEvent(self.lv_max_btn,function(v) this.OnMaxBtn(self)end)

end

function this.OnCardInfoChg(self,info)
    local card = self.cur_card
    if self.lv_init and card ~= nil then
        if info.cardInfoChgType == CardInfoChgType.Level then
            this.InitNextNumerical(self)
            this.InitLevelInfo(self)
            UIPublic.InitNumerical(self.lv_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.Star then
            UIPublic.InitNumerical(self.lv_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.JadePearl then
            UIPublic.InitNumerical(self.vs_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.FightSoul then
            UIPublic.InitNumerical(self.lv_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.Equip then
            UIPublic.InitNumerical(self.lv_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.Skin then

        elseif info.cardInfoChgType == CardInfoChgType.CloseDegree then
            UIPublic.InitNumerical(self.lv_numerical,card)
        elseif info.cardInfoChgType == CardInfoChgType.Lock then

        end
        this.InitLevelUpPanel(self,card)
    end
end

function this.OnDisable(self)
    if self.lv_init then

    end
end

return this