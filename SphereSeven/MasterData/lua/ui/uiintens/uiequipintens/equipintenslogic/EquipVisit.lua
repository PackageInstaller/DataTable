---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/18 11:29
---
local EquipVisit = {};
local this = EquipVisit;
local pfbName = "EquipItemNew"

local recordOrder = {order = 1,kind = 1}  --是否正序  顺序类型
local screenTypes = {star = 0,Part = 0,exclusive = 0,isEquip = 0}

function this.OnScreenButton(self)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        self.cur_equip = nil
        this.InitEquipListData(self)
        --self.vs_scrollView.verticalScrollbar.value = 1
        self.vs_scroll:MoveTop()
        --this.InitEquipList(self)
    end
   
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipSort1,uiData)
end


local function InitSortButton(self)
    local txt = self.visit_SortBtn.transform:Find("Text"):GetComponent("Text")
    txt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    --self.vs_scrollView.verticalScrollbar.value = 1
    self.vs_scroll:MoveTop()
end


function this.OnSortButton(self)
    recordOrder.order = (recordOrder.order == 1 and {2}or {1})[1]
    InitSortButton(self)
    self.cur_equip = nil
    this.InitEquipListData(self)
    --this.InitEquipList(self)
end

function this.InitEquipInfo(self)
    local transform = self.visit_EquipInfo
    local label = transform:Find("Label")
    local lock = transform:Find("Lock")
    local equipName = transform:Find("EquipName"):GetComponent("Text")
    local equipItem = transform:Find("EquipItemNew")
    local prop = transform:Find("PropNum")
    local desc = transform:Find("Desc"):GetComponent("Text")
    local holderAvatar = transform:Find("Holder/Avatar"):GetComponent("Image")
    local holderName = transform:Find("HolderName"):GetComponent("Text")
    if self.cur_equip == nil then
        self.visit_EquipInfo.gameObject:SetActive(false)
        label.gameObject:SetActive(false)
        lock.gameObject:SetActive(false)
        equipName.gameObject:SetActive(false)
        equipItem:Find("IconRoot").gameObject:SetActive(false)
        equipItem:Find("Holder").gameObject:SetActive(false)
        prop:Find("Text").gameObject:SetActive(false)
        prop:Find("Value").gameObject:SetActive(false)
        desc.gameObject:SetActive(false)
        transform:Find("Holder").gameObject:SetActive(false)
        transform:Find("HolderBG").gameObject:SetActive(true)
        holderName.gameObject:SetActive(false)
        self.visit_IntensBtn.gameObject:SetActive(false)
        self.visit_ResolveBtn.gameObject:SetActive(false)
    else
        self.visit_EquipInfo.gameObject:SetActive(true)
        label.gameObject:SetActive(true)
        lock.gameObject:SetActive(true)
        equipName.gameObject:SetActive(true)
        equipItem:Find("IconRoot").gameObject:SetActive(true)
        prop:Find("Text").gameObject:SetActive(true)
        prop:Find("Value").gameObject:SetActive(true)
        desc.gameObject:SetActive(true)
        transform:Find("Holder").gameObject:SetActive(false)
        transform:Find("HolderBG").gameObject:SetActive(true)
        holderName.gameObject:SetActive(true)
        

        local equip = self.cur_equip
        local zEquip = Z_Equip[equip.TemplateId]
        self.visit_IntensBtn.gameObject:SetActive(zEquip.Exclusive == 0)
        self.visit_ResolveBtn.gameObject:SetActive(true)
        UIPublic.InitEquipLabel(label,zEquip)
        UIPublic.InitEquipLock(lock,equip.Lock == 1)
        UIPublic.InitEquipHolder(holderAvatar,equip,holderName)
        equipName.text = zEquip.Name
        UIPublic.InitEquipDesc(desc,zEquip)
        UIPublic.InitEquipProp(prop,equip)


        UIUtil.AddBtnEvent(lock.gameObject,function() self.ctrl:SendLockRequest(equip)  end)


        coroutine.start(function()
            UIPublic.InitEquipItemNew(equipItem,equip)
        end)
    end
end

local function OnItem(self,equipId)
    self.cur_equip = self.equips[equipId]
    this.InitEquipInfo(self)
end

function this.OnEquipInfoChg(self)
    if  self.visit_init then
        this.InitEquipListData(self)
        --this.InitEquipInfo(self)
        --this.InitEquipList(self)
    end
end


function this.InitEquipListData(self)
    self.vs_list = {}
    for k,v in table.pairsByKeys(self.equips) do
        table.insert(self.vs_list,v)
    end

    self.vs_list = UIPublic.EquipScreenFunc(self.vs_list,screenTypes)
    table.sort(self.vs_list, function(a,b) return UIPublic.EquipSortFunc(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.vs_list = table.reverseTable(self.vs_list)
    end
    if self.cur_equip == nil  then
        if table.count(self.vs_list)>0 then
            self.cur_equip = self.vs_list[1]
        else
            self.cur_equip = nil
        end
    elseif not table.any(self.equips,function(v) return  v. Id == self.cur_equip.Id end) then
        self.cur_equip = self.vs_list[1]
    end
    self.vs_hint:SetActive(table.count(self.vs_list) == 0)
    self.visit_EquipInfo.gameObject:SetActive(table.count(self.vs_list) ~= 0)
    --self.visit_Hold.gameObject:SetActive(table.count(self.vs_list) ~= 0)
    self.visit_HoldTxt.text = table.count(self.equips).."/"..Game.Scene.Player.EquipMax
    self.vs_scroll:RefreshData(self.vs_list)
    this.InitEquipInfo(self)
end

function this.InitEquipList(self)
    --self.vs_hint:SetActive(table.count(self.vs_list) == 0)
    --self.visit_HoldTxt.text = table.count(self.equips).."/"..Game.Scene.Player.EquipMax
    self.vs_scroll:Clear()
    self.vs_scroll:ScrollInit(self.vs_list, self.vs_scrollView, pfbName, function (arg)
        local gameObject = arg.go
        local equip = arg.data
        local select = gameObject.transform:Find("Select").gameObject
        gameObject.transform:Find("Mask").gameObject:SetActive(false)
        UIPublic.InitEquipItemNew(gameObject.transform,equip)
        if self.cur_equip~=nil then
            select:SetActive(self.cur_equip.Id == equip.Id)
        end
        UIUtil.AddBtnEvent(gameObject,function(go)
            OnItem(self,equip.Id)
            local Content = self.vs_scrollView.transform:Find("Viewport/Content")
            for i = 0, Content.childCount-1 do
                if Content:GetChild(i).gameObject ~= gameObject  then
                    Content:GetChild(i).gameObject.transform:Find("Select").gameObject:SetActive(false)
                else
                    select:SetActive(true)
                end
            end
            --self.vs_scroll:RefreshData(self.vs_list)
        end)
    end)
end

function this.Init(self)
    InitSortButton(self)
    this.InitEquipListData(self)
    --this.InitEquipInfo(self)
    --this.InitEquipList(self)
    self.visit_init = true
end


function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    local equipInfo = langRc:GetObject("EquipInfo").transform
    local holdNum = langRc:GetObject("HoldNum").transform
    local screenBtn = langRc:GetObject("ScreenButton").transform
    local sorBtn = langRc:GetObject("SortButton").transform
    
    LangUtil.BindText(equipInfo:Find("Label/Text"))
    LangUtil.BindText(equipInfo:Find("EquipName"))
    LangUtil.BindText(equipInfo:Find("PropNum/Text"))
    LangUtil.BindText(equipInfo:Find("PropNum/Value"),FontType.All_Number)
    LangUtil.BindText(equipInfo:Find("Desc"))
    LangUtil.BindText(equipInfo:Find("Desc"))
    LangUtil.BindText(equipInfo:Find("HolderName"))
    LangUtil.BindText(equipInfo:Find("butCtrl/IntensButton/Text")).text =LangUtil.GetSysLang(84)
    LangUtil.BindText(equipInfo:Find("butCtrl/ResolveButton/Text")).text =LangUtil.GetSysLang(225)
    LangUtil.BindText(screenBtn:Find("Text")).text =LangUtil.GetSysLang(155)
    LangUtil.BindText(sorBtn:Find("Text"))
    LangUtil.BindText(holdNum:Find("Text")).text = LangUtil.GetSysLang(354)
    LangUtil.BindText(holdNum:Find("Value"),FontType.All_Number)
end

function this.Create(self)
    self.vs_list = {}
    local visit_rc = self.visit_panel:GetComponent("ReferenceCollector")
    self.vs_scroll = VerticalScroll.New()
    self.vs_scroll:SetUpdateCount(20)
   
    self.vs_hint = visit_rc:GetObject("Hint");
    self.vs_scrollView = visit_rc:GetObject("ScrollView"):GetComponent("ScrollRect")
    self.visit_content = visit_rc:GetObject("Content");
    --self.visit_Hold = visit_rc:GetObject("HoldNum")
    self.visit_HoldTxt = visit_rc:GetObject("HoldNum").transform:Find("Value"):GetComponent("Text")
    self.visit_ScreenBtn = visit_rc:GetObject("ScreenButton")
    self.visit_SortBtn = visit_rc:GetObject("SortButton")
    self.visit_EquipInfo = visit_rc:GetObject("EquipInfo").transform
    self.visit_IntensBtn = visit_rc:GetObject("IntensButton")
    self.visit_ResolveBtn = visit_rc:GetObject("ResolveButton")
    this.InitEquipList(self)
    --self.vs_scrollView.verticalScrollbar.value = 1
    UIUtil.AddBtnEvent(self.visit_ScreenBtn,function()this.OnScreenButton(self) end)
    UIUtil.AddBtnEvent(self.visit_SortBtn,function()this.OnSortButton(self) end)
    UIUtil.AddBtnEvent(self.visit_IntensBtn,function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipLvUpState1,{equip = self.cur_equip})
    end)

    UIUtil.AddBtnEvent(self.visit_ResolveBtn,function() 
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipResolveProp,{equip = self.cur_equip}) 
    end)
    
end

function this.OnDisable(self)
    self.vs_scroll:Dispose()
    --self.vs_scrollView.verticalScrollbar.value = 1
    if self.visit_init then
        self.visit_init = false
    end
    screenTypes = {star = 0, Part = 0, exclusive = 0, isEquip = 0}
    recordOrder.order = 1
end

return this