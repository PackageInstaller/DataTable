---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UISoundSetView = BaseClass("UISoundSetView",UIBaseView);
local base = UIBaseView
local this = UISoundSetView
local off_color=Color.New(0.45,0.5,0,0.1)
local on_color = Color.white
local function CloseSelf(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UISoundSet)
end

local function GetVolumeValue(self, type)
    if type=="bgm" then
       return ClientData:GetInstance().BgmVolume
    elseif type=="se" then
        return  ClientData:GetInstance().SoundVolume
    else --if type=="voice" then
        return ClientData:GetInstance().CardVolume
    end
end

local function SetVolumeValue(type, val)
    if type=="bgm" then
        Game.Scene:GetComponent("BgmComponent"):SetVolume(val)
    elseif type=="se" then
        Game.Scene:GetComponent("SoundComponent"):SetVolume(val)
    else --if type=="voice" then
        Game.Scene:GetComponent("SoundComponent"):SetCardVolume(val)
    end
end

local function change(self,type,val)
    if type=="bgm" then
        ClientData:GetInstance():SetBgmVolume(val)
    elseif type=="se" then
        ClientData:GetInstance():SetSoundVolume(val)
    elseif type=="voice" then
        ClientData:GetInstance():SetCardVolume(val)
    end
    SetVolumeValue(type, val)
end

local function onClickOnOffButton(self, type, isOn)
    local val = 0
    if isOn then
        --self[type.."Slider"].value = self[type .. "Value"]
        --val= self[type .. "Value"]
        self[type.."imgOn"].color = on_color
        self[type.."imgOff"].color = off_color
        val = GetVolumeValue(self, type)
        isOn = 1
    else
        --self[type.."Slider"].value = 0
        self[type.."imgOn"].color = off_color
        self[type.."imgOff"].color = on_color
        isOn = 0
    end
    ClientData:GetInstance():SetVolumeIson(type, isOn)
    SetVolumeValue(type, val)
end

local function creat(self,type)
    self[type.."Slider"] = self.rc:GetObject(type.."Slider"):GetComponent("Slider")
    self[type.."imgOn"] = self.rc:GetObject(type.."_imgOn"):GetComponent("Image")
    self[type.."imgOff"] = self.rc:GetObject(type.."_imgOff"):GetComponent("Image")
    local _name=self.rc:GetObject(type.."Slider").transform:Find("Text")
    LangUtil.BindText(_name)
    UIUtil.AddBtnEvent(self[type.."imgOn"].gameObject ,function() onClickOnOffButton(self, type,true)  end)
    UIUtil.AddBtnEvent(self[type.."imgOff"].gameObject,function() onClickOnOffButton(self, type, false)  end)
    self[type.."Slider"].onValueChanged:AddListener(function (val)
         change(self,type,val)
    end)
end

function this.OnCreate(self)
    base.OnCreate(self);
    local closeBtn = self.rc:GetObject("CloseButton")
    local clientData = ClientData:GetInstance()

    creat(self,"bgm")
    creat(self,"se")
    creat(self,"voice")
    self.bgmSlider.value = clientData.BgmVolume
    self.seSlider.value = clientData.SoundVolume
    self.voiceSlider.value = clientData.CardVolume
    change(self,"bgm",self.bgmSlider.value)
    change(self,"se",self.seSlider.value)
    change(self,"voice",self.voiceSlider.value)
    onClickOnOffButton(self,"bgm", clientData.BgmIsOn == 1)
    onClickOnOffButton(self,"se", clientData.SoundIsOn == 1)
    onClickOnOffButton(self,"voice", clientData.CardIsOn == 1)
    UIUtil.AddBtnEvent(closeBtn,function()CloseSelf(self)  end)
    EventTriggerListener.Get(self.rc:GetObject("EventBg")).onLuaClick = function()
        UIManager:GetInstance():CloseWindow(UIWindowNames.UISoundSet)
    end
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.rc:GetObject("Frame").transform:Find("Text"))
end

function this.OnEnable(self)
    base.OnEnable(self);
    self:OnRefresh();
end

function this.OnRefresh(self)

end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
end

function this.OnDisable(self)
    base.OnDisable(self);
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;

