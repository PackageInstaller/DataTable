---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UIChallengeSectionInfoView = BaseClass("UIChallengeSectionInfoView", UIBaseView);
local base = UIBaseView
local this = UIChallengeSectionInfoView

local function OnClickBattle(self)
    -- local num =  self.data["Num"..self.selectDiff] -- 打了的次数
    -- local maxCount = Z_Challenge[ self.data.TemplateId].ChallengeNum
    -- if num >= maxCount then
    --     UIUtil.ToolTipFourth(LangUtil.GetSysLang(3075))
    --     return
    -- end
    
    local levelId = self.model.info.levelId
    local launchAtkData = {}
    launchAtkData.Skip = true
    launchAtkData.Id = levelId
    --launchAtkData.Lv = Z_Challenge[sectionId].LevelId + self.selectDiff
    launchAtkData.Diff = 1
    launchAtkData.LevelType = LevelType.LevelTypeChallenge
    launchAtkData.EnergyExpend= Z_Challenge[levelId].Power

    UIUtil.OpenFormat({
        type = FormationOpenType.Battle,
        isSupport = true,
        confirmCallBack = function(extraParam)
            UIPublic.LaunchAtk(launchAtkData, extraParam)
        end
    })
    --UIUtil.OpenFormat(launchAtkData)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIChallengeSectionInfo)
end

local function InitBot(self, z_DataLevel)
    local id = self.selectDiff -1 --难度
    self.needEnergyTxt.text = "AP" .. " " .. z_DataLevel.EnergyExpend
    self.needEnergyTxt1.text = "AP" .. " " .. z_DataLevel.EnergyExpend
    LangUtil.GetSpriteLang(113+(id*2),function(sprite)
       self.DiffImager.sprite = sprite
    end)
end

local function InitLeft(self, z_DataLevel)
    local enemyRoot = self.left:Find("MonsterPanel/EnemyRoot")
    local enemyArray = self.left:Find("ArrayPanel/EnemyArray")
    local playerArray = self.left:Find("ArrayPanel/PlayerArray")

    local launchAtkData = {}
    launchAtkData.Lv = Z_Challenge[self.model.info.levelId].LevelId -- + self.selectDiff
    launchAtkData.Id = self.model.info.levelId
    launchAtkData.Diff = self.selectDiff
    launchAtkData.LevelType = LevelType.LevelTypeChallenge
    UIBattelModeInfo.InitMonsterArea(enemyRoot, z_DataLevel, launchAtkData)
end

local function InitRight(self, z_DataLevel)
    local conditionRoot = self.right:Find("Conditions/Condition")
    local drop = self.right:Find("Drop/Content")
    local must = self.right:Find("Must/Content")
    local ConditionRewards = loadtable(z_DataLevel.ConditionRewards)
    UIBattelModeInfo.InitOddObtainArea(drop, loadtable(z_DataLevel.RanRewards), 2) --初始化几率奖励
    UIBattelModeInfo.InitMustObtainArea(must) --初始化必定奖励
    UIBattelModeInfo.InitConditionsArea(conditionRoot, ConditionRewards)--条件

end

local function OnChallengeCountChg(self)
    local num = self.data["Num"..self.selectDiff] -- 打了的次数
    local maxCount = Z_Challenge[self.data.TemplateId].ChallengeNum
    local enable = num > 0 and num < maxCount
    
    self.mopBtn:GetComponent("Button").enabled = enable
    UIPublic.InitButton(self.mopBtn, enable, 2)
    
    self.challengeCountTxt.text = LangUtil.GetSysLang(526).."："..(maxCount - num).."/"..maxCount
end

local function OnClickMop(self)
    local num =  self.data["Num"..self.selectDiff] -- 打了的次数
    local maxCount = Z_Challenge[self.data.TemplateId].ChallengeNum
    if num >= maxCount then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(3075))
        return
    end
    
    local item = table.first(Game.Scene.Player:GetComponent("ItemComponent").Items, function(v)
        return v.TemplateId == 3013
    end)
    
    local levelId = Z_Challenge[self.data.TemplateId].LevelId + self.selectDiff
    local z_DataLevel =  Z_ChallengeLevel[levelId]
    local KilEnemyNum = UIBattelModeInfo.GetMonsterTotalNum(z_DataLevel)

    local sectionId = self.data.TemplateId
    local launchAtkData = {}
    launchAtkData.Skip = true
    launchAtkData.Id = sectionId
    launchAtkData.Lv = Z_Challenge[sectionId].LevelId + self.selectDiff
    launchAtkData.Diff = self.selectDiff
    launchAtkData.LevelType = LevelType.LevelTypeChallenge
    launchAtkData.EnergyExpend= Z_ChallengeLevel[launchAtkData.Lv].EnergyExpend
    Game.Scene:GetComponent("AgainstComponent"):SetCurLevel(launchAtkData)
    local sendData = {Energy = z_DataLevel.EnergyExpend, info = "UIChallengeSectionInfo" }
    sendData.maxNum = maxCount - num
    Game.Scene.Player:GetComponent("StoryComponent"):SendFastPass(sendData, function(itemNum)
        coroutine.start(function()
            local reqData = {}
            reqData.LevelTypeInfo = 5
            reqData.LevelId =  self.data.TemplateId
            reqData.Difficulty = self.selectDiff
            reqData.IsReachRewardCond1 = 1
            reqData.IsReachRewardCond2 = 1
            reqData.IsReachRewardCond3 = 1
            reqData.IsSweep = itemNum
            
            local g2cBattleSettle = coroutine.yieldstart(Game.Scene.Session.CoCall, nil, Game.Scene.Session,
                    OuterOpcode.Name2Code.ETModel_C2M_BattleSettle, reqData);
            if g2cBattleSettle.Error == ErrorCode.ERR_Success then
                UIUtil.RemoveItem(item.Id, itemNum)
                UIUtil.BattleSettle(g2cBattleSettle, reqData)

                local cc = Game.Scene.Player:GetComponent("ChallengeComponent")
                local info = cc:GetChallengeInfo(self.data.TemplateId)
                local diff = self.selectDiff
                info["Num"..diff] = info["Num"..diff] + itemNum
                if info.OpenLv < levelId then
                    info.OpenLv = levelId
                end
                --OnChallengeCountChg(self) 
                --DataManager:GetInstance():Broadcast(DataMessageNames.ON_CHALLENGE_DIFF_CHG)
            else
                UIUtil.ToolTipFourth(LangUtil.GetServerError(g2cBattleSettle.Error))
            end
        end)
    end)
end

function this.OnCreate(self)
    base.OnCreate(self);
    local rc = self.rc
    local closeBtn = rc:GetObject("CloseButton")
    local eventBg = rc:GetObject("EventBg")
    self.left = rc:GetObject("Left").transform
    self.right = rc:GetObject("Right").transform
    local bot = rc:GetObject("Bot").transform

    self.battleBtn = bot:Find("BattleButton")
    self.mopBtn = bot:Find("MopButton")
    self.DiffImager = bot:Find("Diff"):GetComponent("Image")

    UIUtil.AddBtnEvent(self.mopBtn, function() OnClickMop(self) end)
    UIUtil.AddBtnEvent(self.battleBtn, function() OnClickBattle(self) end)

    local func = function() UIManager:GetInstance():CloseWindow(UIWindowNames.UIChallengeSectionInfo) end
    EventTriggerListener.Get(eventBg).onLuaClick = function() func() end
    UIUtil.AddBtnEvent(closeBtn, function() func() end)
end

function this.OnLangCreate(self)
    self.titleTxt = LangUtil.BindText(self.langRc:GetObject("Title3Text"))
    self.LevelText = LangUtil.BindText(self.langRc:GetObject("LevelText"))
    self.needEnergyTxt = LangUtil.BindText(self.battleBtn:Find("NeedEnegy/NeedEnegyText"))
    self.needEnergyTxt1 = LangUtil.BindText(self.mopBtn:Find("NeedEnegy/NeedEnegyText"))
    self.challengeCountTxt = LangUtil.BindText(self.langRc:GetObject("ChallengeCountTxt"))
    LangUtil.BindText(self.mopBtn:Find("Text")).text = LangUtil.GetSysLang(872)--速戦
    LangUtil.BindText(self.battleBtn:Find("Text")).text = LangUtil.GetSysLang(92)--出击

    LangUtil.BindText(self.langRc:GetObject("ConditionTitleText")).text = LangUtil.GetSysLang(129)--通关条件
    LangUtil.BindText(self.langRc:GetObject("MustTitleText")).text = LangUtil.GetSysLang(130)--必掉物品
    LangUtil.BindText(self.langRc:GetObject("DropTitleText")).text = LangUtil.GetSysLang(131)--掉落物品
    LangUtil.BindText(self.langRc:GetObject("VSText2")).text = LangUtil.GetSysLang(132)--战阵 我方
    LangUtil.BindText(self.langRc:GetObject("VSText1")).text = LangUtil.GetSysLang(133)--战阵 敌方
    LangUtil.BindText(self.langRc:GetObject("Title1Text")).text = LangUtil.GetSysLang(134)--敌人情报
    
    local conditionRoot = self.langRc:GetObject("Condition").transform
    for i = 0,conditionRoot.childCount - 1 do
        LangUtil.BindText(conditionRoot:GetChild(i):Find("Text"))
    end
end

local function InitData(self)
    -- local challengeComponent = Game.Scene.Player:GetComponent("ChallengeComponent")
    -- local challengeDatas = {}
    -- local zChallengeList = {}
    
    -- for k,v in table.pairsByKeys(Z_Challenge) do
    --     if v.TypeId == self.model.info.TypeId then
    --         zChallengeList[k] = v
    --     end
    -- end

    -- for k,v in table.pairsByKeys(zChallengeList) do
    --     table.insert(challengeDatas,challengeComponent.data["ChallengeInfo"..k])
    -- end
    -- self.data = challengeDatas[self.model.info.infoId]
end

function this.OnEnable(self)
    base.OnEnable(self);
    self.gameObject:SetActive(false)
    self.clientData = ClientData:GetInstance()
    self.player = Game.Scene.Player
    self.againstComponent = Game.Scene:GetComponent("AgainstComponent")

    -- if self.model.info.TypeId == 1 then
    --     self.selectDiff = self.clientData:GetChallenge1Diff()
    -- elseif self.model.info.TypeId == 2 then
    --     self.selectDiff = self.clientData:GetChallenge2Diff()
    -- else    --elseif self.model.info.TypeId == 3 then
    --     self.selectDiff = 4
    -- end

    InitData(self);
    self:OnRefresh()
    self.gameObject:SetActive(true)
end

function this.OnRefresh(self)
    local levelId = self.model.info.levelId--Z_Challenge[self.data.TemplateId].LevelId + self.selectDiff
    local z_DataLevel =  Z_ChallengeLevel[levelId]
    self.titleTxt.text = Z_Challenge[levelId].Name
    self.LevelText.text = LangUtil.GetSysLang(500) .. z_DataLevel.HintLevel

    --OnChallengeCountChg(self)
    coroutine.start(function()
        --InitBot(self, z_DataLevel)
        InitLeft(self, z_DataLevel)
        InitRight(self, z_DataLevel)
    end)
end

local function OnTimeRest(self)
    InitData(self)
    --OnChallengeCountChg(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_TIME_RESET, OnTimeRest)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_TIME_RESET)
end

function this.OnDisable(self)
    base.OnDisable(self);
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;

