---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/10 11:24
---

local UITestToolView = BaseClass("UITestToolView",UIBaseView);
local base = UIBaseView;
local this = UITestToolView;

local function OnClickResolutionEnterButton(self)
    local w = tonumber(self.input_w.text)
    local h = tonumber(self.input_h.text)
    CS.UnityEngine.Screen.SetResolution(w, h, self.toggle.isOn)
end

local function ResolutionTestCreate(self)
    local transform = self.resolutionTest.transform
    self.input_h = transform:Find("HInputField"):GetComponent("InputField")
    self.input_w = transform:Find("WInputField"):GetComponent("InputField")
    self.toggle = transform:Find("Toggle"):GetComponent("Toggle")
    local btn = transform:Find("Button").gameObject
    UIUtil.AddBtnEvent(btn,function(go)OnClickResolutionEnterButton(self) end)
end

local function InitSectionCtrl(self)
    local clientData = ClientData:GetInstance()
    self.sectionToggle.isOn = (clientData.OffSection == 1 and {true} or {false})[1]
    self.openAllToggle.isOn = (clientData.OpenAll == 1 and {true} or {false})[1]
end


local function OnClickPlayStoryButton(self)
    if string.IsNullOrEmpty(self.sectionInput.text) then UIUtil.ToolTipFourth("--请输入第几关") return end
    if tonumber(self.sectionInput.text) > 5 then UIUtil.ToolTipFourth("--输入关卡错误") return end
    local id = "100"..self.sectionInput.text
    if not self.IsStartToggle.isOn then id = id .."-1" end

    local zStoryScript = require("Config/Excel/Z_StoryScript_"..id)
    Game.Scene:GetComponent("FungusComponent"):ExecuteBlock(zStoryScript, function()  end)
end

local function StoryScriptCreate(self)
    local transform = self.storyScript.transform
    self.sectionInput = transform:Find("InputField"):GetComponent("InputField")
    local btn = transform:Find("PlayStory").gameObject
    self.IsStartToggle = transform:Find("IsStarToggle"):GetComponent("Toggle")
    UIUtil.AddBtnEvent(btn,function()OnClickPlayStoryButton(self)  end)
end

local function UIClose(self)
    ClientData:GetInstance():SetSectionTool(self.openAllToggle.isOn,self.sectionToggle.isOn)
    self.ctrl:CloseSelf()
end

local function OnEffectTest(self,id)
    local cards = Game.Scene.Player:GetComponent("CardComponent").Cards
    if id == 4 then
        local info = {}
        info.test = false
        info.resultList = {}
        info.newCardList = {}
        info.newFightSoulList = {}
        for k,v in pairs(cards) do
            if v.TemplateId == 1026 or v.TemplateId == 1027
                    or v.TemplateId == 1022 or v.TemplateId == 1028 then
                table.insert(info.resultList,{card = v})
            end

        end
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISummonStage1,info)
    end
end

local function OnSoundCheck(self)
    local selectType = {"Main","Home","Rest","AfterRest","Attack","Hurt","HurtSkill","HurtSpSkill","Unable",
                        "Relife","Skill1","Skill2","Skill2Fast","BattleStart","Aid","Into","Win","Summon","Archive",
                        "Gift","GoodGift","Intensify","Evolution" ,"LvBreak","Degree" ,"Mission" ,"MissionSuccess","SoulGet","SoulEquip",
                        "Marry"}
    local soundComponent = Game.Scene:GetComponent("SoundComponent")
    coroutine.start(function()
        for _,zCard in table.pairsByKeys(Z_Card) do
            if zCard .IsMonster ~= 1 then
                local zCardSound = Z_CardSound[zCard.Id]
                for _k,title in table.pairsByKeys(selectType) do
                    if type(zCardSound[title]) ~= "string" then
                        for a,name in table.pairsByKeys(zCardSound[title]) do
                            local resPath= "Sound/"..zCard.Id.."/N/"..name..".mp3"
                            soundComponent:CoPlay(resPath,nil,true,true)
                            print("--加载完毕:"..resPath)
                        end
                    else
                        local resPath= "Sound/"..zCard.Id.."/N/"..zCardSound[title]..".mp3"
                        soundComponent:CoPlay(resPath,nil,true,true)
                        print("--加载完毕:"..resPath)
                    end
                end
            end
        end
    end)
end

local function OnCheckPic(self)
    local str = "--加载失败的文件:\n"
    self.showError.text = str
    coroutine.start(function()
        for k,v in table.pairsByKeys(Z_Card) do   --角色小图
            for i = 1,6 do
                local zSkin = Z_Skin[v.Id*100 + i]
                if zSkin ~= nil then
                    local path = AtlasHead.."CardLittle/"..v.Id.."_"..i..".png"
                    self.checkTxt.text = path
                    if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                        str = str .. path.."\n"
                        self.showError.text = str
                    end
                else
                    break
                end
            end
        end

        for k,v in table.pairsByKeys(Z_Card) do   --角色中图
            for i = 1,6 do
                local zSkin = Z_Skin[v.Id*100 + i]
                if zSkin ~= nil then
                    local path = SpriteHead.."CardMiddle/"..v.Id.."_"..i..".png"
                    self.checkTxt.text = path
                    if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                        str = str .. path.."\n"
                        self.showError.text = str
                    end
                else
                    break
                end
            end
        end

        for k,v in table.pairsByKeys(Z_Card) do   --角色大图
            for i = 1,6 do
                local zSkin = Z_Skin[v.Id*100 + i]
                if zSkin ~= nil then
                    local path = SpriteHead.."CardBig/"..v.Id.."_"..i..".png"
                    self.checkTxt.text = path
                    if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                        str = str .. path.."\n"
                        self.showError.text = str
                    end
                else
                    break
                end
            end
        end

        for k,v in table.pairsByKeys(Z_Card) do   --战斗角色
            for i = 1,6 do
                local zSkin = Z_Skin[v.Id*100 + i]
                if zSkin ~= nil then
                    local path = AtlasHead.."BodyHalf/"..v.Id.."_"..i..".png"
                    self.checkTxt.text = path
                    if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                        str = str .. path.."\n"
                        self.showError.text = str
                    end
                else
                    break
                end
            end
        end

        for k,v in table.pairsByKeys(Z_Card) do   --角色立绘
            for i = 1,6 do
                local zSkin = Z_Skin[v.Id*100 + i]
                if zSkin ~= nil then
                    local path = SpriteHead.."CardPaint/"..v.Id.."_"..i..".png"
                    self.checkTxt.text = path
                    if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                        str = str .. path.."\n"
                        self.showError.text = str
                    end
                else
                    break
                end
            end
        end


        --------战魂
        for k,v in table.pairsByKeys(Z_FightSoul) do   --战魂小图
            local path = AtlasHead.."FightSoul/"..v.CardId..".png"
            self.checkTxt.text = path
            if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                str = str .. path.."\n"
                self.showError.text = str
            end
        end

        for k,v in table.pairsByKeys(Z_FightSoul) do   --战魂中图
            local path = SpriteHead.."FightSoulMid/"..v.CardId..".png"
            self.checkTxt.text = path
            if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                str = str .. path.."\n"
                self.showError.text = str
            end
        end

        for k,v in table.pairsByKeys(Z_FightSoul) do   --战魂大图
            local path = SpriteHead.."FightSoulLarge/"..v.CardId..".png"
            self.checkTxt.text = path
            if  AtlasManager:GetInstance():CoLoadImageAsync(path) == nil then
                str = str .. path.."\n"
                self.showError.text = str
            end
        end

        if str == "--加载失败:\n" then
            self.showError.text = "<color=#00FF00>--资源正常</color>"
        end

        self.checkTxt.text = "--检测完毕"
    end)

end

local function OnAsym(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAbysmFind)
end

function this.OnCreate(self)
    base.OnCreate(self);
    self.bag_btn = self.rc:GetObject("TestBag");
    self.shop_btn = self.rc:GetObject("TestShop");
    self.currency_btn = self.rc:GetObject("AddCurrency");
    self.resolutionTest = self.rc:GetObject("TestResolution");
    self.sectionToggle = self.rc:GetObject("SectionToggle"):GetComponent("Toggle")
    self.openAllToggle = self.rc:GetObject("OpenAllToggle"):GetComponent("Toggle")
    self.storyScript = self.rc:GetObject("StoryScript")
    local checkPicBtn = self.rc:GetObject("Button")
    self.checkTxt = checkPicBtn.transform:Find("ShowPath"):GetComponent("Text")
    self.showError = self.rc:GetObject("ShowPath"):GetComponent("Text")
    self.dialogBtn = self.rc:GetObject("DialogButton"):GetComponent("Button")
    self.dialog = self.rc:GetObject("Dialog")
    UIUtil.AddBtnEvent(checkPicBtn,function()
        OnCheckPic(self)
    end)

    self.langToggle = self.rc:GetObject("LangToggle"):GetComponent("Toggle")
    self.langNumToggle = self.rc:GetObject("LangNumToggle"):GetComponent("Toggle")
    self.purchaseToggle = self.rc:GetObject("PurchaseToggle"):GetComponent("Toggle")
    self.atkToggle = self.rc:GetObject("AtkToggle"):GetComponent("Toggle")
    self.activityToggle = self.rc:GetObject("ActivityToggle"):GetComponent("Toggle")

    UIUtil.AddBtnEvent(self.dialogBtn,function()
        --UIManager:GetInstance():CloseWindow(UIWindowNames.UITestTool)
        --Game.Scene:GetComponent("DialogComponent"):OpenDialog("Activity_1", "1", StoryMode.BattleBefore, function()  end, false)
        self.dialog:SetActive(true)
        for i = 1, self.dialog.transform.childCount do
            local btn = self.dialog.transform:GetChild(i - 1):GetComponent("Button")
            UIUtil.AddBtnEvent(btn,function()
                self.dialog:SetActive(false)
                UIManager:GetInstance():CloseWindow(UIWindowNames.UITestTool)
                Game.Scene:GetComponent("DialogComponent"):OpenDialogOnly("1001", tostring(i))
            end)
        end
    end)

    local effectTestButton = self.rc:GetObject("EffectTestButton").transform

    for i = 0,effectTestButton.childCount - 1 do
        local child = effectTestButton:GetChild(i).gameObject
        UIUtil.AddBtnEvent(child,function() OnEffectTest(self,i+1)  end)
    end

    EventTriggerListener.Get(self.gameObject).onLuaClick = function(go)UIClose(self) end
    ButtonListener.Get(self.bag_btn).OnClickHandler = function()OnSoundCheck(self) end
    ButtonListener.Get(self.shop_btn).OnClickHandler = self.ctrl.OpenTestShopWindow;
    ButtonListener.Get(self.currency_btn).OnClickHandler = self.ctrl.OpenTestCurrencyWindow;

    local Asym = self.rc:GetObject("Asym")
    UIUtil.AddBtnEvent(Asym,function()OnAsym(self)  end)

    UIUtil.AddBtnSound(self.bag_btn);
    UIUtil.AddBtnSound(self.shop_btn);
    UIUtil.AddBtnSound(self.currency_btn);

    self.battleImg = self.rc:GetObject("BattleImg")
    self.autoBattleBtn = self.rc:GetObject("AutoBattleBtn")
    self.noTest = self.rc:GetObject("ExitBtn")
    self.startTest = self.rc:GetObject("StartBtn")
    self.isOptEnemySkill = self.rc:GetObject("IsOptEnemySkill"):GetComponent(typeof(UE_UI.Toggle))
    self.isIgnoreCooldown = self.rc:GetObject("IsIgnoreCooldown"):GetComponent(typeof(UE_UI.Toggle))
    self.quitBtn = self.rc:GetObject("QuitBtn")
    ButtonListener.Get(self.quitBtn).OnClickHandler = self.ctrl.OnQuit;

    self.battleImg:SetActive(false)
    EventTriggerListener.Get(self.autoBattleBtn).onLuaClick = function(go) self.battleImg:SetActive(true) end
    EventTriggerListener.Get(self.noTest).onLuaClick = function(go) self.battleImg:SetActive(false) end
    EventTriggerListener.Get(self.startTest).onLuaClick = function(go)
        self.rc:GetObject("BattleImg"):SetActive(false)
        local tab = {}
        for i = 1, 15 do
            if self.battleImg.transform:Find(tostring(i)):GetComponent(typeof(UE_UI.Toggle)).isOn then
                table.insert(tab, i)
            end
        end
        Game.Scene:GetComponent("AgainstComponent").TestLevel = tab
        Game.Scene:GetComponent("AgainstComponent").IsAutoGame = 2
        Game.Scene:GetComponent("AgainstComponent"):AutoGame()
        UIManager:GetInstance():CloseWindow(UIWindowNames.UITestTool)
    end

    ResolutionTestCreate(self)
    StoryScriptCreate(self)

    self.cacheBtn = self.rc:GetObject("CacheBtn");
    EventTriggerListener.Get(self.cacheBtn).onLuaClick = function(go)
        PlayerPrefs.DeleteKey("HomeCardRect")
        PlayerPrefs.DeleteKey("RoomCardRect")
        PlayerPrefs.DeleteKey("HomeLive2DMode")
        PlayerPrefs.DeleteKey("HomeLive2DMode")
    end

    self.pathIpt = self.rc:GetObject("PathIpt"):GetComponent("InputField");
    self.loadBtn = self.rc:GetObject("LoadBtn");
    self.loadImgBtn = self.rc:GetObject("LoadImgBtn");
    EventTriggerListener.Get(self.loadBtn).onLuaClick = function(go)
        if not string.IsNullOrEmpty(self.pathIpt.text) then
            coroutine.start(function ()
                ResourcesManager:GetInstance():CoLoadAsync(self.pathIpt.text, typeof(GameObject))
            end)
        end
    end
    EventTriggerListener.Get(self.loadImgBtn).onLuaClick = function(go)
        if not string.IsNullOrEmpty(self.pathIpt.text) then
            coroutine.start(function ()
                ResourcesManager:GetInstance():CoLoadAssetBundleAsync(self.pathIpt.text)
            end)
        end
    end
end

function this.OnEnable(self)
    base.OnEnable(self);
    self.dialog:SetActive(false)
    self:OnRefresh();
end

function this.OnRefresh(self)
    InitSectionCtrl(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self);
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
end

function this.OnDisable(self)
    base.OnDisable(self)
    UIManager:GetInstance():Broadcast(UIMessageNames.ON_LANGUAGE)
    Game.Scene:GetComponent("AgainstComponent"):SetDebugInfo(self.isOptEnemySkill.isOn,self.isIgnoreCooldown.isOn)
    Game.Scene:GetComponent("AgainstComponent").WaiGua = 1 --  self.atkToggle.isOn and 3000 or 1 
    Game.Scene:GetComponent("AgainstComponent").NotVerify = self.purchaseToggle.isOn
    --Z_Card[1043].NotOpen = self.activityToggle.isOn and 0 or 1
    --Z_Card[1044].NotOpen = self.activityToggle.isOn and 0 or 1
    --Z_Card[1045].NotOpen = self.activityToggle.isOn and 0 or 1
    --table.walk(Z_Skin, function (k, v)
    --    if self.activityToggle.isOn then
    --        v.NotOpen = 0
    --    end
    --end)
    --table.walk(Z_Equip, function (k, v)
    --    if self.activityToggle.isOn then
    --        if not string.IsNullOrEmpty(v.Name) then
    --            v.NotOpen = 0
    --        end
    --    end
    --end)
    --table.walk(Z_FightSoul, function (k, v)
    --    if self.activityToggle.isOn then
    --        v.NotOpen = 0
    --    end
    --end)

end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;