---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UISetIconView = BaseClass("UISetIconView",UIBaseView);
local base = UIBaseView
local this = UISetIconView
local pfbName = "SetIconPfb"

local function GetIconData(self,Id)
    local dataList = {}
 
    if self.mainMode == 1 then
          for k,v in pairs(Z_Skin) do
            if Z_Card[v.CharacterId].Sphere == Id and Z_Card[v.CharacterId].NotOpen ~= 1 then
                -- if table.first(self.zCardSkins[v.CharacterId],function(stage) return v.Stage == stage end) then
                --     table.insert(dataList,{zCard = Z_Card[v.CharacterId],isLock = false,lock = 0 ,SkinId =v.Id })
                -- else
                --     table.insert(dataList,{zCard = Z_Card[v.CharacterId],isLock = true,lock = 1,SkinId =v.Id})
                -- end
                local isLock = self.checkHead(self, v.Id)
                local lock = 0
                if isLock then
                    lock = 1
                end

                table.insert(dataList,{zCard = Z_Card[v.CharacterId],isLock = isLock,lock = lock,SkinId =v.Id})
            end
        end
    elseif self.mainMode == 2 and self.subMode==1 then
        for i = 1, 1 do
            table.insert(dataList,{zCard = {Id = 1000},isLock = false,lock = 1,SkinId =i})
        end
    end

    if self.mainMode == 1 then
        table.sort(dataList,function(a,b)
            local a_ZSkinId = UIPublic.GetSkin(a.zCard.Id, a.SkinId).Id
            local b_ZSkinId = UIPublic.GetSkin(b.zCard.Id, b.SkinId).Id
            --local a_ZSkinId = Z_Skin[a.zCard.Id*100+a.SkinId].Id
            --local b_ZSkinId = Z_Skin[b.zCard.Id*100+b.SkinId].Id
            if a.lock == b.lock  then
                return a_ZSkinId < b_ZSkinId
            else
                return a.lock < b.lock
            end
        end)
    end
    
    return dataList
end

function this.checkHead(self, headId)
    local isLock = true
    if self.player.headPortraits ~= nil then
        for index, value in ipairs(self.player.headPortraits) do
            if headId == value then
                isLock = false
            end
        end
    end

    return isLock
end

local function InitCurIcon(self,info)
    local avatar = self.curIcon:Find("SetIconPfb/Mask/Avatar"):GetComponent("Image")
    local nameTxt = self.curIcon:Find("Name/Root/Value"):GetComponent("Text")
    nameTxt.text = ""
    LangUtil.BindText(nameTxt)
    local headId
    if info == nil then
        if self.player.Avatar ~= nil and Z_HeadPortrait[self.player.Avatar] ~= nil then
            local avatarStr = Z_HeadPortrait[self.player.Avatar].Resourse
            UIUtil.SetPlayerIcon(avatar,avatarStr)
        end
        headId = self.player.Avatar
    elseif info.zCard.Id == 1000 then
        UIUtil.SetCardSprite(avatar:GetComponent("Image"), info.zCard.Id, info.SkinId,CardPictureType.Little)
        headId = info.zCard.Id
    else
        UIUtil.NewSetCardSprite(avatar,self.templateId,self.skinId,CardPictureType.Little,true)
        headId = info.SkinId
    end

    if Z_HeadPortrait[headId] ~= nil then
        nameTxt.text = Z_HeadPortrait[headId].Name
    else
        nameTxt.text = ""
    end
    
    -- if not string.IsNullOrEmpty(avatarStr) then
    --     -- self.templateId = tonumber(string.split(avatarStr,":")[1])
    --     -- self.skinId = tonumber(string.split(avatarStr,":")[2])
    --     if Z_Card[self.templateId] ~=nil then
    --         local zSkin = UIPublic.GetSkin(self.templateId, self.skinId)
    --         nameTxt.text = Z_Card[self.templateId].Name .. zSkin.Name
    --     else
    --         nameTxt.text = LangUtil.GetSysLang(120).. self.skinId 
    --     end
    --     UIUtil.ScrollText(nameTxt)
    --     --UIUtil.SetCardSprite(avatar,self.templateId,self.skinId,CardPictureType.Little,true)
    --     UIUtil.NewSetCardSprite(avatar,self.templateId,self.skinId,CardPictureType.Little,true)
    -- else
    --     self.templateId = 1000
    --     self.skinId = 1
    --     UIUtil.SetPlayerIcon(avatar)
    --     nameTxt.text = LangUtil.GetSysLang(2043)
    --     LangUtil.BindText(nameTxt)
    -- end
end


local function OnSave(self)
    if  self.selectAvatar == nil then
        return
    end

    PublicRequest.SendRequest(
    PROTOCOL.ChangeHeadPortraitReq,{
        id = self.selectAvatar
    },
        function(response, error)
            if error == 0 then
                self.player.Avatar = response.id
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_ROLE_INFO_UPDATE)
                DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG)
            end
        end)
    -- coroutine.start(function ()
    --     local info = coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
    --             OuterOpcode.Name2Code.ETModel_C2M_SetPlayerAvatar, {Avatar = self.selectAvatar})
    --     if info.Error == ErrorCode.ERR_Success then
            
    --         Game.Scene.Player.Avatar = self.selectAvatar
    --         DataManager:GetInstance():Broadcast(DataMessageNames.ON_PLAYER_INFO_CHG)
    --         --UIManager:GetInstance():CloseWindow(UIWindowNames.UISetIcon)
    --         UIUtil.ToolTipFourth(LangUtil.GetSysLang(816))
    --     end
    -- end)
end

local function OnClickIconPfb(self,info)
    local templateId = info.zCard.Id
    local stage = info.SkinId
    local avatar = templateId ..":"..stage
    self.selectAvatar = info.SkinId--avatar

    self.templateId = templateId --特殊头像特殊处理
    if self.templateId == 1000 then
        self.selectAvatar = 1000
    end
    InitCurIcon(self, info)
end


local function InitTopLabel(self)
    local id
    if self.mainMode == 1 then
        id = self.subMode
    else
        id = self.subMode + 9
    end
    for k,v in pairs(self.labelList) do
        v:SetActive(id == k)
    end
end

local function InitContent(self)
    self.isBuysing = true
    local zCardList = GetIconData(self,self.subMode)
    ListChildPool:GetInstance():ClearContent(self.content)
    self.hint:SetActive(table.count(zCardList) == 0)
    coroutine.start(function()
        self.content.gameObject:SetActive(false)
        coroutine.waitforframes(5)
        InitTopLabel(self)
        self.isBuysing = false
        local cardNum = table.count(zCardList)
        local activeNum= table.count(table.choose(zCardList,function(k,v) return v.isLock==false   end))
        self.numValue.text= activeNum.."/"..cardNum
        for k,v in table.pairsByKeys(zCardList) do
            if self.isBuysing or self.active == false then
                ListChildPool:GetInstance():ClearContent(self.content)
                return 
            end
            ListChildPool:GetInstance():GetChild(pfbName,self.content,function(object)
                local transform = object.transform
                local avatar = transform:Find("Mask/Avatar").gameObject
                local lock = transform:Find("Lock").gameObject
                local select =  transform:Find("Select").gameObject
                lock:SetActive(v.isLock)
                --UIUtil.SetCardSprite(avatar:GetComponent("Image"),v.zCard.Id,v.SkinId,CardPictureType.Little)
                if v.zCard.Id == 1000 then
                    UIUtil.SetCardSprite(avatar:GetComponent("Image"),v.zCard.Id,v.SkinId,CardPictureType.Little)
                else
                    UIUtil.NewSetCardSprite(avatar:GetComponent("Image"),v.zCard.Id,v.SkinId,CardPictureType.Little)
                end
                --UIUtil.NewSetCardSprite(avatar:GetComponent("Image"),v.zCard.Id,v.SkinId,CardPictureType.Little)
                --NewSetCardSprite
                if self.templateId ~= nil and self.skinId ~= nil and self.templateId == v.zCard.Id and self.skinId == v.SkinId then
                    select:SetActive(true)
                else
                    select:SetActive(false)
                end
                
                UIUtil.AddBtnEvent(object,function()
                    for i = 0,self.content.transform.childCount - 1 do
                        local child = self.content.transform:GetChild(i)
                        child:Find("Select").gameObject:SetActive(child == object.transform)
                    end
                    OnClickIconPfb(self,v)
                end)
                object:GetComponent("Button").enabled = (not v.isLock)
            end)
        end
        self.content.gameObject:SetActive(true)
    end)
end


local function SetActive(gameObject,_bool)
    gameObject:GetComponent("Button").enabled = (not _bool)
    gameObject.transform:Find("Active").gameObject:SetActive(_bool)
end


local function OnClickMode1Button(self,id)
    self.avatarStr = nil
    self.subMode = id 
    for k,v in pairs(self.model1List) do
        SetActive(v,k==id)
    end
    InitContent(self)
    self.content.transform:DOLocalMoveY(0,0)
end

local function OnClickMode2Button(self,id)
    self.subMode = id 
    for k,v in pairs(self.model2List) do
        SetActive(v,k==id)
    end
    InitContent(self)
    self.content.transform:DOLocalMoveY(0,0)
end


local function InitSubModeLabel(self)
    self.mode1Chang:SetActive(self.mainMode == 1)
    self.mode2Chang:SetActive(self.mainMode == 2)
    if self.mainMode == 1 then
        OnClickMode1Button(self,self.subMode)
    else
        OnClickMode2Button(self,self.subMode)
    end
    
end


local function OnClickChangeButton(self,id)
    self.selectAvatar = nil
    self.mainMode = id
    self.subMode = 1
    SetActive(self.spcBtn,id == 2)
    SetActive(self.cardBtn,id == 1)
    InitSubModeLabel(self)
end

local function Mode1ChgCreate(self)
    self.model1List = {}
    local transform = self.mode1Chang.transform:Find("Viewport/Content")
    local spritLang = {222, 224, 226, 0, 0, 0, 0, 228, 230}
    for i = 0,transform.childCount - 1 do
        local btn = transform:GetChild(i).gameObject
        self.model1List[i+1] = btn
        if spritLang[i + 1] > 0 then
            LangUtil.GetSpriteLang(spritLang[i + 1], function(sprite)
                btn.transform:Find("Image"):GetComponent("Image").sprite = sprite
            end)
            LangUtil.GetSpriteLang(spritLang[i + 1] + 1, function(sprite)
                btn.transform:Find("Active"):GetComponent("Image").sprite = sprite
            end)
        end
        UIUtil.AddBtnEvent(btn,function() OnClickMode1Button(self,i+1)  end)
    end
end

local function Mode2ChgCreate(self)
    self.model2List = {}
    local transform = self.mode2Chang.transform
    for i = 0,transform.childCount - 1 do
        local btn = transform:GetChild(i).gameObject
        self.model2List[i+1] = btn
        LangUtil.GetSpriteLang(218 + 2 * i, function(sprite)
            btn.transform:Find("img"):GetComponent("Image").sprite = sprite 
        end)
        LangUtil.GetSpriteLang(219 + 2 * i, function(sprite)
            btn.transform:Find("Active"):GetComponent("Image").sprite = sprite
        end)
        UIUtil.AddBtnEvent(btn,function() OnClickMode2Button(self,i+1)  end)
    end
end

function this.OnCreate(self)
    base.OnCreate(self)
    self.backBtn = self.rc:GetObject("BackButton")
   
    self.cardBtn = self.rc:GetObject("CardButton")
    self.spcBtn = self.rc:GetObject("SpecialButton")
   
    self.curIcon = self.rc:GetObject("CurIcon").transform
    self.mode1Chang = self.rc:GetObject("Mode1Chang")
    self.mode2Chang = self.rc:GetObject("Mode2Chang")
    self.content = self.rc:GetObject("Content").transform
    self.hint = self.rc:GetObject("Hint")
    self.saveBtn = self.rc:GetObject("SaveButton")
   
    UIUtil.AddBtnEvent(self.saveBtn,function()
        OnSave(self)  
        UIManager:GetInstance():CloseWindow(UIWindowNames.UISetIcon)
    end)
    self.numText=self.rc:GetObject("Num").transform:Find("Text"):GetComponent("Text")
    self.numValue=self.rc:GetObject("Num").transform:Find("Value"):GetComponent("Text")
    self.numValue.text=""
    
    self.labelList = {}
    UIPublic.SetBackButton(
            self.backBtn,
            UIWindowNames.UISetIcon,
            616
    )
    UIUtil.AddBtnEvent(self.backBtn,function()UIManager:GetInstance():CloseWindow(UIWindowNames.UISetIcon)  end)
    UIUtil.AddBtnEvent(self.cardBtn,function() OnClickChangeButton(self,1)end)
    UIUtil.AddBtnEvent(self.spcBtn,function() OnClickChangeButton(self,2)end)
    Mode1ChgCreate(self)
    Mode2ChgCreate(self)
    
end

function this.OnLangCreate(self)
    LangUtil.BindText(self.saveBtn.transform:Find("Text")).text = LangUtil.GetSysLang(263)
    LangUtil.BindText(self.numText)
    LangUtil.BindText(self.numValue,"Number")
    LangUtil.BindText(self.rc:GetObject("title").transform:Find("Text"))
    Mode1ChgCreate(self)
    Mode2ChgCreate(self)

    LangUtil.GetSpriteLang(214, function(sprite) 
        self.cardBtn.transform:Find("img"):GetComponent("Image").sprite = sprite
    end)
    LangUtil.GetSpriteLang(215, function(sprite)
        self.cardBtn.transform:Find("Active"):GetComponent("Image").sprite = sprite
    end)
    LangUtil.GetSpriteLang(216, function(sprite)
        self.spcBtn.transform:Find("img"):GetComponent("Image").sprite = sprite
    end)
    LangUtil.GetSpriteLang(217, function(sprite)
        self.spcBtn.transform:Find("Active"):GetComponent("Image").sprite = sprite
    end)
end

function this.OnEnable(self)
    base.OnEnable(self)
    self.zCardSkins = Game.Scene.Player:GetComponent("CardComponent").ZCardSkins
    self:OnRefresh()
end

function this.OnRefresh(self)
    self.mainMode = 1
    self.subMode = 1
    self.player = Game.Scene.Player
    for i = 1,8 do
        if table.count(GetIconData(self,i)) ==0 then
            self.model1List[i].gameObject:SetActive(false)
        else
            self.model1List[i].gameObject:SetActive(true)
        end
    end

    InitCurIcon(self)
    OnClickChangeButton(self,self.mainMode)
end


function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_PLAYER_INFO_CHG,InitCurIcon)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    if self.model.data ~= nil and  self.model.data.windowNames ~= nil then
        for k,v in pairs(self.model.data.windowNames) do
            UIManager:GetInstance():OpenWindow(v)
        end
    end
end

function this.OnDisable(self)
    base.OnDisable(self)
    
end

function this.OnDestroy(self)
    base.OnDestroy(self)
    --if LangUtil.GetLangType() == LangType.JA then
    --    self.timer:Stop()
    --end
end

return this;

