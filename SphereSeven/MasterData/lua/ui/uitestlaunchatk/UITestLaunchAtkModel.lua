---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/3 13:59
---

local UITestLaunchAtkModel = BaseClass("UITestLaunchAtkModel",UIBaseModel)
local base = UIBaseModel;



local function GetMaxSectionId(chapter_id)
    --local num = 0;
    local tab = {};
    for k,v in table.pairsByKeys(Z_StoryTestSection) do
        if v.ChapterId == chapter_id then
            table.insert(tab,v.Id);
        end
    end
    table.sort(tab,function(a,b) return a<b  end)
    return tab[#tab];
end

local function GetMinSectionId(chapter_id)
    local tab = {};
    for k,v in table.pairsByKeys(Z_StoryTestSection) do
        if v.ChapterId == chapter_id and v.LevelId ~= 0 then
            table.insert(tab,v.Id);
        end
    end
    table.sort(tab,function(a,b) return a<b  end)
    return tab[1];
end

local function OnCreate(self)
    self.cur_completed_sectionId = nil;
    self.completed_sectionId = nil;
    self.level_scores = nil;
    self.chapter_section_data = nil;
    self.diffculty = 1;
    self.map = {};
    self.condition1 = false;
    self.condition2 = false;
    self.condition3 = false;
    self.select_data = nil;
end

local function OnEnable(self)
    base.OnEnable(self);
    self:OnRefresh();
end

local function GetChapterSectionData(self)
    local data_tab = {};
    local chapter_section_tab = {};
    local completed_section_id = self.completed_sectionId;

    for k,v in table.pairsByKeys(Z_StoryTestSection) do
        if k <= completed_section_id then
            table.insert(data_tab,v);
        end
        if completed_section_id == 0 then
            table.insert(data_tab,v);
            break;
        end
    end

    if completed_section_id ~= 0  then
        if data_tab[#data_tab].NextSectionId ~= 0 then
            table.insert(data_tab,Z_StoryTestSection[data_tab[#data_tab].NextSectionId]);
        elseif Z_StoryChapter[data_tab[#data_tab].ChapterId].NextChapterId ~= 0 then
            local section_id = GetMinSectionId(Z_StoryChapter[data_tab[#data_tab].ChapterId].NextChapterId);
            table.insert(data_tab,Z_StoryTestSection[section_id]);
        end
    end

    local againstComponent = Game.Scene:GetComponent("AgainstComponent");
    for i = 1,#data_tab do
        local chapter_id = data_tab[i].ChapterId;
        if chapter_section_tab[chapter_id] == nil then
            chapter_section_tab[chapter_id] = table.clone(Z_StoryChapter[chapter_id]);
        end
        if chapter_section_tab[chapter_id].Section == nil then
            chapter_section_tab[chapter_id].Section = {};
        end
        local temp_tab = data_tab[i];
        temp_tab.Diffculty = table.clone(againstComponent:GetZStoryLevel(data_tab[i].Id,self.diffculty));
        table.insert(chapter_section_tab[chapter_id].Section,temp_tab);
    end
    return chapter_section_tab;
end



local function GetBeforeSection(SectionId)
    local count = 1;
    while(true) do
        if Z_StoryTestSection[SectionId - count] == nil then
            return 0;
        else
            if Z_StoryTestSection[SectionId - count].LevelId == 0 then
                count = count + 1;
            else
                return SectionId - count;
            end
        end
    end
end

local function IsMeetDiffcutyCondition(self,dif,cur_sectionId)
    local dif_1 = self.completed_sectionId
    local cur_chapter_section = Z_StoryTestSection[cur_sectionId];

    if cur_chapter_section == nil then
        return false;
    end

    if dif == 1 then
        return true;
    elseif dif == 2 then
        if cur_chapter_section.ChapterId == 1 then --如果是第一章的第一节 需要判断此章的难度1是否推完
            if dif_1 >= GetMaxSectionId(cur_chapter_section.ChapterId) then
                if cur_chapter_section.Id <= GetMinSectionId(cur_chapter_section.ChapterId) then
                    return true;
                else
                    if dif_2 >= (cur_chapter_section.Id -1) then
                        return true;
                    end
                end
                return false
            end
            return false
        else
            if cur_chapter_section.Id == GetMinSectionId(cur_chapter_section.ChapterId) then --第一关
                if dif_2 >= GetMaxSectionId(cur_chapter_section.ChapterId - 1) then --前一章难度二打完
                    return true;
                end
                return false;
            else  --不是第一关
                if dif_2 >= GetBeforeSection(cur_chapter_section.Id) then --判断前一关难度二是否打完
                    return true;
                end
                return false;
            end
        end
    elseif dif == 3 then
        if cur_chapter_section.ChapterId == 1 then --如果是第一章的第一节 需要判断此章的难度1是否推完
            if dif_2 >= GetMaxSectionId(cur_chapter_section.ChapterId) then
                if cur_chapter_section.Id <= GetMinSectionId(cur_chapter_section.ChapterId) then
                    return true;
                else
                    if dif_3 >= (cur_chapter_section.Id -1) then
                        return true;
                    end
                end
                return false
            end
            return false
        else
            if cur_chapter_section.Id == GetMinSectionId(cur_chapter_section.ChapterId) then
                if dif_3 >= GetMaxSectionId(cur_chapter_section.ChapterId - 1) then
                    return true;
                end
                return false;
            else
                if dif_3 >= GetBeforeSection(cur_chapter_section.Id) then
                    return true;
                end
                return false;
            end
        end
    end
end

local function GetSelectData(self,sectionId)
    local data_tab = {};
    data_tab[1] = IsMeetDiffcutyCondition(self,1,sectionId);
    data_tab[2] = IsMeetDiffcutyCondition(self,2,sectionId);
    data_tab[3] = IsMeetDiffcutyCondition(self,3,sectionId);
    return data_tab;
end

local function OnRefresh(self)
    local storyComponent = Game.Scene.Player:GetComponent("StoryComponent");
    if ClientData:GetInstance().OpenAll == 1 then
        self.completed_sectionId = 1005
    else
        self.completed_sectionId = storyComponent.CompletedTestId;
    end
    --self.level_scores = table.choose(storyComponent.StoryLevelScores,function(k,v)  return k > 1000  end)
    self.chapter_section_data = GetChapterSectionData(self)
end


local function OnTestCompletedChg(self)
    self:OnRefresh()
    self:UIBroadcast(UIMessageNames.ON_TEST_COMPLETED_CHG)
end

function this.OnAddListener(self)
    base.OnAddListener(self);
    self:AddDataListener(DataMessageNames.ON_TEST_COMPLETED_CHG,OnTestCompletedChg)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
    self:RemoveDataListener(DataMessageNames.ON_TEST_COMPLETED_CHG)
end

local function OnDisable(self)
    base.OnDisable(self);
    self.completed_sectionId = nil;
    self.level_scores = nil;
    self.chapter_section_data = nil;
end

local function OnDestroy(self)
    base.OnDestroy(self);
end

UITestLaunchAtkModel.GetSelectData = GetSelectData
UITestLaunchAtkModel.OnCreate = OnCreate
UITestLaunchAtkModel.OnEnable = OnEnable
UITestLaunchAtkModel.OnRefresh = OnRefresh
UITestLaunchAtkModel.OnAddListener = OnAddListener
UITestLaunchAtkModel.OnRemoveListener = OnRemoveListener
UITestLaunchAtkModel.OnDisable = OnDisable
UITestLaunchAtkModel.OnDestroy = OnDestroy

return UITestLaunchAtkModel


