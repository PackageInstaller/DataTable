---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---


--player   数据加字段  SigninNum    当月总签到数 不会超过31
--SigninToday  当天是否能签到  0可以 1已签
--
--调用 签到接口
--local rr= coroutine.yieldstart(Game.Scene.Session.CoCall,nil,Game.Scene.Session,
--        OuterOpcode.Name2Code.ETModel_C2M_Signin, {})
--返回 rr.Error==0时
--rr.Num    当月总签到数
--rr.RewardInfo  奖励p
--返回 rr.Error~=0时
--rr.Message  错误消息
--
--

local UISignInView = BaseClass("UISignInView",UIBaseView);
local base = UIBaseView
local this = UISignInView
local pfbName = "SignInItem"
--1 物品 2 角色 3 装备 4 战魂  5 金钱

local mainPos = Vector2.New(-38,-39)
local mainPos1 = Vector2.New(-38,-1068)

local titleY = 300

local BOSSRAID_TICK = tonumber(Z_Misc["BOSSRAID_TICK"].Value[1])	-- 总力战挑战卷

local function DoAnim(self)
    --self.view:DOScale(Vector2.New(1,0),0)
    self.main:DOLocalMove(mainPos1,0)
    self.title:DOLocalMove(Vector2.New(self.title.localPosition.x,self.title.localPosition.y+titleY),0)
    self.subTitle:DOLocalMove(Vector2.New(self.subTitle.localPosition.x,self.subTitle.localPosition.y+titleY),0)
    self.raw:DOLocalMove(Vector2.New(self.raw.localPosition.x,self.raw.localPosition.y+titleY),0)

    self.title.gameObject:SetActive(false)
    self.subTitle.gameObject:SetActive(false)

    coroutine.start(function()
        self.main:DOLocalMove(Vector2.New(mainPos.x,mainPos.y + 100),0.4)
        coroutine.waitforseconds(0.4)
        self.title.gameObject:SetActive(true)
        self.subTitle.gameObject:SetActive(true)

        --self.view:DOScale(Vector2.New(1,1),0.3)
        self.title:DOLocalMove(Vector2.New(self.title.localPosition.x,self.title.localPosition.y-titleY),0.3)
        self.subTitle:DOLocalMove(Vector2.New(self.subTitle.localPosition.x,self.subTitle.localPosition.y-titleY),0.3)
        self.raw:DOLocalMove(Vector2.New(self.raw.localPosition.x,self.raw.localPosition.y-titleY),0.3)
        self.main:DOLocalMove(Vector2.New(mainPos.x,mainPos.y),0.3)

        --coroutine.waitforseconds(0.3)
    end)
end

---@param reward RewardData
local function OnItem(self, reward, basePos)
    local root = self.itemPanel.transform:Find("Item")
    
    local avatar = root:Find("Icon/Avatar"):GetComponent("Image")
    local starBg = root:Find("Icon/StarBg"):GetComponent("Image")
    local nameTxt = LangUtil.BindText(root:Find("Size/Name"))
    local kindTxt = LangUtil.BindText(root:Find("Kind"))
    
    starBg.sprite = nil
    coroutine.start(function()
        nameTxt.text = reward.name
        kindTxt.text = reward.typeName
        self.desc.text = reward.desc
        UIUtil.ScrollText(nameTxt)

        UIPublic.InitItemIconNew(avatar, starBg, reward.type, reward.id)
        starBg.gameObject:SetActive(starBg.sprite ~= nil)
        
        UIPublic.SetPanelPosition(root, self.view.transform, basePos)
        self.itemPanel:SetActive(true)
    end)
end

local function FreshItems(self)
    local checkInData = Z_DailyCheckIn[self.timeData.month]
    self.vs_scroll:RefreshData(checkInData)
    self.vs_scroll:MoveTop()
end

local function InitItem(self, zDailyCheckIn)
    local transform = self.objectList[zDailyCheckIn.Day].transform
    local get = transform:Find("Get").gameObject
    local dateTxt = LangUtil.BindText(transform:Find("Date/Value"))
    local numTxt = LangUtil.BindText(transform:Find("Amount"))
    
    local active =  transform:Find("Active").gameObject
    dateTxt.text = string.gsub(LangUtil.GetSysLang(722),"X",zDailyCheckIn.Day)
    get:SetActive(self.getNum >= zDailyCheckIn.Day)

    if not self.canGet then
        active:SetActive(self.getNum == zDailyCheckIn.Day)
    else
        active:SetActive((self.getNum+1) == zDailyCheckIn.Day)
    end
    local icon = transform:Find("Icon"):GetComponent("Image")
    local zRewards = Z_Reward[zDailyCheckIn.Reward]

    local zReward = zRewards[1]
    local reward = UIPublic.GetRewardDataNew(zReward.Type, zReward.ObjId, zReward.Count)
    numTxt.text = reward.count

    UIPublic.InitItemIconNew(icon,nil, reward.type, reward.id, reward.count, true, false)
    
    -- UIUtil.AddBtnEvent(transform.gameObject, function()
    --     OnItem(self, reward, transform.position)
    -- end)
end

function this:OnCreate()
    base.OnCreate(self)
    
    local eventBg = self.rc:GetObject("EventBg")

    self.subTitleTxt = self.rc:GetObject("SubTitle"):GetComponent("Text")
    self.content = self.rc:GetObject("Content").transform
    self.itemPanel = self.rc:GetObject("ShowItem")
    self.itemPanel:SetActive(false)

    self.view = self.rc:GetObject("Scroll View").transform
    self.main = self.rc:GetObject("Main"):GetComponent("RectTransform")
    self.title = self.rc:GetObject("Title"):GetComponent("RectTransform")
    self.raw = self.rc:GetObject("RawImage"):GetComponent("RectTransform")
    self.subTitle = self.subTitleTxt.transform
    
    self.objectList = {}
    
    local subEventBg = self.itemPanel.transform:Find("EventBg").gameObject
    
    EventTriggerListener.Get(subEventBg).onLuaClick = function() self.itemPanel:SetActive(false) end
    EventTriggerListener.Get(eventBg).onLuaClick = function()
        UIManager:GetInstance():CloseWindow(UIWindowNames.UIDailyReward)
        local monthCardComponent = Game.Scene.Player:GetComponent("MonthCardComponent")
        if monthCardComponent:hasMonthlyCardCanReceive() then
            monthCardComponent:ReceiveAllMonthCard()
        end
    end

    
    --InitContent(self)
    self.vs_scroll = VerticalScroll.New()
    self.vs_scroll:SetUpdateCount(12)

    coroutine.yieldstart(self.vs_scroll.CoScrollInit,nil, self.vs_scroll,
    {}, self.view, pfbName, function(arg)
        self.objectList[arg.data.Day] = arg.go
        InitItem(self, arg.data)
    end)
end

function this:OnLangCreate()
    LangUtil.BindText(self.subTitleTxt) --ignoreLang
    LangUtil.BindText(self.title)
    self.desc = LangUtil.BindText(self.rc:GetObject("Desc"))
    
end
function this:OnEnable()
    base.OnEnable(self);
    DoAnim(self)
    self:OnRefresh()
end

function this:OnRefresh()
    self.canGet = Game.Scene.Player:GetComponent("CheckInComponent"):HasDailyReward()
    self.timeData = TimeUtil.GetServerTimeSplitData()
    self.subTitleTxt.text = LangUtil.GetSysLang(596).. self.timeData.month .. LangUtil.GetSysLang(2004).."1".. LangUtil.GetSysLang(2005) --"刷新时间：x月1日"

    self.getNum = Game.Scene.Player:GetComponent("CheckInComponent"):GetDailyRewardReceivedCount()
    FreshItems(self)

    if self.canGet then
        ---@param response protocol.DailyRewardReceiveResp
        PublicRequest.SendRequest(
            PROTOCOL.DailyRewardReceiveReq,
            {},
            function(response, errorCode)
                local rewardResults = {}
                for index, value in ipairs(response.daily_reward_results) do
                    if value.type ~= RewardType.RewardTypeItem then
                        table.insert(rewardResults, value)
                    elseif not UIPublic.isFreeRecruitItemId(value.id) and value.id ~= BOSSRAID_TICK then
                        -- 是道具 但不是特定id
                        table.insert(rewardResults, value)
                    end
                end
                UIPublic.OpenRewardUI(rewardResults)
            end
        )
    end

end

local function OnDailyRewardUpdate(self)
    self:OnRefresh()
end

function this:OnAddListener()
    base.OnAddListener(self);
    self:AddUIListener(UIMessageNames.ON_DAILY_REWARD_UPDATE, OnDailyRewardUpdate)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self);
    self:RemoveUIListener(UIMessageNames.ON_DAILY_REWARD_UPDATE)
end

function this:OnDisable()
    base.OnDisable(self);
    -- self.vs_scroll:Dispose()
    -- local monthCardComponent = Game.Scene.Player:GetComponent("MonthCardComponent");
    -- local story = Game.Scene.Player:GetComponent("StoryComponent").StoryChapters
    -- local activityCom = Game.Scene.Player:GetComponent("GameEventComponent")
    -- local storyChapter = table.first(story,function (a) return a.ChapterId == 1 end)
    -- local AwardDay = monthCardComponent.AwardDay;
    -- local day = monthCardComponent.CurDay
    -- local SevenAwardDay =  monthCardComponent.SevenAwardDay
    -- local SevenCurDay = monthCardComponent.SevenCurDay
    -- local ThreeAwardDay =  monthCardComponent.ThreeAwardDay
    -- local ThreeCurDay = monthCardComponent.ThreeCurDay
    -- if Game.Scene.Player.NewToday == 0  and Game.Scene.Player.NewNum < 14  then
    --     coroutine.start(function() 
    --         coroutine.waitforseconds(1.5)
    --         UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityPop)
    --     end)
    -- elseif day > AwardDay or SevenCurDay > SevenAwardDay or ThreeCurDay > ThreeAwardDay then
    --     coroutine.start(function()
    --         coroutine.waitforseconds(1.5)
    --         if Game.Scene:GetComponent("SceneComponent"):GetCurrentScene() ~= SceneConfig.HomeScene.Name then
    --             return
    --         end
    --         monthCardComponent:OpenMonthlyCardUI()
    --     end)
    -- else
    --     UIManager:GetInstance():GetWindow(UIWindowNames.UIHome).View.eventImg:SetActive(false)
    --     coroutine.start(function()
    --         coroutine.waitforseconds(1.5)
    --         if Game.Scene:GetComponent("SceneComponent"):GetCurrentScene() ~= SceneConfig.HomeScene.Name then
    --             return
    --         end
    --         local GuideComplete, GuideStep ,run = Game.Scene:GetComponent("GuideComponent"):GetCurrentData()
    --         if run == false and UIManager:GetInstance():GetLastBgWindowName() == UIWindowNames.UIHome then
    --             --local faceId = Game.Scene:GetComponent("SoundComponent"):PlayFirstLoginSound()
    --             local home = UIManager:GetInstance():GetWindow(UIWindowNames.UIHome)
    --             if home ~= nil and home.View ~= nil then
    --                 home.View.uiDrawing:CoPlay(SoundType.Main)
    --             end
    --         end
    --         coroutine.waitforseconds(0.5)
    --         UIManager:GetInstance():GetWindow(UIWindowNames.UIHome).View.eventImg:SetActive(false)
    --         if storyChapter ~= nil then
    --             if storyChapter.CompletedSections[1].CompletedId >= 103 and table.first(activityCom.ActivityGifts, function(a) return a.Id == 33 end) == nil then
    --                 UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGiftBag, { ModeId = 33 })
    --             elseif storyChapter.CompletedSections[1].CompletedId >= 110 and table.first(activityCom.ActivityGifts, function(a) return a.Id == 34 end) == nil then
    --                 UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGiftBag, { ModeId = 34 })
    --             end
                
    --         end
    --     end)
    -- end
end

function this:OnDestroy()
    base.OnDestroy(self);
    self.vs_scroll:Dispose()
end

return this;

