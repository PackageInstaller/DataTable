---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/1 16:21
---
---@class UIHandBookMainView
---@field ctrl UIHandBookMainCtrl
local UIHandBookMainView = BaseClass("UIHandBookMainView",UIBaseView)
local base = UIBaseView;
local this = UIHandBookMainView

-- Attention: 对应活动开启的时候，同时得开启角色，战魂，装备！！！！

local showPropertySort = {
    [1] = NumericType.Hp,
    [2] = NumericType.Atk,
    [3] = NumericType.Def,
    [4] = NumericType.MagicDef,
    [5] = NumericType.Speed,
}

local function InitHint(self)
    local handbookNode = Game.Scene:GetComponent("HintComponent").Handbook
    local cardNode = handbookNode:GetChild("Card")
    local equipNode = handbookNode:GetChild("Equip")
    local fightSoulNode = handbookNode:GetChild("FightSoul")
    local monsterNode = handbookNode:GetChild("Monster")
    
    -- cardNode:AddObject(self.cardBtn.transform:Find("Hint").gameObject,"HandBookView")
    -- equipNode:AddObject(self.equipBtn.transform:Find("Hint").gameObject,"HandBookView")
    -- fightSoulNode:AddObject(self.fightSoulBtn.transform:Find("Hint").gameObject,"HandBookView")
    -- monsterNode:AddObject(self.enemyBtn.transform:Find("Hint").gameObject,"HandBookView")
end

local function InitSlider(self)
    ---@type RecordComponent
    local recordComponent = Game.Scene.Player:GetComponent("RecordComponent")
    local cardCount, allCardNum = recordComponent:GetRecordCount(RecordType.Character)
    local cardProgress = math.modf(cardCount / allCardNum *100)

    local equipCount, allEquipNum = recordComponent:GetRecordCount(RecordType.Equip)
    local equipProgress = math.modf((equipCount/allEquipNum) *100)

    local fightSoulCount, totalFightSoulCount = recordComponent:GetRecordCount(RecordType.FightSoul)
    local fightSoulProgress = math.modf((fightSoulCount/totalFightSoulCount) *100)

    local bgmPrgeress = 100

    local holdCount, totalEnemyCount = recordComponent:GetMonsterCount()
    local enemyProgress = math.modf(holdCount / totalEnemyCount *100)

    local cgCount, allCgCount = recordComponent:GetRecordCount(RecordType.CG)
    local CGProgress = math.modf(cgCount/allCgCount *100)

    -- 剧情
    ---@type protocol.LevelPack
    local levelPack = table.first(Game.Scene.Player:GetComponent("StoryComponent").level_packs, function(v)
        return v.level_type == LevelType.LevelTypeStory
    end)
    local allStorys = table.choose(Z_StorySection, function(_, v)
        return not string.IsNullOrEmpty(v.StoryId)
    end)
    local allStoryCount = table.count(allStorys)
    local pastStoryCount = table.count( table.choose(allStorys, function(k, v)
        ---@param level protocol.Level
        return table.any( levelPack.levels, function(level)
                return level.id == v.Id and level.pass_times >= 1
            end)
    end) )
    local storyProgress = math.modf(pastStoryCount/allStoryCount *100)

    
    local cardSlider = self.cardBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local fightSoulSlider = self.fightSoulBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local equipSlider = self.equipBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local enemySlider = self.enemyBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local bgmSlider = self.bgmBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local cgSlider = self.cgBtn.transform:Find("Progress/Slider"):GetComponent("Slider")
    local stotrySlider = self.storyBtn.transform:Find("Progress/Slider"):GetComponent("Slider")

    cardSlider.value = cardProgress/100
    LangUtil.BindText(self.cardBtn.transform:Find("Progress/ProgressText")).text = cardProgress.."%"

    equipSlider.value = equipProgress/100
    LangUtil.BindText(self.equipBtn.transform:Find("Progress/ProgressText")).text = equipProgress.."%"

    fightSoulSlider.value = fightSoulProgress/100
    LangUtil.BindText(self.fightSoulBtn.transform:Find("Progress/ProgressText")).text = fightSoulProgress.."%"

    bgmSlider.value = bgmPrgeress/100
    LangUtil.BindText(self.bgmBtn.transform:Find("Progress/ProgressText")).text = bgmPrgeress.."%"

    enemySlider.value = enemyProgress/100
    LangUtil.BindText(self.enemyBtn.transform:Find("Progress/ProgressText")).text = enemyProgress.."%"

    cgSlider.value = CGProgress/100
    LangUtil.BindText(self.cgBtn.transform:Find("Progress/ProgressText")).text = CGProgress.."%"

    stotrySlider.value = storyProgress/100
    LangUtil.BindText(self.storyBtn.transform:Find("Progress/ProgressText")).text = storyProgress.."%"

    -- local totalValue = cardProgress + equipProgress + fightSoulProgress + bgmPrgeress + enemyProgress + CGProgress + storyProgress
    local totalValue = cardProgress + equipProgress + fightSoulProgress + bgmPrgeress + enemyProgress + storyProgress
    self.progressSlider.value = math.modf(totalValue/6)/100
    self.progressSlider.transform:Find("Value"):GetComponent("Text").text = math.modf(totalValue/7)

end

function this.OnLangCreate(self)
    local progressRoot = self.langRc:GetObject("ProgressSlider").transform

    -- LangUtil.BindText(returnBtn:Find("Text")).text = LangUtil.GetSysLang(272)
    LangUtil.BindText(progressRoot:Find("Image/Text")).text = LangUtil.GetSysLang(273)
    LangUtil.BindText(progressRoot:Find("Txt"),FontType.All_Number).text = "%"
    LangUtil.BindText(progressRoot:Find("Value"),FontType.All_Number).text = "0"
    LangUtil.BindText(self.langRc:GetObject("PropertyTitleText")).text = LangUtil.GetSysLang(1186)

    self.texts = {}
    for i = 0, self.property.childCount - 1 do
        local child = self.property:GetChild(i)
        self.texts[i + 1] = LangUtil.BindText(child:Find("PropertyRoot"), FontType.All_Number)
        LangUtil.BindText(child:Find("PropertyRoot/Text"))
        local image = child:Find("PropertyRoot/Image"):GetComponent("Image")
        UIUtil.SetSprite(image, AtlasConfig.Property, Z_Property[showPropertySort[i + 1]].Icon ..".png")
    end

    local content1 = self.langRc:GetObject("Content1").transform
    local content2 = self.langRc:GetObject("Content2").transform
    local titleText = {
        [1] = {
            [1] = LangUtil.GetSysLang(90),
            [2] = LangUtil.GetSysLang(259),
            [3] = LangUtil.GetSysLang(253),
        },
        [2] = {
            [1] = LangUtil.GetSysLang(349),
            [2] = LangUtil.GetSysLang(1275),
            [3] = LangUtil.GetSysLang(1276),
            [4] = LangUtil.GetSysLang(1277),
        }
    }
    for i = 0, content1.childCount - 1 do
        LangUtil.BindText(content1:GetChild(i):Find("Text")).text = titleText[1][i + 1]
        LangUtil.BindText(content1:GetChild(i):Find("Progress/ProgressText"), FontType.All_Number)
    end
    for i = 0, content2.childCount - 1 do
        LangUtil.BindText(content2:GetChild(i):Find("Text")).text = titleText[2][i + 1]
        LangUtil.BindText(content2:GetChild(i):Find("Progress/ProgressText"), FontType.All_Number)
    end
end

function this:OnCreate()
    base.OnCreate(self);
    self.backBtn = self.rc:GetObject("BackButton")
    UIPublic.SetBackButton(
        self.backBtn,
        UIWindowNames.UIHandBookMain,
        420
    )
    self.enemyBtn = self.rc:GetObject("Enemy")
    self.equipBtn = self.rc:GetObject("Equip")
    self.fightSoulBtn = self.rc:GetObject("FightSoul")
    self.cardBtn = self.rc:GetObject("Card")
    self.bgmBtn = self.rc:GetObject("Bgm")
    self.cgBtn = self.rc:GetObject("CG")
    self.storyBtn = self.rc:GetObject("Story")

    self.progressSlider = self.rc:GetObject("ProgressSlider"):GetComponent("Slider")
    local paint = self.rc:GetObject("Paint"):GetComponent("Image")
    -- self.face = UILandlady.New(paint, 1000, self.rc:GetObject("Lines"))
    self.property = self.rc:GetObject("Property").transform

    UIPublic.SetHelpButton(self.rc:GetObject("HelpButton"), UIWindowNames.UIHandBookMain)

    UIUtil.AddBtnEvent(self.enemyBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenEnemyWindow()  
    end)
    UIUtil.AddBtnEvent(self.equipBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenEquipWindow() 
    end)
    UIUtil.AddBtnEvent(self.fightSoulBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenFightSoulWindow() 
    end)
    UIUtil.AddBtnEvent(self.cardBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenCardWindow() 
    end)

    UIUtil.AddBtnEvent(self.bgmBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenBgmWindow() 
    end)

    UIUtil.AddBtnEvent(self.cgBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenCGWindow() 
    end)

    UIUtil.AddBtnEvent(self.storyBtn,function()
        -- self.face:Stop()
        self.ctrl.OpenStoryWindow() 
    end)

    InitHint(self)
end

function this.OnEnable(self)
    base.OnEnable(self);
    coroutine.start(function()
        -- self.face:CoPlay()
        --coroutine.waitforseconds(0.3)
        --Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"HandBook")
    end)
    self:OnRefresh();
end

function this.OnRefresh(self)
    InitSlider(self)
    local propertys = Game.Scene.Player:GetComponent("RecordComponent"):GetProperty()
    for index, value in ipairs(self.texts) do
        local propertyType = showPropertySort[index]
        if propertys[propertyType] == nil then
            value.text = 0
        else
            value.text = "+" .. propertys[propertyType] / 100 .. "%"
        end
    end

end

function this.OnAddListener(self)
    base.OnAddListener(self);
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self);
end

function this.OnDisable(self)
    base.OnDisable(self);
    --coroutine.start(function()
    --    coroutine.waitforframes(3)
     --   Game.Scene:GetComponent("BgmComponent"):CoPlay(BgmType.UI,"Home")
    --end)
    Game.Scene:GetComponent("SoundComponent"):MainStop()
    -- self.face:Disable()
end

function this.OnDestroy(self)
    base.OnDestroy(self);
end

return this;