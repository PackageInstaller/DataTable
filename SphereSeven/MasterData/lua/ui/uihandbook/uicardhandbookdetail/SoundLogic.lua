---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/2 10:20
---

local SoundLogic = {};
local this = SoundLogic;
local soundItem  = "HandbookSoundItem"
local isClick = false

local selectType = {"Main","Home","Rest","AfterRest","Attack","Hurt","HurtSkill","HurtSpSkill","Unable",
                    "Relife","Skill1","Skill2","Skill2Fast","BattleStart","Aid","Into","Win","Summon","Archive",
                    "Gift","GoodGift","Intensify","Evolution" ,"LvBreak","Degree" ,"SoulGet","SoulEquip",
                    "Marry","A"}--,"Mission" ,"MissionSuccess"任务委托以及任务成功不显示
local function GetSoundData(self,id,soundType,index)
 -- print("Id:"..id)
  if index == nil then index = "" end
  local data = {}
  local name 
  if soundType == "Main" then
    name = LangUtil.GetSysLang(600)
  elseif soundType == "Home" then
    name = LangUtil.GetSysLang(601)
  elseif soundType == "Rest" then
    name = LangUtil.GetSysLang(602)
  elseif soundType == "AfterRest" then
    name = LangUtil.GetSysLang(603)
  elseif soundType == "Attack"  then
    name = LangUtil.GetSysLang(604)
  elseif soundType == "Hurt" then
    name = LangUtil.GetSysLang(605)
  elseif soundType == "HurtSkill" then
    name = LangUtil.GetSysLang(606)
  elseif soundType == "HurtSpSkill" then
    name = LangUtil.GetSysLang(607)
  elseif soundType == "Unable" then
    name = LangUtil.GetSysLang(608)
  elseif soundType == "Relife" then
    name = LangUtil.GetSysLang(609)
  elseif soundType == "Skill1" then
    name = LangUtil.GetSysLang(610)
  elseif soundType == "Skill2" then
    name = LangUtil.GetSysLang(611)
  elseif soundType == "Skill2Fast" then
    name = LangUtil.GetSysLang(613)
  elseif soundType == "BattleStart" then
    name = LangUtil.GetSysLang(614)
  elseif soundType == "Aid" then
    name = LangUtil.GetSysLang(615)
  elseif soundType == "Into" then
    name = LangUtil.GetSysLang(616)
  elseif soundType == "Win" then
    name = LangUtil.GetSysLang(617)
  elseif soundType == "Summon" then
    name = LangUtil.GetSysLang(618)
  elseif soundType == "Archive" then
    name = LangUtil.GetSysLang(619)
  elseif soundType == "Gift" then
    name = LangUtil.GetSysLang(620)
  elseif soundType == "GoodGift" then
    name = LangUtil.GetSysLang(621)
  elseif soundType == "Intensify" then
    name = LangUtil.GetSysLang(622)
  elseif soundType == "Evolution" then
    name = LangUtil.GetSysLang(623)
  elseif soundType == "LvBreak" then
    name = LangUtil.GetSysLang(624)
  elseif soundType == "Degree" then
    name = LangUtil.GetSysLang(625)
  elseif soundType == "Mission" then
    name = LangUtil.GetSysLang(626)
  elseif soundType == "MissionSuccess" then
    name = LangUtil.GetSysLang(627)
  elseif soundType == "SoulGet" then
    name = LangUtil.GetSysLang(628)
  elseif soundType == "SoulEquip" then
    name = LangUtil.GetSysLang(629)
  elseif soundType == "Marry" then
    name = LangUtil.GetSysLang(234)
  elseif soundType == "A" then
    name = UIPublic.GetSkin(self.zCard.Id, self.zCard.Id * 100 + 4).Name
    --name = Z_Skin[self.zCard.Id * 100 + 4].Name 
  end
  data.name = name..index
 -- data.desc = "语音"..index
  data.Id = id
  data.SortId = string.gsub(id, "-", ".")
  data.soundType = soundType
  return data
end

function this.Update(self)
  local soundComponent = Game.Scene:GetComponent("SoundComponent")
  if isClick then return end
  if not soundComponent:GetActive() and self.soundObjects ~= nil then
    for k,v in pairs(self.soundObjects) do
      local play = v.transform:Find("PlayButton").gameObject
      local dePlay = v.transform:Find("PlayButton/De").gameObject
      dePlay:SetActive(false)
      play:GetComponent("Image").enabled = not dePlay.activeSelf
    end
    if self.linesRoot then
        self.linesRoot.gameObject:SetActive(false)
    end
  end
end

local function OnClickPlayButton(self,Id)
    local soundComponent = Game.Scene:GetComponent("SoundComponent")
    for k,v in pairs(self.soundObjects) do
      local play = v.transform:Find("PlayButton").gameObject
      local dePlay = v.transform:Find("PlayButton/De").gameObject
      dePlay:SetActive(k == Id)
      play:GetComponent("Image").enabled = not dePlay.activeSelf
    end
    
    if Id == nil then
      soundComponent:MainStop()
      self.linesRoot:SetActive(false)
    elseif tonumber(string.sub(Id,0,3)) > 100 then
      local ID = string.format("%03d", tonumber(string.sub(Id,0,3)) - 100) 
      isClick = true
      coroutine.start(function()coroutine.waitforframes(3)isClick = false  end)
      local resPath="Sound/"..self.zCard.Id.."/A/"..ID ..".mp3"
      soundComponent:CoPlay(resPath)
  
      if self.linesRoot then
        local zLines = table.first(Z_Lines, function (v) return v.BelongCard == self.zCard.Id and v.SoundType == "A" and v.SoundName == ID end)
        self.linesRoot.gameObject:SetActive(zLines ~= nil)
        if zLines then
          LangUtil.BindText(self.linesRoot.transform:Find("Text")).text = zLines.Lines
          self.voiceDescriptionText.text = zLines.Lines
        end
      end
    else
      isClick = true
      coroutine.start(function()coroutine.waitforframes(3)isClick = false  end)
      local resPath="Sound/"..self.zCard.Id.."/N/"..Id..".mp3"
      soundComponent:CoPlay(resPath)
      if self.linesRoot then
        local zLines = table.first(Z_Lines, function (v) return v.BelongCard == self.zCard.Id and v.SoundType == "N" and v.SoundName == Id end)
        self.linesRoot.gameObject:SetActive(zLines ~= nil)
        if zLines then
          LangUtil.BindText(self.linesRoot.transform:Find("Text")).text = zLines.Lines
          self.voiceDescriptionText.text = zLines.Lines
        end
      end
    end
end

--亲密度是否激活
local function ShowDegree(self, Imager, Id)
  local zCardSound = Z_CardSound[self.zCard.Id]
  local cards = Game.Scene.Player:GetComponent("CardComponent").Cards
  local cardList = table.choose(cards, function(k, v)
    return v.TemplateId == self.zCard.Id
  end)
  local cardDegree
  local cardStage
  local cardStar
  local cardLevelLimit
  for i, v in pairs(cardList) do
    if cardDegree == nil then
      cardDegree = cardList[i]
      cardStage = cardList[i]
      cardStar = cardList[i]
      cardLevelLimit = cardList[i]
    end
    if cardDegree ~= nil and cardDegree.CloseDegree < cardList[i].CloseDegree then
      cardDegree = cardList[i]
    end
    if cardStage ~= nil and cardStage.Stage < cardList[i].Stage  then
      cardStage = cardList[i]
    end
    if cardStar ~= nil and cardStar.Star < cardList[i].Star  then
      cardStar = cardList[i]
    end
    if cardLevelLimit ~= nil and cardLevelLimit.LevelLimit < cardList[i].LevelLimit then
      cardLevelLimit = cardList[i]
    end
  end
 
  if table.contains(zCardSound.Degree, Id)  then
    if Id == zCardSound.Degree[1] then
      Imager:Find("Mask").gameObject:SetActive(cardDegree and not(cardDegree.CloseDegree >= 25))
    elseif Id == zCardSound.Degree[2] then
      Imager:Find("Mask").gameObject:SetActive(cardDegree and not(cardDegree.CloseDegree >= 50))
    elseif Id == zCardSound.Degree[3] then
      Imager:Find("Mask").gameObject:SetActive(cardDegree and not(cardDegree.CloseDegree >= 75))
    elseif Id == zCardSound.Degree[4] then
      Imager:Find("Mask").gameObject:SetActive(cardDegree and not(cardDegree.CloseDegree >= 100))
    end
  elseif zCardSound.Marry == Id or zCardSound.Rest == Id or zCardSound.AfterRest == Id or table.contains(zCardSound.Home, Id)  then
    Imager:Find("Mask").gameObject:SetActive(cardDegree and not cardDegree.marry )--not(cardDegree.CloseDegree >= 999))
  elseif zCardSound.Skill2 ==Id or zCardSound.Skill2Fast ==Id then
    Imager:Find("Mask").gameObject:SetActive(cardStar and not(cardStar.Star >= 2))--(cardStage and not(cardStage.Stage >= 2))
  elseif zCardSound.Evolution ==Id   then
    Imager:Find("Mask").gameObject:SetActive(cardStar and not(cardStar.Star > 1))
  elseif zCardSound.LvBreak ==Id   then
    Imager:Find("Mask").gameObject:SetActive(cardLevelLimit and not(cardLevelLimit.LevelLimit > 80))
  elseif tonumber(string.sub(Id,0,3)) > 100 then
    local getSkins = Game.Scene.Player:GetComponent("CardComponent"):GetZCardSkins(self.zCard.Id)
    Imager:Find("Mask").gameObject:SetActive(not table.contains(getSkins,4))
  else
    Imager:Find("Mask").gameObject:SetActive(false)
  end
end

function this.Init(self)
  ListChildPool:GetInstance():ClearContent(self.soundContent)
  local zCardSound = Z_CardSound[self.zCard.Id]
  local soundDatas = {}
  self.soundObjects = {}
  self.soundContent.transform:DOLocalMoveY(0,0)
  for k,v in table.pairsByKeys(zCardSound) do
    if table.any(selectType,function(t) return  k == t  end) then
      if k == "A" then
        v = loadtable(v)
      end
      if type(v) ~= "string"  then
        for a,b in table.pairsByKeys(v) do
          local data
          if table.count(v) == 1 then
            if k == "A"  then
              if zCardSound.Id ~= 1015 then
                for i = 1, #v.Main do
                  data = GetSoundData(self,tonumber(v.Main[i])+100,k,i)
                  table.insert(soundDatas,data)
                end
              end
            else
              data = GetSoundData(self,b,k)
              table.insert(soundDatas,data)
            end
          else
            data = GetSoundData(self,b,k,a)
            table.insert(soundDatas,data)
          end
        end
      else
        local data = GetSoundData(self,v,k)
        table.insert(soundDatas,data)
      end
    end
  end
  
  table.sort(soundDatas,function(a,b)
    local index1 = tonumber(string.sub(a.SortId,0,#a.SortId))
    local index2 = tonumber(string.sub(b.SortId,0,#b.SortId))
    return  index1 < index2
  end)

  for k,v in table.pairsByKeys(soundDatas) do
    ListChildPool:GetInstance():GetChild(soundItem,self.soundContent,function(gameObject)
      if self.active == false then this.OnDisabled(self)  end
      self.soundObjects[v.Id] = gameObject
      local transform = gameObject.transform
      ShowDegree(self,transform,v.Id)
      local kindTxt = transform:Find("Kind"):GetComponent("Text")
      local nameTxt = transform:Find("Name"):GetComponent("Text")
      LangUtil.BindText(nameTxt)
      local playBtn = transform:Find("PlayButton").gameObject
      local dePlay = transform:Find("PlayButton/De").gameObject
      dePlay:SetActive(false)
     -- kindTxt.text = v.desc
      nameTxt.text = v.name
      UIUtil.AddBtnEvent(playBtn,function(g) OnClickPlayButton(self,v.Id) end)
      UIUtil.AddBtnEvent(dePlay,function(g) OnClickPlayButton(self)  end)
    end)
  end
end


function this.OnEnable(self)
    self.voiceDescriptionText.text = ""
end

function this.OnDisabled(self)
    self.soundObjects = {}
    ListChildPool:GetInstance():ClearContent(self.soundContent)
  if self.linesRoot then
    self.linesRoot.gameObject:SetActive(false)
  end
end

function this.OnCreate(self,panel)
  local rc = panel:GetComponent("ReferenceCollector")
  self.soundContent = rc:GetObject("Content").transform
  self.voiceDescriptionText = rc:GetObject("VoiceDescriptionText"):GetComponent("Text")
  --VoiceDescriptionText
end

return SoundLogic;