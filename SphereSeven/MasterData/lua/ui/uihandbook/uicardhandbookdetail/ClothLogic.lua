---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/7/2 10:20
---

local ClothLogic = {}
local this = ClothLogic

local pfbName = "ChangeSkinItem"

function this.InitContent(self)
    ListChildPool:GetInstance():ClearContent(self.sk_content)
    self.sk_content.localPosition = Vector3.zero
    local zSkins = table.choose(Z_Skin,function(k,v) return v.CharacterId == self.zCard.Id  end)
    local tempSkins = {}
    table.walk(zSkins, function (k, v) 
        tempSkins[v.SortId] = v
    end)
    table.walk(tempSkins,function (k, v)
        ListChildPool:GetInstance():GetChild(pfbName,self.sk_content,function(go)
            if self.active == false then ListChildPool:GetInstance():Remove(go) return end
            local transform = go.transform
            --self.sk_objects[k] = go
            self.sk_objects[v.Id] = go
            this.InitItemData(self, transform, v.Id)
            local icon = transform:Find("Icon/Root/Value"):GetComponent("Image")
            UIUtil.NewSetCardSprite(icon, self.zCard.Id, v.Id, CardPictureType.Big)
            UIUtil.AddBtnEvent(go,function()this.OnItem(self,v)  end)
        end)
    end)
    this.OnItem(self,tempSkins[1])
end

function this.OnItem(self,zSkin)
    self.sk_nameTxt.text = zSkin.Name
    for k,v in pairs(self.sk_objects) do
        -- local select = v.transform:Find("Select").gameObject
        -- select:SetActive(false)
        local select1 = v.transform:Find("Select1").gameObject
        select1:SetActive(k == zSkin.Id)
    end

    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    local card = cardComponent.Cards[self.zCard.Id]
    local currentSkin = nil
    if card ~= nil then
        currentSkin = card.SkinId
    end
    local skin = cardComponent.UnLockSkinList[zSkin.Id]
    if zSkin.Id == currentSkin then -- 选中了已经设置的皮肤
        self.sk_btnTxt.text = LangUtil.GetSysLang(221)
        self.sk_btn.enabled = false
        UIPublic.InitButton(self.sk_confirmBtn, false)
        --self.sk_btnImg.material = DeActiveMat
    elseif skin ~= nil then -- 当前并未设置，且是皮肤时
        self.sk_btn.enabled = true
        self.sk_btnImg.material = nil
        if skin ~= nil then -- 有该皮肤
            LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(222)
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()this.OnExChange(self)  end)
            UIPublic.InitButton(self.sk_confirmBtn, true)
        else -- 没有该皮肤
            UIPublic.InitButton(self.sk_confirmBtn, false)
        end
    else -- 当前并未设置，且不是皮肤时
        UIPublic.InitButton(self.sk_confirmBtn, false)
    end

    self.sk_selectId = zSkin.Id
    coroutine.start(function()
        -- InitSsUnit(self, zSkin.Id)
    end)
end


function this.InitItemData(self,transform,skinId)
    local select = transform:Find("Select").gameObject
    local select1 = transform:Find("Select1").gameObject
    local defaultPic = transform:Find("defaultPic").gameObject
    local Icon = transform:Find("Icon").gameObject
    local nameTxt = LangUtil.BindText(transform:Find("Name"))
    local lock = transform:Find("Lock").gameObject
    local lockTxt =  LangUtil.BindText(transform:Find("Lock/Text"))
    local IsUsed = transform:Find("IsUsed").gameObject
    LangUtil.BindText(transform:Find("Select/Image/Text")).text=LangUtil.GetSysLang(221)
    
    local zSkin = Z_Skin[skinId]
    defaultPic:SetActive(false)
    Icon:SetActive(true)
    
    nameTxt.text = zSkin.Name
    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    
    local skin = cardComponent.UnLockSkinList[skinId]
    if skin == nil then
        lockTxt.text = LangUtil.GetSysLang(220) 
        lock:SetActive(true)
    else
        lockTxt.text = ""
        lock:SetActive(false)
    end

    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    local skin = cardComponent.UnLockSkinList[skinId]
    select:SetActive(skin == nil)
    select1:SetActive(self.sk_selectId == skinId)
    IsUsed:SetActive(self.skinId == skinId)
    nameTxt.text = zSkin.Name
end

function this.Init(self)
    self.selectStage = 1
    self.selectBtn = self.skinBtns[1]
    self.zSkins = table.choose(Z_Skin,function(k,v )return v.CharacterId == self.zCard.Id end)
    local getSkins = Game.Scene.Player:GetComponent("CardComponent"):GetZCardSkins(self.zCard.Id)
    --table.sort(self.zSkins,function(a,b) return a.Id < b.Id  end)
    local tempSkins = {}
    table.walk(self.zSkins, function (k, v)
        tempSkins[v.SortId] = v
    end)
    for k,v in table.pairsByKeys(self.skinBtns) do
        local zSkin = table.first(tempSkins,function(a) return true end)
        if zSkin ~= nil then
            tempSkins[zSkin.SortId] = nil
            local txt2 = v.transform:Find("Parent/Text"):GetComponent("Text")
            local active = v.transform:Find("Active")
            txt2.text = zSkin.Name
            LangUtil.BindText(txt2)
            v:SetActive(true)
            if table.first(getSkins,function(a) return a == zSkin.Id end) then
            --if table.first(getSkins,function(a) return a == zSkin.Stage % 100 end) then
                active.gameObject:SetActive(true)
                v.transform:Find("NotOpen").gameObject:SetActive(false)
                v.transform:Find("Parent/Text"):GetComponent("Text").color = Color.New(1,1,1,1)
                --UIUtil.AddBtnEvent(active.gameObject, function() OnClickSkinButton(self, zSkin.Stage,true, v)  end)
            else
                active.gameObject:SetActive(false)
                v.transform:Find("NotOpen").gameObject:SetActive(true)
                v.transform:Find("Parent/Text"):GetComponent("Text").color = Color.New(151/255,151/255,152/255,1)
            end
            --UIUtil.AddBtnEvent(active.gameObject, function() OnClickSkinButton(self, zSkin.Stage,true, v)  end)
        else
            v:SetActive(false)
        end
    end
    local config = table.first(Z_Skin, function (v) return v.BelongCard == self.zCard.Id and v.Stage == self.selectStage end)
    self:SetOriginal(self.selectStage, 1)

    self.sk_objects = {}
    this.InitContent(self)
    --self:SetOriginal(self.selectStage, config.BgStage)
end

function this.OnCreate(self,panel)
    local rc = panel:GetComponent("ReferenceCollector")
    local btnCtrl = rc:GetObject("BtnCtrl").transform
    self.ssunitRoot = rc:GetObject("SsUnit").transform:Find("Root")
    self.skinBtns = {}
    for i = 0,btnCtrl.childCount - 1 do
        local btn = btnCtrl:GetChild(i).gameObject
        self.skinBtns[i+1] = btn
    end

    self.sk_content = rc:GetObject("Content").transform
    self.sk_confirmBtn = rc:GetObject("ConfirmSkinButton").transform
    self.sk_btn = self.sk_confirmBtn:GetComponent("Button")
    self.sk_btnTxt = self.sk_confirmBtn.transform:Find("Text"):GetComponent("Text")
    self.sk_btnImg = self.sk_confirmBtn:GetComponent("Image")
    self.sk_nameTxt = rc:GetObject("Name"):GetComponent("Text")
end

function this.OnEnable(self)
    for k, v in table.pairsByKeys(self.skinBtns) do
        UIUtil.ScrollText(v.transform:Find("Parent/Text"), nil, 50)
    end


end

function this.OnDisabled(self)
    for i= 0,self.ssunitRoot.childCount -1 do
        local ssunit = self.ssunitRoot:GetChild(i).gameObject
        ListChildPool:GetInstance():Remove(ssunit,"SsUnit")
    end
end
return ClothLogic