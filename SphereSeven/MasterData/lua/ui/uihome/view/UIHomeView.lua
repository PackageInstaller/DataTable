---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/2 14:31
---
---



local BannerPanel = require "UI/UIHome/BannerPanel/BannerPanel"
local ActivityHint = require "UI/UIHome/ActivityHint/ActivityHint"
local DMBanner = require "UI/UIHome/DMBanner/DMBanner"

---@class UiHomeView
local UIHomeView = BaseClass("UIHomeView",UIBaseView)
local base = UIBaseView
local publicLinePfbName = "PublicLinePfb"
DeActiveMat = nil
cardBigMask = nil
local maxBuffTime = 3600
local maxEnergy = 1
local horizontal = -1
local drag = 0
local curRechargeModule = {}
local isPopUpOpened = false

local function ChangeSleepBuffState(self,id)
end

local function ChangeRestBuffState(self,id)
end

local function OnPageChanged(self,index)
   if self.index ~= index + 1 then
      self.Popup:GetComponent("ParticleSystem"):Play()
      self.Popup.transform:GetChild(0):GetComponent("ParticleSystem"):Play()
   end
   self.index = index + 1

   for k,v in table.pairsByKeys(self.labelList) do
      local active = v.transform:Find("Active").gameObject
      local deActive = v.transform:Find("DeActive").gameObject
      if k == self.index then
         active:SetActive(true)
         deActive:SetActive(false)
      else
         active:SetActive(false)
         deActive:SetActive(true)
      end
   end
   horizontal = (self.index-1) * (1/( self.PageContent.transform.childCount-1))
   --活动banner曝光次数
   BannerPanel.OnPageChanged(self, self.index)
end

local function InitLabelList(self)
   local count = self.PageContent.childCount

   for k,v in table.pairsByKeys(self.labelList) do
      v:SetActive(k <= count)
   end
end


local function UpDateCardPaint(self)
   coroutine.start(function()
      local showgirlInfo = Game.Scene.Player.ShowGirlInfo
      self.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

      local zSkin = Z_Skin[showgirlInfo.skin_id]

      if self.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
         self.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
     end
      --self.bg_btn.gameObject:SetActive(self.uiDrawing:HasLive2D())
      -- self.liveOff_img:SetActive(self.uiDrawing.showMode == 1)
      -- self.liveOn_img:SetActive(self.uiDrawing.showMode == 2)
      -- if self.uiDrawing.showMode == 2 then -- 没有spine动画
      --    self.liveOff_img.enabled = false
      --    self.liveOn_img.enabled = true
      -- elseif self.uiDrawing.showMode == 1 then
      --    self.liveOff_img.enabled = true
      --    self.liveOn_img.enabled = false
      --end
      --if self.uiDrawing.bgMode == 1 then
      --   self.bgLiveOff_img.enabled = true
      --   self.bgLiveOn_img.enabled = false
      --elseif self.uiDrawing.bgMode == 2 then -- 隐藏
      --   self.bgLiveOff_img.enabled = false
      --   self.bgLiveOn_img.enabled = true
      --end
   end)
end

local function UpDataRoomHint(self)
   -- local num = 0
   -- local roomComponent = Game.Scene.Player:GetComponent("RoomComponent")
   -- if not roomComponent.isRest then
   --    num = num + 1
   -- end

   -- if not roomComponent.isSleep and Game.Scene.Player.MainWife ~= 0 then
   --    num = num + 1
   -- end

   -- ---@type HintComponent
   -- local hintComponent = Game.Scene:GetComponent("HintComponent")
   -- hintComponent.Room:SetCount(num)
   -- -- self.empire_Hint:SetActive(num > 0)

end

local function InitActiveBtn(self)
   BannerPanel.InitPanel(self)
   self.pageView:UpdataPageViewRect()

   InitLabelList(self)
   self.pageView:pageTo(0)
end

local function  InitHintComponent(self)
   ---@type HintComponent
   local hintComponent = Game.Scene:GetComponent("HintComponent")
   hintComponent.Shop:AddObject(self.shop_Btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Friend:AddObject(self.friend_Btn.transform:Find("Hint").gameObject,"Home")
   -- hintComponent.Post:AddObject(self.postBox_Btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Task:AddObject(self.task_Btn.transform:Find("Hint").gameObject,"Home") 
   --hintComponent.Risk:AddObject(self.risk_Btn.transform:Find("Hint").gameObject,"Home")
   -- hintComponent.Handbook:AddObject(self.handBook_Btn.transform:Find("Hint").gameObject,"Home")
   -- hintComponent.Expedition:AddObject(self.expedition_Btn.transform:Find("Hint").gameObject,"Home")
   -- hintComponent.Expedition:AddObject(self.fightSoul_Btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Card:GetChild("Cards"):AddObject(self.format_btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Recruit:AddObject(self.drawCard_btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Item:AddObject(self.bag_btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Room:AddObject(self.empire_btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Post:AddObject(self.postBox_Btn.transform:Find("Hint").gameObject,"Home")
   hintComponent.Activity:AddObject(self.ActiveBtn.transform:Find("Hint").gameObject,"Home")

   -- coroutine.start(function()
      -- hintComponent.Inform:AddObject(self.inform_Btn.transform:Find("Hint").gameObject, "Home")
      -- local afficheComponent = Game.Scene.Player:GetComponent("AfficheComponent")
      -- coroutine.yieldstart(afficheComponent.CoLoadData,nil, afficheComponent)
   -- end)
end

local function OnClickEventArea(self)
   coroutine.start(function()
      local showgirlInfo = Game.Scene.Player.ShowGirlInfo
      self.uiDrawing:CoClick(SoundType.Main, showgirlInfo.character_id, showgirlInfo.skin_id)
   end)
end

local function OnHomeCardRectChg(self,info)
   if info == nil or info.liveType == Live2DType.Home then
      local info = ClientData:GetInstance():GetHomeCardRect()
      self.paintRoot:DOMove(Vector3.New(info.posX,info.posY,0),0)
      self.paintRoot:DOLocalMoveZ(0, 0)
      self.paintRoot:DOScale(Vector2.New(info.scale,info.scale),0)
      coroutine.start(function()
         coroutine.waitforseconds(0.1)
         self.paintY = self.paintRoot:GetComponent("RectTransform").localPosition.y
      end)
   end
end

local function OnLive2d(self, type)
   --self.uiDrawing:Hide()
   local transform = self.paintRoot.transform
   local info = {}
   info.liveType = Live2DType.Home
   info.resetPos = transform.position
   info.resetScale = transform.localScale.x
   info.image = self.homeCard
   info.offset = self.homeCard:GetComponent("RectTransform").localPosition
   info.isSpine = self.uiDrawing.showMode
   info.spineRoot = self.spinePic
   info.uiDrawing = self.uiDrawing
   info.showGirlUIType = type
   info.characterId = Game.Scene.Player.ShowGirlInfo.character_id
   UIManager:GetInstance():OpenWindow(UIWindowNames.UILive2d,info)
end

local function ToolTip(self)
   -- if activityCom.ActivityLogins[1002] ~= nil then
   --    for  k = 1 , activityCom.ActivityLogins[1002].LoginNum  do
   --       if not table.any(activityCom.ActivityLogins[1002].Records, function(v) return v == k end) then
   --          record = false
   --          break
   --       end
   --    end
     
   -- end
   
   -- local storyChapter = table.first(story,function (a) return a.ChapterId == 1 end)
   -- self.eventImg:SetActive(true)

   if Game.Scene.Player.first_character_selected == 0 or Game.Scene.Player.first_character_selected == nil then
      local index = 1
      PublicRequest.SendRequest(
              PROTOCOL.SelectFirstCharacterReq,
              {number = index},
              function(response, errorCode)
                 if errorCode ~= 0 and errorCode ~= nil then
                    return
                 end
                 local cardId = tonumber(Z_Misc["INIT_CHARACTERS"].Value[index])
                 Game.Scene.Player.first_character_selected = index
                 PublicRequest.SendRequest(
                         PROTOCOL.SetSupportUnitReq,
                         {
                            index = SupportUnitIndex,
                            character_id = cardId,
                            fight_soul_id = 0,
                         },
                         nil
                 )

                 PublicRequest.SendRequest(
                         PROTOCOL.SetShowGirlReq,
                         {
                            show_girl = {
                               character_id = cardId,
                               skin_id = cardId * 100 + 1,
                               pos_x = -2.9,
                               pos_y = 0,
                               scale = 1,
                            }
                         },
                         function(response)
                            self.uiDrawing:ChangeMode(cardId, cardId * 100 + 1)
                         end
                 )

                 PublicRequest.SendRequest(
                         PROTOCOL.ChangeHeadPortraitReq,{
                            id = cardId * 100 + 1
                         },
                         function(response, error)
                            if error == 0 then
                               Game.Scene.Player.Avatar = response.id
                            end
                         end
                 )


                 PublicRequest.SendRequest(
                         PROTOCOL.SetSocietyShowGirlReq,
                         {
                            show_girl = {
                               character_id = cardId,
                               skin_id = cardId * 100 + 1,
                               pos_x = 0,
                               pos_y = 0,
                               scale = 1,
                            }
                         }
                 )
              end
      )
   end
   
   -- coroutine.start(function()
   local guide=Game.Scene:GetComponent("GuideComponent")

   if guide.GuideRun then
      return
   end
   coroutine.start(function()
      ---@type MonthCardComponent
      local monthCardComponent = Game.Scene.Player:GetComponent("MonthCardComponent")
      if Game.Scene.Player:GetComponent("CheckInComponent"):HasDailyReward() then
         UIManager:GetInstance():OpenWindow(UIWindowNames.UIDailyReward)
      elseif monthCardComponent:hasMonthlyCardCanReceive() then
         monthCardComponent:ReceiveAllMonthCard()
      end

   --    if record ~= nil and  Game.Scene.Player.RegisterTime >= activityCom.LoginTimeSlots[1002].Start and  activityCom.LoginTimeSlots[1002].End > TimeUtil.OSTime()
   --        and not record   then  
   --       UIManager:GetInstance():OpenWindow(UIWindowNames.UIGuideGift)
   --    elseif Game.Scene.Player.SigninToday == 0 then
   --       coroutine.waitforseconds(1.5)
   --       UIManager:GetInstance():OpenWindow(UIWindowNames.UISignIn)
   --    elseif Game.Scene.Player.NewToday == 0 and Game.Scene.Player.NewNum < 14 then
   --       coroutine.waitforseconds(1.5)
   --       UIManager:GetInstance():OpenWindow(UIWindowNames.UIActivityPop)--
   --    elseif day > AwardDay or SevenCurDay > SevenAwardDay or ThreeCurDay > ThreeAwardDay then
   --       coroutine.waitforseconds(1.5)
   --       monthCardComponent:OpenViewType()
   --    elseif  storyChapter ~=nil      then
   --       if storyChapter.CompletedSections[1].CompletedId >= 103 and table.first(activityCom.ActivityGifts,function (a) return a.Id == 33 end) == nil  then
   --          UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGiftBag,{ModeId = 33})
   --       elseif storyChapter.CompletedSections[1].CompletedId >= 110 and table.first(activityCom.ActivityGifts,function (a) return a.Id == 34 end) == nil  then
   --          UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGiftBag,{ModeId = 34})
   --       end
   --       self.eventImg:SetActive(false)
   --       coroutine.waitforseconds(1)
   --       local GuideComplete, GuideStep ,run = Game.Scene:GetComponent("GuideComponent"):GetCurrentData()
   --       if run == false then
   --          self.uiDrawing:CoPlay(SoundType.Main)
   --          --local faceId = Game.Scene:GetComponent("SoundComponent"):PlayFirstLoginSound()
   --       end
   --    else
   --       self.eventImg:SetActive(false)
   --       coroutine.waitforframes(1)
   --       local GuideComplete, GuideStep ,run = Game.Scene:GetComponent("GuideComponent"):GetCurrentData()
   --       if run == false then
   --          self.uiDrawing:CoPlay(SoundType.Main)
   --          --local faceId = Game.Scene:GetComponent("SoundComponent"):PlayFirstLoginSound()
   --       end
   --    end
   end)
end

local function ConvertTimeForm(second)
   if second < 0 then second = 0 end
   local tb = {}
   tb.day     = math.floor(second/86400)--math.modf(s/(24*60*60))
   tb.hour    = math.fmod(math.floor(second/3600), 24)--math.modf(s/(60*60))
   tb.minute  = math.fmod(math.floor(second/60), 60)--math.modf(s/60%60)
   tb.second  = math.floor(math.fmod(second, 60))-- math.modf(s%60)
   return tb
end

---@param entryModules GameEventModule[]
function UIHomeView:UpdateActivityBanner(hint, entryModules)
   for index, value in ipairs(entryModules) do
      local activityItem = self.showActivitys.items[index]
      if activityItem == nil then
         activityItem = GameObject.Instantiate(self.ActivityItem)
         activityItem.transform:SetParent(self.ActivityBtnPanel.transform, false)
         self.showActivitys.items[index] = activityItem
      end
      activityItem:SetActive(true)
      if self.showActivitys.moduleIds[index] ~= value.moduleId then
         LangUtil.GetSpriteLang(tonumber(value.config.TabImage),function(sprite)
            if not IsNull(activityItem) then
               activityItem.transform:Find("Image"):GetComponent("Image").sprite = sprite
            end
         end)
         local childHint = hint:GetChild(value.eventId)
         local hintObject = activityItem.transform:Find("Hint").gameObject
         childHint:AddObject(hintObject, "NewbieTaskDayTab")
         UIUtil.AddBtnEventNoBug(activityItem, function()
            UIManager:GetInstance():OpenWindow(value.config.UIWindowsName, {
               eventId = value.eventId,
               moduleId = value.moduleId,
            })
         end)
         self.showActivitys.moduleIds[index] = value.moduleId
      end
   end
end

function UIHomeView:UpdateBossraidBanner()
   ---@type BossraidComponent
   local bossraidComponent = Game.Scene.Player:GetComponent("BossraidComponent")
   local bossraid = bossraidComponent:GetFirstBossraid()
   if bossraid == nil then
      self.bossraidItem:SetActive(false)
      self.showBossraid = nil
   else
      local lastTime = TimeUtil.ParseDateTime(bossraid.config.EndTime) - TimeUtil.GetServerTime()
      if lastTime <= 0 then
         self.bossraidItem:SetActive(false)
         self.showBossraid = nil
      else
         if self.showBossraid ~= bossraid.bossraidId then
            self.bossraidItem:SetActive(true)
            LangUtil.GetSpriteLang(bossraid.config.BannerKey,function(sprite)
               if not IsNull(self.bossraidItem) then
                  self.bossraidItem.transform:Find("Image"):GetComponent("Image").sprite = sprite
               end
            end)
            UIUtil.AddBtnEventNoBug(self.bossraidItem, function()
               UIManager:GetInstance():OpenWindow(UIWindowNames.UIBossraid)
            end)
   
            self.showBossraid = bossraid.bossraidId
         end
      end
   end
     
end

local function Update(self)
   if DayUpdate == 1  then
      local topName = UIManager:GetInstance():GetLastBgWindowName()
      if topName == UIWindowNames.UIHome then
         DayUpdate = 0
         ToolTip(self)
      end
   end
   local player = Game.Scene.Player
   local playerC = Game.Scene:GetComponent("PlayerComponent")
   local playerBuff = player:GetComponent("PlayerBuffComponent")
   local z_Timer = table.first(Z_Timer,function(v) return v.Name == "SleepBuff"  end)
   local hour = tonumber(z_Timer.Hour) * 60 *60
   
   maxEnergy = maxEnergy - Time.deltaTime
   local energy = UIPublic.GetItemAmount(Z_Misc["POWER_ID"].Value[1])
   if  energy<Z_PlayerLevelUp[player.Level].Energy  then
      if maxEnergy<=0 then
         maxEnergy =1
         
         local time = playerC.time - TimeUtil.OSTime()
         if time < 0 then
            time = 0
         end
         local minute = string.format("%02d",math.floor(time/60))
         local sec = string.format("%02d", math.floor(time%60))
         local str = ""
         if minute ~= 0  then
            str = minute ..":"..sec
         else
            str = "00:".. sec
         end

         self.Rest_buff_text.text = str
      end
   else
      self.Rest_buff_text.text = "MAX"
   end
   local energy_value = energy/Z_PlayerLevelUp[player.Level].Energy
   self.energy_slider.value = energy_value 
   self.APText.text = energy.."/"..Z_PlayerLevelUp[player.Level].Energy
   
   if horizontal ~= -1 and drag == 0 then
      self.TopScrollRect.horizontalNormalizedPosition = Mathf.Lerp(self.TopScrollRect.horizontalNormalizedPosition, horizontal,35*Time.deltaTime)
      if self.pageView:GetPageIndex() ~= self.index - 1 and math.abs( self.TopScrollRect.horizontalNormalizedPosition - horizontal) <= 0.01 then
         self.index = self.index - 1
         self.pageView:pageTo(self.index)
      end
   end

   ---@type HintComponent
   local hintComponent = Game.Scene:GetComponent("HintComponent")
   local hint = hintComponent.SingleActivity
   
   ---@type GameEventComponent
   local gameEventComponent = Game.Scene.Player:GetComponent("GameEventComponent")
   local gameevents = gameEventComponent:GetGameEvent()
   ---@type GameEventModule[]
   local entryModules = {}
   local rechargePopList = {}
   for index, value in ipairs(gameevents) do
      local entryModule = gameEventComponent:GetGameEventModule(value.entryModuleId)
      if entryModule.config.GameEventType == GameEventType.HomeBanner
        and entryModule.status == GameEventStatus.GameEventStatusInProgress then
         table.insert(entryModules, entryModule)
      end

      for moduleId, configValue in pairs(value.config) do
         local module = gameEventComponent:GetGameEventModule(moduleId)
         if module ~= nil and module.status == GameEventStatus.GameEventStatusInProgress and configValue.GameEventType == GameEventType.RechargePop then
            table.insert(rechargePopList, configValue)
         end
      end
   end

   self:UpdateActivityBanner(hint, entryModules)
   self:UpdateBossraidBanner()
   self.rechargePopButton:SetActive(table.count(rechargePopList) > 0)

   for index, value in ipairs(rechargePopList) do
      
      if value.ModuleParams ~= nil then
         curRechargeModule = value
         local curmodule = Game.Scene.Player:GetComponent("GameEventComponent"):GetGameEventModule(value.ModuleId)
         local seconds = curmodule.endTime - TimeUtil.GetServerTime()
         local tb = TimeUtil.ConvertTimeForm(seconds)
         local downTime = ""

         if tb.day > 0 then
             downTime = string.format("%d"..LangUtil.GetSysLang(2005).." %02d:%02d:%02d", tb.day, tb.hour, tb.minute, tb.second)
         else
             downTime = string.format("%02d:%02d:%02d", tb.hour, tb.minute, tb.second)
         end

         self.rechargePopButton.transform:Find("Time"):GetComponent("Text").text = downTime

         local allwindows = UIManager:GetInstance().windows
         local openWindws = {}
         for _, windowValue in pairs(allwindows) do
            if windowValue.Layer.__name == "BackgroudLayer" and windowValue.Active == true then
               table.insert(openWindws, value)
            end
         end
         if table.count(openWindws) == 1 then
            if not isPopUpOpened then
               isPopUpOpened = true
               UIManager:GetInstance():OpenWindow(UIWindowNames.UIRechargePopUp, curRechargeModule)
            end
         end
      end
   end

   

   -- if table.count(activityCom.ActivityGifts) > 0 then
      
   --    for k, v in pairs(self.ActiveBtnList) do
   --       if v.id ~= nil and  activityCom.ActivityGifts[v.id] ~=nil and  activityCom.ActivityGifts[v.id].State == 0 and activityCom.ActivityGifts[v.id].LimitDate > TimeUtil.OSTime()   then
   --          local tb = TimeUtil.ConvertTimeForm(os.difftime(activityCom.ActivityGifts[v.id].LimitDate, TimeUtil.OSTime()))
   --          v.timeText.text = string.format("%02d:%02d:%02d", tb.hour, tb.minute, tb.second)
   --       elseif v.id ~= nil and  activityCom.ActivityGifts[v.id] ==nil  and  activityCom.ActivityGifts[v.id].State == 1 and activityCom.ActivityGifts[v.id].LimitDate <= TimeUtil.OSTime() then
   --          v.btn.gameObject:SetActive(false)
   --       end
   --    end
   -- end

   local player = Game.Scene.Player
   local num = 1
   local lastRestTime = player.LastRoomRestTime
   local lastRestTimeTable = TimeUtil.FormatUnixTime2Date(lastRestTime)
   local serverTimeTable = TimeUtil.FormatUnixTime2Date(TimeUtil.ServerTime)
   local time1 = tonumber(Z_Misc["HOUSE_REST_TIME_POINT"].Value[1])
   local time2 = tonumber(Z_Misc["HOUSE_REST_TIME_POINT"].Value[2])

    local restTime1 = TimeUtil.convertToTimestamp(
        serverTimeTable.day, 
        serverTimeTable.month, 
        serverTimeTable.year,
            time1/100, 
            0, 
            0)
    local restTime2 = TimeUtil.convertToTimestamp(
        serverTimeTable.day, 
        serverTimeTable.month, 
        serverTimeTable.year,
            time2/100, 
            0, 
            0)


   if TimeUtil.ServerTime < restTime1 then
       if restTime1 >= lastRestTime then
           num = 0
       end
   elseif TimeUtil.ServerTime < restTime2 and TimeUtil.ServerTime >= restTime1 then
       if restTime1 <= lastRestTime then
           num = 0
       end
   elseif TimeUtil.ServerTime >= restTime2 then
       if restTime2 <= lastRestTime then
           num = 0
       end
   end

   ---@type HintComponent
   local hintComponent = Game.Scene:GetComponent("HintComponent")
   hintComponent.Room:SetCount(num)
end

local function OnLangCreate(self)
   -- 小头像
   LangUtil.BindText(self.langRc:GetObject("APNameTextRoot").transform:Find("Text"),FontType.All_Number).text = "AP"
   LangUtil.BindText(self.langRc:GetObject("EPNameTextRoot").transform:Find("Text"),FontType.All_Number).text = "EP"

   self.name_text = LangUtil.BindText(self.langRc:GetObject("NameTextRoot").transform:Find("Text"))
   self.level_text = LangUtil.BindText(self.langRc:GetObject("LevelTextRoot").transform:Find("Text"),FontType.All_Number)
   self.sleep_buff_text = LangUtil.BindText(self.langRc:GetObject("SleepBuffText"),FontType.All_Number)
   self.Rest_buff_text = LangUtil.BindText(self.langRc:GetObject("APBuffText").transform,FontType.All_Number)
   

   LangUtil.BindText(self.langRc:GetObject("ActivityText")).text = LangUtil.GetSysLang(719)

   LangUtil.GetSpriteLang(56,function(sprite)
      self.shop_Btn:GetComponent("Image").sprite = sprite
   end)

   LangUtil.GetSpriteLang(57,function(sprite)
      self.drawCard_btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(58,function(sprite)
      self.intens_btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(59,function(sprite)
      self.empire_btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(60,function(sprite)
      self.task_Btn:GetComponent("Image").sprite = sprite
   end)
   -- LangUtil.GetSpriteLang(318,function(sprite)
   --    self.risk_Btn:GetComponent("Image").sprite = sprite
   -- end)
   LangUtil.GetSpriteLang(366,function(sprite)
      self.expedition_Btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(61,function(sprite)
      self.bag_btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(62,function(sprite)
      self.friend_Btn:GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(2,function(sprite)
      self.langRc:GetObject("TeamImage"):GetComponent("Image").sprite = sprite
   end)
   LangUtil.GetSpriteLang(4,function(sprite)
      self.langRc:GetObject("CardListImage"):GetComponent("Image").sprite = sprite
   end)

   LangUtil.GetSpriteLang(3,function(sprite)
      self.langRc:GetObject("LaunchAtkImage"):GetComponent("Image").sprite = sprite
   end)

   LangUtil.GetSpriteLang(548,function(sprite)
      self.ActiveBtn:GetComponent("Image").sprite = sprite
   end)

   -- LangUtil.BindText(self.shop_Btn.transform:Find("Hint/Text"))
   -- LangUtil.BindText(self.intens_btn.transform:Find("Hint/Text"))
   -- --LangUtil.BindText(self.risk_Btn.transform:Find("Hint/Text"))
   -- LangUtil.BindText(self.task_Btn.transform:Find("Hint/Text"))
   -- LangUtil.BindText(self.bag_btn.transform:Find("Hint/Text"))
   -- LangUtil.BindText(self.friend_Btn.transform:Find("Hint/Text"))
   
   -- LangUtil.BindText(self.inform_Btn.transform:Find("Hint"):Find("Text"))
   -- LangUtil.BindText(self.postBox_Btn.transform:Find("Hint"):Find("Text"))
   -- LangUtil.BindText(self.handBook_Btn.transform:Find("Hint"):Find("Text"))

   self.APText = LangUtil.BindText(self.energy_slider.transform:Find("APValueTextRoot/Text"))

   LangUtil.BindText(self.addPanel.transform:Find("Add/InfoFriend/Text"))
   LangUtil.BindText(self.addPanel.transform:Find("Add/HideFriend/Text"))
   LangUtil.BindText(self.addPanel.transform:Find("Add/AddFriend/Text"))
   LangUtil.BindText(self.addPanel.transform:Find("Add/BlackFriend/Text"))

   UIUtil.activityBUt(self.launchAtk_Image.transform:Find("activityBut"),1,self.canvas.unity_canvas.sortingOrder,0)
   for _, v in pairs(self.ActiveBtnList) do
      v.Text = LangUtil.BindText(v.Text)
   end
   ActivityHint.OnLangCreate(self)
end

local function removeTimer(self)
   if self.timer ~=nil then
      self.timer:Stop()
      self.timer=nil
   end
end

local function OnCreate(self) --界面被创建 获取组件
   base.OnCreate(self)
   DeActiveMat = self.rc:GetObject("Mat"):GetComponent("Image").material
   DeActiveSprite = self.rc:GetObject("Touming"):GetComponent("Image").sprite
   DeActiveTexture = self.rc:GetObject("Touming1"):GetComponent("RawImage").texture
   CardBigMask = self.rc:GetObject("cardBigMask"):GetComponent("Image").sprite
   self.eventImg = self.rc:GetObject("eventImg")
   self.EffectImage = self.rc:GetObject("EffectImage")
   self.MenuCtrl = self.rc:GetObject("MenuCtrl"):GetComponent("RectTransform")

   self.cardBg = self.rc:GetObject("UIBg"):GetComponent("Image")
   self.defBgSprite =  self.cardBg:GetComponent("Image").sprite
   self.isMenu = false
   self.liveStage = 2

   self.spinePic = self.rc:GetObject("SpinePic")
   self.see_btn = self.rc:GetObject("SeeButton")
   self.changeSkin_btn = self.rc:GetObject("ChangeSkinButton")
   self.live_btn = self.rc:GetObject("LiveButton")
   -- self.liveOff_img = self.live_btn.transform:Find("Off").gameObject
   -- self.liveOn_img = self.live_btn.transform:Find("On").gameObject
   self.UIDText = self.rc:GetObject("UIDText"):GetComponent("Text")

   self.FastBattle = self.rc:GetObject("FastBattle")
   
   self.team_btn = self.rc:GetObject("TeamButton")--.transform:Find("Value").gameObject
   self.launchAtk_Image = self.rc:GetObject("LaunchAtkButton")
   self.launchAtk_btn = self.launchAtk_Image.transform:Find("Value").gameObject
   self.format_btn = self.rc:GetObject("FormatButton")
   self.empire_btn = self.rc:GetObject("EmpireButton")
   self.intens_btn = self.rc:GetObject("IntensButton")
   self.drawCard_btn = self.rc:GetObject("DrawCardButton")
   self.bag_btn = self.rc:GetObject("BagButton")
   self.inform_Btn = self.rc:GetObject("InformButton")
   self.addPower_Button = self.rc:GetObject("AddPowerButton")
   self.friend_Btn = self.rc:GetObject("FriendButton")
   self.handBook_Btn = self.rc:GetObject("HandBookButton")
   self.task_Btn = self.rc:GetObject("TaskButton")
   --self.risk_Btn = self.rc:GetObject("RiskButton")
   self.shop_Btn = self.rc:GetObject("ShopButton")
   self.expedition_Btn = self.rc:GetObject("ExpeditionButton")
   self.fightSoul_Btn = self.rc:GetObject("FightSoulButton")
   self.postBox_Btn = self.rc:GetObject("PostBoxButton")
   self.set_Btn = self.rc:GetObject("SetButton")
   self.uiRoot = self.rc:GetObject("UIRoot").transform
   local eventArea = self.rc:GetObject("EventArea")
   EventTriggerListener.Get(eventArea).onLuaClick = function() OnClickEventArea(self) end
   
   self.paintRoot = self.rc:GetObject("PicRoot").transform
   self.homeCard = self.rc:GetObject("HomeCard"):GetComponent("Image")
   self.labelList = {}
   self.top_scroll = self.rc:GetObject("TopScroll View")
   self.PageContent = self.top_scroll.transform:Find("Viewport/Content")
   self.camera = self.rc:GetObject("Camera")
   self.pageView = self.top_scroll:GetComponent("PageView")
   self.pageView.OnPageChanged = function(index) OnPageChanged(self,index) end
   self.pageView.sensitivity = 0.5
   local labelTra = self.rc:GetObject("LabelList").transform
   self.TopScrollRect = self.top_scroll:GetComponent("ScrollRect")
   EventTriggerListener.Get(self.TopScrollRect.gameObject).onLuaDragEndHandler = function()
      drag = 0
      if self.timer then
         self.timer:Resume()
      end
   end
   EventTriggerListener.Get(self.TopScrollRect.gameObject).onLuaDragBeginHandler = function()
      drag = 1
      if self.timer then
         self.timer:Pause()
         self.timer:Reset()
      end
   end

   --------------------------------------------------
   
   self.rechargePopButton = self.rc:GetObject("RechargePopButton")
   UIUtil.AddBtnEventNoBug(self.rechargePopButton.gameObject, function(go)
      UIManager:GetInstance():OpenWindow(UIWindowNames.UIRechargePopUp, curRechargeModule)
   end)
   -----弹窗礼包----------------------------

   -- 小头像
   self.icon_image = self.rc:GetObject("PlayerAvatar"):GetComponent("Image")
   self.energy_slider = self.rc:GetObject("Power"):GetComponent("Slider")
   self.exp_slider = self.rc:GetObject("Exp"):GetComponent("Slider")
   self.backGround =  self.rc:GetObject("BackGround")
   self.mainInfo = self.rc:GetObject("MainInfo")
   self.mainInfo:SetActive(true)
   if Authority:GetTestAuth() then
      LongPress.New(self.icon_image.gameObject, self.ctrl.OpenTestToolWindow)
   end
   self.Rest_buff = self.rc:GetObject("APBuff")
   self.Rest_Up = self.rc:GetObject("APBuff").transform:Find("Up").gameObject
   self.Rest_Down = self.rc:GetObject("APBuff").transform:Find("down").gameObject
   self.BuffDesc = self.rc:GetObject("BuffDesc")
   self.BuffDescEvent = self.rc:GetObject("BuffDescEvent")
   self.Popup = self.rc:GetObject("Popup")
   UIUtil.AddBtnEventNoBug(self.BuffDescEvent,function(go) self.BuffDesc:SetActive(false) end)
   UIUtil.AddBtnEventNoBug(self.Rest_Up,function(go) self.Rest_Up:SetActive(not self.Rest_Up.activeSelf) self.Rest_Down:SetActive(not self.Rest_Down.activeSelf) end)
   UIUtil.AddBtnEventNoBug(self.Rest_Down,function(go) self.Rest_Up:SetActive(not self.Rest_Up.activeSelf) self.Rest_Down:SetActive(not self.Rest_Down.activeSelf) end)
   UIUtil.AddBtnEventNoBug(self.icon_image.gameObject, function(go)
      UIManager:GetInstance():OpenWindow(UIWindowNames.UIPlayerInfo)
   end)

   for i = 0,labelTra.childCount - 1 do
      table.insert(self.labelList,labelTra:GetChild(i).gameObject)
   end
   self.index = 0
   InitLabelList(self)
   
   UIUtil.AddBtnEventNoBug(self.launchAtk_btn,function(go) self.ctrl:OpenLaunchAtkWindow()  end)
   UIUtil.AddBtnEventNoBug(self.format_btn,function(go) self.ctrl:OpenForMatWindow()  end)
   UIUtil.AddBtnEventNoBug(self.empire_btn,function(go) self.ctrl:OpenEmpireWindow()  end)
   UIUtil.AddBtnEventNoBug(self.intens_btn,function(go) self.ctrl:OpenIntensWindow()  end)
   UIUtil.AddBtnEventNoBug(self.drawCard_btn,function(go) self.ctrl:OpenDrawCardWindow()  end)
   UIUtil.AddBtnEventNoBug(self.inform_Btn,function(go) self.ctrl:OpenInformWindow()  end)
   UIUtil.AddBtnEventNoBug(self.addPower_Button,function(go) self.ctrl:OpenAddPowerWindow()  end)
   UIUtil.AddBtnEventNoBug(self.friend_Btn,function(go) self.ctrl:OpenFriendWindow()  end)
   UIUtil.AddBtnEventNoBug(self.handBook_Btn,function(go)UIManager:GetInstance():OpenWindow(UIWindowNames.UIHandBookMain) end)
   UIUtil.AddBtnEventNoBug(self.task_Btn,function(go) self.ctrl:OpenTaskWindow()  end)
   UIUtil.AddBtnEventNoBug(self.shop_Btn,function(go) self.ctrl:OpenShopWindow()  end)
   UIUtil.AddBtnEventNoBug(self.expedition_Btn,function(go) self.ctrl:OpenExpeditionWindow()  end)
   UIUtil.AddBtnEventNoBug(self.fightSoul_Btn,function(go) self.ctrl:OpenFightSoulWindow()  end)
   UIUtil.AddBtnEventNoBug(self.postBox_Btn,function(go) self.ctrl:OpenPostBoxWindow()  end)
   UIUtil.AddBtnEventNoBug(self.set_Btn,function(go) self.ctrl:OpenSetWindow()  end)
   UIUtil.AddBtnEventNoBug(self.bag_btn,function(go) self.ctrl:OpenPropWindow()  end)
   UIUtil.AddBtnEventNoBug(self.team_btn,function(go) UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew)  end)
   --UIUtil.AddBtnEventNoBug(self.risk_Btn,function(go) Game.Scene.Player:GetComponent("RiskComponent"):Open() end)

   UIUtil.AddBtnEventNoBug(self.see_btn,function(go)  OnLive2d(self, 1)  end)
   UIUtil.AddBtnEventNoBug(self.changeSkin_btn,function(go)  OnLive2d(self, 2)  end)

   UIUtil.AddBtnEventNoBug(self.FastBattle,function(go) UIManager:GetInstance():OpenWindow(UIWindowNames.FastBattle) end)

   self.lines = self.rc:GetObject("Lines")
   self.uiDrawing = UIDrawing.New(self.paintRoot, self.homeCard, self.spinePic, SoundType.Main, UIWindowNames.UIHome, self.lines)
   self.uiDrawing:BackgroundSetting(self.cardBg, self.EffectImage, self.defBgSprite)
   
   UIUtil.AddBtnEventNoBug(self.live_btn,function(go) 
      -- coroutine.start(function ()

      --    local showgirlInfo = Game.Scene.Player.ShowGirlInfo
      --    --self.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)
      --    self.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
      --    --self.uiDrawing:ChangeMode()
      --    -- self.liveOff_img:SetActive(self.uiDrawing.showMode == 1)
      --    -- self.liveOn_img:SetActive(self.uiDrawing.showMode == 2)
      -- end)
   end)

   self.addPanel = self.rc:GetObject("AddPanel")
   EventTriggerListener.Get(self.addPanel).onLuaClick = function() self.addPanel:SetActive(false) end

   -- self.battlePassButton = self.rc:GetObject("BattlePassButton")
   -- UIUtil.AddBtnEvent(self.battlePassButton, function() self.ctrl:OpenBattlePass() end)

   self.ActivityBtnPanel = self.rc:GetObject("ActivityBtnPanel").transform
   self.ActiveBtn = self.rc:GetObject("ActivityBtn")
   self.ActivityItem = self.rc:GetObject("ActivityItem")
   self.ActivityItem.gameObject:SetActive(false)
   self.showActivitys = {
      moduleIds = {},
      items = {}
   }
   self.showBossraid = nil
   self.bossraidItem = self.rc:GetObject("BossraidItem")
   UIUtil.AddBtnEventNoBug(self.ActiveBtn,function(go) 
      ---@type GameEventComponent
      local GameEventComponent = Game.Scene.Player:GetComponent("GameEventComponent")
      local gameEvents = GameEventComponent:GetGameEvent()
      if table.count(gameEvents) == 0 then
         UIUtil.ToolTipFourth(LangUtil.GetSysLang(1327)) -- 暂无活动
         return
      end
      UIManager:GetInstance():OpenWindow(UIWindowNames.UIGameEventMain)
      
      --首页活动icon点击次数
      ChannelManager:GetInstance():OnActivityBtnClick(LangUtil.GetSysLang(719))
   end)
   -- UIPublic.InitItemIcon(self.ActiveBtn:Find("ActivityMask/Image"):GetComponent("Image"), nil, GoodsKind.Card, 1003)

   self.ActiveBtnList = {}--活动按钮 ActiveBtn1、ActiveBtn2
   -- for i = 1, ActivityBtnPanel.childCount - 1 do
   --    self.ActiveBtnList[i] = {}
   --    self.ActiveBtnList[i].btn = ActivityBtnPanel:GetChild(i)
   --    self.ActiveBtnList[i].btn.gameObject:SetActive(false)
   --    self.ActiveBtnList[i].Text = self.ActiveBtnList[i].btn:Find("ActivityText")
   --    self.ActiveBtnList[i].image = self.ActiveBtnList[i].btn:Find("ActivityMask/Image"):GetComponent("Image")
   --    self.ActiveBtnList[i].timeBg = self.ActiveBtnList[i].btn:Find("TimeBg").gameObject
   --    self.ActiveBtnList[i].timeText = self.ActiveBtnList[i].btn:Find("TimeBg/TimeText"):GetComponent("Text")
   --    self.ActiveBtnList[i].timeBg:SetActive(false)
   -- end
   InitHintComponent(self)
   -- 跑马灯
   self.drawMarqueeBanner = self.rc:GetObject("DrawMarqueeBanner").transform
   self.drawMarqueeBanner.gameObject:SetActive(false)
   
   BannerPanel.OnCreate(self)
   ActivityHint.OnCreate(self)
   self.timer = TimerManager:GetInstance():GetTimer(6, self.OnUpdate, self)
   self.timer:Start()
   self.timer:Pause()
end

function UIHomeView.OnUpdate(self)
   if drag == 0 and self.PageContent.childCount > 1 then
      self.index = self.index + 1
      if self.index > self.PageContent.childCount then
         self.index = 1
      end
      horizontal = (self.index-1) * (1/( self.PageContent.transform.childCount-1))
   end
end

local function OnEnable(self) --界面被激活 刷新界面
   base.OnEnable(self)
   self:OnRefresh()
   -- if ChannelManager:GetInstance():IsChannel(ChannelType.Test) then
   --    --self.MenuCtrl.anchoredPosition = Vector2.New(-573,111)
   --    self.risk_Btn:SetActive(true)
   -- else
   --    --self.MenuCtrl.anchoredPosition =  Vector2.New(-373,111)
   --    self.risk_Btn:SetActive(false)
   -- end
   --self.risk_Btn:SetActive(false)
   
   --OnHomeCardRectChg(self)
   InitActiveBtn(self)
   ActivityHint.InitActivityHint(self)
end

function UIHomeView.OnViewTop(self)
   base.OnViewTop(self)

   -- 活动按钮曝光埋点
   ChannelManager:GetInstance():CommonCallback(GameEvent.View_MainTitle_Icon)
   
   UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
   self.comTopView = UIManager:GetInstance():GetWindow(UIWindowNames.UIComTop).View
   self.comTopView:InitComTop(self, self:GetName())
   self.uiDrawing:StopMusicAndFace(false)
   if self.timer == nil then return end
   self.timer:Resume()
end

function UIHomeView.OnDisViewTop(self)
   base.OnDisViewTop(self)
   Game.Scene:GetComponent("SoundComponent"):Stop()
   UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
   self.uiDrawing:StopMusicAndFace(true)
   if self.timer == nil then return end
   self.timer:Pause()
end

local function OnDisable(self)
   base.OnDisable(self)
   local root = self.spinePic.transform
   if root.childCount > 0 then
      ListChildPool:GetInstance():Remove(root:GetChild(0).gameObject)
   end
   self.cardBg.sprite = DeActiveSprite
   self.homeCard.gameObject:SetActive(false)
   self.spinePic.gameObject:SetActive(false)
   self.uiDrawing:Disable()
end

local function OnPlayerInfoChange(self)
   local player = Game.Scene.Player
   self.rooComponent = player:GetComponent("RoomComponent")
   self.name_text.text = player.Nickname
   self.level_text.text = player.Level
   self.UIDText.text = "UID:"..player.Id

   local energy = UIPublic.GetItemAmount( Z_Misc["POWER_ID"].Value[1])
   self.exp_slider.value = UIPublic.GetExpValue(player.Level, player.Exp)
   self.energy_slider.value = energy/Z_PlayerLevelUp[player.Level].Energy
   self.energy_slider.transform:Find("APValueTextRoot/Text"):GetComponent("Text").text = energy.."/"..Z_PlayerLevelUp[player.Level].Energy
   if player.Avatar ~= nil and Z_HeadPortrait[player.Avatar] ~= nil then
      local avatarStr = Z_HeadPortrait[player.Avatar].Resourse
      UIUtil.SetPlayerIcon(self.icon_image, avatarStr)   
   end

   local skininfo = Z_Skin[player.ShowGirlInfo.skin_id]
   if skininfo == nil then
      self.live_btn:SetActive(false)
   else
      self.live_btn:SetActive(skininfo.IsSpine == 1)
   end
end

local function OnRefresh(self)
   self.FastBattle:SetActive(UNITY_EDITOR)
   local player = Game.Scene.Player
   if player.EnergyNextTime == 0 then
      self.EnergyNextTime = 0
   else
      self.EnergyNextTime = 180 - player.EnergyNextTime
   end
   
   OnPlayerInfoChange(self)
   UpDateCardPaint(self)
   UpDataRoomHint(self)
end

local function OnCardInfoChg(self,info)
   local skininfo = Z_Skin[Game.Scene.Player.ShowGirlInfo.skin_id]
   self.live_btn:SetActive(skininfo.IsSpine == 1)
   -- self.liveOff_img:SetActive(ClientData:GetInstance():GetHomeLive2DMode() == 1)
   -- self.liveOn_img:SetActive(ClientData:GetInstance():GetHomeLive2DMode() == 2)

   if info.cardInfoChgType == CardInfoChgType.Skin and info.cardId == Game.Scene.Player.MainUICardId then
      UpDateCardPaint(self)
   end
end

--新手引导
local function ON_Guide_Click(self,cid,num,isrun,minStep)
   if cid==2 and isrun then
         if num==4 and minStep==1 then
            local HuideV = UIManager:GetInstance():GetWindow(UIWindowNames.UINoviceGuide).View
            self.ctrl:OpenForMatWindow()
         end
   elseif cid==3 and isrun then
      
         if num==0 and minStep==2 then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew)
         end
      
   elseif cid==4 and isrun then
         if num==0 and minStep==2 then
            self.ctrl:OpenLaunchAtkWindow()
         end
   elseif cid==10 and isrun then
         if num==0 and minStep==2 then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIFormatNew)
         end
      
   end
end

local function OnLangTypeChg(self)
   self:OnLangCreate()
   BannerPanel.OnLangTypeChg(self)
end

local function OnPaidStarStoneChg(self)
   ActivityHint.OnPaidStarStoneChg(self)
end

local function OnTaskDataChg(self)
   ActivityHint.OnTaskDataChg(self)
end

local function OnSummonInfoChg(self)
   ActivityHint.OnSummonDataChg(self)
end

local function OnActivityLoginChg(self)
   ActivityHint.OnActivityLoginChg(self)
end

local function OnTimeReset(self)
   InitActiveBtn(self)
   ActivityHint.InitActivityHint(self)
end

local function OnDMBannerChg(self)
   if DMBannerData:GetInstance():GetDMBIsStart() then
      DMBanner.InitPanel(self,self.drawMarqueeBanner)
   end
end

local function OnNameChanged(self)
   self.name_text.text = Game.Scene.Player.Nickname
end

local function OnAddListener(self) -- 监听事件
   base.OnAddListener(self)
   self:AddUIListener(UIMessageNames.ON_MAIN_UI_CARD_CHG,UpDateCardPaint)
   self:AddUIListener(UIMessageNames.ON_ROOM_INFO_CHG,UpDataRoomHint)
   self:AddUIListener(UIMessageNames.ON_HOME_CARD_RECT_CHG,OnHomeCardRectChg)
   self:AddUIListener(UIMessageNames.ON_CARD_INFO_CHG,OnCardInfoChg)
   self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
   self:AddUIListener(UIMessageNames.ON_PLAYER_INFO_CHG, OnPlayerInfoChange)
   self:AddUIListener(UIMessageNames.ON_SLEEP_BUFF_CHG, ChangeSleepBuffState)
   self:AddUIListener(UIMessageNames.ON_REST_BUFF_CHG, ChangeRestBuffState)
   self:AddUIListener(UIMessageNames.ON_TIME_RESET, OnTimeReset)
   self:AddUIListener(UIMessageNames.ON_LANG_TYPE_CHG, OnLangTypeChg)
   self:AddUIListener(UIMessageNames.ON_PAID_STARSTONE_CHG, OnPaidStarStoneChg)
   self:AddUIListener(UIMessageNames.ON_STAR_LIGHT_REBATE_CHG, OnPaidStarStoneChg)
   self:AddUIListener(UIMessageNames.ON_TASK_DATA_CHG, OnTaskDataChg)
   self:AddUIListener(UIMessageNames.ON_SUMMON_INFO_CHG, OnSummonInfoChg)
   self:AddUIListener(UIMessageNames.ON_ACTIVITY_LOGIN_CHG, OnActivityLoginChg)
   self:AddUIListener(UIMessageNames.ON_DMBANNER_PUSH, OnDMBannerChg)   
   self:AddUIListener(UIMessageNames.ON_NAME_CHANGED, OnNameChanged)   
end

local function OnRemoveListener(self) --删除事件
   base.OnRemoveListener(self)
   self:RemoveUIListener(UIMessageNames.ON_MAIN_UI_CARD_CHG)
   self:RemoveUIListener(UIMessageNames.ON_ROOM_INFO_CHG)
   self:RemoveUIListener(UIMessageNames.ON_HOME_CARD_RECT_CHG)
   self:RemoveUIListener(UIMessageNames.ON_CARD_INFO_CHG)
   self:RemoveUIListener(UIMessageNames.ON_Guide_Click)
   self:RemoveUIListener(UIMessageNames.ON_PLAYER_INFO_CHG)
   self:RemoveUIListener(UIMessageNames.ON_SLEEP_BUFF_CHG)
   self:RemoveUIListener(UIMessageNames.ON_REST_BUFF_CHG)
   self:RemoveUIListener(UIMessageNames.ON_TIME_RESET)
   self:RemoveUIListener(UIMessageNames.ON_LANG_TYPE_CHG)
   self:RemoveUIListener(UIMessageNames.ON_PAID_STARSTONE_CHG)
   self:RemoveUIListener(UIMessageNames.ON_STAR_LIGHT_REBATE_CHG)
   self:RemoveUIListener(UIMessageNames.ON_TASK_DATA_CHG)
   self:RemoveUIListener(UIMessageNames.ON_SUMMON_INFO_CHG)
   self:RemoveUIListener(UIMessageNames.ON_ACTIVITY_LOGIN_CHG)
   self:RemoveUIListener(UIMessageNames.ON_DMBANNER_PUSH)
   self:RemoveUIListener(UIMessageNames.ON_NAME_CHANGED)
end

local function OnDestroy(self) --销毁界面
   self.isMenu = nil
   self.launchAtk_btn = nil
   self.format_btn = nil
   self.empire_btn = nil
   self.intens_btn = nil
   self.drawCard_btn = nil
   self.bottom_scroll = nil
   self.top_scroll =nil
   self.menu_btn = nil
   self.menuCtrl = nil
   self.startIndex = nil
   self.endIndex = nil
   self.ActiveBtnList = nil
   removeTimer(self)
   BannerPanel.OnDestroy(self)
   ActivityHint.OnDestroy(self)
   base.OnDestroy(self)
end

UIHomeView.OnCreate = OnCreate
UIHomeView.OnEnable = OnEnable
UIHomeView.OnRefresh = OnRefresh
UIHomeView.OnAddListener = OnAddListener
UIHomeView.OnRemoveListener = OnRemoveListener
UIHomeView.OnDisable = OnDisable
UIHomeView.OnDestroy = OnDestroy
UIHomeView.OnLangCreate = OnLangCreate
UIHomeView.ToolTip=ToolTip 
UIHomeView.Update=Update 
UIHomeView.InitActiveBtn = InitActiveBtn

return UIHomeView