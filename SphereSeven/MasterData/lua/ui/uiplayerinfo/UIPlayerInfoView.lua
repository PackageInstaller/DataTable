---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

---@class UIPlayerInfoView : UIBaseView
---@field ctrl UIPlayerInfoCtrl
local UIPlayerInfoView = BaseClass("UIPlayerInfoView",UIBaseView)
local base = UIBaseView
local this = UIPlayerInfoView

---@param self UIPlayerInfoView
local function InitPaint(self)
    local cardId, skinId = self.ctrl:GetCardIdAndSkinId()
    local zSkin = Z_Skin[skinId]


    coroutine.start(function ()
        self.uiDrawing:CoPlayImageOnly( cardId, skinId)
    end)

    --self.uiDrawing:CoPlayImageOnly( cardId, skinId)
    -- if zSkin.IsSpine == 0 then
    --     local root = self.spineImg.transform
    --     if root.childCount > 0 then
    --         ListChildPool:GetInstance():Remove(root:GetChild(0).gameObject)
    --     end
    --     self.cardPic.gameObject:SetActive(true)
    --     self.spineImg.gameObject:SetActive(false)
    --     UIPublic.SetCardOriginal(cardId,self.cardPic:GetComponent("Image"), skinId, 1,  true)
    -- else
    --     self.cardPic.gameObject:SetActive(false)
    --     self.spineImg.gameObject:SetActive(true)
    --     coroutine.start(function ()
    --         --UIPublic.SetCardSpine(self.spineImg.transform,card.TemplateId,card.SkinId)
    --         UIPublic.SetCardSpine(self.spineImg.transform, cardId, skinId)
    --     end)
    -- end

    if self.ctrl:GetSupportCard() ~= nil then
        UIPublic.InitCardItemLittle(self.ctrl:GetSupportCard(), self.cardItem)
    end
    self.cardItem:SetActive(self.ctrl:GetSupportCard() ~= nil)

    if self.ctrl:GetSupportFightSoul() ~= nil then
        UIPublic.InitVsFightSoulItemMId(self.ctrl:GetSupportFightSoul(), self.fightSoulItem, nil, true)
    end
    self.fightSoulItem:SetActive(self.ctrl:GetSupportFightSoul() ~= nil)
end

---@param self UIPlayerInfoView
local function GetOtherData(self)
        local data = {}
        data[1] = self.ctrl:GetAchievementFinishCount() -- 成就数量
        data[2] = self.ctrl:GetFriendsCount() -- 好友数量
        data[3] = self.ctrl:GetOnlineTimeText() -- 在线时长

        local divison_1 = self.ctrl:GetCompetitionHighestDivison()
        local season_1 = self.ctrl:GetCompetitionHighestDivisonSeason()
        local zSeason_1 = Z_ArenaSeasonConfig[season_1]
        local zSeasonReward_1 = Z_ArenaSeasonReward[zSeason_1.Reward]
        local data_1 = zSeasonReward_1[divison_1]
        data[4] = LangUtil.GetConfLang(data_1, "Name") -- 最高段位

        data[5] = self.ctrl:GetBattleCount() -- 出击次数
        data[6] = self.ctrl:GetPVPCount() -- 争霸次数
        data[7] = self.ctrl:GetRecruitCount() -- 抽卡次数
        data[8] = self.ctrl:GetKillCount() -- 击杀数量

        data[9] = self.ctrl:GetCardProgress() -- 卡牌收集进度 -- value:number, progress:number value:收集数量 progress:进度(0-100)
        data[10] = self.ctrl:GetFightSoulProgress() -- 战魂收集进度 -- value:number, progress:number value:收集数量 progress:进度(0-100)
        data[11] = self.ctrl:GetEquipProgress() -- 装备收集进度 -- value:number, progress:number value:收集数量 progress:进度(0-100)
        -- data[11] = self.ctrl:GetEnemyProgress() -- 敌人收集进度 -- value:number, progress:number value:收集数量 progress:进度(0-100)
        local other = self.right:Find("Bg/Bot/Other")
        for i = 0,other.childCount - 1 do 
            local child = other:GetChild(i)
            if type(data[i + 1]) ~="table" then
                child:Find("Value"):GetComponent("Text").text = data[i + 1]
            else
                child:Find("Value"):GetComponent("Text").text = data[i + 1].value
                child:Find("Progress"):GetComponent("Text").text = data[i + 1].progress .. "<size=26>%</size>"
            end
        end
        self.allGatherSlider.value = self.ctrl:GetAllGatherProgress()/100 -- 总收集进度(0-100)
        self.allGatherValue.text = math.modf(self.ctrl:GetAllGatherProgress()).."<size=25>%</size>"
        
        local divison_0 = self.ctrl:GetCompetitionDivison()
        local season_0 = self.ctrl:GetCompetitionDivisonSeason()
        local zSeason_0 = Z_ArenaSeasonConfig[season_0]
        local zSeasonReward_0 = Z_ArenaSeasonReward[zSeason_0.Reward]
        local data_0 = zSeasonReward_0[divison_0]
    
        UIUtil.SetSprite(self.competitionImage, AtlasConfig.Dangrad, data_0.Icon .. ".png",true)
        self.competitionText.text = LangUtil.GetConfLang(data_0, "Name")
    
        -- local zCompetition = Z_Competition[Game.Scene:GetComponent("CompetitionComponent").info.cplayer.Captain]
        -- UIUtil.SetSprite(self.competitionIcon,AtlasConfig.Dangrad,zCompetition.Id..".png")
        -- self.competitionName.text = LangUtil.GetLang(Z_Competition,Game.Scene:GetComponent("CompetitionComponent").info.cplayer.Captain,"Name")
        -- self.right.gameObject:SetActive(true)
        --end)
end

---@param self UIPlayerInfoView
local function InitPlayerInfo(self)
    local expValue = self.ctrl:GetExpSliderProgress()
    local expText = self.ctrl:GetExpText()

    self.nameText.text = self.ctrl:GetNameText()
    local format = "%Y"..LangUtil.GetSysLang(2066).."%m"..LangUtil.GetSysLang(2004).."%d"..LangUtil.GetSysLang(2005)
    self.firstLoginText.text = os.date(format, self.ctrl:GetRegisterTime())
    self.expSlider.value = expValue

    self.lvText.text = self.ctrl:GetLevel()
    self.userId.text = self.ctrl:GetUid()

    local avater = self.ctrl:GetAvater()
    if avater ~= nil and  Z_HeadPortrait[avater] ~= nil then
        local avatarStr = Z_HeadPortrait[avater].Resourse
        UIUtil.SetPlayerIcon(self.AvatarValue,avatarStr)
    end

    -- if avater == "" then
    --     UIUtil.SetSprite(self.AvatarValue,AtlasConfig.CardLittle,"1000_1.png",true)
    -- else
    --     UIUtil.SetSprite(self.AvatarValue,AtlasConfig.CardLittle,avater .. ".png",true)
    -- end
end

---@param self UIPlayerInfoView
local function InitRight(self)
    local useCountRoot = self.right:Find("Bg/CardUseCount/Root")
    GetOtherData(self)

    local mostPopCharacter = self.ctrl:GetMostCharacters()

    local count = 0
    for i = 0,useCountRoot.childCount - 1 do
        local child = useCountRoot:GetChild(i)
        local card = mostPopCharacter[i+1]
        local cardStage = 1
        if card == nil then
            child.gameObject:SetActive(false)
        else
            count = count + 1
            local avatar = child:Find("Mask/Avatar"):GetComponent("Image")
            UIUtil.SetCardSprite(avatar,card.character_id, cardStage, CardPictureType.Little,true)
            child.gameObject:SetActive(true)
        end
    end
end

---@param self UIPlayerInfoView
function this.OnCreate(self)
    base.OnCreate(self)
    self.backBtn = self.rc:GetObject("BackButton")
    
    local nameEdit = self.rc:GetObject("NameEdit")
    local IconChangeButton = self.rc:GetObject("IconChangeButton")
    
    self.spineImg = self.rc:GetObject("SpinePic")
    self.cardPic = self.rc:GetObject("Pic")
    self.right = self.rc:GetObject("Right").transform
    
    local bot = self.right:Find("Bg/Top")
    local playerInfo = bot:Find("PlayerInfo")
    self.nameText = playerInfo:Find("Name"):GetComponent("Text")
    self.nameText.text= ""
   
    self.firstLoginText = playerInfo:Find("FirstLogin/Value"):GetComponent("Text")
    self.firstLoginText.text= ""
    
    self.expSlider = playerInfo:Find("Exp"):GetComponent("Slider")
    
    self.lvText = playerInfo:Find("Level/LevelText"):GetComponent("Text")
    self.lvText.text= ""

    self.userId = playerInfo:Find("UserID/Value"):GetComponent("Text")
    self.userId.text= ""
   
    self.competitionImage = self.rc:GetObject("CompetitionImage"):GetComponent("Image")

    self.AvatarValue = playerInfo:Find("AvatarMask/Mask/Value"):GetComponent("Image")

    self.allGatherValue =self.rc:GetObject("allGatherValue"):GetComponent("Text")
    self.allGatherValue.text=""
    
    self.allGatherSlider=self.rc:GetObject("Slider"):GetComponent("Slider")

    self.cardItem = self.rc:GetObject("CardItem")
    self.fightSoulItem = self.rc:GetObject("FightSoulItem")

    self.paintRoot = self.rc:GetObject("PicRoot").transform
    self.homeCard = self.rc:GetObject("Pic"):GetComponent("Image")
    self.spinePic = self.rc:GetObject("SpinePic")

    UIPublic.SetBackButton(
        self.backBtn,
        self.ctrl:getUIName(),
        417
    )

    UIUtil.AddBtnEvent(nameEdit,function()UIManager:GetInstance():OpenWindow(UIWindowNames.UINameEdit) end)

    nameEdit:SetActive(self.ctrl.isNameEdit())
    
    UIUtil.AddBtnEvent(IconChangeButton,function()
        UIManager:GetInstance():OpenWindow(UIWindowNames.UISetIcon,{})
    end)
    IconChangeButton:SetActive(self.ctrl.isShowIconChangeButton())

    UIUtil.AddBtnEvent(self.rc:GetObject("CardButton"),function()
        self.ctrl:OnClickSupportCard()
    end)
    UIUtil.AddBtnEvent(self.rc:GetObject("FightSoulButton"),function()
        self.ctrl:OnClickSupportFightSoul()
    end)

    local changeShowButton = self.rc:GetObject("ChangeShowButton")
    if self.ctrl:IsPlayer() then
        changeShowButton:SetActive(true)
        UIUtil.AddBtnEventNoBug(changeShowButton,function()
            this.OnLive2d(self, 3) 
        end)
    else
        changeShowButton:SetActive(false)
    end

    self.rc:GetObject("FightSoulItemAddImage"):SetActive(self.ctrl:IsPlayer())
    self.rc:GetObject("FightSoulItemNoteText"):SetActive(not self.ctrl:IsPlayer())

    self.uiDrawing = UIDrawing.New(self.paintRoot, self.homeCard, self.spinePic, SoundType.Main, UIWindowNames.UIHome, self.lines)
end

function this.OnLive2d(self, type)
    local transform = self.paintRoot.transform
    local info = {}
    info.liveType = Live2DType.Home
    info.resetPos = transform.position
    info.resetScale = transform.localScale.x
    info.image = self.homeCard
    info.offset = self.homeCard:GetComponent("RectTransform").localPosition
    info.isSpine = self.uiDrawing.showMode
    info.spineRoot = self.spinePic
    info.uiDrawing = self.uiDrawing
    info.showGirlUIType = type
    UIManager:GetInstance():OpenWindow(UIWindowNames.UILive2d,info)
 end

function this.OnLangCreate(self)
    local bot = self.right:Find("Bg/Top")
    local playerInfo = bot:Find("PlayerInfo")
    LangUtil.BindText(self.nameText)
    LangUtil.BindText(self.firstLoginText,"Number")
    LangUtil.BindText(self.lvText,"Number")
    LangUtil.BindText(playerInfo:Find("FirstLogin"))
    LangUtil.BindText(self.allGatherValue,"Number")
    LangUtil.BindText(self.rc:GetObject("IconChangeButton").transform:Find("Text")).text = LangUtil.GetSysLang(222)
    self.competitionText = LangUtil.BindText(self.rc:GetObject("CompetitionText"))
    LangUtil.BindText(self.rc:GetObject("allGatherText")).text = LangUtil.GetSysLang(273) -- 总收集率
    LangUtil.BindText(self.rc:GetObject("FirstLogin")).text = LangUtil.GetSysLang(385) -- 初次登录
    LangUtil.BindText(self.rc:GetObject("CardUseText")).text = LangUtil.GetSysLang(1211) -- 常用角色
    LangUtil.BindText(self.rc:GetObject("SupportText")).text = LangUtil.GetSysLang(615) -- 援助
    LangUtil.BindText(self.rc:GetObject("CardTitleText")).text = LangUtil.GetSysLang(90) -- 角色
    LangUtil.BindText(self.rc:GetObject("FightSoulTitleText")).text = LangUtil.GetSysLang(259) -- 战魂
    local chooseHintText = LangUtil.BindText(self.rc:GetObject("ChooseHintText"))
    chooseHintText.text = LangUtil.GetSysLang(1212) -- 点击头像框进入替换
    chooseHintText.gameObject:SetActive(self.ctrl.isShowIconChangeButton())
    LangUtil.BindText(self.rc:GetObject("FightSoulItemNoteText")).text = LangUtil.GetSysLang(2009) -- 无

    local data = {
        [1] = { text = LangUtil.GetSysLang(1197) },
        [2] = { text = LangUtil.GetSysLang(1198) },
        [3] = { text = LangUtil.GetSysLang(1199) },
        [4] = { text = LangUtil.GetSysLang(1200) },
        [5] = { text = LangUtil.GetSysLang(1201) },
        [6] = { text = LangUtil.GetSysLang(1202) },
        [7] = { text = LangUtil.GetSysLang(1203) },
        [8] = { text = LangUtil.GetSysLang(1204) },
        [9] = {
            text = LangUtil.GetSysLang(1205),
            text2 = LangUtil.GetSysLang(1206),
        },
        [10] = {
            text = LangUtil.GetSysLang(1207),
            text2 = LangUtil.GetSysLang(1208),
        },
        [11] = {
            text = LangUtil.GetSysLang(1209),
            text2 = LangUtil.GetSysLang(1210),
        },
    }

    local other = self.right:Find("Bg/Bot/Other")
    for i = 0,other.childCount - 1 do 
        local child = other:GetChild(i)
        LangUtil.BindText(child:Find("Text"):GetComponent("Text")).text = data[i + 1].text
        LangUtil.BindText(child:Find("Value"))
        if data[i+1].text2 ~= nil then
            LangUtil.BindText(child:Find("Text2"):GetComponent("Text")).text = data[i + 1].text2
            LangUtil.BindText(child:Find("Progress"))
        end
    end
end

function this:OnEnable()
    self.otherPlayer = nil
    base.OnEnable(self)
    self.ctrl:InitData()
    self:OnRefresh()
end

function this.OnRefresh(self)
    self.player = Game.Scene.Player
    InitRight(self)
    InitPlayerInfo(self)
    InitPaint(self)
end

---@param self UIPlayerInfoView
local function OnPlayerInfoChg(self)
    self:OnRefresh()
end

---@param self UIPlayerInfoView
local function OnNameChanged(self)
    self.nameText.text = self.player.Nickname
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_ROLE_INFO_UPDATE,OnPlayerInfoChg)
    self:AddUIListener(UIMessageNames.ON_NAME_CHANGED, OnNameChanged)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_ROLE_INFO_UPDATE)
    self:RemoveUIListener(UIMessageNames.ON_NAME_CHANGED)
end

function this.OnDisable(self)
    base.OnDisable(self)
    self.uiDrawing:Disable()
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

