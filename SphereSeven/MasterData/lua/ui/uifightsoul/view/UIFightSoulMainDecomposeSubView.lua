---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/18 11:30
---

local ResolveLogic = {};
local this= ResolveLogic;
local pfbName = "FightVisitItemMid"
local recordOrder = {order = 1,kind = 1, lockFirst = false}  --是否正序  顺序类型 是否锁定在前面
local screenTypes = {
    --- 职业
    abiliType = 0,
    --- 星级
    star = 0,
    --- 稀有度
    rare = 0,
    --- 是否装备
    isEquip = 0
}

local rareType = {
    [Rarity.R] = true,
    [Rarity.SR] = false,
    [Rarity.SSR] = false,
}
local statusType = {
    isLevelUp = FightSoulScreenType.isLevelUp.LevelUp,
    isMerge = FightSoulScreenType.isMerge.Merge,
}

local FIGHT_SOUL_DECOMPOSE_SHOW_ITEM_ID = tonumber(Z_Misc["FIGHT_SOUL_DECOMPOSE_SHOW_ITEM_ID"].Value[1])
local FIGHT_SOUL_DECOMPOSE_LIMIT = tonumber(Z_Misc["FIGHT_SOUL_DECOMPOSE_LIMIT"].Value[1])
local function InitNumTxt(self)
    local count = 0
    local showItemId = FIGHT_SOUL_DECOMPOSE_SHOW_ITEM_ID
    for key, value in pairs(self.chooseFightSouls) do
        local rare = value.config.Rare
        local rewardId = Z_FightSoulDecompose[rare].RewardId
        local rewardList = Z_Reward[rewardId]
        for _, v in ipairs(rewardList) do
            if v.ObjId == showItemId then
                count = count + v.Count * value.Star
            end
        end
    end
    self.currentGetItemCount = count
    self.ShowNumTextValue.text = "<color=#AAD2FF>" .. Z_Item[showItemId].Name .. "</color><color=#FFF2AA>x" .. count .. "</color>"
    local item = Game.Scene.Player:GetComponent("ItemComponent"):GetItem(showItemId)
    local currentCount
    if item == nil then
        currentCount = 0
    else
        currentCount = item.Amount
    end
    self.ShowNumTextValue.text = self.ShowNumTextValue.text .. "(" .. currentCount .. ")"
    self.rs_holdNumTxt.text = table.count(self.rs_Ids).."/".. FIGHT_SOUL_DECOMPOSE_LIMIT
    this.InitButton(self)
end

local function RemoveFightSoul(self,id)
    table.removebyvalue(self.rs_Ids,id)
    self.chooseFightSouls[id] = nil
    InitNumTxt(self)
end

---@param fightSoul FightSoul
local function AddFightSoul(self, fightSoul)
    if table.any(self.rs_Ids,function(v) return v == fightSoul.Id  end) then
        RemoveFightSoul(self,fightSoul.Id)
        return
    end
    if table.count(self.rs_Ids) >= FIGHT_SOUL_DECOMPOSE_LIMIT then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2030))
        return
    end
    table.insert(self.rs_Ids,fightSoul.Id)
    self.chooseFightSouls[fightSoul.Id] = fightSoul
    InitNumTxt(self)
end

local function OnResolveButton(self)
    if table.count(self.rs_Ids) == 0 then return end
    local req = {}
    req.uids = {}
    for k,v in pairs(self.rs_Ids) do
        table.insert(req.uids,v)
    end

    if table.count(req.uids) == 0 then
        UIUtil.ToolTipFourth("归魂不能为空")
        return
    end

    ---@type ToolTipGetItemData
    local uiData = {}
    uiData.itemText = LangUtil.GetSysLang(252) -- 分解可获得
    uiData.items = {
        {
            id = FIGHT_SOUL_DECOMPOSE_SHOW_ITEM_ID,
            count = self.currentGetItemCount
        }
    }

    uiData.callBack = function()
        coroutine.start(function()
            ---@type protocol.FightSoulDecomposeResp
            local fightSoulReq = coroutine.yieldstart(Game.Scene.Session.CoCall, nil, Game.Scene.Session,
                PROTOCOL.FightSoulDecomposeReq, req)
            UIPublic.OpenRewardUI(fightSoulReq.reward_results)
            self.rs_Ids = {}
            self.chooseFightSouls = {}
            InitNumTxt(self)
        end)
    end

    local hasSRorSSR = false
    local hasLevelUp = false
    local hasMerge = false
    local hasIsEquip = false

    ---@param value FightSoul
    for key, value in pairs(self.chooseFightSouls) do
        if not hasSRorSSR and value.config.Rare == Rarity.SR or value.config.Rare == Rarity.SSR then
            hasSRorSSR = true
        end
        if not hasLevelUp then
            if value.level > 1 or value.exp > 0 then
                hasLevelUp = true
            end
        end
        if not hasMerge and value.Star > 1 then
            hasMerge = true
        end
        
        if value.isEquip then
            hasIsEquip = true
        end
    end

    local bottomText = {}
    if hasIsEquip then
        -- if bottomText == nil then
        --     bottomText = LangUtil.GetSysLang(1163) -- 选中已装备的战魂
        -- else
        --     bottomText = bottomText .. "\n" .. LangUtil.GetSysLang(1163)
        -- end
        table.insert(bottomText, LangUtil.GetSysLang(1163))
    end
    if hasSRorSSR then
        -- if bottomText == nil then
        --     bottomText = LangUtil.GetSysLang(1164) -- 选中SR以上品级的战魂
        -- else
        --     bottomText = bottomText .. "\n" .. LangUtil.GetSysLang(1164)
        -- end
        table.insert(bottomText, LangUtil.GetSysLang(1164))
    end
    if hasLevelUp then
        -- if bottomText == nil then
        --     bottomText = LangUtil.GetSysLang(1165) -- 归魂中包含已升级的战魂，是否继续?
        -- else
        --     bottomText = bottomText .. "\n" .. LangUtil.GetSysLang(1165)
        -- end
        table.insert(bottomText, LangUtil.GetSysLang(1165))
    end
    if hasMerge then
        -- if bottomText == nil then
        --     bottomText = LangUtil.GetSysLang(1166) -- 归魂中包含已合成的战魂，是否继续?
        -- else
        --     bottomText = bottomText .. "\n" .. LangUtil.GetSysLang(1166)
        -- end
        table.insert(bottomText, LangUtil.GetSysLang(1166))
    end
    if table.count(bottomText) > 0 then
        uiData.topText = LangUtil.GetSysLang(787) -- 确定要进行战魂归魂吗
        uiData.bottomText = bottomText
    else
        uiData.bottomText = LangUtil.GetSysLang(787) -- 确定要进行战魂归魂吗
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipGetItem, uiData)
end



local function OnFightSoulItem(self,id)
    local fightSoul = Game.Scene.Player:GetComponent("FightSoulComponent"):Get(id)

    if fightSoul.Lock then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(2037)) -- 战魂已被锁定
        return
    end
    AddFightSoul(self,fightSoul)
    this.InitButton(self)
end

local function OnScreenButton(self)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.callBack = function(screen,kind)
        screenTypes = table.clone(screen)
        recordOrder.kind = kind
        this.InitFightSoulListData(self)
        this.InitFightSoulList(self)
        self.rs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulSort,uiData)
end

local function OnQuickFilterButton(self)
    local uiData = {}
    uiData.rareType = rareType
    uiData.statusType = statusType
    uiData.callBack = function(rare, status)
        rareType = rare
        statusType = status
        this.QuickFilter(self)
        this.InitFightSoulList(self)
        self.rs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulFilter,uiData)
end

local function OnClearButton(self)
    self.chooseFightSouls = {}
    self.rs_Ids = {}
    InitNumTxt(self)
    this.InitFightSoulList(self)
end

local function InitSortButton(self)
    local txt = self.rs_sortBtn.transform:Find("Text"):GetComponent("Text")
    txt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    self.rs_scroll:MoveTop()
end


local function OnSortButton(self)
    recordOrder.order = (recordOrder.order == 1 and {2}or {1})[1]
    InitSortButton(self)
    this.InitFightSoulListData(self)
    this.InitFightSoulList(self)
end

function this.QuickFilter(self)
    self.chooseFightSouls = {}
    self.rs_Ids = {}
    local count = 0
    ---@param fightSoul FightSoul
    for _, fightSoul in ipairs(self.rs_list) do
        if rareType[fightSoul.config.Rare] and not fightSoul.Lock then
            if statusType.isLevelUp == FightSoulScreenType.isLevelUp.None or statusType.isLevelUp == (fightSoul.level > 1) then
                if statusType.isMerge == FightSoulScreenType.isMerge.None then
                    self.chooseFightSouls[fightSoul.Id] = fightSoul
                    table.insert(self.rs_Ids, fightSoul.Id)
                    count = count + 1
                    if count >= FIGHT_SOUL_DECOMPOSE_LIMIT then
                        break
                    end
                elseif statusType.isMerge == FightSoulScreenType.isMerge.Merge then
                    if fightSoul.Star > 1 then
                        self.chooseFightSouls[fightSoul.Id] = fightSoul
                        table.insert(self.rs_Ids, fightSoul.Id)
                        count = count + 1
                        if count >= FIGHT_SOUL_DECOMPOSE_LIMIT then
                            break
                        end
                    end
                else
                    if fightSoul.Star == 1 then
                        self.chooseFightSouls[fightSoul.Id] = fightSoul
                        table.insert(self.rs_Ids, fightSoul.Id)
                        count = count + 1
                        if count >= FIGHT_SOUL_DECOMPOSE_LIMIT then
                            break
                        end
                    end
                end
            end
        end
    end
end

function this.InitFightSoulListData(self)
    self.rs_list = {}
    for k,v in table.pairsByKeys(self.model.fightSoulList) do
            table.insert(self.rs_list,v)  
    end

    self.rs_list = UIPublic.FightSoulScreenFunc(self.rs_list,screenTypes)
    table.sort(self.rs_list, function(a,b) return UIPublic.FightSoulSortFunc(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.rs_list = table.reverseTable(self.rs_list)
    end
end

function this.InitFightSoulList(self)
    self.rs_hint:SetActive(table.count(self.rs_list) == 0)
    self.rs_scroll:RefreshData(self.rs_list)
    InitNumTxt(self)
end

function this.Init(self)
    self.rs_Ids = {}
    InitSortButton(self)
    InitNumTxt(self)
    this.InitButton(self)
    self.rs_init = true
    this.InitFightSoulListData(self)
    this.InitFightSoulList(self)
end

function this.InitButton(self)
    local _bool = false
    if table.count(self.rs_Ids)>0 then
        _bool = true
    end
    UIPublic.InitButton(self.rs_btn,_bool,1)
end

function this.OnLangCreate(self,panel)
    -- LangUtil.LangTextByName(self.langRc:GetObject("NameTextRoot"),"Text")--.text = LangUtil.GetSysLang(88)
    local langRc = panel.transform:Find("LangControl"):GetComponent("ReferenceCollector")
    local resolve = langRc:GetObject("ResolveButton").transform
    local holdNum = langRc:GetObject("HoldNum").transform
    local screenBtn = langRc:GetObject("ScreenButton").transform
    local sortBtn = langRc:GetObject("SortButton").transform

    LangUtil.BindText(resolve:Find("Text")).text = LangUtil.GetSysLang(3114)
    LangUtil.BindText(screenBtn:Find("Text")).text = LangUtil.GetSysLang(155)

    LangUtil.BindText(holdNum:Find("Text")).text = LangUtil.GetSysLang(2060)
    LangUtil.BindText(holdNum:Find("Value"),FontType.All_Number)
    LangUtil.BindText(sortBtn:Find("Text"))
    LangUtil.BindText(self.ShowNumText).text = LangUtil.GetSysLang(224)

    self.ShowNumTextValue  = langRc:GetObject("ShowNumTextValue"):GetComponent("Text")

    LangUtil.BindText(self.ShowNumTextValue)

    LangUtil.BindText(langRc:GetObject("ClearText")).text = LangUtil.GetSysLang(1157)
    LangUtil.BindText(langRc:GetObject("QuickFilterText")).text = LangUtil.GetSysLang(1158)

    LangUtil.BindText(langRc:GetObject("CancelText")).text = LangUtil.GetSysLang(146)
end

function this.OnCreate(self, panel)
    self.chooseFightSouls = {}

    local rc = panel:GetComponent("ReferenceCollector")
    self.rs_scroll = VerticalScroll.New()
    self.rs_scroll:SetUpdateCount(15)
    self.rs_scrollView = rc:GetObject("ScrollView"):GetComponent("ScrollRect")
    self.rs_list = {}
    self.rs_content = rc:GetObject("Content").transform
    self.rs_btn = rc:GetObject("ResolveButton")
    self.rs_hint = rc:GetObject("Hint")
    self.rs_holdNumTxt = rc:GetObject("HoldNum"):GetComponent("Text")
    self.rs_screenBtn = rc:GetObject("ScreenButton")
    self.rs_sortBtn = rc:GetObject("SortButton")
    self.ShowNumText  = rc:GetObject("ShowNumText")
    self.SandImage = rc:GetObject("SandImage"):GetComponent("Image")
    self.rs_clearButton = rc:GetObject("ClearButton")
    self.rs_quickFilterButton = rc:GetObject("QuickFilterButton")
    self.rs_cancelButton = rc:GetObject("CancelButton")
    UIUtil.SetSprite(self.SandImage,AtlasConfig.Item, GetItemIcon(Z_Item[FIGHT_SOUL_DECOMPOSE_SHOW_ITEM_ID]))

    UIUtil.AddBtnEvent(self.rs_screenBtn,function()OnScreenButton(self) end)
    UIUtil.AddBtnEvent(self.rs_sortBtn,function()OnSortButton(self) end)
    UIUtil.AddBtnEvent(self.rs_btn,function()OnResolveButton(self) end)
    UIUtil.AddBtnEvent(self.rs_clearButton,function()OnClearButton(self) end)
    UIUtil.AddBtnEvent(self.rs_quickFilterButton,function()OnQuickFilterButton(self) end)
    UIUtil.AddBtnEvent(self.rs_cancelButton,function() self.OnDecompose(self, false) end) -- fightSoulMain中的func

    self.rs_scroll:Clear()
    self.rs_scroll:ScrollInit(self.rs_list, self.rs_scrollView, pfbName, function (arg)
        local gameObject = arg.go
        local fightSoul = arg.data
        local select = gameObject.transform:Find("Select").gameObject
        LangUtil.GetSpriteLang(52, function(sprite) select:GetComponent("Image").sprite = sprite end)
        UIUtil.AddBtnEvent(gameObject,function()
            OnFightSoulItem(self,fightSoul.Id)
            select:SetActive(table.first(self.rs_Ids,function(v) return v == fightSoul.Id  end))
            --self.rs_scroll:RefreshData(self.rs_list)
        end)
        UIPublic.InitVsFightSoulItemMId(fightSoul,gameObject.transform)
        -- UIPublic.InitFightSoulHolder(holderAvatar,fightSoul,nil,true)
        select:SetActive(table.first(self.rs_Ids,function(v) return v == fightSoul.Id  end))
        --gameObject.transform.localScale = Vector2.New(0.61,0.61)
    end)
end



function this.OnFightSoulDataUpdate(self)
    if self.rs_init then
        -- this.QuickFilter(self)
        InitNumTxt(self)
        this.InitButton(self)
        self.rs_init = true
        this.InitFightSoulListData(self)
        this.InitFightSoulList(self)
    end
end

function this.OnDisable(self)
    if  self.rs_init then
        --self.rs_scroll:Dispose()
        self.rs_init = false
    end
    screenTypes = {star = 0,rare = 0,isEquip = 0, isLevelUp = 0}
    recordOrder.order = 1
end
function this.OnDestroy(self)
    self.rs_scroll:Dispose()
end

return this
