---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/22 9:52
---
---@class UIFightSoulMainView : UIBaseView
---@field model UIFightSoulMainModel
---@field contentType number @ 组件类型(分为多种显示)
---@field classButtonList table @ 左侧标签栏 key - value:按钮GameObject
---@field fightSoulShowList table<number, FightSoul>
local UIFightSoulMainView = BaseClass("UIFightSoulMainView",UIBaseView)
local this = UIFightSoulMainView
local base = UIBaseView

-- local isDecompose
-- local DecomposeLogic = require "UI.UIFightSoul.View.UIFightSoulMainDecomposeSubView"

local FIGHT_SOUL_CAPACITY_ITEM_SHOP_ID = tonumber(Z_Misc["FIGHT_SOUL_CAPACITY_ITEM_DATA"].Value[1])
local FIGHT_SOUL_CAPACITY_ITEM_ID = tonumber(Z_Misc["FIGHT_SOUL_CAPACITY_ITEM_DATA"].Value[2])

local recordOrder = {order = 1,kind = 1, lockFirst = true}  --是否正序  顺序类型 优先显示锁定的
local screenTypes = {
    --- 职业
    abiliType = 0,
    --- 星级
    star = 0, 
    --- 稀有度
    rare = 0,
    --- 是否装备
    isEquip = 0
}


local ContentType = {
    NORMAL = 1,
    SMALL  = 2,
}
local ContentParam = {
    [ContentType.NORMAL] = {
        prefabName = "FightVisitItem",
        func = UIPublic.InitVsFightSoulItem,
        childIndex = 0, --- 需要显示在 Thumbnail 下第几个image
    },
    [ContentType.SMALL] = {
        prefabName = "FightVisitItemMid",
        func = UIPublic.InitVsFightSoulItemMId,
        childIndex = 1, --- 需要显示在 Thumbnail 下第几个image
    }
}

local OnClickLeftBtn
local OnChangeLeftBtn
local SetActive

local InitContentData
local RefreshContent
local OnScreen
local OnSort
local OnChangeItemThumbnail
local OnAdd
local RefreshContentThumbnail
local OnFightSoulItem
local InitFightSoulItemData

--- 生命周期 ---

function this.OnLangCreate(self)
    -- 左侧标签栏
    local root1 = self.langRc:GetObject("LeftBtnCtrl").transform
    for i = 0, root1.childCount-1 do
        UIPublic.SetClassSprite(root1:GetChild(i):Find("Image"):GetComponent("Image"), i, false)
        UIPublic.SetClassSprite(root1:GetChild(i):Find("Active/Image"):GetComponent("Image"), i, true)
    end

    local holdNum = self.langRc:GetObject("HoldNum").transform
    local screenBtn = self.langRc:GetObject("ScreenButton").transform
    local sorBtn = self.langRc:GetObject("SortButton").transform
    
    LangUtil.BindText(screenBtn:Find("Text")).text = LangUtil.GetSysLang(155)
    LangUtil.BindText(sorBtn:Find("Text"))
    LangUtil.BindText(holdNum:Find("HoldNumText")).text = LangUtil.GetSysLang(354)
    LangUtil.BindText(holdNum:Find("HoldNumValue"), FontType.All_Number)
    LangUtil.BindText(self.langRc:GetObject("DecomposeText")).text = LangUtil.GetSysLang(1246)

    -- DecomposeLogic.OnLangCreate(self, self.decomposePanel)
end

---@param self UIFightSoulMainView
function this.OnCreate(self)
    base.OnCreate(self)

    -- isDecompose = false
    self.listPanel = self.rc:GetObject("ListPanel")
    -- self.decomposePanel = self.rc:GetObject("DecomposePanel")
    -- DecomposeLogic.OnCreate(self, self.decomposePanel)
    
    self.listPanel:SetActive(true)
    -- self.decomposePanel:SetActive(false)
    self.contentType = ContentType.NORMAL
    self.classButtonList = {}

    UIPublic.SetBackButton(
        self.rc:GetObject("ReturnButton"),
        UIWindowNames.UIFightSoulMain,
        486
    )

    local leftBtnCtrl = self.rc:GetObject("LeftBtnCtrl").transform
    for i = 0, leftBtnCtrl.childCount - 1 do
        local child =  leftBtnCtrl:GetChild(i)
        local btn = child.gameObject
        self.classButtonList[i] = btn
        UIUtil.AddBtnEvent(btn,function (go)
            if self.clickTabTime ~= nil and TimeUtil.GetServerTime() - self.clickTabTime < ClickTimeInterval then
                return
            end
            self.clickTabTime = TimeUtil.GetServerTime()
            OnClickLeftBtn(self, i)
        end)
    end

    self.vs_scroll = VerticalScroll.New()
    self.vs_scroll:SetUpdateCount(15)
    self.vs_scrollView = self.rc:GetObject("Scroll View"):GetComponent("ScrollRect")
    self.fightSoulShowList ={}
    self.vs_content = self.rc:GetObject("Content").transform:GetComponent("RectTransform")
    self.contentMin = self.rc:GetObject("ContentMin").transform:GetComponent("RectTransform")
    self.vs_holdTextValue = self.rc:GetObject("HoldNumValue"):GetComponent("Text")
    self.vs_screenBtn = self.rc:GetObject("ScreenButton")
    self.vs_sortBtn = self.rc:GetObject("SortButton")
    self.thumbnailButton = self.rc:GetObject("ThumbnailButton")
    self.decomposeButton = self.rc:GetObject("DecomposeButton")
    self.vs_hint = self.rc:GetObject("Hint")
    self.addButton = self.rc:GetObject("AddButton")

    for key, value in pairs(ContentParam) do
        value.imageObject = self.thumbnailButton.transform:GetChild(value.childIndex).gameObject
    end

    UIUtil.AddBtnEvent(self.vs_screenBtn, function() OnScreen(self) end)
    UIUtil.AddBtnEvent(self.vs_sortBtn, function() OnSort(self) end)
    UIUtil.AddBtnEvent(self.thumbnailButton, function() OnChangeItemThumbnail(self) end)
    UIUtil.AddBtnEvent(self.decomposeButton, function()
        -- this.OnDecompose(self, true)
        UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulDecompose)
    end)
    UIUtil.AddBtnEvent(self.addButton, function() OnAdd(self) end)

    RefreshContentThumbnail(self)

    --todo: 新手引导
end

function this.OnEnable(self)
    base.OnEnable(self)
    self:OnRefresh()
end

---@param self UIFightSoulMainView
function this.OnRefresh(self)
    this.RefreshSortButton(self)
    self.vs_holdTextValue.text = table.count(self.model.fightSoulList).."/"..Game.Scene.Player:GetComponent("FightSoulComponent"):GetBagCapacity()
    this.RefreshFightSoulListData(self)
    this.RefreshFightSoulList(self)

    -- 判断上限, 是否显示 self.addButton
end

local function OnFightSoulDataUpdate(self)
    self:OnRefresh()
    -- DecomposeLogic.OnFightSoulDataUpdate(self)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_FIGHTSOUL_DATA_UPDATE, OnFightSoulDataUpdate)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_FIGHTSOUL_DATA_UPDATE)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    -- UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    -- UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self)
    -- DecomposeLogic.OnDisable(self)
    -- local window = UIManager:GetInstance():GetWindow(UIWindowNames.UIFightSoulList)
    -- if window ~= nil then
    --     window.View:ResetOrder()
    -- end
end

function this.OnDestroy(self)
    base.OnDestroy(self)
    -- DecomposeLogic.OnDestroy(self)
    self.vs_scroll:Dispose()
end

--- 内部函数 ---

---@param class number @ 0 - all, 1-6 对应职业枚举
function OnClickLeftBtn(self, class)
    if screenTypes.abiliType == class then
        return
    end
    screenTypes.abiliType = class

    this.RefreshFightSoulListData(self, true)
    this.RefreshFightSoulList(self)

    for key, value in pairs(self.classButtonList) do
        SetActive(value, key == class)
    end
end

---@param class number @ 0 - all, 1-6 对应职业枚举
function OnChangeLeftBtn(self, class)
    local showClass = class
    if showClass > 6 then
        showClass = 0
    end
    for key, value in pairs(self.classButtonList) do
        SetActive(value, key == showClass)
    end
end

function SetActive(btn, bool)
    local transform = btn.transform
    transform:Find("Active").gameObject:SetActive(bool)
    transform:GetComponent("Button").enabled = (not bool)
end

function OnScreen(self)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    local oldClass = screenTypes.abiliType
    uiData.callBack = function(list,kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        local newClass = screenTypes.abiliType
        if oldClass ~= newClass then
            OnChangeLeftBtn(self, newClass)
        end
        this.RefreshFightSoulListData(self)
        this.RefreshFightSoulList(self)
        --self.vs_scrollView.verticalScrollbar.value = 1
        self.vs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulSort,uiData)
end


function OnSort(self)
    recordOrder.order = (recordOrder.order == 1 and {2}or {1})[1]
    this.RefreshSortButton(self)
    this.RefreshFightSoulListData(self)
    this.RefreshFightSoulList(self)
end

---@param self UIFightSoulMainView
function OnChangeItemThumbnail(self)
    if self.contentType == ContentType.NORMAL then
        self.contentType = ContentType.SMALL
    elseif self.contentType == ContentType.SMALL then
        self.contentType = ContentType.NORMAL
    else
    end

    for key, value in pairs(ContentParam) do
        value.imageObject:SetActive(key == self.contentType)
    end

    RefreshContentThumbnail(self)
end

-- ---@param self UIFightSoulMainView
-- function this.OnDecompose(self, isBool)
--     -- isDecompose = isBool
--     -- if isDecompose then
--         -- self.decomposePanel:SetActive(true)
--         -- self.listPanel:SetActive(false)
--         -- DecomposeLogic.Init(self)
--     -- else
--         -- self.decomposePanel:SetActive(false)
--         self.listPanel:SetActive(true)
--     -- end
-- end

function OnAdd(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIAllShop, {
        ShopTitleType = ShopTitleType.General,
        GeneralShopType = GeneralShopType.Normal, -- 非GeneralShop不用填
    })
end

---@param self UIFightSoulMainView
function RefreshContentThumbnail(self)
    if self.contentType == ContentType.NORMAL then
        self.vs_scrollView.content = self.vs_content
    elseif self.contentType == ContentType.SMALL then
        self.vs_scrollView.content = self.contentMin
    else
    end

    self.vs_scroll:Clear()
    self.vs_scroll:ScrollInit(self.fightSoulShowList, self.vs_scrollView, ContentParam[self.contentType].prefabName, function (arg)
        local gameObject = arg.go
        local fightSoul = arg.data
        InitFightSoulItemData(self,fightSoul,gameObject.transform)
        UIUtil.AddBtnEventNoBug(gameObject, function() OnFightSoulItem(self,fightSoul.Id)  end)
    end)
end

--- 刷新排序按钮显示
---@param self UIFightSoulMainView
function this.RefreshSortButton(self)
    local txt = self.vs_sortBtn.transform:Find("Text"):GetComponent("Text")
    txt.text = (recordOrder.order == 1 and {LangUtil.GetSysLang(154)} or {LangUtil.GetSysLang(153)})[1]
    for k,v in pairs(self.classButtonList) do
        SetActive(v, k == screenTypes.abiliType)
    end
    --self.vs_scrollView.verticalScrollbar.value = 1
end

---@param self UIFightSoulMainView
function this.RefreshFightSoulListData(self, hasAllFightSoul)
    if hasAllFightSoul == nil then hasAllFightSoul = false end
    self.fightSoulShowList = {}
    local fightSouls = {}
    for k,v in table.pairsByKeys(self.model.fightSoulList) do
        if v.config.ClassLimit ~= nil and table.count(v.config.ClassLimit) > 1 then
            table.insert(fightSouls, v)
        end
        table.insert(self.fightSoulShowList,v)
    end
    self.fightSoulShowList = UIPublic.FightSoulScreenFunc(self.fightSoulShowList,screenTypes)
    if hasAllFightSoul then
        local ids = {}
        for i, v in ipairs(self.fightSoulShowList) do
            table.insert(ids, v.Id)
        end
        for i, v in ipairs(fightSouls) do
            if not table.contains(ids, v.Id) then
                table.insert(self.fightSoulShowList, v)
            end
        end
    end
    table.sort(self.fightSoulShowList, function(a,b) return UIPublic.FightSoulSortFunc(a,b,recordOrder)end )

    if recordOrder.order ~= 1 then
        self.fightSoulShowList = table.reverseTable(self.fightSoulShowList)
    end
end

---@param self UIFightSoulMainView
function this.RefreshFightSoulList(self)
    self.vs_hint:SetActive(table.count(self.fightSoulShowList) == 0)
    self.ids = {}
    for k,v in pairs(self.fightSoulShowList) do
        table.insert(self.ids,v.Id)
    end
    self.vs_scroll:RefreshData(self.fightSoulShowList)
end

function OnFightSoulItem(self,id)
    local fightSoul = Game.Scene.Player:GetComponent("FightSoulComponent"):Get(id)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIFightSoulInfo,{
        idList = self.ids,
        id = id,
    })
end

---@param self UIFightSoulMainView
function InitFightSoulItemData(self,fightSoul,transform,isRefresh)
    ContentParam[self.contentType].func(fightSoul,transform,isRefresh)
    -- UIPublic.InitVsFightSoulItem(fightSoul,transform,isRefresh)
end
return this
