---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

local UILive2dView = BaseClass("UILive2dView",UIBaseView)
local base = UIBaseView
local this = UILive2dView

local maxScale = 2
local minScale = 0.5
local currentScale = 1

Live2DType = {
    Home = 1,
    Room = 2,
}

local buysing = false

local currentSelectId
local currentSkinId

local pfbName = "ChangeSkinItem"

local function ActiveButton(self,button,bool)
    button:SetActive(true)
    local transform = button.transform
    local on = transform:Find("On").gameObject
    local off = transform:Find("Off").gameObject
    on:SetActive(bool)
    off:SetActive(not bool)
end

local function State0Set(self)
    ActiveButton(self,self.moveBtn,false)
    ActiveButton(self,self.scaleBtn,false)
    -- self.saveBtn:SetActive(false)
    -- self.resetBtn:SetActive(false)


    self.leanPinchScale.enabled = false
    self.leanDragTranslate.enabled = false

    buysing = true
    self.touchRect:DOMove(self.resetPos,0.2).onComplete = function()
        buysing = false
    end 
    self.touchRect:DOScale(Vector2.New(1,1),0.2)
end

local function State1Set(self)
    -- self.saveBtn:SetActive(true)
    -- self.resetBtn:SetActive(true)
    -- self.scaleBtn:SetActive(false)
    --ActiveButton(self,self.moveBtn,true)

    self.leanPinchScale.enabled = false
    self.leanDragTranslate.enabled = false

    buysing = true
    self.touchRect:DOScale(self.resetScale,0.2).onComplete =function()
        buysing = false
        self.leanPinchScale.enabled = true
        self.leanDragTranslate.enabled = true
    end
end

local function State2Set(self)
    -- self.saveBtn:SetActive(false)
    -- self.resetBtn:SetActive(false)
    -- self.moveBtn:SetActive(false)
    ActiveButton(self,self.scaleBtn,true)

    self.leanPinchScale.enabled = false
    self.leanDragTranslate.enabled = false

    buysing = true
    self.touchRect:DOScale(self.resetScale,0.2).onComplete = function()
        buysing = false
        self.leanPinchScale.enabled = true
        self.leanDragTranslate.enabled = true
    end
end

local function OnClickCard(self)
    if self.state == 0 or self.state == 2 then
        coroutine.start(function()
            self.model.info.uiDrawing:CoClick()
        end)
    end
end

local function SetClickEvent(self,_bool)
    if _bool then
        EventTriggerListener.Get(self.eventBg).onLuaClick = function()OnClickCard(self) end
    else
        EventTriggerListener.Get(self.eventBg).onLuaClick = nil
    end
end

local function InitState(self)
    SetClickEvent(self,self.state == 0)
    if self.state == 0 then
        State0Set(self)
    elseif self.state == 1 then
        State1Set(self)
    elseif self.state == 2 then
        State2Set(self)
    end
end

local function OnReset(self) --重置
    --if buysing then return end
    -- self.saveBtn:SetActive(true)
    -- self.resetBtn:SetActive(true)
    -- self.scaleBtn:SetActive(false)
    --ActiveButton(self,self.moveBtn,true)

    self.leanPinchScale.enabled = false
    self.leanDragTranslate.enabled = false
    local pos
    if self.liveType == Live2DType.Home then
        pos = Vector2.New(-2.9,0)
    elseif self.liveType == Live2DType.Room then
        pos = Vector2.New(0,0)
    end
    buysing = true
    self.touchRect:DOMove(pos,0.2).onComplete = function()
        buysing = false
        self.leanPinchScale.enabled = true
        self.leanDragTranslate.enabled = true
    end
    self.touchRect:DOScale( Vector2.New(1,1),0.2)

    currentScale = 1
    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("Slider").value = currentScale
end

local function OnSave(self) --保存
    -- if buysing then return end 
    
    -- local transform = self.touch.transform
    -- local pos = transform.position
    -- if self.liveType == Live2DType.Home then
    --     self.clientData:SetHomeCardRect({posX = pos.x, posY = pos.y,scale = transform.localScale.x})
    -- elseif self.liveType == Live2DType.Room then
    --     self.clientData:SetRoomCardRect({posX = pos.x, posY = pos.y,scale = transform.localScale.x})
    -- end
    local transform = self.touch.transform
    local pos = transform.position

    PublicRequest.SendRequest(PROTOCOL.SetShowGirlReq, {
        show_girl = {
            character_id = Game.Scene.Player.ShowGirlInfo.character_id,
            skin_id = Game.Scene.Player.ShowGirlInfo.skin_id,
            pos_x = pos.x,
            pos_y = pos.y,
            scale = currentScale
        }
    },
    function (resp)
        if resp == nil then
            return
        end
        UIManager:GetInstance():CloseWindow(UIWindowNames.UILive2d)
    
        Game.Scene.Player.ShowGirlInfo = resp.show_girl
        local showgirlInfo = Game.Scene.Player.ShowGirlInfo

        local info = {
            cardInfoChgType = CardInfoChgType.Skin,
            cardId = showgirlInfo.skin_id
        }

        DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG, info)

        self.model.info.uiDrawing.showType = ShowGirlShowType.Customize

        coroutine.start(function()
            self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

            local zSkin = Z_Skin[showgirlInfo.skin_id]
            if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
            end
        end)
    end)
end

local function OnCancel(self)
    local pos = Vector2.New(Game.Scene.Player.ShowGirlInfo.pos_x,Game.Scene.Player.ShowGirlInfo.pos_y)
    buysing = true
    self.touchRect:DOMove(pos,0.2).onComplete = function()
        buysing = false
        self.leanPinchScale.enabled = true
        self.leanDragTranslate.enabled = true
    end
    self.touchRect:DOScale( Vector2.New(Game.Scene.Player.ShowGirlInfo.scale,Game.Scene.Player.ShowGirlInfo.scale),0.2)

    currentScale = Game.Scene.Player.ShowGirlInfo.scale
    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("Slider").value = currentScale
end

local function OnScale(self) --开启不保存
    if buysing then return end
    if Input.touchCount ~= nil and Input.touchCount > 1 then
        return
    end
    self.state = (self.state == 0 and {2} or {0})[1]
    InitState(self)
end

local function OnMove(self) --开启可保存
    if buysing then return end
    if Input.touchCount ~= nil and Input.touchCount > 1 then
        return
    end
    self.state = (self.state == 0 and {1} or {0})[1]
    InitState(self)
end

local function OnTouch(self)
    if buysing then return end
    if Input.touchCount ~= nil and Input.touchCount > 1 then
        return
    end
    if self.state == 0 or self.state == 2 then
        coroutine.start(function()
            self.model.info.uiDrawing:CoClick()
        end)
    end
end

local function RefreshCharacterIcon(self)
    local cardList = Game.Scene.Player:GetComponent("CardComponent").Cards

    self.list = {}
    for k,v in table.pairsByKeys(cardList) do
        table.insert(self.list,v)
    end

    table.sort(self.list, function(a,b) return UIPublic.SortFunc(a,b,{order = 1,kind = 2})end )

    for index, characterInfo in ipairs(self.list) do
        local characterIconButton = self.characterItemPool[index]
        if characterIconButton == nil then
            characterIconButton = CS.UnityEngine.GameObject.Instantiate(self.characteritem)
            characterIconButton:SetActive(true)

            characterIconButton.transform:SetParent(self.characteritem.transform.parent)
            characterIconButton.transform.localPosition = Vector3.New(0,0,0)
            characterIconButton.transform.localScale = Vector3.New(1,1,1)
            self.characterItemPool[index] = characterIconButton

            UIUtil.NewSetCardSprite(characterIconButton.transform:Find("BG/HeadIcon"):GetComponent("Image"), 
                characterInfo.Id, characterInfo.SkinId, CardPictureType.Little)

            characterInfo.isSelected = (currentSelectId == characterInfo.Id)
            local isSelect = characterIconButton.transform:Find("Select")
            isSelect.gameObject:SetActive(characterInfo.isSelected)
            UIUtil.AddBtnEvent(characterIconButton.transform:Find("BG/HeadIcon"),function()
                characterIconButton.transform:Find("Select").gameObject:SetActive(true)
                currentSelectId = characterInfo.Id
                currentSkinId = characterInfo.SkinId
                this.RefreshCharacter(self)

                coroutine.start(function()
                    self.model.info.uiDrawing:CoPlayImage(currentSelectId, currentSkinId)
                    self.pic.gameObject:SetActive(true)
                    self.model.info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)

                    local zSkin = Z_Skin[currentSkinId]
                    if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                        self.model.info.uiDrawing:ChangeMode(currentSelectId, currentSkinId)
                        self.pic.gameObject:SetActive(false)
                    end
                end)
            end)
        else
            characterIconButton:SetActive(true)
            characterInfo.isSelected = (currentSelectId == characterInfo.Id)
            local isSelect = characterIconButton.transform:Find("Select")
            isSelect.gameObject:SetActive(characterInfo.isSelected)
        end
    end
end

function this.RefreshCharacter(self)
    for index, characterInfo in ipairs(self.list) do
        local characterIconButton = self.characterItemPool[index]
        local isSelect = (characterInfo.Id == currentSelectId)
        characterIconButton.transform:Find("Select").gameObject:SetActive(isSelect)
        characterInfo.isSelected = isSelect
    end
end

function this.InitContent(self)
    ListChildPool:GetInstance():ClearContent(self.sk_content)
    self.sk_content.localPosition = Vector3.zero
    local zSkins = table.choose(Z_Skin,function(k,v) return v.CharacterId == currentSelectId end)
    local tempSkins = {}
    table.walk(zSkins, function (k, v) 
        tempSkins[v.SortId] = v
    end)
    self.sk_objects = {}
    coroutine.start(function()
        table.walk(tempSkins,function (k, v)
            ListChildPool:GetInstance():GetChild(pfbName,self.sk_content,function(go)
                if self.active == false then ListChildPool:GetInstance():Remove(go) return end
                local transform = go.transform
                self.sk_objects[v.Id] = go
                this.InitItemData(self, transform, v.Id)
                local icon = transform:Find("Icon/Root/Value"):GetComponent("Image")
                UIUtil.NewSetCardSprite(icon, currentSelectId, v.Id, CardPictureType.Big)
                UIUtil.AddBtnEvent(go,function() this.OnItem(self,v)  end)
            end)
        end)
    end)
    this.OnItem(self,tempSkins[1])
end

function this.OnItem(self,zSkin)
    self.sk_nameTxt.text = zSkin.Name
    for k,v in pairs(self.sk_objects) do
        -- local select = v.transform:Find("Select").gameObject
        -- select:SetActive(k == currentSkinId)
        local select1 = v.transform:Find("Select1").gameObject
        select1:SetActive(k == zSkin.Id)
    end

    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    local showgirlInfo = this.ReturnCurrntShowGirlInfo(self)
    local skin = cardComponent.UnLockSkinList[zSkin.Id]
    if zSkin.Id == showgirlInfo.skin_id then -- 选中了已经设置的皮肤
        UIPublic.InitButton(self.sk_confirmBtn, false)
    elseif skin ~= nil then -- 当前并未设置，且是皮肤时
        UIPublic.InitButton(self.sk_confirmBtn, skin ~= nil)
        if skin ~= nil then -- 有该皮肤
            UIUtil.AddBtnEvent(self.sk_confirmBtn,function()
                this.OnExChange(self, zSkin.Id)
            end)
        else -- 没有该皮肤
            -- if zSkin.MarryUnlock == 1 then -- 需要结婚才能解锁
            --     self.sk_btn.enabled = false
            --     self.sk_btnImg.material =DeActiveMat
            --     LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(220)
            -- else
            --     LangUtil.BindText(self.sk_btnTxt).text = LangUtil.GetSysLang(223)
            --     UIUtil.AddBtnEvent(self.sk_confirmBtn,function()OnBuy(self,zSkin.Id) end)
            -- end
        end
    else -- 当前并未设置，且不是皮肤时
        UIPublic.InitButton(self.sk_confirmBtn, false)
    end

    self.sk_selectId = zSkin.Id
    self.model.info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)

    coroutine.start(function()
        self.model.info.uiDrawing:CoPlayImage(zSkin.CharacterId, zSkin.Id)
        self.pic.gameObject:SetActive(true)
        --self.model.info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)

        local zSkin = Z_Skin[zSkin.Id]
        if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
            self.model.info.uiDrawing:ChangeMode(zSkin.CharacterId, zSkin.Id)
        end
    end)
    -- coroutine.start(function()
    --     InitSsUnit(self, zSkin.Id)
    -- end)
end

function this.InitItemData(self,transform,skinId)
    local select = transform:Find("Select").gameObject
    local select1 = transform:Find("Select1").gameObject
    local defaultPic = transform:Find("defaultPic").gameObject
    local Icon = transform:Find("Icon").gameObject
    local nameTxt = LangUtil.BindText(transform:Find("Name"))
    local lock = transform:Find("Lock").gameObject
    local lockTxt =  LangUtil.BindText(transform:Find("Lock/Text"))
    local IsUsed = transform:Find("IsUsed").gameObject
    LangUtil.BindText(transform:Find("Select/Image/Text")).text=LangUtil.GetSysLang(221)
    
    local zSkin = Z_Skin[skinId]
    defaultPic:SetActive(false)
    Icon:SetActive(true)
    
    nameTxt.text = zSkin.Name
    local cardComponent =  Game.Scene.Player:GetComponent("CardComponent")
    
    local skin = cardComponent.UnLockSkinList[skinId]
    if skin == nil then
        lockTxt.text = LangUtil.GetSysLang(220) 
        lock:SetActive(true)
    else
        lockTxt.text = ""
        lock:SetActive(false)
    end

    select:SetActive(false)
    select1:SetActive(currentSelectId * 100 + 1 == skinId)
    local skin
    if self.model.info.showGirlUIType == ShowGirlUIType.Character then
        skin = Game.Scene.Player.ShowGirlInfo.skin_id
    elseif self.model.info.showGirlUIType == ShowGirlUIType.PlayerInfo then
        skin = Game.Scene.Player.SocietyShowGirl.skin_id
    end

    IsUsed:SetActive(skin == skinId)
    nameTxt.text = zSkin.Name
end

function this.OnExChange(self, skinId)
    local SpineScale = Z_SkinOriginalOffset[skinId].SpineScale
    --local SpineOffset = Z_SkinOriginalOffset[skinId].SpineOffset
    if self.model.info.showGirlUIType == ShowGirlUIType.Character then
        PublicRequest.SendRequest(PROTOCOL.SetShowGirlReq, {
            show_girl = {
                character_id = currentSelectId,
                skin_id = skinId,
                pos_x = -2.9,
                pos_y = 0,
                scale = 1 --* SpineScale[1]
            }
        },
        function (resp)
            if resp == nil then
                return
            end
            UIManager:GetInstance():CloseWindow(UIWindowNames.UILive2d)
        
            Game.Scene.Player.ShowGirlInfo = resp.show_girl
            local showgirlInfo = Game.Scene.Player.ShowGirlInfo

            local info = {
                cardInfoChgType = CardInfoChgType.Skin,
                cardId = showgirlInfo.skin_id
            }

            DataManager:GetInstance():Broadcast(DataMessageNames.ON_CARD_INFO_CHG, info)

            self.model.info.uiDrawing.showType = ShowGirlShowType.Customize
            coroutine.start(function()
                local zSkin = UIPublic.GetSkin(showgirlInfo.skin_id, showgirlInfo.skin_id)
                if zSkin.IsSpine == 1 then -- 有spine直接播spine
                    self.model.info.uiDrawing.showMode = 1
                    ClientData:GetInstance():SetHomeLive2DMode(1)
                    self.model.info.uiDrawing:PlaySpine(showgirlInfo.character_id, showgirlInfo.skin_id)
                else
                    self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

                    local zSkin = Z_Skin[showgirlInfo.skin_id]
                    if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                        self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
                    end
                end
            end)
        end)
    elseif self.model.info.showGirlUIType == ShowGirlUIType.PlayerInfo then
        PublicRequest.SendRequest(PROTOCOL.SetSocietyShowGirlReq, {
            show_girl = {
                character_id = currentSelectId,
                skin_id = skinId,
                pos_x = 0,
                pos_y = 0,
                scale = 1
            }
        },
        function (resp)
            UIManager:GetInstance():CloseWindow(UIWindowNames.UILive2d)
            Game.Scene.Player.SocietyShowGirl = resp.show_girl
            local showgirlInfo = Game.Scene.Player.SocietyShowGirl
            coroutine.start(function()
                self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

                local zSkin = Z_Skin[showgirlInfo.skin_id]
                if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                    self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
                end
            end)
        end)
    end
end

function this.ReturnCurrntShowGirlInfo(self)
    local showgirlInfo
    if self.model.info.showGirlUIType == 1 then
        showgirlInfo = Game.Scene.Player.ShowGirlInfo
    elseif self.model.info.showGirlUIType == 2 then
            showgirlInfo = Game.Scene.Player.ShowGirlInfo
    elseif self.model.info.showGirlUIType == 3 then
        showgirlInfo = Game.Scene.Player.SocietyShowGirl
    end
    return showgirlInfo
end

local function onChangeSlider(self, value)
    if value == nil then
        return
    end
    self.scaleText.text = string.format("%.1f", value)
    self.touchRect:DOScale( Vector2.New(value,value),0.2)
    currentScale = value
end

local function onMoveSlider(self, value)
    self.leanPinchScale.enabled = value
    self.leanDragTranslate.enabled = value
    print(value)
end

function this.OnCreate(self)
    base.OnCreate(self)
    self.eventBg = self.rc:GetObject("EventBg")
    self.pic = self.rc:GetObject("Pic"):GetComponent("Image")
    self.sinePic = self.rc:GetObject("SpinePic").transform
    self.ui = self.rc:GetObject("UI")
    local backBtn = self.rc:GetObject("BackButton")
    self.touch = self.rc:GetObject("MainTouch")
    self.touchRect = self.touch:GetComponent("RectTransform")

    self.scaleBtn = self.rc:GetObject("ScaleButton")
    self.moveBtn = self.rc:GetObject("MoveButton")
    self.resetBtn = self.rc:GetObject("ResetButton")
    self.saveBtn = self.rc:GetObject("SaveButton")
    self.cancelBtn = self.rc:GetObject("PosCancelButton")
    
    self.leanPinchScale = self.touch:GetComponent("LeanPinchScale") --缩放组件
    self.leanDragTranslate = self.touch:GetComponent("LeanDragTranslate") --移动组件
    self.leanDragTranslate.moveState = 2

    self.leanPinchScale.maxScale = maxScale
    self.leanPinchScale.minScale = minScale

    self.changeSkinUI = self.rc:GetObject("ChangeSkinUI")
    self.changeScaleUI = self.rc:GetObject("ChangeScaleUI")
    self.changeCharacterUI = self.rc:GetObject("ChangeCharacterUI")

    self.characteritem = self.rc:GetObject("Characteritem")
    self.characteritem:SetActive(false)
    self.characterConfirmBtn = self.rc:GetObject("ConfirmButton")
    self.characterCancelBtn = self.rc:GetObject("CancelButton")

    self.characterItemPool = {}
    self.sk_objects = {}

    self.sk_content = self.rc:GetObject("Content").transform
    self.sk_confirmBtn = self.rc:GetObject("ConfirmSkinButton")
    self.sk_cancelBtn = self.rc:GetObject("CancelSkinButton")
    self.sk_btn = self.sk_confirmBtn:GetComponent("Button")
    self.sk_btnTxt = self.sk_confirmBtn.transform:Find("Text"):GetComponent("Text")
    self.sk_btnImg = self.sk_confirmBtn:GetComponent("Image")
    self.sk_nameTxt = self.rc:GetObject("SkinName"):GetComponent("Text")

    self.scaleText = self.rc:GetObject("ScaleText"):GetComponent("Text")

    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("MySlider").onValueChanged:AddListener(
        function (val) onChangeSlider(self, val)
    end)

    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("MySlider").DragStart:AddListener(
        function () onMoveSlider(self, false)
    end)

    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("MySlider").DragStop:AddListener(
        function () onMoveSlider(self, true)
    end)

    local backCallBack = function()
        local showgirlInfo = this.ReturnCurrntShowGirlInfo(self)
        self.model.info.uiDrawing.showType = ShowGirlShowType.Customize
        coroutine.start(function()
            self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

            local zSkin = Z_Skin[showgirlInfo.skin_id]
            if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
            end
        end)
    end
    UIPublic.SetBackButton(
        backBtn,
        UIWindowNames.UILive2d,
        418,
        backCallBack,
        backCallBack
    )

    UIUtil.AddBtnEvent(self.characterCancelBtn,function()
        UIManager:GetInstance():CloseWindow(UIWindowNames.UILive2d)
        local showgirlInfo = this.ReturnCurrntShowGirlInfo(self)
        self.model.info.uiDrawing.showType = ShowGirlShowType.Customize
        coroutine.start(function()
            self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

            local zSkin = Z_Skin[showgirlInfo.skin_id]
            if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
            end
        end)
    end)

    UIUtil.AddBtnEvent(self.characterConfirmBtn,function()
        self.changeSkinUI:SetActive(true)
        self.changeCharacterUI:SetActive(false)
        this.InitContent(self)
    end)

    UIUtil.AddBtnEvent(self.sk_cancelBtn,function()
        self.changeSkinUI:SetActive(false)
        self.changeCharacterUI:SetActive(true)
        local showgirlInfo = this.ReturnCurrntShowGirlInfo(self)
        self.model.info.uiDrawing.showType = ShowGirlShowType.Original
        coroutine.start(function()
            --self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)
            self.model.info.uiDrawing:CoPlayImage(currentSelectId, currentSkinId)

            local zSkin = Z_Skin[showgirlInfo.skin_id]
            if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                self.model.info.uiDrawing:ChangeMode(currentSelectId, currentSkinId)
            end
        end)
    end)

    UIUtil.AddBtnEvent(self.scaleBtn,function()OnScale(self) end)
    UIUtil.AddBtnEvent(self.moveBtn,function()OnMove(self)end)
    UIUtil.AddBtnEvent(self.resetBtn,function()OnReset(self)end)
    UIUtil.AddBtnEvent(self.saveBtn,function()OnSave(self)end)
    UIUtil.AddBtnEvent(self.cancelBtn,function()OnCancel(self)end)
    
    EventTriggerListener.Get(self.touch).onLuaClick = function() OnTouch(self) end
end

function this.OnEnable(self)
    base.OnEnable(self)
    LangUtil.BindText(self.resetBtn.transform:Find("Text"))
    LangUtil.BindText(self.saveBtn.transform:Find("Text"))
    self.clientData = ClientData:GetInstance()

    self.picRootCha = self.model.info.uiDrawing.picRoot
    self.spineRootCha = self.model.info.uiDrawing.spineRoot
    self.linesParentCha = self.model.info.uiDrawing.linesParent
    coroutine.start(function()
        coroutine.waitforframes(2)
        self.model.info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)
    end)
    

    if self.model.info.showGirlUIType == 1 then
        self.state = 0 --1临时修改
        self.changeSkinUI:SetActive(false)
        self.changeScaleUI:SetActive(true)
        self.changeCharacterUI:SetActive(false)
        onMoveSlider(self, true)
    else
        if self.model.info.showGirlUIType == 2 then
            currentSelectId = Game.Scene.Player.ShowGirlInfo.character_id
        elseif self.model.info.showGirlUIType == 3 then
            currentSelectId = Game.Scene.Player.SocietyShowGirl.character_id
        end
        self.state = 0
        self.changeSkinUI:SetActive(false)
        self.changeScaleUI:SetActive(false)
        self.changeCharacterUI:SetActive(true)
        RefreshCharacterIcon(self)
        onMoveSlider(self, false)
    end
      --0初始状态  1 保存状态  2 不保存状态
    local info = self.model.info
    self.liveType = info.liveType
    self.resetPos = info.resetPos  --初始位置
    self.offset = info.offset
    self.resetScale = info.resetScale --初始scale

    self.scaleText.text = string.format("%.1f", info.resetScale)
    self.changeScaleUI.transform:Find("ChangeScale/SliderTest"):GetComponent("Slider").value = info.resetScale
    self.touchRect:DOScale( Vector2.New(info.resetScale,info.resetScale),0)
    
    local _w = CS.UnityEngine.Screen.width
    local _h = CS.UnityEngine.Screen.height
    
    if info.isSpine == 2 then
        local rect = info.image:GetComponent("RectTransform").rect
         _w = rect.width *1.5
         _h = rect.height*1.5
        self.pic.gameObject:SetActive(true)
        self.sinePic.gameObject:SetActive(false)

        local rectTransform = self.pic:GetComponent("RectTransform")
        rectTransform.sizeDelta = info.image:GetComponent("RectTransform").sizeDelta
        rectTransform:DOLocalMove(self.offset,0)
    end
  
    self.touchRect:DOMove(self.resetPos,0)
    self.touchRect:DOScale(self.resetScale,0)
    self.touchRect.sizeDelta = Vector2.New(_w,_h)

    --InitState(self)

    --coroutine.waitforendofframe()
    -- self.picRootCha = self.model.info.uiDrawing.picRoot
    -- self.spineRootCha = self.model.info.uiDrawing.spineRoot
    -- self.linesParentCha = self.model.info.uiDrawing.linesParent
    -- self.model.info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)
    if info.isSpine == 2 then
        self.pic.gameObject:SetActive(true)
        info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)
    elseif info.isSpine == 1 then
        self.sinePic.gameObject:SetActive(true)
        --info.uiDrawing:SetParent(nil, self.sinePic, self.gameObject)
        self.pic.gameObject:SetActive(true)
        info.uiDrawing:SetParent(self.pic, self.sinePic, self.gameObject)
    else
        
    end

    local showgirlInfo = this.ReturnCurrntShowGirlInfo(self)
        self.model.info.uiDrawing:CoPlayImage(showgirlInfo.character_id, showgirlInfo.skin_id)

        local zSkin = Z_Skin[showgirlInfo.skin_id]
            if self.model.info.uiDrawing.showMode == 2 and zSkin.IsSpine == 1 then
                self.model.info.uiDrawing:ChangeMode(showgirlInfo.character_id, showgirlInfo.skin_id)
            end
    
    coroutine.start(function()
        coroutine.waitforframes(2)
        self.ui.transform:SetAsLastSibling()
    end)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
end

function this.OnDisable(self)
    base.OnDisable(self)
    local uiDrawing = self.model.info.uiDrawing
    uiDrawing:SetParent(self.picRootCha, self.spineRootCha, self.linesParentCha)
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

