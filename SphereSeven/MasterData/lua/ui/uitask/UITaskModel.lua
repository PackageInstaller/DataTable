---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UITaskModel : UIBaseModel
local UITaskModel = BaseClass("UITaskModel",UIBaseModel)
local base = UIBaseModel
local this = UITaskModel

local function SortTasks(tasks)
    ---@param a Task
    ---@param b Task
    table.sort(tasks,function(a,b)
        if a.status ~= b.status then
            if a.status == TaskStatus.TaskStatusCompleted then
                -- a 完成, b 其他
                return true
            elseif a.status == TaskStatus.TaskStatusProgressing then
                -- a 进行中.  b 完成(false), 其他(true)
                return b.status ~= TaskStatus.TaskStatusCompleted
            else
                -- a 已领取 排在最后
                return false
            end
        end
        return a.Id < b.Id
    end)
    return tasks
end

function this:OnCreate()
    base.OnCreate(self)
end

function this:OnEnable()
    base.OnEnable(self)
    self:OnRefresh()
end

function this:OnRefresh()
    ---@type TaskComponent
    local taskComponent = Game.Scene.Player:GetComponent("TaskComponent")
    self.Tasks = {}
    self.Tasks[TaskType.TaskTypeDaily] = SortTasks(taskComponent:GetShowList(TaskType.TaskTypeDaily))
    self.Tasks[TaskType.TaskTypeWeekly] = SortTasks(taskComponent:GetShowList(TaskType.TaskTypeWeekly))
    self.Tasks[TaskType.TaskTypeMain] = SortTasks(taskComponent:GetShowList(TaskType.TaskTypeMain))
    self.Tasks[TaskType.TaskTypeAchievement] = SortTasks(taskComponent:GetShowList(TaskType.TaskTypeAchievement))
end

function this:OnRefreshTask(type)
    self:OnRefresh()
    self:UIBroadcast(UIMessageNames.ON_TASK_UPDATE, type)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddDataListener(DataMessageNames.ON_TASK_UPDATE, self.OnRefreshTask)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveDataListener(DataMessageNames.ON_TASK_UPDATE)
end

function this.OnDisable(self)
    base.OnDisable(self)
    
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this
