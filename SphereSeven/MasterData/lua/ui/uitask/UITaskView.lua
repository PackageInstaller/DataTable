---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---
---@class UITaskView : UIBaseView
---@field model UITaskModel
---@field ctrl UITaskCtrl
---@field btn_Tab table<number, UnityEngine.GameObject> @ key: type, value: 按钮的GameObject
local UITaskView = BaseClass("UITaskView",UIBaseView)
local base = UIBaseView
local this = UITaskView
local pfbName = "TaskItem"

local taskCardId={3001,3002,3003,3004,3005,3023,3024,3025,3030,3031}
local taskEquipId={3032,3033}
local TaskKind = {"Daily", "Weekly", "Common", "Competition", "Service", "Activity"}

local GOLD_ID = tonumber(Z_Misc["GOLD_ID"].Value[1])

--- key: index, value: taskType
local TaskTypeIndex = {
    {
        type = TaskType.TaskTypeDaily,
        SysLangKey = 878,
    },
    {
        type = TaskType.TaskTypeWeekly,
        SysLangKey = 879,
    },    
    {
        type = TaskType.TaskTypeMain,
        SysLangKey = 931,
    },    
    {
        type = TaskType.TaskTypeAchievement,
        SysLangKey = 1176,
    },
}

local color1 = Color.New(1,1,1)
local color2 = Color.New(155/255,159/255,180/255)


function this:OnClickTaskButton(Id)
    self.ctrl:CloseSelf()
    loadfunc(Z_UIPanel[Id].OpenCode)
end

function this:OnClickReceiveButton(type,taskId)
    self.ctrl:TaskSubmitReq(type, taskId)
end

function this:OnClickAllReceiveButton(type)
    self.ctrl:TaskSubmitAllReq(type)
end

local function SetButton(transform,Id)
    for i = 0 ,transform.childCount - 1 do
        local child = transform:GetChild(i).gameObject
        child:SetActive(Id == i+1)
    end
end


function this:InitItemData(arg)
    ---@type Task
    local task = arg.data
    local object = arg.go
    local transform = object.transform
    ---@type ReferenceCollector
    local rc = transform:GetComponent("ReferenceCollector")

    local avatar = rc:GetObject("Avatar"):GetComponent("Image")
    local itemBg = rc:GetObject("ItemBg"):GetComponent("Image")
    local itemRoot = rc:GetObject("ItemRoot")

    local slider = rc:GetObject("Slider"):GetComponent("Slider")
    local progress_Text = LangUtil.BindText(rc:GetObject("ProgressText"),FontType.All_Number)
    local des_Text = LangUtil.BindText(rc:GetObject("DesText")) 
    local button = rc:GetObject("Buttons").gameObject
    local itemNum = LangUtil.BindText(rc:GetObject("NumTxt"),FontType.All_Number)
    local hint = rc:GetObject("Hint").gameObject
    hint:SetActive(false)
    -- self.taskHint:GetChild(task.type):GetChild(task.Id):AddObject(hint, "TaskItem")

    button.gameObject:SetActive(true)
   
    des_Text.text = task.config.Desc
    if task.Count > task.target then
        task.Count = task.target
    end
    progress_Text.text = task.Count.."/".. task.target
    slider.value = task.Count / task.target

    if task.status == TaskStatus.TaskStatusReceived then --任务完成 领取完成
        button.gameObject:SetActive(true)
        button:GetComponent("Button").enabled = false
        LangUtil.GetSpriteLang(543, function(sprite) button.transform:GetChild(3):GetComponent("Image").sprite = sprite end)
        SetButton(button.transform,4)
    elseif task.status == TaskStatus.TaskStatusCompleted then --任务完成  未领取
        button.gameObject:SetActive(true)
        button:GetComponent("Button").enabled = true
        LangUtil.BindText(button.transform:Find("Lq/Text")).text= LangUtil.GetSysLang(310)
        UIUtil.AddBtnEvent(button,function(go) self:OnClickReceiveButton(self.currentTaskType, task.Id) button:GetComponent("Button").enabled = false  end)
        SetButton(button.transform,1)
    else --未完成  未领取
        button:GetComponent("Button").enabled = true
        LangUtil.BindText(button.transform:Find("Jx/Text")).text= LangUtil.GetSysLang(309)
        LangUtil.BindText(button.transform:Find("Tz/Text")).text= LangUtil.GetSysLang(309)

        local zLevelJump = Z_LevelJump[task.config.LevelJump[1]]
        if zLevelJump == nil or zLevelJump[1] == nil then
            SetButton(button.transform, nil)
        else
            local isUnlock = UIPublic.CheckJumpLevel(zLevelJump[1].JumpType, zLevelJump[1].Arg1, zLevelJump[1].Arg2)
            local mask = button.transform:Find("Jx/Mask").gameObject
            mask:SetActive(not isUnlock)
            SetButton(button.transform,2)
            UIUtil.AddBtnEventNoBug(button, function()
                if isUnlock then
                    UIPublic.JumpLevel(zLevelJump[1].JumpType, zLevelJump[1].Arg1, zLevelJump[1].Arg2)
                end
            end)
        end
        
        -- if task.Count > 0 then
            
        -- else
        --     SetButton(button.transform,3)
        -- end
    end
    
    local rewards = Z_Reward[task.config.RewardId]
    local id, count, type

    local goldCount, goldType
    if rewards ~= nil then
        for _, value in ipairs(rewards) do
            if value.ObjId ~= GOLD_ID then
                id = value.ObjId
                count = value.Count
                type = value.Type
                break
            else
                goldCount = value.Count
                goldType = value.Type
            end
        end
    end

    if id == nil then
        id = GOLD_ID
        count = goldCount
        type = goldType
    end

    if id == nil then
        itemRoot:SetActive(false)
    else
        itemRoot:SetActive(true)
        UIPublic.InitItemIconNew(avatar, itemBg, type, id, count, true, false)
        itemNum.text = count
    end



    -- local rewardInfo = {}
    -- rewardInfo.TemplateId = zTask.RewardId
    -- rewardInfo.RewardTypeInfo = RewordTypeList[zTask.RewardType]
    -- rewardInfo.Num = zTask.RewardNum
    -- UIUtil.SetRewardInfo(rewardInfo, avatar, {numText = reward_Text}, true)
    -- UIUtil.SetSprite(itemBg,AtlasConfig.ItemBg, Z_Item[zTask.RewardId].IconBg .. ".png")

    -- UIUtil.ScrollText(des_Text, nil, 100)
end

function this:Update()
    if self.refreshTime then
        local seconds
        if self.currentTaskType == TaskType.TaskTypeDaily then
            seconds = TimeUtil.GetWeekLastSeconds()
        elseif self.currentTaskType == TaskType.TaskTypeWeekly then
            seconds = TimeUtil.GetWeekLastSeconds(1)
        else
            seconds = 0
        end

        local tb = TimeUtil.ConvertTimeForm(seconds)
        -- if self.currentTaskType == 6 or self.currentTaskType == 5  then
        --     if tb.day > 0 then
        --         self.timeTxt.text = string.format(LangUtil.GetSysLang(904).." %d"..LangUtil.GetSysLang(2005).." %02d:%02d:%02d", tb.day, tb.hour, tb.minute, tb.second)
        --     else
        --         self.timeTxt.text = string.format(LangUtil.GetSysLang(904).." %02d:%02d:%02d", tb.hour, tb.minute, tb.second)
        --     end
        -- else
            if tb.day > 0 then
                self.timeTxt.text = string.format("%d"..LangUtil.GetSysLang(2005).." %02d:%02d:%02d"..LangUtil.GetSysLang(884), tb.day, tb.hour, tb.minute, tb.second)
            else
                self.timeTxt.text = string.format("%02d:%02d:%02d"..LangUtil.GetSysLang(884), tb.hour, tb.minute, tb.second)
            end
        -- end
    end
    
end

function this:HoldTimeText(type, Num)
    self.holdNum.gameObject:SetActive(type ~= TaskType.TaskTypeDaily and type ~= TaskType.TaskTypeWeekly)
    self.timeNum.gameObject:SetActive(type == TaskType.TaskTypeDaily or type == TaskType.TaskTypeWeekly)
    if type == TaskType.TaskTypeDaily or type == TaskType.TaskTypeWeekly then
        self.refreshTime = UIUtil.GetRefreshTime(type)
        self.timeNumTxt.text = Num.."/".. table.count(self.model.Tasks[type])
    else
        self.holdTxt.text = Num.."/".. table.count(self.model.Tasks[type])
    end
end

function this:OnClickTypeButton(type)
    self.currentTaskType = type
    for k,v in pairs(self.btn_Tab) do
        v.transform:Find("Active").gameObject:SetActive(type == k)
        v.gameObject:GetComponent("Button").enabled  = (not (type == k))
        v.transform:Find("Text"):GetComponent("Text").color = (type == k and {color1} or {color2})[1]
    end

    local hasTaskCompleted = table.any(self.model.Tasks[type],function(v) return v.status == TaskStatus.TaskStatusCompleted  end) --完成未领取
    self.all_Btn.gameObject:SetActive(true)
    UIPublic.InitButton(self.all_Btn, hasTaskCompleted)
    local taskOver = table.choose(self.model.Tasks[type],function(k,v) return v.status == TaskStatus.TaskStatusCompleted end) --完成未领取
    local taskOver1 = table.choose(self.model.Tasks[type],function(k,v) return v.status == TaskStatus.TaskStatusReceived end) --完成已领取
    local Num = table.count(taskOver) + table.count(taskOver1)
    self:HoldTimeText(type, Num)

    self.scroll:RefreshData(self.model.Tasks[self.currentTaskType])
    coroutine.start(function()
		coroutine.waitforframes(1)
		self.scroll:MoveTop()
	end)
end

function this:PlayAnim()
    self.face:CoPlay(1003)
    --table.csenuObject(self.left,function(v)
    --    local img = v:GetComponent("Image")
    --    local btn = v:GetComponent("Button")
    --    if img ~= nil then
    --        img:DOFade(0,0)
    --    end
    --    if btn ~= nil then
    --        btn.enabled = false
    --    end
    --end)
    --local rect = self.right:GetComponent("RectTransform")
    --local width = rect.rect.width
    --rect:DOLocalMoveX(rect.localPosition.x + width ,0)
    --coroutine.start(function()
    --    coroutine.waitforseconds(0.3)
    --    rect:DOLocalMoveX(rect.localPosition.x - width ,0.3)
    --    coroutine.waitforseconds(0.3)
    --    
    --    table.csenuObject(self.left,function(v)
    --        local img = v:GetComponent("Image")
    --        local btn = v:GetComponent("Button")
    --        if img ~= nil then
    --            img:DOFade(1,0.4)
    --        end
    --        if btn ~= nil then
    --            btn.enabled = true
    --        end
    --    end)
    --end)
end

function this:SetScrollbarValue()
    local num = 0
    for _,v in pairs(self.btn_Tab) do
        if v.activeSelf then
            num = num + 1
        end
    end
    if num < 5 then
        self.ScrollbarValue = 0
    else
        self.ScrollbarValue = 1 - (0.4 / (num - 4))
    end
end

function this:OnCreate()
    base.OnCreate(self)
    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    ---@type HintNode
    self.taskHint = hintComponent.Task
    self.scroll = VerticalScroll.New()
    self.scroll:SetUpdateCount(4)
    
    self.btnCtrl = self.rc:GetObject("ButtonCtrl").transform
    self.btn_Tab = {}
    for i = 0, self.btnCtrl.childCount -1 do
        local btn = self.btnCtrl:GetChild(i).gameObject
        local index = i + 1  
        if TaskTypeIndex[index] == nil then
            btn:SetActive(false)
        else
            local taskType = TaskTypeIndex[index].type
            self.taskHint:GetChild(taskType):AddObject(btn.transform:Find("Hint").gameObject, "type")
            btn:SetActive(true)
            self.btn_Tab[taskType] = btn
            UIUtil.AddBtnEvent(btn,function(go)
                if self.currentTaskType ~= taskType then
                    self:OnClickTypeButton(taskType)
                end
            end)
        end
    end

    self.scrollView = self.rc:GetObject("ScrollView")
    self.holdNum = self.rc:GetObject("HoldNum")
    self.timeNum = self.rc:GetObject("TimeNum")
    
    self.all_Btn = self.rc:GetObject("GetAllButton")
    
    self.left = self.rc:GetObject("Left").transform
    self.right = self.rc:GetObject("Right").transform
    local paint = self.rc:GetObject("Paint")
    --UIPublic.SetPainting(Z_Card[1003], paint)
    local eventArea = self.rc:GetObject("EventArea")
    local tra = eventArea.transform
    for i = 0,tra.childCount -1 do
        EventTriggerListener.Get(tra:GetChild(i).gameObject).onLuaClick = function()  end
    end
    UIUtil.AddBtnEvent(self.all_Btn,function(go) self:OnClickAllReceiveButton(self.currentTaskType) end)
    UIPublic.SetBackButton(self.rc:GetObject("BackButton"), UIWindowNames.UITask, 542)
    self.face = UILandlady.New(paint, 1003, self.rc:GetObject("Lines"))
    self.refreshTime = 0

    self.ScrollbarValue = 0

    self.scroll:Clear()
    self.scroll:ScrollInit({}, self.scrollView, pfbName, function (arg)
        self:InitItemData(arg)
    end) 
end

function this:OnLangCreate()
    for i = 0,self.btnCtrl.childCount -1 do
        local index = i + 1
        if TaskTypeIndex[index] ~= nil then
            LangUtil.BindText(self.btnCtrl:GetChild(i).transform:Find("Text")).text = LangUtil.GetSysLang(TaskTypeIndex[index].SysLangKey)
            LangUtil.BindText(self.btnCtrl:GetChild(i).transform:Find("Active/Text")).text = LangUtil.GetSysLang(TaskTypeIndex[index].SysLangKey)
        end
    end
    LangUtil.BindText(self.holdNum.transform:Find("Text")).text = LangUtil.GetSysLang(1241)
    self.holdTxt = LangUtil.BindText(self.holdNum.transform:Find("Value"), FontType.All_Number)
    LangUtil.BindText(self.all_Btn.transform:Find("Text")).text = LangUtil.GetSysLang(311)
    LangUtil.BindText(self.timeNum.transform:Find("Text")).text = LangUtil.GetSysLang(1241)
    self.timeNumTxt = LangUtil.BindText(self.timeNum.transform:Find("Value"), FontType.All_Number)
    self.timeTxt = LangUtil.BindText(self.timeNum.transform:Find("TimeText"))
    self.timeTxt.text = ""
end

function this:OnEnable()
    base.OnEnable(self)
    self:PlayAnim()
    self.currentTaskType = TaskTypeIndex[1].type
    self.btnCtrl.transform.localPosition = Vector3.New(0, self.btnCtrl.transform.localPosition.y, self.btnCtrl.transform.localPosition.z)
    self:OnRefresh()
end

function this:OnRefresh(type)
    self:OnClickTypeButton(self.currentTaskType)
end

function this:FreshContent()
    self:OnClickTypeButton(self.currentTaskType)
end

function this:OnAddListener()
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_TASK_UPDATE,self.OnRefresh)
end

function this:OnRemoveListener()
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_REFRESH_TASK)
end

function this:OnViewTop()
    base.OnViewTop(self)
    UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this:OnDisViewTop()
    base.OnDisViewTop(self)
    UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this:OnDisable()
    base.OnDisable(self)
    Game.Scene:GetComponent("SoundComponent"):MainStop()
    self.face:Disable()
end

function this:OnDestroy()
    base.OnDestroy(self)
    self.scroll:Dispose()
end

return this

