---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/4/18 11:29
---
---@class UIPropEquipScrap
---@field cur_equip table @ 当前选中装备
local PropEquipScrap = {}
local this = PropEquipScrap
local pfbName = "EquipItemNew"

local EQUIPMENT_MAX_SCRAP_COUNT = tonumber(Z_Misc["EQUIPMENT_MAX_SCRAP_COUNT"].Value[1])
local recordOrder = { order = 1, kind = 1 }  --是否正序  顺序类型
local screenTypes = { star = 0, Part = 0, exclusive = 0, isEquip = 0 }
local color1 = Color.New(103/255,111/255,126/255)

function this.RefreshShow(propSelf)
    local chooseCount = table.count(this.chooseIds)

    local _bool = chooseCount > 0
    UIPublic.InitButton(this.resolveButton,_bool)
    this.holdNumberValue.text = table.count(this.chooseIds) .. "/" .. EQUIPMENT_MAX_SCRAP_COUNT

    local decomposeItems = UIPublic.GetEquipsDecomposeItem(this.chooseEquips)
    for index, value in ipairs(this.showItemList) do
        if decomposeItems[index] == nil then
            value.root:SetActive(false)
        else
            value.root:SetActive(true)
            value.text.text = decomposeItems[index].count
            UIUtil.SetSprite(value.image, AtlasConfig.Item, GetItemIcon(Z_Item[decomposeItems[index].id]))
        end
    end
end

function this.OnScreenButton(propSelf)
    local uiData = {}
    uiData.recordOrder = recordOrder
    uiData.screenTypes = screenTypes
    uiData.callBack = function(list, kind)
        screenTypes = table.clone(list)
        recordOrder.kind = kind
        this.InitEquipListData(propSelf)
        --this.scrollView.verticalScrollbar.value = 1
        this.vs_scroll:MoveTop()
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIEquipSort1, uiData)
end

local function InitSortButton(propSelf)
    this.vs_sortBtnText.text = (recordOrder.order == 1 and { LangUtil.GetSysLang(154) } or { LangUtil.GetSysLang(153) })[1]
    --this.scrollView.verticalScrollbar.value = 1
    this.vs_scroll:MoveTop()
end

function this.OnSortButton(propSelf)
    recordOrder.order = (recordOrder.order == 1 and { 2 } or { 1 })[1]
    InitSortButton(this)
    this.InitEquipListData(propSelf)
end

function this.InitEquipListData(propSelf)
    this.vs_list = {}
    for k, v in table.pairsByKeys(this.equips) do
        table.insert(this.vs_list, v)
    end

    this.vs_list = UIPublic.EquipScreenFunc(this.vs_list, screenTypes)
    table.sort(this.vs_list, function(a, b)
        return UIPublic.EquipSortFunc(a, b, recordOrder)
    end)

    if recordOrder.order ~= 1 then
        this.vs_list = table.reverseTable(this.vs_list)
    end
    this.RefreshEquipListShow(propSelf)
end

function this.RefreshEquipListShow(propSelf)
    this.filterContent.gameObject:SetActive(false)
    this.hint:SetActive(table.count(this.vs_list) == 0)
    this.RefreshShow(propSelf)

    this.vs_scroll:RefreshData(this.vs_list)
end

local function OnEquipItemClick(propSelf, equipId)
    ---@type Equip
    local equip = Game.Scene.Player:GetComponent("EquipComponent"):Get(equipId)
    if equip.Lock then
        UIUtil.ToolTipFourth(LangUtil.GetSysLang(1035)) -- 装备已被锁定
        return
    end

    if table.any(this.chooseIds,function(v) return v == equipId end) then
        table.removebyvalue(this.chooseIds,equipId)
        this.chooseEquips[equipId] = nil
    else
        table.insert(this.chooseIds, equipId)
        this.chooseEquips[equipId] = {
            cid = equip.TemplateId,
            star = equip.Star,
            level = equip.Level,
        }
    end

    this.RefreshShow(propSelf)
end

function this.InitEquipList(propSelf)
    this.vs_scroll:Clear()
    this.vs_scroll:ScrollInit(this.vs_list, this.scrollView, pfbName, function(arg)
        local gameObject = arg.go
        ---@type Equip
        local equip = arg.data
        local select = gameObject.transform:Find("Select").gameObject
        gameObject.transform:Find("Mask").gameObject:SetActive(false)
        UIPublic.InitEquipItemNew(gameObject.transform, equip)
        UIUtil.AddBtnEvent(gameObject, function(go)
            OnEquipItemClick(propSelf, equip.Id)
            select:SetActive(table.first(this.chooseIds, function(v) return v == equip.Id end))
        end)
        select:SetActive(table.first(this.chooseIds, function(v) return v == equip.Id end))
    end)
end

function this.RefreshScrapContent()

end

function this.QuickFilter(propSelf, star)
    this.chooseIds = {}
    this.chooseEquips = {}
    local count = 0
    ---@param equip Equip
    for _, equip in ipairs(this.vs_list) do
        if count >= EQUIPMENT_MAX_SCRAP_COUNT then
            break
        end
        if equip.Star == star and equip.Level == 1 and not equip.Lock and equip.characterId == 0 then
            table.insert(this.chooseIds, equip.Id)
            this.chooseEquips[equip.Id] =  {
                cid = equip.TemplateId,
                star = equip.Star,
                level = equip.Level,
            }
            count = count + 1
        end
    end
    this.RefreshEquipListShow(propSelf)
end

function this.Init(propSelf)
    if not this.visit_init then
        this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
        InitSortButton(this)
        this.InitEquipListData(propSelf)
        this.visit_init = true
    else
        this.hint:SetActive(table.count(this.vs_list) == 0)
        this.RefreshShow(propSelf)
    end
end

function this.Refresh(propSelf)
    this.equips = Game.Scene.Player:GetComponent("EquipComponent"):GetEquipList()
    this.chooseIds = {}
    this.chooseEquips = {}
    InitSortButton(this)
    this.InitEquipListData(propSelf)

end

function this.OnLangCreate(propSelf)
    LangUtil.BindText(this.screenBtn:Find("Text")).text = LangUtil.GetSysLang(155)
    LangUtil.BindText(this.quickFilterText).text = LangUtil.GetSysLang(1158) -- 快速选择
    this.vs_sortBtnText = LangUtil.BindText(this.sortBtn:Find("Text"))
    LangUtil.BindText(this.holdNumberText).text = LangUtil.GetSysLang(2060) -- 已选择
    this.holdNumberValue = LangUtil.BindText(this.holdNumberValue)
    LangUtil.BindText(this.cancelText).text = LangUtil.GetSysLang(371) -- 取消
    LangUtil.BindText(this.resolveButton.transform:Find("Text")).text = LangUtil.GetSysLang(225) -- 分解

    this.showItemList[1].text = LangUtil.BindText(this.showItemList[1].text)
    this.showItemList[2].text = LangUtil.BindText(this.showItemList[2].text)
end

---@param propSelf UIPropView
function this.OnCreate(propSelf)
    this.vs_list = {}
    this.chooseIds = {}
    this.chooseEquips = {}

    ---@type ReferenceCollector
    local rc = propSelf.equipScrapPalen.transform:GetComponent("ReferenceCollector")  ------------------------------------ 没这个equipScrapPalen
    this.vs_scroll = VerticalScroll.New()
    this.vs_scroll:SetUpdateCount(5)

    this.cancelButton = rc:GetObject("CancelButton").transform
    this.quickFilterButton = rc:GetObject("QuickFilterButton").transform
    this.quickFilterText = rc:GetObject("QuickFilterText")
    this.filterContent = rc:GetObject("FilterContent").transform
    this.resolveButton = rc:GetObject("ResolveButton") --- 分解按钮

    this.scrollView = rc:GetObject("ScrollView"):GetComponent("ScrollRect")
    this.screenBtn = rc:GetObject("ScreenButton").transform
    this.sortBtn = rc:GetObject("SortButton").transform
    this.infoContent = rc:GetObject("Content").transform

    this.hint = rc:GetObject("Hint")
    this.holdNumberText = rc:GetObject("HoldNumberText")
    this.holdNumberValue = rc:GetObject("HoldNumberValue")
    this.cancelText = rc:GetObject("CancelText")

    this.showItemList = {}
    local showItem1 = rc:GetObject("ShowItem1").transform
    this.showItemList[1] = {
        image = showItem1:Find("ItemImage"):GetComponent("Image"),
        text = showItem1:Find("ItemCountText"),
        root = showItem1.gameObject
    }
    local showItem2 = rc:GetObject("ShowItem2").transform
    this.showItemList[2] = {
        image = showItem2:Find("ItemImage"):GetComponent("Image"),
        text = showItem2:Find("ItemCountText"),
        root = showItem2.gameObject
    }

    UIUtil.AddBtnEvent(this.screenBtn, function() this.OnScreenButton(propSelf) end)
    UIUtil.AddBtnEvent(this.sortBtn, function() this.OnSortButton(propSelf) end)

    UIUtil.AddBtnEvent(this.cancelButton, function()
        -- 切换回装备页面
        propSelf:OnClickButton(3)
    end)

    UIUtil.AddBtnEvent(this.resolveButton, function()
        PublicRequest.SendRequest(
            PROTOCOL.EquipmentPackScrapReq,
            {eids = this.chooseIds},
            function(response, errorCode)
                UIPublic.OpenRewardUIByRewardDateils(response.reward_details)
            end
        )
    end)

    UIUtil.AddBtnEvent(this.quickFilterButton, function()
        this.filterContent.gameObject:SetActive(true)
    end)

    for i = 0, this.filterContent.childCount - 1 do
        local child = this.filterContent:GetChild(i)
        UIUtil.AddBtnEvent(child, function()
            this.QuickFilter(propSelf, i + 1)
        end)
    end
end

function this.OnEnable(propSelf)
    this.InitEquipList(propSelf)
    this.filterContent.gameObject:SetActive(false)
end

function this.UpdateItem(propSelf)
    this.visit_init = false
end

function this.OnDisable(propSelf)
    this.vs_scroll:Dispose()
    if this.visit_init then
        this.visit_init = false
    end
    screenTypes = { star = 0, Part = 0, exclusive = 0, isEquip = 0 }
    recordOrder.order = 1
end



return this