---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by win 10.
--- DateTime: 2019/5/24 16:58
---

---@class UIPropView
---@field btnList table<number, UnityEngine.GameObject> @ key:页签对应背包类型, Value:左侧切换button对应的GameObject
---@field viewList table<number, UnityEngine.GameObject> @ key:页签对应背包类型, Value:右侧页面对应的GameObject
---@field model UIPropModel
---@field objectList {id:number, TemplatedId:number, gameObject:UnityEngine.GameObject}[]
---@field currentBagType number @ BagType
---@field curItem Item @ 当前选中item (切换时默认为第一个)
local UIPropView = BaseClass("UIPropView",UIBaseView)
local base = UIBaseView
local this = UIPropView

local PropEquip = require "UI/UIProp/PropEquip"

local BagType = {
    Expend = 1,
    Matter = 2,
    Equip = 3,
}

function this:InitHint(bool)
    if self.currentBagType == BagType.Expend then
        local _bool = table.count(self.model.expendList) == 0
        self.hint:SetActive(_bool)
    elseif self.currentBagType == BagType.Matter then
        local _bool = table.count(self.model.matterList) == 0
        self.hint:SetActive(_bool)
    else
        self.hint:SetActive(bool)
    end
    for k,v in pairs(self.viewList) do
        v:SetActive(k == self.currentBagType)
    end
    -- self.viewList[self.currentBagType]:SetActive(self.currentBagType == BagType.Expend or self.currentBagType == BagType.Matter)
end

local function InitItemInfo(self)
    if self.curItem ~= nil then
        local zItem = Z_Item[self.curItem.TemplateId]
        self.nameTxt.text = LangUtil.GetLang(Z_Item,self.curItem.TemplateId,"Name")
        self.descTxt.text = LangUtil.GetLang(Z_Item,self.curItem.TemplateId,"Desc")
        --UIUtil.SetSprite(self.avatar,AtlasConfig.Item,GetItemIcon(zItem),true)

        UIPublic.InitItemIconNew(self.avatar, self.bg, RewardType.RewardTypeItem, self.curItem.TemplateId)
        self.avatar.gameObject:SetActive(true)
        local item = table.first(Game.Scene.Player:GetComponent("ItemComponent").Items,function(v) return v.TemplateId == self.curItem.TemplateId end)
        if self.currentBagType == BagType.Expend then
            self.HoldNumValue.text = item ~= nil and item.Amount or 0
            self.Count.text = item ~= nil and item.Amount or 0
        end
        
        --UIPublic.InitButton(self.useBtn,true,1)
    else
        self.nameTxt.text = ""
        self.descTxt.text = LangUtil.GetSysLang(568)--"没有选择物品"
        self.avatar.gameObject:SetActive(false)
        --UIPublic.InitButton(self.useBtn,false,1)
    end
end

local function OnClickItemPfb(self,item)
    self.curItem = item
    local id = 0
    if item ~= nil then
        id = item.Id
    end

    InitItemInfo(self)
    for _,v in pairs(self.objectList) do
        v.gameObject.transform:Find("Select").gameObject:SetActive(v.Id == id)
    end
end

--- 点击切换类型
---@param self UIPropView
---@param type number @ BagType
function this:OnClickButton(type)
    self.currentBagType = type
    for k,v in pairs(self.btnList) do
        if k == type then
            v.transform:Find("Active").gameObject:SetActive(true)
            v:GetComponent("Button").enabled = false
        else
            v.transform:Find("Active").gameObject:SetActive(false)
            v:GetComponent("Button").enabled = true
        end
    end
    self.bgRoot:SetActive(true)

    self.usePanel:SetActive(type == BagType.Expend and table.count(self.model.expendList) > 0)
    --self.HoldNum:SetActive(type ~= BagType.Matter)
    self.sortBtn:SetActive(type ~= BagType.Equip)
    self.equipTopRc.gameObject:SetActive(type == BagType.Equip)

    for k,v in pairs(self.viewList) do
        v:SetActive(k == type)
    end

    if type == BagType.Equip then
        PropEquip.Init(self)
    else
        local itemList
        if type == BagType.Expend then
            itemList = self.model.expendList
        else
            itemList = self.model.matterList
        end
        self.curItem = table.first(itemList)
        InitItemInfo(self)
        self:InitHint()

        if type == BagType.Expend then
            OnClickItemPfb(self,table.first(itemList))
        else
            OnClickItemPfb(self,nil)
        end
    end

end

---@param self UIPropView
local function OnClickUseButton(self)
    if Z_Item[self.curItem.TemplateId].UseType == ItemUseType.ItemUseTypeGetPower then --使用体力药直接弹出体力药使用界面
        UIManager:GetInstance():OpenWindow(UIWindowNames.ToolTipAddPower)
        return
    elseif Z_Item[self.curItem.TemplateId].UseType == ItemUseType.ItemUseTypeOptionalRewardPack then -- 自选礼包
        local zOptionalRewardPack = Z_OptionalRewardPack[Z_Item[self.curItem.TemplateId].UseParams[1]]
        local isCardOrSkin = false
        for i, v in ipairs(zOptionalRewardPack) do
            if v.RewardType == RewardType.RewardTypeCharacter
                    or v.RewardType == RewardType.RewardTypeCharacterSkin
                    or v.RewardType == RewardType.RewardTypeFightSoul then
                isCardOrSkin = true
                break
            end
        end
        if isCardOrSkin then
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIOptionalSkin, {
                id = self.curItem.Id,
                tempId = self.curItem.TemplateId,
                isUse = true,
            })
            return
        else
            UIManager:GetInstance():OpenWindow(UIWindowNames.UIUseOptionalItem, {
                id = self.curItem.Id,
            })
            return
        end
    end

    local generalItemInfo = {}
    generalItemInfo.Id = self.curItem.TemplateId
    generalItemInfo.type = UseItemType.Bag
    generalItemInfo.name = Z_Item[self.curItem.TemplateId].Name
    local item = table.first(Game.Scene.Player:GetComponent("ItemComponent").Items,function(v) return v.TemplateId == self.curItem.TemplateId end)
    if self.currentBagType == BagType.Expend then
        generalItemInfo.Amount = item ~= nil and item.Amount or 0
    end

    UIManager:GetInstance():OpenWindow(UIWindowNames.UIUseItem, generalItemInfo)
end

---@param self UIPropView
local function InitExpendContent(self)
    local count = 0
    for k,v in table.pairsByKeys(self.model.expendList) do
        local zItem = Z_Item[v.TemplateId]
        count = count + 1
        local gameObject = self.reasureBoxContentItem[count]
        if gameObject == nil then
            gameObject = GameObject.Instantiate(self.rawItemPrefab)
            gameObject.transform:SetParent(self.reasureBoxContent.transform, false)
            gameObject:SetActive(true)
            gameObject.transform:SetParent(self.reasureBoxContent.transform)
            gameObject.transform.localPosition = Vector3.New(0,0,0)
            gameObject.transform.localScale = Vector3.New(1,1,1)
            self.reasureBoxContentItem[count] = gameObject
        end
        gameObject:SetActive(true)

        local t = {}
        t.Id = v.Id
        t.TemplateId = v.TemplateId
        t.gameObject = gameObject
        table.insert(self.objectList,t)
        local transform = gameObject.transform
        transform:Find("Name").gameObject:SetActive(false)
        local avatar = transform:Find("Icon"):GetComponent("Image")
        local num = LangUtil.BindText(transform:Find("Num"))
        local itemBg = transform:Find("ItemBg"):GetComponent("Image")
        --UIUtil.SetSprite(itemBg,AtlasConfig.ItemBg,"1.png")
        local hint = transform:Find("Hint").gameObject
        self.itemHint:GetChild(ItemType.ReasureBox):GetChild(t.Id):AddObject(hint, "BagItem")

        UIPublic.InitItemIconNew(avatar, itemBg, RewardType.RewardTypeItem, v.TemplateId)
        -- coroutine.start(function()
        --     UIUtil.SetSprite(avatar,AtlasConfig.Item,GetItemIcon(zItem))
        -- end)
        --name.text = zItem.Name
        num.text = v.Amount
        
        UIUtil.AddBtnEvent(gameObject,function()
            OnClickItemPfb(self,v)  
        end)
    end
    for i = count + 1, table.count(self.reasureBoxContentItem) do
        self.reasureBoxContentItem[i]:SetActive(false)
    end
    self.reasureBoxContent.transform:DOLocalMoveY(0, 0)

    OnClickItemPfb(self,table.first(self.model.expendList))
end

local function InitMatterContent(self)
    local count = 0
    for k,v in table.pairsByKeys(self.model.matterList) do
        local zItem = Z_Item[v.TemplateId]
        if zItem.Type ~= 0 then
            count = count + 1
            local gameObject = self.matter_ContentItem[count]
            if gameObject == nil then
                gameObject = GameObject.Instantiate(self.rawItemPrefab)
                gameObject.transform:SetParent(self.matter_Content.transform, false)
                gameObject:SetActive(true)
                gameObject.transform:SetParent(self.matter_Content.transform)
                gameObject.transform.localPosition = Vector3.New(0,0,0)
                gameObject.transform.localScale = Vector3.New(1,1,1)
                self.matter_ContentItem[count] = gameObject
            end
            gameObject:SetActive(true)

            local t = {}
            t.Id = v.Id
            t.TemplateId = v.TemplateId
            t.gameObject = gameObject
            table.insert(self.objectList,t)
            local transform = gameObject.transform
            local avatar = transform:Find("Icon"):GetComponent("Image")
            transform:Find("Name").gameObject:SetActive(false)
            local name = transform:Find("Name/Value"):GetComponent("Text")
            local num = LangUtil.BindText(transform:Find("Num"))
            local hint = transform:Find("Hint").gameObject
            self.itemHint:GetChild(ItemType.Material):GetChild(t.Id):AddObject(hint, "BagItem")
            -- coroutine.start(function()
            --     UIUtil.SetSprite(avatar,AtlasConfig.Item,GetItemIcon(zItem))
            -- end)
            name.text = zItem.Name
            num.text = v.Amount
            local itemBg = transform:Find("ItemBg"):GetComponent("Image")
            --UIUtil.SetSprite(itemBg,AtlasConfig.ItemBg,"3.png")
            UIPublic.InitItemIconNew(avatar, itemBg, RewardType.RewardTypeItem, v.TemplateId)
            UIUtil.AddBtnEvent(gameObject,function(go)
                local showData = {}
                showData.showType = ShowType.Item
                showData.tempId = v.TemplateId
                UIUtil.OpenThingsDetailWindow(showData, true)
            end)

        end
    end
    for i = count + 1, table.count(self.matter_ContentItem) do
        self.matter_ContentItem[i]:SetActive(false)
    end

    self.matter_Content.transform:DOLocalMoveY(0, 0)
end

local function UpdateItem(self)
    if self.curItem ~= nil then
        local amount = UIPublic.GetItemAmount(self.curItem.TemplateId)
        if amount == 0 then
            self.curItem = nil
        end
    end

    self.objectList = {}
    InitExpendContent(self)
    InitMatterContent(self)

    self.usePanel:SetActive(self.currentBagType == BagType.Expend and table.count(self.model.expendList) > 0)

    if self.curItem == nil then
        self.curItem = table.first(self.model.expendList)
    end

    InitItemInfo(self)
    self:InitHint()
    OnClickItemPfb(self,self.curItem)
    
    PropEquip.UpdateItem(self)
end

local function InitContent(self)
    coroutine.start(function()
        self.sortBtn:SetActive(false)
        self.objectList = {}
        InitExpendContent(self)
        InitMatterContent(self)
        self.sortBtn:SetActive(true)
        table.sort(self.objectList,function(a,b)
            return a.TemplateId > b.TemplateId
        end)
    end)
end

local function InitSortBtn(self)
    self.sortBtnText.text = (self.sort == 1 and {LangUtil.GetSysLang(318)} or {LangUtil.GetSysLang(319)})[1]
    self.reasureBoxContent.transform:DOLocalMoveY(0,0)
    self.matter_Content.transform:DOLocalMoveY(0,0)
end

local function OnClickSort(self)
    self.sort = (self.sort == 1 and {2} or {1} )[1]
    InitSortBtn(self)

    if self.sort == 2 then
        for k,v in table.pairsByKeys(self.objectList) do
            v.gameObject.transform:SetAsFirstSibling()
        end
    elseif self.sort == 1 then
        for k,v in table.pairsByKeys(self.objectList) do
            v.gameObject.transform:SetAsLastSibling()
        end
    end
end

local function UsePanelCreate(self)
    local transform = self.usePanel.transform
    self.useBtn = transform:Find("UseButton").gameObject
    self.avatar = transform:Find("ItemPrefab/Icon"):GetComponent("Image")
    self.bg = transform:Find("ItemPrefab/ItemBg"):GetComponent("Image")
    self.Count = transform:Find("ItemPrefab/Num"):GetComponent("Text")

    UIUtil.AddBtnEvent(self.useBtn,function() OnClickUseButton(self) end)
end

---@param self UIPropView
function this.OnCreate(self)
    base.OnCreate(self)

    ---@type HintComponent
    local hintComponent = Game.Scene:GetComponent("HintComponent")
    ---@type HintNode
    self.itemHint = hintComponent.Item

    self.back_Btn = self.rc:GetObject("BackButton")
    self.bgRoot = self.rc:GetObject("BgRoot")
    UIPublic.SetBackButton(
        self.back_Btn,
        UIWindowNames.UIProp,
        431
    )
    self.btn_Root = self.rc:GetObject("ButtonRoot").transform
    self.view_Root = self.rc:GetObject("ViewRoot").transform
    self.HoldNum = self.rc:GetObject("HoldNum")
    self.reasureBoxContent = self.rc:GetObject("ExpendContent")
    self.reasureBoxContentItem = {}
    self.matter_Content = self.rc:GetObject("MatterContent")
    self.matter_ContentItem = {}
    self.rawItemPrefab = self.rc:GetObject("ItemPrefab").gameObject
    self.rawItemPrefab:SetActive(false)
    self.usePanel = self.rc:GetObject("UsePanel")
    self.hint = self.rc:GetObject("Hint")
    self.sortBtn = self.rc:GetObject("SortButton")
    self.equipTopRc = self.rc:GetObject("EquipTop"):GetComponent("ReferenceCollector")
    UIUtil.AddBtnEvent(self.sortBtn,function(go) OnClickSort(self) end)
    self.btnList = {}
    self.viewList = {}
    local bagBageList = {
        {bagType = BagType.Expend, hide = false, hintName = ItemType.ReasureBox},
        {bagType = BagType.Matter, hide = false, hintName = ItemType.Material},
        {bagType = BagType.Equip, hide = false},
    }
    for i = 1, table.count(bagBageList) do
        local bagType = bagBageList[i].bagType
        if not bagBageList[i].hide then
            local buttonObject = self.btn_Root:GetChild(i - 1).gameObject
            self.btnList[bagType] = buttonObject
            local hint = buttonObject.transform:Find("Hint").gameObject
            if not IsNull(hint) then
                if bagBageList[i].hintName ~= nil then
                    self.itemHint:GetChild(bagBageList[i].hintName):AddObject(hint, "BagItemTab")
                else
                    hint:SetActive(false)
                end
            end
            UIUtil.AddBtnEvent(buttonObject,function(go) self:OnClickButton(bagType) end)
        end

        self.viewList[bagType] = self.view_Root:GetChild(i - 1).gameObject
    end
    
    self.equipPanel = self.rc:GetObject("EquipPanel")
    UsePanelCreate(self)
    PropEquip.OnCreate(self)
    
    -- --新手引导
    -- local guide=Game.Scene:GetComponent("GuideComponent")
    -- local guideData = table.first(guide.GuideList,function (h) return h.Id == 17001  end)
    -- if guideData == nil or guideData.Step < 4 then
    --     guide:CheckStart(16,0)
    -- end
end

function this:OnLangCreate()
    -- LangUtil.BindText(self.useBtn.transform:Find("Text")).text = LangUtil.GetSysLang(320)
    self.descTxt = LangUtil.BindText(self.usePanel.transform:Find("ItemDescRoot/ItemDesc"))
    self.nameTxt = LangUtil.BindText(self.usePanel.transform:Find("Title/ItemName"))
    self.sortBtnText = LangUtil.BindText(self.sortBtn.transform:Find("Text"))

    local id = {106, 110, 200}
    for i = 0,self.btn_Root.childCount - 1 do
        local root = self.btn_Root:GetChild(i)
        LangUtil.GetSpriteLang(id[i + 1], function(sprite) root:Find("Image"):GetComponent("Image").sprite = sprite end)
        LangUtil.GetSpriteLang(id[i + 1] + 1,function(sprite) root:Find("Active/Image"):GetComponent("Image").sprite = sprite end)
    end
    LangUtil.BindText(self.HoldNum.transform:Find("Text")).text = LangUtil.GetSysLang(312)
    self.HoldNumValue = LangUtil.BindText(self.HoldNum.transform:Find("Value"))
    self.HoldNumValue.text = ""
    LangUtil.GetSpriteLang(529, function(sprite) self.hint:GetComponent("Image").sprite = sprite end)
    
    PropEquip.OnLangCreate(self)
end

---@param self UIPropView
function this.OnEnable(self)
    self.objectList = {}
    base.OnEnable(self)
    PropEquip.OnEnable(self)
    self.currentBagType = BagType.Expend
    self.sort = 1
    self:OnClickButton(self.currentBagType)
    InitSortBtn(self)
    self:OnRefresh()
end

---@param self UIPropView
function this.OnRefresh(self)
    InitContent(self)
    self.curItem = table.first(self.model.expendList)
    InitItemInfo(self)
    self:InitHint()
end

-- -- todo: 修改引导
-- local function ON_Guide_Click(self,cid,num,isrun,minStep)
    
--         if cid==16 and isrun then
--             if num==1 and minStep == 2 then
--                 self:OnClickButton(2)
--             elseif num==3 and minStep == 3 then
--                 self:OnClickButton(3)
--             end
--         end
    
-- end

local function OnFightsoulInfoChg(self)
end

---@param dataStatus {isUpdate:boolean, isRemove:boolean} @ isUpdate - 是否有更新, isRemove - 是否有删除
local function ON_EQUIP_UPDATE(self, dataStatus)
    PropEquip.Refresh(self, dataStatus)
end

function this.OnAddListener(self)
    base.OnAddListener(self)
    self:AddUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE,UpdateItem)
    self:AddUIListener(UIMessageNames.ON_FIGHTSOUL_INFO_CHG, OnFightsoulInfoChg)
    -- self:AddUIListener(UIMessageNames.ON_Guide_Click,ON_Guide_Click)
    self:AddUIListener(UIMessageNames.ON_EQUIP_UPDATE, ON_EQUIP_UPDATE)
end

function this.OnRemoveListener(self)
    base.OnRemoveListener(self)
    self:RemoveUIListener(UIMessageNames.ON_ITEM_DATA_UPDATE)
    self:RemoveUIListener(UIMessageNames.ON_FIGHTSOUL_INFO_CHG)
    -- self:RemoveUIListener(UIMessageNames.ON_Guide_Click)
    self:RemoveUIListener(UIMessageNames.ON_EQUIP_UPDATE)
end

function this.OnViewTop(self)
    base.OnViewTop(self)
    --UIManager:GetInstance():OpenWindow(UIWindowNames.UIComTop)
end

function this.OnDisViewTop(self)
    base.OnDisViewTop(self)
    --UIManager:GetInstance():CloseWindow(UIWindowNames.UIComTop)
end

function this.OnDisable(self)
    base.OnDisable(self)
    PropEquip.OnDisable(self)
    self.objectList = {}
end

function this.OnDestroy(self)
    base.OnDestroy(self)
end

return this

